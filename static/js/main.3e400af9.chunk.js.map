{"version":3,"sources":["chess-tourney/player.js","chess-tourney/match.js","chess-tourney/roster.js","chess-tourney/config.js","chess-tourney/scores.js","chess-tourney/pairing.js","chess-tourney/round.js","chess-tourney/tournament.js","chess-tourney.jsx.js","App.jsx.js","serviceWorker.js","index.js"],"names":["createPlayer","firstName","lastName","arguments","length","undefined","rating","player","dummy","Ne","eloRank","tourney","m","getMatchesByPlayer","K","EloRank","hasHadBye","getPlayersByOpponent","includes","DUMMYPLAYER","Object","assign","freeze","calcRatings","match","whiteElo","players","blackElo","scoreExpected","getExpected","origRating","newRating","updateRating","result","map","round","white","black","warnings","reverse","blackWon","whiteWon","draw","resetResult","toConsumableArray","isComplete","isBye","getColorInfo","color","getPlayerColor","indexOf","getPlayerInfo","getWhite","getBlack","roster","all","inactive","getActive","filter","i","addPlayer","push","addPlayers","concat","deactivatePlayer","activatePlayer","splice","removePlayer","config","tieBreak","forEach","method","func","scores","funcName","playerScoreList","roundId","playerScore","score","scoreList","reduce","a","b","playerScoreCum","runningScore","cumScores","playerScoreListNoByes","totalScore","playerColorBalance","modifiedMedian","solkoff","opponent","sort","pop","shift","finalScore","playerOppScoreCum","oppScores","p","calcStandings","tieBreaks","active","standingsFlat","standing","name","sortFunc","firstBy","thenBy","standingsTree","runningRank","sf","player1","player2","scoreTypes","getOwnPropertyNames","areEqual","areScoresEqual","byeMatch","byePlayerData","matches","dueColor","prevRound","playerColor","playerData","id","colorBalance","opponentHistory","upperHalf","matched","Set","poolFilters","p2","last","createMatch","playersWithScore","pd","chunk","playerDatum","pool","basePool","Math","abs","roundList","getMatchByPlayer","theMatch","hasDummy","pairPlayers","playerList","byeValue","isNewRoundReady","times","getNumOfRounds","ceil","log2","newRound","createRound","createRoster","MainRoster","_ref","_useState","useState","_useState2","slicedToArray","setRoster","newPlayer","updateField","event","target","value","rosterTable","react_default","createElement","key","className","onClick","demoRoster","slice","onSubmit","preventDefault","type","onChange","required","Round","_ref2","_useState3","o","_useState4","setMatches","setWinner","index","origMatch","checked","RoundMatch","matchId","style","textAlign","rando","random","Standings","_ref3","_useState5","_useState6","openCards","setCards","isCardOpen","disabled","PlayerCard","newCards","togglePlayerCard","_ref4","ratingChange","_ref5","rank","j","cvlTourney","createTournament","Boolean","window","location","hostname","ReactDOM","render","contents","tabList","setTabList","currentTab","setCurrentTab","tab","alert","document","getElementById","role","aria-label","href","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e400af9.chunk.js","sourcesContent":["import EloRank from \"elo-rank\";\n\n/**\n * Represents an indivudal player. Call it with `createPlayer(\"John\", ...)` or\n * `createPlayer({firstName: \"John\", ...})`. The latter is convenient for\n * converting JSON objects.\n * @param {object} firstName Either the person's first name or an object\n * containing all the parameters.\n * @param {string} lastName  The person's last name.\n * @param {int}    rating    The person's Elo rating.\n */\nfunction createPlayer(firstName, lastName = \"\", rating = 1200) {\n    const player = {\n        /**\n         * @property {string} firstName The person's first name.\n         */\n        firstName: \"\",\n        /**\n         * @property {string} lastName The person's last name.\n         */\n        lastName: \"\",\n        /**\n         * @property {number} rating The person's Elo rating.\n         */\n        rating: 0,\n        /**\n         * @property {bool} dummy If true, this person won't count in certain\n         * scorings.\n         */\n        dummy: false,\n        /**\n         * @property {number} Ne Number of games the rating is based on.\n         */\n        Ne: 0,\n        /**\n         * Create an Elo calculator with an updated K-factor. See the `elo-rank`\n         * NPM package for more information.\n         * @param {object} tourney The current tournament.\n         * @returns {object} An `EloRank` object.\n         */\n        eloRank(tourney) {\n            const m = tourney.getMatchesByPlayer(player).length;\n            const K = 800 / (player.Ne + m);\n            return new EloRank(K);\n        },\n        /**\n         * Get if a player has had a bye round.\n         * @param {object} tourney The current tournament.\n         * @returns {bool} True if the player has had a bye round, false if not.\n         */\n        hasHadBye(tourney) {\n            return tourney.getPlayersByOpponent(player).includes(DUMMYPLAYER);\n        }\n    };\n    if (typeof firstName === \"object\") {\n        Object.assign(player, firstName);\n    } else {\n        player.firstName = firstName;\n        player.lastName = lastName;\n        player.rating = rating;\n    }\n    return player;\n}\n\n/**\n * A stand-in for bye matches.\n * @constant {Player} DUMMYPLAYER\n */\nconst DUMMYPLAYER = Object.freeze(\n    createPlayer(\n        {\n            firstName: \"Bye\",\n            dummy: true,\n            rating: 0\n        }\n    )\n);\n\nexport {DUMMYPLAYER, createPlayer};\n","import {DUMMYPLAYER} from \"./player\";\n\n/**\n * Update the ratings for a match based on their ratings when the match began\n * and the match result. See the `elo-rank` NPM package for more information.\n * @param {object} match The `match` object.\n * @returns {object} The `match` object.\n */\nfunction calcRatings(match) {\n    let whiteElo = match.players[0].eloRank(match.tourney);\n    let blackElo = match.players[1].eloRank(match.tourney);\n    const FLOOR = 100;\n    let scoreExpected = [\n        whiteElo.getExpected(match.origRating[0], match.origRating[1]),\n        blackElo.getExpected(match.origRating[1], match.origRating[0])\n    ];\n    match.newRating = [\n        whiteElo.updateRating(\n            scoreExpected[0],\n            match.result[0],\n            match.origRating[0]\n        ),\n        blackElo.updateRating(\n            scoreExpected[1],\n            match.result[1],\n            match.origRating[1]\n        )\n    ];\n    match.newRating = match.newRating.map(\n        (rating) => (\n            (rating < FLOOR)\n            ? FLOOR\n            : rating\n        )\n    );\n    match.players[0].rating = match.newRating[0];\n    match.players[1].rating = match.newRating[1];\n    return match;\n}\n\n/**\n * Create an object representing a match in a tournament.\n * @param {object} round The round containing the match.\n * @param {object} black The `player` object for white.\n * @param {object} white The `player` object for black.\n */\nfunction createMatch(round, white, black) {\n    const match = {\n        /**\n         * @property {object} round A link to the round containing this match.\n         */\n        round: round,\n        /**\n         * @property {object} tourney a link to the tournemnt containing this\n         * match.\n         */\n        tourney: round.tourney,\n        /**\n         * @property {string} warnings Any warnings about the match, e.g. if\n         * there was a pairing error.\n         */\n        warnings: \"\",\n        /**\n         * @property {array} players The pair of `Player` objects. White is at\n         * index `0` and black is at index `1`.\n         */\n        players: [white, black],\n        /**\n         * @property {array} result the scores for the match. A loss is `0`, a\n         * win is `1`, and a draw is `0.5`. White is at index `0` and black is\n         * at index `1`.\n         */\n        result: [0, 0],\n        /**\n         * @property {array} origRating the cached ratings from when the match\n         * began. White is at index `0` and black is at index `1`.\n         */\n        origRating: [white.rating, black.rating],\n        /**\n         * @property {array} newRating the updated ratings after the match ends.\n         * White is at index `0` and black is at index `1`.\n         */\n        newRating: [white.rating, black.rating],\n        /**\n         * Switch white and black.\n         * @returns {object} This `match` object.\n         */\n        reverse() {\n            match.players.reverse();\n            match.result.reverse();\n            match.origRating.reverse();\n            match.newRating.reverse();\n            return match;\n        },\n        /**\n         * Set black as the winner and updates ratings.\n         * @returns {object} This `match` object.\n         */\n        blackWon() {\n            match.result = [0, 1];\n            calcRatings(match);\n            return match;\n        },\n        /**\n         * Set white as the winner and updates ratings.\n         * @returns {object} This `match` object.\n         */\n        whiteWon() {\n            match.result = [1, 0];\n            calcRatings(match);\n            return match;\n        },\n        /**\n         * Set the result as a draw and updates ratings.\n         * @returns {object} This `match` object.\n         */\n        draw() {\n            match.result = [0.5, 0.5];\n            calcRatings(match);\n            return match;\n        },\n        /**\n         * Resets the score and the rating updates.\n         * @returns {object} This `match` object.\n         */\n        resetResult() {\n            match.result = [0, 0];\n            match.newRating = [...match.origRating];\n            match.players[0].rating = match.newRating[0];\n            match.players[1].rating = match.newRating[1];\n            return match;\n        },\n        /**\n         * Get whether or not the match is over.\n         * @returns {bool} `True` if complete, `false` if incomplete.\n         */\n        isComplete() {\n            return match.result[0] + match.result[1] !== 0;\n        },\n        /**\n         * Get whether this is a bye match.\n         * @returns {bool} `True` if it's a bye match, `false` if not.\n         */\n        isBye() {\n            return match.players.includes(DUMMYPLAYER);\n        },\n        /**\n         * Get all of the match data for a specific player color.\n         * @param {number} color `0` for white and `1` for black.\n         * @returns {object} A container for data: the `player` object,\n         * `result`, `origRating`, and `newRating`.\n         */\n        getColorInfo(color) {\n            return {\n                player: match.players[color],\n                result: match.result[color],\n                origRating: match.origRating[color],\n                newRating: match.newRating[color]\n            };\n        },\n        /**\n         * Get the color ID of a player.\n         * @param {object} player A `player` object.\n         * @returns {number} `0` for white, `1` for black, and `-1` if the\n         * player isn't found in the match.\n         */\n        getPlayerColor(player) {\n            return match.players.indexOf(player);\n        },\n        /**\n         * A shortcut for using `match.getPlayerColor()` and\n         * `match.getColorInfo()` together.\n         * @param {object} player A `player` object.\n         * @returns {object} See `matchGetPlayerColor()`.\n         */\n        getPlayerInfo(player) {\n            return match.getColorInfo(match.getPlayerColor(player));\n        },\n        /**\n         * A shortcut for `match.getColorInfo()` for white.\n         * @returns {object} See `match.getColorInfo()`\n         */\n        getWhite() {\n            return match.getColorInfo(0);\n        },\n        /**\n         * A shortcut for `match.getColorInfo()` for black.\n         * @returns {object} See `match.getColorInfo()`\n         */\n        getBlack() {\n            return match.getColorInfo(1);\n        }\n    };\n    // set bye rounds\n    if (match.players[0] === DUMMYPLAYER) {\n        match.result = [0, 1];\n    } else if (match.players[1] === DUMMYPLAYER) {\n        match.result = [1, 0];\n    }\n    return match;\n}\n\nexport default Object.freeze(createMatch);\n","/**\n * Create a roster object which manages a tournament's players.\n * @param {object} tourney The roster's tournament.\n * @param {array}  players A list of player objects.\n * @returns {object} The roster object.\n */\nfunction createRoster(tourney, players = []) {\n    const roster = {\n        /**\n         * @property {object} tourney A link to the tournemnt containing this\n         * match.\n         */\n        tourney: tourney,\n        /**\n         * @param {array} all A list of all of the players.\n         */\n        all: players,\n        /**\n         * @param {array} inactive A list of the players who won't be paired in\n         * future rounds.\n         */\n        inactive: [],\n        /**\n         * Get a list of players to be paired.\n         * @returns {array} A list of the active players.\n         */\n        getActive() {\n            return roster.all.filter((i) => !roster.inactive.includes(i));\n        },\n        /**\n         * Add a player to the roster.\n         * @param {object} player The player object to add.\n         * @returns {object} This roster object.\n         */\n        addPlayer(player) {\n            roster.all.push(player);\n            return roster;\n        },\n        /**\n         * Add a list of players to the roster.\n         * @param {array} players A list of players to add.\n         * @returns {object} This roster object.\n         */\n        addPlayers(players) {\n            roster.all = roster.all.concat(players);\n            return roster;\n        },\n        /**\n         * Remove a player from the active roster. This player won't be placed\n         * in future rounds.\n         * @param {object} player The player object.\n         * @returns {object} This roster object.\n         */\n        deactivatePlayer(player) {\n            roster.inactive.push(player);\n            return roster;\n        },\n        /**\n         * Move an inactive player to the active roster to be placed in future\n         * rounds.\n         * @param {object} player The player object.\n         * @returns {object} This roster object.\n         */\n        activatePlayer(player) {\n            roster.inactive.splice(roster.inactive.indexOf(player), 1);\n            return roster;\n        },\n        /**\n         * Remove a player from the roster completely.\n         * @param {object} player The player object.\n         * @returns {object} This roster object.\n         */\n        removePlayer(player) {\n            if (roster.tourney.getMatchesByPlayer(player).length > 0) {\n                return null; // TODO: add a helpful error message\n            }\n            delete roster.all[roster.all.indexOf(player)];\n            return roster;\n        }\n    };\n    return roster;\n}\n\nexport default Object.freeze(createRoster);","import * as scores from \"./scores\";\nimport config from \"./default-config.json\";\n/**\n * `tieBreak` is Used for tiebreaks. USCF recommends using these methods\n * in-order: modified median, solkoff, cumulative, and cumulative of opposition.\n * */\nconfig.tieBreak.forEach(function (method) {\n    // Dumb question... does assigning functions like this harm security?\n    method.func = scores[method.funcName];\n});\n\nexport default Object.freeze(config);","import {firstBy} from \"thenby\";\nimport config from \"./config\";\nimport {DUMMYPLAYER} from \"./player\";\n/**\n * Get a list of all of a player's scores from each match.\n * @param {Player} player\n * @returns {array} the list of scores\n */\nfunction playerScoreList(tourney, player, roundId = null) {\n    return tourney.getMatchesByPlayer(player, roundId).map(\n        (match) => match.result[match.players.indexOf(player)]\n    );\n}\n\n// Maybe merge this with the other function?\nfunction playerScoreListNoByes(tourney, player, roundId = null) {\n    return tourney.getMatchesByPlayer(\n        player,\n        roundId\n    ).filter(\n        (match) => !match.isBye()\n    ).map(\n        (match) => match.result[match.players.indexOf(player)]\n    );\n}\n\n/**\n * Get the total score of a player after a given round.\n * @param {Player} player\n * @param {number} roundId\n */\nfunction playerScore(tourney, player, roundId = null) {\n    var score = 0;\n    var scoreList = playerScoreList(tourney, player, roundId);\n    if (scoreList.length > 0) {\n        score = scoreList.reduce((a, b) => a + b);\n    }\n    return score;\n}\n\n/**\n * Get the cumulative score of a player\n * @param {Player} player\n * @param {number} roundId\n */\nfunction playerScoreCum(tourney, player, roundId = null) {\n    var runningScore = 0;\n    var cumScores = [];\n    var scores = playerScoreListNoByes(tourney, player, roundId);\n    scores.forEach(function (score) {\n        runningScore += score;\n        cumScores.push(runningScore);\n    });\n    var totalScore = 0;\n    if (cumScores.length !== 0) {\n        totalScore = cumScores.reduce((a, b) => a + b);\n    }\n    return totalScore;\n}\n\n/**\n * Calculate a player's color balance\n * @param {Player} player\n * @param {Int}    round The ID of the highest round to consider\n * @returns {Int} A negative number means they played as black more. A positive\n * number means they played as white more.\n */\nfunction playerColorBalance(tourney, player, roundId = null) {\n    var color = 0;\n    tourney.getMatchesByPlayer(player, roundId).filter(\n        (match) => !match.isBye()\n    ).forEach(\n        function (match) {\n            if (match.players[0] === player) {\n                color += 1;\n            } else if (match.players[1] === player) {\n                color += -1;\n            }\n        }\n    );\n    return color;\n}\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @param {Player} player\n * @param {number} roundId\n */\nfunction modifiedMedian(tourney, player, roundId = null, solkoff = false) {\n    // get all of the opponent's scores\n    var scores = tourney.getPlayersByOpponent(\n        player,\n        roundId\n    ).filter(\n        (opponent) => opponent !== DUMMYPLAYER\n    ).map(\n        (opponent) => playerScore(tourney, opponent, roundId)\n    );\n    //sort them, then remove the first and last items\n    scores.sort();\n    if (!solkoff) {\n        scores.pop();\n        scores.shift();\n    }\n    var finalScore = 0;\n    if (scores.length > 0) {\n        finalScore = scores.reduce((a, b) => a + b);\n    }\n    return finalScore;\n}\n\n/**\n * A shortcut for passing the `solkoff` variable to `modifiedMedian`.\n * @param {Player} player\n * @param {number} roundId\n */\nfunction solkoff(tourney, player, roundId = null) {\n    return modifiedMedian(tourney, player, roundId, true);\n}\n\nfunction playerOppScoreCum(tourney, player, roundId = null) {\n    const opponents = tourney.getPlayersByOpponent(\n        player,\n        roundId\n    ).filter(\n        (opponent) => opponent !== DUMMYPLAYER\n    );\n    var oppScores = opponents.map((p) => playerScoreCum(tourney, p, roundId));\n    var score = 0;\n    if (oppScores.length !== 0) {\n        score = oppScores.reduce((a, b) => a + b);\n    }\n    return score;\n}\n\nfunction areScoresEqual(player1, player2) {\n    const scoreTypes = Object.getOwnPropertyNames(player1);\n    var areEqual = true;\n    scoreTypes.forEach(function (score) {\n        if (score !== \"player\" && player1[score] !== player2[score]) {\n            areEqual = false;\n        }\n    });\n    return areEqual;\n}\n\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * @param {number} roundId\n * @returns {Array} The sorted list of players\n */\nfunction calcStandings(tourney, roundId = null) {\n    const tieBreaks = config.tieBreak.filter((m) => m.active);\n    const standingsFlat = tourney.roster.all.map(function (player) {\n        var standing = {\n            player: player,\n            score: playerScore(tourney, player, roundId)\n        };\n        tieBreaks.forEach(function (method) {\n            standing[method.func.name] = method.func(tourney, player, roundId);\n        });\n        return standing;\n    });\n    var sortFunc = firstBy((player) => player.score, -1);\n    tieBreaks.forEach(function (method) {\n        sortFunc = sortFunc.thenBy((player) => player[method.func.name], -1);\n    });\n    standingsFlat.sort(sortFunc);\n    const standingsTree = [];\n    var runningRank = 0;\n    standingsFlat.forEach(function (player, i, sf) {\n        if (i !== 0) { // we can't compare the first player with a previous one\n            const prevPlayer = sf[i - 1];\n            if (!areScoresEqual(player, prevPlayer)) {\n                runningRank += 1;\n            }\n        }\n        if (!standingsTree[runningRank]) {\n            standingsTree[runningRank] = [];\n        }\n        standingsTree[runningRank].push(player);\n    });\n    return standingsTree;\n}\n\nexport {\n    calcStandings,\n    modifiedMedian,\n    playerColorBalance,\n    playerOppScoreCum,\n    playerScore,\n    playerScoreCum,\n    playerScoreList,\n    solkoff\n};\n","import {firstBy} from \"thenby\";\nimport {chunk, last} from \"lodash\";\nimport createMatch from \"./match\";\nimport {playerColorBalance, playerScore} from \"./scores\";\nimport {DUMMYPLAYER} from \"./player\";\n\n/**\n * Creates pairings according to the rules specified in USCF § 27, § 28,\n * and § 29. This is a work in progress and does not account for all of the\n * rules yet.\n * @param {object} round The round object.\n * @returns {array} The list of matches.\n */\nfunction pairPlayers(round) {\n    var byeMatch;\n    var byePlayerData;\n    var player1;\n    const matches = [];\n    const tourney = round.tourney;\n    const dueColor = function (player) {\n        if (round.prevRound === undefined) {\n            return null;\n        }\n        var color = 0;\n        var prevColor = round.prevRound.playerColor(player);\n        if (prevColor === 0) {\n            color = 1;\n        }\n        return color;\n    };\n    const playerData = round.roster.map(function (player) {\n        return {\n            player: player,\n            score: playerScore(tourney, player, round.id),\n            dueColor: dueColor(player),\n            colorBalance: playerColorBalance(tourney, player),\n            opponentHistory: tourney.getPlayersByOpponent(player),\n            upperHalf: false,\n            matched: false\n        };\n    });\n    const scoreList = new Set(playerData.map((p) => p.score));\n    const poolFilters = {\n        noMatchSelf: (p2) => p2.player !== player1.player,\n        noMatchedThisRound: (p2) => !p2.matched,\n        neverMatched: (p2) => !player1.opponentHistory.includes(p2.player),\n        equalScore: (p2) => p2.score === player1.score,\n        diffDueColor: function (p2) {\n            return p2.dueColor === null || p2.dueColor !== player1.dueColor;\n        },\n        diffHalf: (p2) => p2.upperHalf !== player1.upperHalf\n    };\n    /**\n     * We want to pair the highest-scoring and highest-rated players first.\n     * This automatically ensures that players who can't be paired in their own\n     * score group will be paired in the next group lower instead (USCF § 29C1).\n     */\n    playerData.sort(\n        firstBy((p) => p.score, -1).thenBy((p) => p.player.rating, -1)\n    );\n    /**\n     * If there's an odd number of players, assign a bye to the lowest-rated\n     * player in the lowest score group. (USCF § 29L2.)\n     */\n    if (playerData.length % 2 !== 0) {\n        byePlayerData = last(\n            playerData.filter(\n                (p) => !p.player.hasHadBye(tourney)\n            )\n        );\n        if (!byePlayerData) {\n            byePlayerData = last(playerData);\n        }\n        byeMatch = createMatch(round, byePlayerData.player, DUMMYPLAYER);\n        byePlayerData.matched = true;\n    }\n    /**\n     * Determine which players are in the upper and lower halves of their score\n     * groups.\n     */\n    scoreList.forEach(function (score) {\n        var playersWithScore = playerData.filter((pd) => pd.score === score);\n        playersWithScore.sort((pd) => pd.player.rating).reverse();\n        if (playersWithScore.length > 1) {\n            // The first chunk is the upper half\n            chunk(\n                playersWithScore,\n                playersWithScore.length / 2\n            )[0].forEach(function (playerDatum) {\n                playerDatum.upperHalf = true;\n            });\n        }\n    });\n    /**\n     * Iterate through each player to find a match. We'll use a cascading set\n     * of filters to determine ideal matches.\n     */\n    playerData.forEach(function (player) {\n        if (!player.matched) {\n            var player2;\n            var match;\n            var pool;\n            player1 = player;\n            /**\n             * No matter what, you can't match a player with themselves\n             * and you can't match a player twice per round.\n             */\n            var basePool = playerData.filter(\n                poolFilters.noMatchSelf\n            ).filter(\n                poolFilters.noMatchedThisRound\n            );\n            /**\n             * § 27A1. Avoid players meeting twice (highest priority)\n             * § 27A2. Equal scores\n             * § 27A3. Upper half vs. lower half\n             * § 27A4. Eqalizing colors [TODO: needs more work, see below.]\n             * § 27A5. Alternating colors\n             */\n            pool = basePool.filter(\n                poolFilters.neverMatched\n            ).filter(\n                poolFilters.equalScore\n            ).filter(\n                poolFilters.diffHalf\n            ).filter(\n                poolFilters.diffDueColor\n            );\n            if (pool.length === 0) {\n                /**\n                 * § 27A1. Avoid players meeting twice (highest priority)\n                 * § 27A2. Equal scores\n                 * § 27A3. Upper half vs. lower half\n                 */\n                pool = basePool.filter(\n                    poolFilters.neverMatched\n                ).filter(\n                    poolFilters.equalScore\n                ).filter(\n                    poolFilters.diffHalf\n                );\n            }\n            if (pool.length === 0) {\n                /**\n                 * § 27A1. Avoid players meeting twice (highest priority)\n                 * § 27A2. Equal scores\n                 */\n                pool = basePool.filter(\n                    poolFilters.neverMatched\n                ).filter(\n                    poolFilters.equalScore\n                );\n            }\n            if (pool.length === 0) {\n                /**\n                 * § 27A1. Avoid players meeting twice (highest priority)\n                 */\n                pool = basePool.filter(\n                    poolFilters.neverMatched\n                );\n            }\n            /**\n             * We couldn't find a match, so just take whoever's left.\n             */\n            if (pool.length === 0) {\n                pool = basePool;\n            }\n            player2 = pool[0];\n            match = createMatch(round, player1.player, player2.player);\n            player1.matched = true;\n            player2.matched = true;\n            /**\n             * A quick-and-easy way to keep colors mostly equal.\n             * TODO: Make this smarter.\n             */\n            if (player1.colorBalance > player2.colorBalance) {\n                match.reverse();\n            }\n            /**\n             * When the match isn't ideal, include a warning.\n             */\n            if (player1.opponentHistory.includes(player2.player)) {\n                match.warnings += (\n                    \" \" + player1.player.firstName\n                    + \" and \" + player2.player.firstName\n                    + \" have played previously.\"\n                );\n            }\n            [player1, player2].forEach(function (player) {\n                if (Math.abs(player.colorBalance) > 2) {\n                    match.warnings += (\n                        \" \" + player.player.firstName\n                        + \"'s color balance is off\"\n                    );\n                }\n            });\n            matches.push(match);\n        }\n    });\n    /**\n     * The bye match always gets added last so as not to affect the numbering.\n     */\n    if (byeMatch) {\n        matches.push(byeMatch);\n    }\n    return matches;\n}\n\nexport default Object.freeze(pairPlayers);","import {DUMMYPLAYER} from \"./player\";\nimport {last} from \"lodash\";\nimport pairPlayers from \"./pairing\";\n\n/**\n * Create an object to represent a round in a tournament.\n * @param {object} tourney The tournament containing the round.\n */\nfunction createRound(tourney) {\n    const round = {\n        id: tourney.roundList.length,\n        tourney: tourney,\n        roster: tourney.roster.getActive(),\n        prevRound: last(tourney.roundList),\n        matches: [],\n        isComplete() {\n            return !round.matches.map((m) => m.isComplete()).includes(false);\n        },\n        getMatchByPlayer(player) {\n            var theMatch = null;\n            round.matches.forEach(function (match) {\n                if (match.players.includes(player)) {\n                    theMatch = match;\n                }\n            });\n            return theMatch;\n        },\n        playerColor(player) {\n            var color = -1;\n            const match = round.getMatchByPlayer(player);\n            if (match) {\n                color = match.getPlayerColor(player);\n            }\n            return color;\n        },\n        addPlayer(player) {\n            round.players.push(player);\n            return round;\n        },\n        hasDummy() {\n            return round.roster.includes(DUMMYPLAYER);\n        }\n    };\n    round.matches = pairPlayers(round);\n    return round;\n}\n\nexport default Object.freeze(createRound);","import createRoster from \"./roster\";\nimport createRound from \"./round\";\nimport {last, times} from \"lodash\";\n\nfunction createTournament(name = \"\", playerList = []) {\n    const tourney = {\n        name: name,\n        roundList: [],\n        byeValue: 1,\n        isNewRoundReady() {\n            var isReady = false;\n            if (tourney.roundList.length > 0) {\n                isReady = last(tourney.roundList).isComplete();\n            } else {\n                isReady = (tourney.roster.all.length > 0);\n            }\n            return isReady;\n        },\n        getMatchesByPlayer(player, roundId = null) {\n            if (roundId === null) {\n                roundId = tourney.roundList.length;\n            }\n            var matches = [];\n            times(roundId + 1, function (i) {\n                if (tourney.roundList[i] !== undefined) {\n                    tourney.roundList[i].matches.forEach(function (match) {\n                        if (match.players.indexOf(player) !== -1) {\n                            matches.push(match);\n                        }\n                    });\n                }\n            });\n            return matches;\n        },\n        getPlayersByOpponent(opponent, roundId = null) {\n            var players = [];\n            tourney.getMatchesByPlayer(opponent, roundId).forEach(\n                function (match) {\n                    players = players.concat(\n                        match.players.filter(\n                            (player) => player !== opponent\n                        )\n                    );\n                }\n            );\n            return players;\n        },\n        getNumOfRounds() {\n            var roundId = Math.ceil(\n                Math.log2(tourney.roster.getActive().length)\n            );\n            if (roundId === -Infinity) {\n                roundId = 0;\n            }\n            return roundId;\n        },\n        newRound() {\n            if (!tourney.isNewRoundReady()) {\n                return false;\n            }\n            var newRound = createRound(tourney);\n            tourney.roundList.push(newRound);\n            return newRound;\n        }\n    };\n    tourney.roster = createRoster(tourney, playerList);\n    return tourney;\n}\n\nexport default Object.freeze(createTournament);\n","import React, {useState} from \"react\";\nimport {createPlayer, scores, config} from \"./chess-tourney\";\nimport demoRoster from \"./demo-players.json\";\n\nfunction MainRoster({tourney}) {\n    const [roster, setRoster] = useState(tourney.roster.all);\n    const newPlayer = {firstName: \"\", lastName: \"\", rating: 1200};\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        tourney.roster.addPlayer(\n            createPlayer(\n                newPlayer[\"firstName\"],\n                newPlayer[\"lastName\"],\n                newPlayer[\"rating\"]\n            )\n        );\n        setRoster([].concat(tourney.roster.all));\n    };\n    const updateField = (event) => {\n        newPlayer[event.target.name] = event.target.value;\n    };\n    const loadDemo = () => {\n        var players = demoRoster.slice(0,16).map(p => createPlayer(p));\n        tourney.roster.addPlayers(players);\n        setRoster([].concat(tourney.roster.all));\n    }\n    const deactivatePlayer = (player) => {\n        var removed = tourney.roster.removePlayer(player);\n        if (!removed) {\n            tourney.roster.deactivatePlayer(player);\n        }\n        setRoster([].concat(tourney.roster.all));\n    }\n    const activatePlayer = (player) => {\n        tourney.roster.activatePlayer(player);\n        setRoster([].concat(tourney.roster.all));\n    }\n    var rosterTable = \"\";\n    if (roster.length > 0) {\n        rosterTable = \n        <table>\n            <caption>Roster</caption>\n            <thead>\n                <tr>\n                <th>First name</th>\n                <th>Rating</th>\n                <th>Rounds played</th>\n                <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                { roster.map((player, i) =>\n                <tr key={i} \n                    className={tourney.roster.inactive.includes(player) ? \"inactive\" : \"active\"}>\n                    <td className=\"table__player\">{player.firstName}</td>\n                    <td className=\"table__number\">{player.rating}</td>\n                    <td className=\"table__number\">\n                    {tourney.getMatchesByPlayer(player).length}\n                    </td>\n                    <td>\n                    {tourney.roster.inactive.includes(player)\n                    ? <button onClick={() => activatePlayer(player)}>Activate</button>\n                    : <button onClick={() => deactivatePlayer(player)}>x</button>\n                    }\n                    </td>\n                </tr>\n                )}\n            </tbody>\n        </table>\n    }\n    return (\n        <div className=\"roster\">\n            {rosterTable}\n            <p>\n                <button onClick={loadDemo}>Load a demo roster</button>\n            </p>\n            <p>\n                Or add your own players:\n            </p>\n            <form onSubmit={handleSubmit}>\n                <p>\n                    <label>\n                    First name&nbsp;\n                    <input type=\"text\" name=\"firstName\" onChange={updateField} required />\n                    </label>\n                </p>\n                <p>\n                    <label>\n                    Last name&nbsp;\n                    <input type=\"text\" name=\"lastName\" onChange={updateField} required />\n                    </label>\n                </p>\n                <p>\n                    <label>\n                    Rating&nbsp;\n                    <input type=\"number\" name=\"rating\" onChange={updateField} value=\"1200\" />\n                    </label>\n                </p>\n                <input type=\"submit\" value=\"Add\"/>\n            </form>\n            <p className=\"center\">Total rounds: {tourney.getNumOfRounds()}</p>\n        </div>\n    );\n}\n\nfunction Round ({tourney, roundId}) {\n    /**\n     * Be careful when using the `setState` `matches` and the API\"s `matches`.\n     * They have to mirror each other but can\"t be the same objects.\n     */\n    const round = tourney.roundList[roundId];\n    const [matches, setMatches] = useState(round.matches.map(o => Object.assign({}, o)));\n    const setWinner = (color, index, event) => {\n        let origMatch = round.matches[index];\n        if(event.target.checked) {\n            if(color === 0) {\n                origMatch.whiteWon();\n            } else if (color === 1) {\n                origMatch.blackWon();\n            } else if (color === 0.5) {\n                origMatch.draw();\n            }\n        } else {\n            origMatch.resetResult();\n        }\n        // matches[index] = match;\n        setMatches(round.matches.map(o => Object.assign({}, o)));\n    }\n    const randomize = () => {\n        matches.forEach((match, i) => {\n            let origMatch = round.matches[i];\n            if (origMatch.isBye()) {\n                return;\n            }\n            let rando = Math.random();\n            if (rando >= 0.55) {\n                origMatch.whiteWon();\n            } else if (rando >= .1) {\n                origMatch.blackWon();\n            } else {\n                origMatch.draw();\n            }\n        });\n        setMatches(round.matches.map(o => Object.assign({}, o)));\n    }\n    return (\n        <div className=\"round\">\n            <table className=\"table__roster\">\n                <caption>Round {round.id + 1} results</caption>\n                <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Won</th>\n                    <th>White</th>\n                    <th>Draw</th>\n                    <th>Black</th>\n                    <th>Won</th>\n                    <th></th>\n                </tr>\n                </thead>\n                <tbody>\n                {matches.map((match, i) =>\n                    <RoundMatch\n                        key={i}\n                        tourney={tourney}\n                        roundId={roundId}\n                        matchId={i}\n                        setWinner={setWinner} />\n                )}\n                </tbody>\n            </table>\n            <p style={{textAlign: \"center\"}}>\n                <button onClick={randomize}>Random!</button>\n            </p>\n            <Standings roundId={round.id} tourney={round.tourney} />\n        </div>\n    );\n}\n\nfunction RoundMatch({tourney, roundId, matchId, setWinner}) {\n    const round = tourney.roundList[roundId];\n    const match = round.matches[matchId];\n    const [openCards, setCards] = useState([[]]);\n    const isCardOpen = (id) => {\n        if(openCards[roundId] === undefined) {\n            return false;\n        } else {\n            return openCards[roundId].includes(id);\n        }\n    };\n    const togglePlayerCard = (id) => {\n        var newCards = [...openCards];\n        if (newCards[roundId] === undefined) {\n            newCards[roundId] = [];\n        }\n        if (newCards[roundId].includes(id)) {\n            newCards[roundId] = newCards[roundId].filter(i => i !== id)\n            setCards(newCards);\n        } else {\n            newCards[roundId] = newCards[roundId].concat([id])\n            setCards(newCards);\n        }\n    };\n    return (\n        <tr className={match.isBye() ? \"inactive\" : \"\"}>\n            <td className=\"table__number\">{matchId + 1}</td>\n            <td>\n                <input \n                type=\"checkbox\"\n                checked={match.getWhite().result === 1}\n                disabled={match.isBye()}\n                onChange={(event) => setWinner(0, matchId, event)} />\n            </td>\n            <td className=\"table__player\">\n                {match.getWhite().player.firstName}\n                {isCardOpen(matchId) && \n                <PlayerCard\n                    tourney={tourney}\n                    round={round}\n                    player={match.getWhite().player} />\n                }\n            </td>\n            <td>\n                <input \n                    type=\"checkbox\"\n                    checked={match.getWhite().result === 0.5}\n                    disabled={match.isBye()}\n                    onChange={(event) => setWinner(0.5, matchId, event)} />\n            </td>\n            <td className=\"table__player\">\n                {match.getBlack().player.firstName}\n                {isCardOpen(matchId) && \n                <PlayerCard\n                    tourney={tourney}\n                    round={round}\n                    player={match.getBlack().player} />\n                }\n            </td>\n            <td>\n                <input \n                    type=\"checkbox\"\n                    checked={match.getBlack().result === 1}\n                    disabled={match.isBye()}\n                    onChange={(event) => setWinner(1, matchId, event)} />\n            </td>\n            <td>\n                <button onClick={() => togglePlayerCard(matchId)}>?</button>\n                {match.warnings}\n            </td>\n        </tr>\n    );\n}\n\nfunction PlayerCard({tourney, round, player}) {\n    var ratingChange = (\n        round.getMatchByPlayer(player).getPlayerInfo(player).newRating\n        - round.getMatchByPlayer(player).getPlayerInfo(player).origRating\n    );\n    if (ratingChange > -1) {\n        ratingChange = \"+\" + ratingChange\n    }\n    const colorBalance = scores.playerColorBalance(tourney, player, round.id);\n    var color = \"Even\";\n    if (colorBalance > 0) {\n        color = \"White +\" + colorBalance;\n    } else if (colorBalance < 0) {\n        color = \"Black +\" + Math.abs(colorBalance);\n    }\n    return (\n        <dl className=\"player-card\">\n        <dt>Score</dt>\n        <dd>{scores.playerScore(tourney, player, round.id)}</dd>\n        <dt>Rating</dt>\n        <dd>\n            {round.getMatchByPlayer(player).getPlayerInfo(player).origRating}\n            &nbsp;({ratingChange})\n        </dd>\n        <dt>Color balance</dt>\n        <dd>{color}</dd>\n        <dt>Opponent history</dt>\n        <dd>\n            <ol>\n            {tourney.getPlayersByOpponent(player, round.id).map((opponent, i) =>\n                <li key={i}>\n                {opponent.firstName}\n                </li>  \n            )}\n            </ol>\n        </dd>\n        </dl>\n    );\n}\n\nfunction Standings({tourney, roundId}) {\n  return (\n    <table key={roundId}>\n      <caption>Current Standings</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th>First name</th>\n          <th>Score</th>\n          {config.tieBreak.filter((m) => m.active).map((method, i) =>\n              <th key={i}>{method.name}</th>\n          )}\n        </tr>\n      </thead>\n      {scores.calcStandings(tourney, roundId).map((rank, i) => \n        <tbody key={i}>\n          {rank.map((player, j) => \n            <tr key={j}>\n                <td>{i + 1}</td>\n                <td>{player.player.firstName}</td>\n                <td className=\"table__number\">{player.score}</td>\n                {config.tieBreak.filter((m) => m.active).map((method, i) =>\n                    <td className=\"table__number\" key={i}>\n                        {player[method.func.name]}\n                    </td>\n                )}\n            </tr>\n            )}\n        </tbody>\n      )}\n    </table>\n  );\n}\n\nexport {MainRoster, Round, Standings};","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {createTournament} from \"./chess-tourney\";\nimport {MainRoster, Round} from \"./chess-tourney.jsx.js\";\n\nconst cvlTourney = createTournament(\"CVL Winter Open\");\n\nfunction App() {\n  const newRound = (event) => {\n    var round = cvlTourney.newRound();\n    if (!round) {\n      alert(\"Either add players or complete the current matches first.\");\n      return;\n    }\n    tabList.push(\n      {\n        name: \"Round \" + (round.id + 1),\n        contents: <Round tourney={cvlTourney} roundId={round.id} />\n      }\n    );\n    setTabList([].concat(tabList));\n    setCurrentTab(tabList[tabList.length - 1])\n  }\n  const [tabList, setTabList] = useState(\n    [\n      {\n        name: \"Roster\",\n        contents: <MainRoster tourney={cvlTourney} />\n      }\n    ]\n  );\n  const [currentTab, setCurrentTab] = useState(tabList[0]);\n  return (\n    <div className=\"tournament\">\n      <nav className=\"tabbar\">\n        <ul>\n          {tabList.map((tab, i) => \n            <li key={i}>\n              <button\n                className=\"tab\"\n                onClick={() => setCurrentTab(tab)}\n                disabled={currentTab === tab}\n                >\n                {tab.name}\n              </button>\n            </li>\n          )}\n          <li>\n            <button \n              className=\"tab new_round\"\n              onClick={newRound}\n              >\n              New Round\n            </button>\n          </li>\n        </ul>\n      </nav>\n      <h1>Chessahoochee: a chess tournament app</h1>\n      {currentTab.contents}\n    </div>\n  );\n}\n\nfunction Caution() {\n    return (\n        <p>\n            <span role=\"img\" aria-label=\"waving hand\">👋</span>&nbsp;\n            This is an unstable demo build!\n            Want to help make it better? Head to the&nbsp;\n            <span role=\"img\" aria-label=\"finger pointing right\">👉</span>&nbsp;\n            <a href=\"https://github.com/johnridesabike/chessahoochee\">Git repository</a>.\n        </p>\n    );\n}\n\nexport {App, Caution};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App, Caution} from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nReactDOM.render(<Caution />, document.getElementById(\"caution\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}