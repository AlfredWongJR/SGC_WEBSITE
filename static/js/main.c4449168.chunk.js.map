{"version":3,"sources":["components/caution/index.module.css","components/tournament/round.module.css","data/constants.js","data/player.js","data/utility.js","data/match.js","pairing-scoring/scoring.js","pairing-scoring/pairing.js","state/match-functions.js","state/global-state.js","components/utility.jsx","data/tournament.js","components/tournament/round.jsx","components/tournament/player-select.jsx","components/tournament/scores.jsx","components/tournament/tabs.jsx","components/tournament/list.jsx","components/players/list.jsx","components/players/info-box.jsx","components/players/index.jsx","components/options.jsx","components/caution/index.jsx","App.jsx","serviceWorker.js","index.jsx","components/tournament/scores.module.css"],"names":["module","exports","caution","caution__text","caution__link","table","BLACK","WHITE","createPlayer","importObj","arguments","length","undefined","id","type","firstName","lastName","rating","matchCount","Object","freeze","dummyPlayer","getPlayerById","playerList","player","filter","p","getPlayerAvoidList","playerId","avoidList","pair","includes","reduce","accumulator","concat","kFactor","calcNewRatings","origRatings","matchCounts","result","whiteElo","EloRank","blackElo","scoreExpected","getExpected","updateRating","map","calcNumOfRounds","playerCount","roundId","Math","ceil","log2","Number","isFinite","getById","list","x","getIndexById","indexOf","ids","pairs","players","origRating","newRating","isBye","match","playerMatchColor","matchList","color","m","getMatchesByPlayer","roundList","slice","acc","round","hasHadBye","getPlayersByOpponent","opponentId","playerScore","score","scoreList","playerScoreList","a","b","playerScoreCum","runningScore","cumScores","playerScoreListNoByes","forEach","push","totalScore","playerColorBalance","modifiedMedian","pId","isSolkoff","scores","opponent","sort","pop","shift","finalScore","tieBreakMethods","name","func","oppScores","calcStandings","methods","tieBreaks","standingsFlat","allPlayers","Array","from","Set","getAllPlayers","method","sortFunc","firstBy","standing","ignore","index","thenBy","standingsTree","runningRank","i","orig","standing1","standing2","areEqual","keys","areScoresEqual","dueColor","genPlayerData","data","colorBalance","opponentHistory","upperHalf","avoidMeetingTwicePriority","sameScoresPriority","differentHalfPriority","differentDueColorPriority","calcPairIdeal","player1","player2","scoreDiff","priority","metBefore","mustAvoid","abs","byeMatch","potentialMatches","matches","reducedResults","playerData","byePlayerData","last","playersWithScore","pd","reverse","splitAt","playerDatum","src","playerMatches","blossom","p1Id","p2Id","p1","p2","ideal","matched","autoPair","state","tourneyId","unPairedPlayers","tourney","tourneys","getPlayer","curry","nextBye","byeQueue","createMatch","newMatchList","pairPlayers","avoid","join","dummy","options","byeValue","manualPair","swapColors","matchId","defaultData","defaultOptions","defaultPlayers","defaultTourneyList","dataReducer","action","assign","newPlayer","arrayMove","oldIndex","newIndex","unpairedPlayers","Error","DataContext","createContext","Button","_ref","children","react_default","createElement","onClick","BackButton","_ref2","OpenButton","_ref3","InfoButton","_ref4","Panel","_ref5","style","objectSpread","PanelContainer","_ref6","display","React","Children","child","Round","_useContext","useContext","dispatch","_useState","useState","_useState2","slicedToArray","selectedMatch","setSelectedMatch","setMatchResult","white","black","moveMatch","direction","mIndex","className","unMatch","disabled","scope","pos","MatchRow","key","PlayerMatchInfo","PairPicker","whiteWon","blackWon","draw","every","whiteName","blackName","role","aria-label","menu_button_es","visually_hidden_es","aria-hidden","onSelect","utility_InfoButton","utility_BackButton","prettyBalance","numeral","format","opId","_useContext4","_useState3","_useState4","selectedPlayers","setSelectedPlayers","selectPlayer","event","target","value","checked","prevState","unMatched","onChange","htmlFor","PlayerSelect","isSelecting","setIsSelecting","togglePlayer","colSpan","ScoreList","_calcStandings","_calcStandings2","standingTree","tbMethods","topHeader","rank","j","row","rowSpan","playerName","data-testid","dashify","SelectTieBreaks","_useContext2","selectedTb","setSelectedTb","toggleTb","moveTb","register","regexps","unformat","roundingFunction","whole","floor","remainder","String","Scores","TournamentTabs","backButton","defaultTab","setDefaultTab","es","defaultIndex","tournament_scores","TournamentList","tourneyList","openTourney","setOpenTourney","newTourneyName","setNewTourneyName","content","react","onSubmit","preventDefault","createTournament","placeholder","required","PlayerList","setOpenPlayer","newPlayerDefault","newPlayerData","setNewPlayerdata","nextId","setNextId","updateField","update","currentTarget","rosterTable","delPlayer","utility_OpenButton","prevId","PlayerInfoBox","singAvoidList","setSingAvoidList","unAvoided","selectedAvoider","setSelectedAvoider","useEffect","aria-labelledby","avoidAdd","onBlur","PlayerView","openPlayer","Options","rows","cols","JSON","stringify","readOnly","Caution","styles","href","App","_useReducer","useReducer","_useReducer2","StrictMode","Provider","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4449168.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"caution\":\"caution_caution__3GmMJ\",\"caution__text\":\"caution_caution__text__2ZzEu\",\"caution__link\":\"caution_caution__link__2xeym\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"round_table__1Rm4K\"};","// @ts-check\nconst BLACK = 1;\nexport {BLACK};\nconst WHITE = 0;\nexport {WHITE};\n","// @ts-check\nimport EloRank from \"elo-rank\";\nimport {WHITE, BLACK} from \"./constants\";\n/**\n * @typedef {import(\"./index\").Player} Player\n */\n\nfunction createPlayer(importObj = {}) {\n    /** @type {Player} */\n    const player = {\n        id: importObj.id || 0,\n        type: importObj.type || \"person\", // used for CSS styling etc.\n        firstName: importObj.firstName || \"\",\n        lastName: importObj.lastName || \"\",\n        rating: importObj.rating || 0,\n        matchCount: importObj.matchCount || 0\n    };\n    return player;\n}\nObject.freeze(createPlayer);\nexport {createPlayer};\n\nconst dummyPlayer = createPlayer();\ndummyPlayer.id = -1;\ndummyPlayer.firstName = \"Bye\";\ndummyPlayer.lastName = \"Player\";\ndummyPlayer.type = \"dummy\";\nObject.freeze(dummyPlayer);\nexport {dummyPlayer};\n\n\n/**\n * @param {Player[]} playerList\n * @param {number} id\n * @returns {Player}\n */\nfunction getPlayerById(playerList, id) {\n    if (id === -1) {\n        return dummyPlayer;\n    }\n    let player = playerList.filter((p) => p.id === id)[0];\n    if (!player) {\n        player = createPlayer({\n            id: id,\n            firstName: \"Anonymous\",\n            type: \"missing\"\n        });\n    }\n    return player;\n}\nObject.freeze(getPlayerById);\nexport {getPlayerById};\n\n/**\n * @param {number} playerId\n * @param {number[][]} avoidList\n * @returns {number[]}\n */\nfunction getPlayerAvoidList(playerId, avoidList) {\n    return avoidList.filter( // get pairings with the player\n        (pair) => pair.includes(playerId)\n    ).reduce( // Flatten the array\n        (accumulator, pair) => pair.concat(accumulator),\n        []\n    ).filter( // filter out the player's id\n        (id) => id !== playerId\n    );\n}\nObject.freeze(getPlayerAvoidList);\nexport {getPlayerAvoidList};\n\n/**\n * @param {number[][]} avoidList\n * @param {Player[]} playerList\n */\nfunction cleanAvoidList(avoidList, playerList) {\n    const ids = playerList.map((p) => p.id);\n    return avoidList.filter(\n        (pairs) => (ids.includes(pairs[0]) && ids.includes(pairs[1]))\n    );\n}\nObject.freeze(cleanAvoidList);\nexport {cleanAvoidList};\n\n/**\n * @param {number} matchCount\n */\nfunction kFactor(matchCount) {\n    const ne = matchCount || 1;\n    return (800 / ne);\n}\nObject.freeze(kFactor);\nexport {kFactor};\n\n/**\n * @param {[number, number]} origRatings\n * @param {[number, number]} matchCounts\n * @param {[number, number]} result\n */\nfunction calcNewRatings(origRatings, matchCounts, result) {\n    const whiteElo = new EloRank(kFactor(matchCounts[WHITE]));\n    const blackElo = new EloRank(kFactor(matchCounts[BLACK]));\n    const FLOOR = 100;\n    const scoreExpected = [\n        whiteElo.getExpected(origRatings[WHITE], origRatings[BLACK]),\n        blackElo.getExpected(origRatings[BLACK], origRatings[WHITE])\n    ];\n    const newRating = [\n        whiteElo.updateRating(\n            scoreExpected[WHITE],\n            result[WHITE],\n            origRatings[WHITE]\n        ),\n        blackElo.updateRating(\n            scoreExpected[BLACK],\n            result[BLACK],\n            origRatings[BLACK]\n        )\n    ];\n    return newRating.map(\n        (rating) => (\n            rating < FLOOR\n            ? FLOOR\n            : rating\n        )\n    );\n}\nObject.freeze(calcNewRatings);\nexport {calcNewRatings};\n","// @ts-check\n/**\n * @param {number} playerCount\n */\nfunction calcNumOfRounds(playerCount) {\n    let roundId = Math.ceil(Math.log2(playerCount));\n    if (!Number.isFinite(roundId)) {\n        roundId = 0;\n    }\n    return roundId;\n}\nObject.freeze(calcNumOfRounds);\nexport {calcNumOfRounds};\n\n/**\n * @param {Object[]} list\n * @param {number | string} id\n */\nfunction getById(list, id) {\n    return list.filter((x) => x.id === id)[0];\n}\nObject.freeze(getById);\nexport {getById};\n/**\n * @param {Object[]} list\n * @param {number | string} id\n */\nfunction getIndexById(list, id) {\n    return list.indexOf(getById(list, id));\n}\nObject.freeze(getIndexById);\nexport {getIndexById};\n","// @ts-check\n/**\n * @typedef {import(\"./index\").Match} Match\n */\n/**\n *\n * @param {object} importObj\n */\nfunction createMatch(importObj) {\n    /** @type {Match} */\n    const match = {\n        id: importObj.id,\n        players: importObj.players,\n        result: importObj.result || [0, 0],\n        origRating: importObj.origRating,\n        newRating: importObj.newRating\n    };\n    return match;\n}\nexport default Object.freeze(createMatch);\n","// @ts-check\nimport {firstBy} from \"thenby\";\nimport {\n    dummyPlayer,\n    getPlayerById,\n    getPlayerAvoidList\n} from \"../data/player\";\n\n/**\n * @typedef {import(\"./\").ScoreCalculator} ScoreCalculator\n * @typedef {import(\"./\").PlayerData} PlayerData\n * @typedef {import(\"./\").Standing} Standing\n * @typedef {import(\"../data/\").Match} Match\n * @typedef {import(\"../data/\").Player} Player\n */\n\n/**\n *\n * @param {Match} match\n * @returns {boolean}\n */\nfunction isBye(match) {\n    return match.players.includes(dummyPlayer.id);\n}\n\n/**\n * @param {number} playerId\n * @param {object[]} matchList\n * @returns {number?}\n */\nfunction playerMatchColor(playerId, matchList) {\n    /**@type {number} */\n    let color = null;\n    const match = matchList.filter((m) => m.players.includes(playerId))[0];\n    if (match) {\n        color = match.players.indexOf(playerId);\n    }\n    return color;\n}\nObject.freeze(playerMatchColor);\nexport {playerMatchColor};\n\n/**\n * @type {ScoreCalculator}\n * @returns {Match[]}\n */\nfunction getMatchesByPlayer(playerId, roundList, roundId = null) {\n    let rounds;\n    if (roundId === null) {\n        rounds = roundList;\n    } else {\n        rounds = roundList.slice(0, roundId + 1);\n    }\n    return rounds.reduce( // flatten the rounds to just the matches\n        (acc, round) => acc.concat(round),\n        []\n    ).filter(\n        (match) => match.players.includes(playerId)\n    );\n}\n\n/**\n * @type {ScoreCalculator}\n * @returns {boolean}\n */\nfunction hasHadBye(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        playerId,\n        roundList,\n        roundId\n    ).reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    ).includes(dummyPlayer.id);\n}\nObject.freeze(hasHadBye);\nexport {hasHadBye};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number[]}\n */\nfunction getPlayersByOpponent(opponentId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        opponentId,\n        roundList,\n        roundId\n    ).reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    ).filter(\n        (playerId) => playerId !== opponentId\n    );\n}\nObject.freeze(getPlayersByOpponent);\nexport {getPlayersByOpponent};\n\n/**\n * Get a list of all of a player's scores from each match.\n * @type {ScoreCalculator}\n * @returns {number[]} the list of scores\n */\nfunction playerScoreList(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(playerId, roundList, roundId).map(\n        (match) => match.result[match.players.indexOf(playerId)]\n    );\n}\n\n/**\n * TODO: Maybe merge this with the other function?\n */\n/**\n * @type {ScoreCalculator}\n * @returns {number[]}\n */\nfunction playerScoreListNoByes(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        playerId,\n        roundList,\n        roundId\n    ).filter(\n        (match) => !isBye(match)\n    ).map(\n        (match) => match.result[match.players.indexOf(playerId)]\n    );\n}\n\n/**\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerScore(playerId, roundList, roundId = null) {\n    let score = 0;\n    const scoreList = playerScoreList(playerId, roundList, roundId);\n    if (scoreList.length > 0) {\n        score = scoreList.reduce((a, b) => a + b);\n    }\n    return score;\n}\nObject.freeze(playerScore);\nexport {playerScore};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerScoreCum(playerId, roundList, roundId = null) {\n    let runningScore = 0;\n    /** @type {number[]} */\n    let cumScores = [];\n    let scores = playerScoreListNoByes(playerId, roundList, roundId);\n    scores.forEach(function (score) {\n        runningScore += score;\n        cumScores.push(runningScore);\n    });\n    let totalScore = 0;\n    if (cumScores.length !== 0) {\n        totalScore = cumScores.reduce((a, b) => a + b);\n    }\n    return totalScore;\n}\n\n/**\n * Calculate a player's color balance. A negative number means they played as\n * white more. A positive number means they played as black more.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerColorBalance(playerId, roundList, roundId = null) {\n    let color = 0;\n    getMatchesByPlayer(playerId, roundList, roundId).filter(\n        (match) => !isBye(match)\n    ).forEach(\n        function (match) {\n            if (match.players[0] === playerId) {\n                color += -1;\n            } else if (match.players[1] === playerId) {\n                color += 1;\n            }\n        }\n    );\n    return color;\n}\nObject.freeze(playerColorBalance);\nexport {playerColorBalance};\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @type {ScoreCalculator}\n * @param {boolean} [isSolkoff]\n * @returns {number}\n */\nfunction modifiedMedian(pId, roundList, roundId = null, isSolkoff = false) {\n    // get all of the opponent's scores\n    let scores = getPlayersByOpponent(\n        pId,\n        roundList,\n        roundId\n    ).filter(\n        (opponent) => opponent !== dummyPlayer.id\n    ).map(\n        (opponent) => playerScore(opponent, roundList, roundId)\n    );\n    //sort them, then remove the first and last items\n    scores.sort();\n    if (!isSolkoff) {\n        scores.pop();\n        scores.shift();\n    }\n    let finalScore = 0;\n    if (scores.length > 0) {\n        finalScore = scores.reduce((a, b) => a + b);\n    }\n    return finalScore;\n}\n\n/**\n * A shortcut for passing the `isSolkoff` variable to `modifiedMedian`.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction solkoff(playerId, roundList, roundId = null) {\n    return modifiedMedian(playerId, roundList, roundId, true);\n}\n\n/**\n * Get the cumulative scores of a player's opponents.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerOppScoreCum(playerId, roundList, roundId = null) {\n    const opponents = getPlayersByOpponent(\n        playerId,\n        roundList,\n        roundId\n    ).filter(\n        (opponent) => opponent !== dummyPlayer.id\n    );\n    let oppScores = opponents.map((p) => playerScoreCum(p, roundList, roundId));\n    let score = 0;\n    if (oppScores.length !== 0) {\n        score = oppScores.reduce((a, b) => a + b);\n    }\n    return score;\n}\n\nconst tieBreakMethods = [\n    {\n        name: \"Modified median\",\n        func: modifiedMedian\n    },\n    {\n        name: \"Solkoff\",\n        func: solkoff\n    },\n    {\n        name: \"Cumulative score\",\n        func: playerScoreCum\n    },\n    {\n        name: \"Cumulative of opposition\",\n        func: playerOppScoreCum\n    },\n    {\n        name: \"Most black\",\n        func: playerColorBalance\n    }\n];\n\nObject.freeze(tieBreakMethods);\nexport {tieBreakMethods};\n\n/**\n * @param {Standing} standing1\n * @param {Standing} standing2\n * @returns {boolean}\n */\nfunction areScoresEqual(standing1, standing2) {\n    let areEqual = true;\n    // Check if any of them aren't equal\n    if (standing1.score !== standing2.score) {\n        areEqual = false;\n    }\n    Object.keys(standing1.tieBreaks).forEach(function (index) {\n        if (standing1.tieBreaks[index] !== standing2.tieBreaks[index]) {\n            areEqual = false;\n        }\n    });\n    return areEqual;\n}\n\n/**\n * @typedef {import(\"../data/index\").Round} Round\n */\n\n/**\n * @param {Round[]} roundList\n * @returns {number[]}\n */\nfunction getAllPlayers(roundList) {\n    const allPlayers = roundList.reduce( // flatten the rounds\n        (acc, round) => acc.concat(round),\n        []\n    ).reduce( // flaten the players\n        (acc, match) => acc.concat(match.players),\n        []\n    );\n    return Array.from(new Set(allPlayers));\n}\n\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * @param {number[]} methods\n * @param {Round[]} roundList\n * @param {number} [roundId]\n * @returns {[Standing[][], string[]]} The standings and the list of method used\n */\nfunction calcStandings(methods, roundList, roundId = null) {\n    const tieBreaks = methods.map((m) => tieBreakMethods[m]);\n    // Get a flat list of all of the players and their scores.\n    const standingsFlat = getAllPlayers(roundList).map(function (pId) {\n        /** @type {Standing} */\n        const standing = {\n            id: pId,\n            score: playerScore(pId, roundList, roundId),\n            tieBreaks: tieBreaks.map((method) => (\n                method.func(pId, roundList, roundId)\n            ))\n        };\n        return standing;\n    });\n    // Create a function to sort the players\n    let sortFunc = firstBy((standing) => standing.score, -1);\n    // For each tiebreak method, chain another `thenBy` to the function.\n    tieBreaks.forEach(function (ignore, index) {\n        sortFunc = sortFunc.thenBy((standing) => standing.tieBreaks[index], -1);\n    });\n    // Finally, sort the players.\n    standingsFlat.sort(sortFunc);\n    /** @type {Standing[][]} */\n    const standingsTree = [];\n    let runningRank = 0;\n    standingsFlat.forEach(function (standing, i, orig) {\n        if (i !== 0) { // we can't compare the first player with a previous one\n            const prevPlayer = orig[i - 1];\n            if (!areScoresEqual(standing, prevPlayer)) {\n                runningRank += 1;\n            }\n        }\n        if (!standingsTree[runningRank]) {\n            standingsTree[runningRank] = [];\n        }\n        standingsTree[runningRank].push(standing);\n    });\n    return [standingsTree, tieBreaks.map((m) => m.name)];\n}\nObject.freeze(calcStandings);\nexport {calcStandings};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number?} 0 for white, 1 for black, null if no color history\n */\nfunction dueColor(playerId, roundList, roundId = null) {\n    if (!roundList[roundId - 1]) {\n        return null;\n    }\n    let color = 0;\n    let prevColor = playerMatchColor(\n        playerId,\n        roundList[roundId - 1]\n    );\n    if (prevColor === 0) {\n        color = 1;\n    }\n    return color;\n}\n\n/**\n * @param {number} playerId\n * @param {Round[]} roundList\n * @param {number} roundId\n * @param {Player[]} playerList\n * @param {number[][]} avoidList\n * @returns {PlayerData}\n */\nfunction genPlayerData(playerId, playerList, avoidList, roundList, roundId) {\n    const player = getPlayerById(playerList, playerId);\n    return {\n        data: player,\n        rating: player.rating,\n        id: playerId,\n        score: playerScore(playerId, roundList, roundId),\n        dueColor: dueColor(playerId, roundList, roundId),\n        colorBalance: playerColorBalance(playerId, roundList, roundId),\n        opponentHistory: getPlayersByOpponent(playerId, roundList, null),\n        upperHalf: false,\n        avoidList: getPlayerAvoidList(playerId, avoidList),\n        hasHadBye: hasHadBye(playerId, roundList, roundId)\n    };\n}\nObject.freeze(genPlayerData);\nexport {genPlayerData};\n","// @ts-check\nimport {firstBy} from \"thenby\";\nimport splitAt from \"ramda/src/splitAt\";\nimport last from \"ramda/src/last\";\nimport blossom from \"edmonds-blossom\";\nimport {dummyPlayer} from \"../data/player\";\nimport {genPlayerData} from \"./scoring\";\n/**\n * @typedef {import(\"./\").PlayerData} PlayerData\n */\n\n/**\n * TODO: These probably need to be tweaked a lot.\n */\n/**\n * @constant avoidMeetingTwicePriority The weight given to avoid players\n * meeting twice. This same weight is given to avoid matching players on each\n * other's \"avoid\" list. This is the highest priority. (USCF § 27A1)\n * @type {number}\n */\nconst avoidMeetingTwicePriority = 20;\n/**\n * @constant sameScoresPriority The weight given to match players with\n * equal scores. This gets muliplied against a ratio taken from the distance\n * between each player's score. For example, if the tournament has players\n * scoring 0, 1, 2, and 3, and if a player scoring 1 gets compared with a\n * player scoring 3, then their `sameScoresPriority` will be reduced by 50%.\n * (`(3 - 1) / 4 = 0.5`) (USCF § 27A2)\n * @type {number}\n */\nconst sameScoresPriority = 16;\n/**\n * @constant differentHalfPriority The weight given to match players in lower\n * versus upper halves. This is only applied to players being matched within\n * the same score group. (USCF § 27A3)\n * @type {number}\n */\nconst differentHalfPriority = 2;\n/**\n * @constant differentDueColorPriority The weight given to match players with\n * opposite due colors. (USCF § 27A4 and § 27A5)\n * @type {number}\n */\nconst differentDueColorPriority = 1;\n// /** @type {number} */\n// const maxPriority = (\n//     avoidMeetingTwicePriority\n//     + sameScoresPriority\n//     + differentHalfPriority\n//     + differentDueColorPriority\n// );\n\n\n/**\n * Create an array of blossom-compatible weighted matchups. This returns\n * an array of each potential match, formatted like so: [idOfPlayer1,\n * idOfPlayer2, priority]. A higher priority means a more likely matchup.\n * @param {PlayerData} player1\n * @param {PlayerData} player2\n * @param {number[]} scoreList\n * @returns {number}\n */\nfunction calcPairIdeal(player1, player2, scoreList) {\n    let priority = 0;\n    let scoreDiff;\n    const metBefore = player1.opponentHistory.includes(player2.id);\n    const mustAvoid = player1.avoidList.includes(player2.id);\n    if (!metBefore && !mustAvoid) {\n        priority += avoidMeetingTwicePriority;\n    }\n    // Calculate the \"distance\" between their scores and multiply that\n    // against the `sameScoresPriority` constant.\n    scoreDiff = Math.abs(\n        scoreList.indexOf(player1.score)\n        - scoreList.indexOf(player2.score)\n    );\n    scoreDiff = (scoreList.length - scoreDiff) / scoreList.length;\n    priority += sameScoresPriority * scoreDiff;\n    // Only include `differentHalfPriority` if they're in the same\n    // score group.\n    if (player1.score === player2.score) {\n        if (player1.upperHalf !== player2.upperHalf) {\n            priority += differentHalfPriority;\n        }\n    }\n    if (player1.dueColor === null) {\n        priority += differentDueColorPriority;\n    } else if (player1.dueColor !== player2.dueColor) {\n        priority += differentDueColorPriority;\n    }\n    return Math.ceil(priority);\n}\nObject.freeze(calcPairIdeal);\nexport {calcPairIdeal};\n\n/**\n * Creates pairings according to the rules specified in USCF § 27, § 28,\n * and § 29. This is a work in progress and does not account for all of the\n * rules yet.\n * @param {object[][]} roundList\n * @param {number} roundId\n * @param {number[]} players\n * @param {object[]} playerList\n * @param {number[][]} avoidList\n */\nfunction pairPlayers(players, roundId, roundList, playerList, avoidList) {\n    /** @type {number[]} */\n    let byeMatch;\n    /** @type {number[][]} */\n    let potentialMatches;\n    /** @type {Number[][]} */\n    let matches;\n    /** @type {number[]} */\n    let blossomResults;\n    /** @type {[PlayerData, PlayerData, number][]} */\n    let reducedResults;\n    /** @type {number[]} */\n    let scoreList;\n    /** @type {PlayerData[]} */\n    let playerData = players.map((playerId) => (\n        genPlayerData(playerId, playerList, avoidList, roundList, roundId)\n    ));\n    scoreList = Array.from(new Set(playerData.map((p) => p.score)));\n    scoreList.sort();\n    // Sort the data so matchups default to order by score and rating.\n    playerData.sort(\n        firstBy((p) => p.score, -1).thenBy((p) => p.rating, -1)\n    );\n    // If there's an odd number of players, time to assign a bye.\n    if (playerData.length % 2 !== 0) {\n        // Assign a bye to the lowest-rated player in the lowest score group.\n        // (USCF § 29L2.)\n        // filter out players who have had a bye already.\n        let byePlayerData = last(playerData.filter((p) => !p.hasHadBye));\n        // In the impossible situation that *everyone* has played a bye round\n        // previously, then just pick the last player.\n        if (!byePlayerData) {\n            byePlayerData = last(playerData);\n        }\n        byeMatch = [byePlayerData.id, dummyPlayer.id];\n        // Remove the bye'd player from the list so they won't be matched again.\n        playerData = playerData.filter((p) => p !== byePlayerData);\n    }\n    // Determine which players are in the upper and lower halves of their score\n    // groups.\n    scoreList.forEach(function (score) {\n        let playersWithScore = playerData.filter((pd) => pd.score === score);\n        playersWithScore.sort((pd) => pd.rating).reverse();\n        if (playersWithScore.length > 1) {\n            splitAt(\n                playersWithScore.length / 2,\n                playersWithScore\n            )[0].forEach(function (playerDatum) {\n                playerDatum.upperHalf = true;\n            });\n        }\n    });\n    // Turn the data into blossom-compatible input.\n    potentialMatches = playerData.reduce(\n        function (acc, player1, ignore, src) {\n            const playerMatches = src.filter(\n                (player) => player !== player1\n            ).map(\n                (player2) => [\n                    player1.id,\n                    player2.id,\n                    calcPairIdeal(player1, player2, scoreList)\n                ]\n            );\n            return acc.concat(playerMatches);\n        },\n        []\n    );\n    // Feed all of the potential matches to Edmonds-blossom and let the\n    // algorithm work its magic. This returns an array where each index is the\n    // ID of one player and each value is the ID of the matched player.\n    blossomResults = blossom(potentialMatches);\n    // Translate those IDs into actual pairs of players.\n    reducedResults = blossomResults.reduce(\n        function (acc, p1Id, p2Id) {\n            // Filter out unmatched players. Even though we removed the byes\n            // from the list, blossom will automatically include their missing\n            // IDs in its results.\n            if (p1Id !== -1) {\n                const p1 = playerData.filter((p) => p.id === p1Id)[0];\n                const p2 = playerData.filter((p) => p.id === p2Id)[0];\n                const ideal = potentialMatches.filter(\n                    (pair) => pair[0] === p1Id && pair[1] === p2Id\n                )[0][2];\n                const matched = acc.map((pair) => pair[0]);\n                // Blossom returns a lot of redundant matches. Check that this\n                // matchup wasn't already added.\n                if (!matched.includes(p1) && !matched.includes(p2)) {\n                    acc.push([p1, p2, ideal]);\n                }\n            }\n            return acc;\n        },\n        []\n    );\n    // Sort by net score and rating for board placement.\n    reducedResults.sort(\n        firstBy(\n            /** @param {[PlayerData, PlayerData, number]} pair */\n            (pair) => pair[0].score + pair[1].score,\n            -1\n        ).thenBy(\n            /** @param {[PlayerData, PlayerData, number]} pair */\n            (pair) => pair[0].rating + pair[1].rating,\n            -1\n        )\n    );\n    // Turn the results into new match objects.\n    matches = reducedResults.map(\n        function (pair) {\n            const player1 = pair[0];\n            const player2 = pair[1];\n            // const ideal = pair[2];\n            const match = [player1.id, player2.id];\n            if (player1.colorBalance < player2.colorBalance) {\n                match.reverse();\n            }\n            return match;\n        }\n    );\n    // The bye match always gets added last so as not to affect the numbering.\n    if (byeMatch) {\n        matches.push(byeMatch);\n    }\n    return matches;\n}\nexport default Object.freeze(pairPlayers);\n","// @ts-check\nimport curry from \"ramda/src/curry\";\nimport {BLACK, WHITE} from \"../data/constants\";\nimport createMatch from \"../data/match\";\nimport {hasHadBye} from \"../pairing-scoring/scoring\";\nimport {dummyPlayer, getPlayerById} from \"../data/player\";\nimport pairPlayers from \"../pairing-scoring/pairing\";\nimport {getById} from \"../data/utility\";\n/**\n* @typedef {import(\"./dispatch\").GlobalState} GlobalState\n*/\n\n/**\n * @param {GlobalState} state\n * @param {number} tourneyId\n * @param {number} roundId\n * @param {number[]} unPairedPlayers\n */\nfunction autoPair(state, tourneyId, roundId, unPairedPlayers) {\n    const tourney = state.tourneys[tourneyId];\n    const roundList = tourney.roundList;\n    const getPlayer = curry(getPlayerById)(state.players);\n    const nextBye = tourney.byeQueue.filter(\n        (pId) => !hasHadBye(pId, roundList)\n    )[0];\n    let byeMatch = null;\n    if (nextBye >= 0) {\n        byeMatch = createMatch({\n            id: nextBye + \"-\" + dummyPlayer.id,\n            players: [nextBye, dummyPlayer.id],\n            origRating: [\n                getPlayer(nextBye).rating,\n                dummyPlayer.rating\n            ],\n            newRating: [\n                getPlayer(nextBye).rating,\n                dummyPlayer.rating\n            ]\n        });\n        unPairedPlayers = unPairedPlayers.filter((pId) => pId !== nextBye);\n    }\n    const pairs = pairPlayers(\n        unPairedPlayers,\n        roundId,\n        roundList,\n        state.players,\n        state.avoid\n    );\n    const newMatchList = pairs.map(\n        (pair) => createMatch({\n            id: pair.join(\"-\"),\n            players: [pair[WHITE], pair[BLACK]],\n            origRating: [\n                getPlayer(pair[WHITE]).rating,\n                getPlayer(pair[BLACK]).rating\n            ],\n            newRating: [\n                getPlayer(pair[WHITE]).rating,\n                getPlayer(pair[BLACK]).rating\n            ]\n        })\n    );\n    if (byeMatch) {\n        newMatchList.push(byeMatch);\n    }\n    // this covers manual bye matches and auto-paired bye matches\n    newMatchList.forEach(function (match) {\n        const dummy = match.players.indexOf(dummyPlayer.id);\n        if (dummy === BLACK) {\n            match.result[WHITE] = state.options.byeValue;\n        }\n        if (dummy === WHITE) {\n            match.result[BLACK] = state.options.byeValue;\n        }\n    });\n    return newMatchList;\n}\nObject.freeze(autoPair);\nexport {autoPair};\n\n/**\n * @param {GlobalState} state\n * @param {number[]} pair\n */\nfunction manualPair(state, pair) {\n    const getPlayer = curry(getPlayerById)(state.players);\n    const match = createMatch({\n        id: pair.join(\"-\"),\n        players: [pair[WHITE], pair[BLACK]],\n        origRating: [\n            getPlayer(pair[WHITE]).rating,\n            getPlayer(pair[BLACK]).rating\n        ],\n        newRating: [\n            getPlayer(pair[WHITE]).rating,\n            getPlayer(pair[BLACK]).rating\n        ]\n    });\n    if (pair[WHITE] === dummyPlayer.id) {\n        match.result = [state.options.byeValue, 0];\n    }\n    if (pair[BLACK] === dummyPlayer.id) {\n        match.result = [0, state.options.byeValue];\n    }\n    return match;\n}\nObject.freeze(manualPair);\nexport {manualPair};\n\n/**\n * @param {GlobalState} state\n * @param {number} tourneyId\n * @param {number} roundId\n * @param {number} matchId\n */\nfunction swapColors(state, tourneyId, roundId, matchId) {\n    const round = state.tourneys[tourneyId].roundList[roundId];\n    const match = getById(round, matchId);\n    match.players.reverse();\n    match.origRating.reverse();\n    match.newRating.reverse();\n}\nObject.freeze(swapColors);\nexport {swapColors};\n","// @ts-check\nimport {createContext} from \"react\";\nimport last from \"ramda/src/last\";\nimport curry from \"ramda/src/curry\";\nimport arrayMove from \"array-move\";\nimport {createPlayer, getPlayerById} from \"../data/player\";\nimport {getById} from \"../data/utility\";\nimport defaultOptions from \"./demo-options.json\";\nimport defaultPlayers from \"./demo-players.json\";\nimport defaultTourneyList from \"./demo-tourney.json\";\nimport {autoPair, manualPair, swapColors} from \"./match-functions\";\n/**\n * @typedef {import(\"./dispatch\").Action} Action\n * @typedef {import(\"./dispatch\").GlobalState} GlobalState\n */\n\n/**\n * @type {GlobalState}\n */\nconst defaultData = {\n    options: defaultOptions,\n    players: defaultPlayers.playerList.map((p) => createPlayer(p)),\n    avoid: defaultPlayers.avoidList,\n    // @ts-ignore\n    tourneys: defaultTourneyList\n};\nexport {defaultData};\n\n/**\n * @param {GlobalState} state\n * @param {Action} action\n * @returns {GlobalState}\n */\nfunction dataReducer(state, action) {\n    const {avoid, players, options, tourneys} = state;\n    const getPlayer = curry(getPlayerById)(players);\n    switch (action.type) {\n    // Options\n    case \"SET_BYE_VALUE\":\n        options.byeValue = action.byeValue;\n        return Object.assign({}, state);\n    // Players\n    case \"ADD_PLAYER\":\n        return Object.assign(\n            {},\n            state,\n            {players: players.concat([action.newPlayer])}\n        );\n    case \"DEL_PLAYER\":\n        return Object.assign(\n            {},\n            state,\n            {\n                players: players.filter((p) => p.id !== action.id),\n                avoid: avoid.filter(\n                    (pair) => !pair.includes(action.id)\n                )\n            }\n        );\n    case \"SET_PLAYER_MATCHCOUNT\":\n        Object.assign(\n            players[players.map((p) => p.id).indexOf(action.id)],\n            {matchCount: action.matchCount}\n        );\n        return Object.assign({}, state);\n    case \"SET_PLAYER_RATING\":\n        Object.assign(\n            players[players.map((p) => p.id).indexOf(action.id)],\n            {rating: action.rating}\n        );\n        return Object.assign({}, state);\n    // Avoid\n    case \"ADD_AVOID_PAIR\":\n        return Object.assign(\n            {},\n            state,\n            {avoid: avoid.concat([action.pair])}\n        );\n    case \"DEL_AVOID_PAIR\":\n        return Object.assign(\n            {},\n            state,\n            {avoid: avoid.filter(\n                (pair) => !(\n                    pair.includes(action.pair[0])\n                    && pair.includes(action.pair[1])\n                )\n            )}\n        );\n    // Tournaments\n    case \"ADD_TOURNEY\":\n        return Object.assign(\n            {},\n            state,\n            {tourneys: tourneys.concat([action.tourney])}\n        );\n    case \"DEL_TOURNEY\":\n        return Object.assign(\n            {},\n            state,\n            {tourneys: tourneys.filter((ignore, i) => i !== action.index)}\n        );\n    case \"ADD_ROUND\":\n        tourneys[action.tourneyId].roundList = (\n            tourneys[action.tourneyId].roundList.concat([[]])\n        );\n        return Object.assign({}, state);\n    case \"DEL_LAST_ROUND\":\n        // if a match has been scored, then reset it.\n        last(\n            tourneys[action.tourneyId].roundList\n        ).forEach(function (match) {\n            if (match.result.reduce((a, b) => a + b) !== 0) {\n                match.players.forEach(function (pId, color) {\n                    getPlayer(pId).matchCount -= 1;\n                    getPlayer(pId).rating = (\n                        match.origRating[color]\n                    );\n                });\n            }\n        });\n        tourneys[action.tourneyId].roundList = (\n            tourneys[action.tourneyId].roundList.slice(\n                0,\n                tourneys[action.tourneyId].roundList.length - 1\n            )\n        );\n        return Object.assign({}, state);\n    case \"ADD_TIEBREAK\":\n        tourneys[action.tourneyId].tieBreaks = (\n            tourneys[action.tourneyId].tieBreaks.concat([action.id])\n        );\n        return Object.assign({}, state);\n    case \"DEL_TIEBREAK\":\n        tourneys[action.tourneyId].tieBreaks = (\n            tourneys[action.tourneyId].tieBreaks.filter(\n                (id) => id !== action.id\n            )\n        );\n        return Object.assign({}, state);\n    case \"MOVE_TIEBREAK\":\n        tourneys[action.tourneyId].tieBreaks = arrayMove(\n            tourneys[action.tourneyId].tieBreaks,\n            action.oldIndex,\n            action.newIndex\n        );\n        return Object.assign({}, state);\n    case \"SET_TOURNEY_PLAYERS\":\n        tourneys[action.tourneyId].players = action.players;\n        return Object.assign({}, state);\n    case \"SET_BYE_QUEUE\":\n        tourneys[action.tourneyId].byeQueue = action.byeQueue;\n        return Object.assign({}, state);\n    case \"AUTO_PAIR\":\n        tourneys[action.tourneyId].roundList[action.roundId] = (\n            tourneys[action.tourneyId].roundList[action.roundId].concat(\n                autoPair(\n                    state,\n                    action.tourneyId,\n                    action.roundId,\n                    action.unpairedPlayers\n                )\n            )\n        );\n        return Object.assign({}, state);\n    case \"MANUAL_PAIR\":\n        tourneys[action.tourneyId].roundList[action.roundId] = (\n            tourneys[action.tourneyId].roundList[action.roundId].concat([\n                manualPair(\n                    state,\n                    action.pair\n                )\n            ])\n        );\n        return Object.assign({}, state);\n    case \"SET_MATCH_RESULT\":\n        getById(\n            tourneys[action.tourneyId].roundList[action.roundId],\n            action.matchId\n        ).result = action.result;\n        getById(\n            tourneys[action.tourneyId].roundList[action.roundId],\n            action.matchId\n        ).newRating = action.newRating;\n        return Object.assign({}, state);\n    case \"DEL_MATCH\":\n        tourneys[action.tourneyId].roundList[action.roundId] = (\n            tourneys[action.tourneyId].roundList[action.roundId].filter(\n                (match) => match.id !== action.matchId\n            )\n        );\n        return Object.assign({}, state);\n    case \"SWAP_COLORS\":\n        swapColors(state, action.tourneyId, action.roundId, action.matchId);\n        return Object.assign({}, state);\n    case \"MOVE_MATCH\":\n        tourneys[action.tourneyId].roundList[action.roundId] = arrayMove(\n            tourneys[action.tourneyId].roundList[action.roundId],\n            action.oldIndex,\n            action.newIndex\n        );\n        return Object.assign({}, state);\n    default:\n        throw new Error(\"Unexpected action type\");\n    }\n}\nObject.freeze(dataReducer);\nexport {dataReducer};\n\nconst DataContext = createContext(null);\nexport {DataContext};\n","// @ts-check\nimport React, {useReducer} from \"react\";\nimport {dataReducer, defaultData, DataContext} from \"../state/global-state\";\n\n/**\n * @param {Object} props\n * @param {JSX.Element | string} [props.children]\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\n */\nexport function Button({children, action}\n) {\n    return (\n        <button onClick={action}>\n            {children}\n        </button>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\n */\nexport const BackButton = ({action}) => (\n    <Button action={action}>&lt; Back</Button>\n);\n\n/**\n * @param {Object} props\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\n */\nexport const OpenButton = ({action}) => (\n    <Button action={action}>Open &gt;</Button>\n);\n\nexport const InfoButton = ({action}) => <Button action={action}>Info</Button>;\n\n/**\n * @param {*[]} arr\n * @param {number} pos\n * @param {number} dir\n */\nexport function moveArrItem(arr, pos, dir) {\n    const newPos = pos + dir;\n    const newArr = [...arr];\n    const movedMethod = newArr.splice(pos, 1)[0];\n    newArr.splice(newPos, 0, movedMethod);\n    return newArr;\n}\n\n/**\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {React.CSSProperties} [props.style]\n */\nexport function Panel({children, style}) {\n    return (\n        <div style={{...style}}>\n            {children}\n        </div>\n    );\n}\n\n/**\n *\n * @param {object} props\n */\nexport function PanelContainer({children}) {\n    return (\n        <div style={{display: \"flex\"}}>\n            {React.Children.map(children, (child) => child)}\n        </div>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {React.ReactNode} props.children\n */\nexport function TestApp({children}) {\n    const [data, dispatch] = useReducer(dataReducer, defaultData);\n    return (\n        <DataContext.Provider value={{data, dispatch}}>\n            {children}\n        </DataContext.Provider>\n    );\n}\n","// @ts-check\n/**\n * @typedef {import(\"./index\").Tournament} Tournament\n */\nfunction createTournament(importObj) {\n    /** @type {Tournament} */\n    const tourney = {\n        name: importObj.name || \"\",\n        tieBreaks: importObj.tieBreaks || [0, 1, 2, 3],\n        byeQueue: importObj.byeQueue || [],\n        players: importObj.players || [],\n        roundList: importObj.roundList || []\n    };\n    return tourney;\n}\nexport default Object.freeze(createTournament);\n","// @ts-check\nimport React, {useState, useContext} from \"react\";\nimport {Menu, MenuList, MenuButton, MenuItem} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport numeral from \"numeral\";\nimport curry from \"ramda/src/curry\";\nimport {InfoButton, PanelContainer, Panel, BackButton} from \"../utility\";\nimport {getPlayerById, calcNewRatings, dummyPlayer} from \"../../data/player\";\nimport {genPlayerData} from \"../../pairing-scoring/scoring\";\nimport {BLACK, WHITE} from \"../../data/constants\";\nimport {getById, getIndexById} from \"../../data/utility\";\nimport {DataContext} from \"../../state/global-state\";\nimport style from \"./round.module.css\";\n\n/**\n * @param {Object} props\n * @param {number} props.roundId\n * @param {number} props.tourneyId\n */\nexport default function Round({roundId, tourneyId}) {\n    const {data, dispatch} = useContext(DataContext);\n    const getPlayer = curry(getPlayerById)(data.players);\n    const tourney = data.tourneys[tourneyId];\n    const matchList = tourney.roundList[roundId];\n    /** @type {number} */\n    const defaultMatch = null;\n    const [selectedMatch, setSelectedMatch] = useState(defaultMatch);\n    /**\n     * @param {number} matchId\n     * @param {[number, number]} result\n     */\n    function setMatchResult(matchId, result) {\n        const match = getById(tourney.roundList[roundId], matchId);\n        const white = getPlayer(match.players[WHITE]);\n        const black = getPlayer(match.players[BLACK]);\n        const newRating = calcNewRatings(\n            match.origRating,\n            [white.matchCount, black.matchCount],\n            result\n        );\n        dispatch({\n            type: \"SET_PLAYER_RATING\",\n            id: white.id,\n            rating: newRating[WHITE]\n        });\n        dispatch({\n            type: \"SET_PLAYER_RATING\",\n            id: black.id,\n            rating: newRating[BLACK]\n        });\n        // if the result hasn't been scored yet, increment the matchCount\n        if (match.result.reduce((a, b) => a + b) === 0) {\n            dispatch({\n                type: \"SET_PLAYER_MATCHCOUNT\",\n                id: white.id,\n                matchCount: white.matchCount + 1\n            });\n            dispatch({\n                type: \"SET_PLAYER_MATCHCOUNT\",\n                id: black.id,\n                matchCount: black.matchCount + 1\n            });\n        }\n        // setPlayerList([...playerList]);\n        dispatch({\n            type: \"SET_MATCH_RESULT\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            matchId: matchId,\n            result: result,\n            newRating: newRating\n        });\n    }\n    /** @param {number} matchId */\n    function unMatch(matchId) {\n        const match = getById(tourney.roundList[roundId], matchId);\n        if (match.result.reduce((a, b) => a + b) !== 0) {\n            // checks if the match has been scored yet & resets the players'\n            // records\n            match.players.forEach(function (pId, color) {\n                dispatch({\n                    type: \"SET_PLAYER_MATCHCOUNT\",\n                    id: pId,\n                    matchCount: getPlayer(pId).matchCount - 1\n                });\n                dispatch({\n                    type: \"SET_PLAYER_RATING\",\n                    id: pId,\n                    rating: match.origRating[color]\n                });\n            });\n        }\n        dispatch({\n            type: \"DEL_MATCH\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            matchId: matchId\n        });\n        setSelectedMatch(null);\n    }\n    function swapColors(matchId) {\n        dispatch({\n            type: \"SWAP_COLORS\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            matchId: matchId\n        });\n    }\n    /**\n     * @param {number} matchId\n     * @param {number} direction\n     */\n    function moveMatch(matchId, direction) {\n        const matchesRef = data.tourneys[tourneyId].roundList[roundId];\n        const mIndex = getIndexById(matchesRef, matchId);\n        dispatch({\n            type: \"MOVE_MATCH\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            matchId: matchId,\n            oldIndex: mIndex,\n            newIndex: mIndex + direction\n        });\n    }\n    return (\n        <PanelContainer>\n            <Panel>\n                <div className=\"toolbar\">\n                    <button\n                        className=\"danger\"\n                        onClick={() => unMatch(selectedMatch)}\n                        disabled={selectedMatch === null}\n                    >\n                        Unmatch\n                    </button>\n                    <button\n                        onClick={() => swapColors(selectedMatch)}\n                        disabled={selectedMatch === null}\n                    >\n                        Swap colors\n                    </button>\n                    <button\n                        onClick={() => moveMatch(selectedMatch, -1)}\n                        disabled={selectedMatch === null}\n                    >\n                        Move up\n                    </button>\n                    <button\n                        onClick={() => moveMatch(selectedMatch, 1)}\n                        disabled={selectedMatch === null}\n                    >\n                        Move down\n                    </button>\n                </div>\n                <table className={style.table}>\n                    <caption>Round {roundId + 1} results</caption>\n                    <tbody>\n                        <tr>\n                            <th className=\"row__id\" scope=\"col\">#</th>\n                            <th className=\"row__player\" scope=\"col\">White</th>\n                            <th className=\"row__player\" scope=\"col\">Black</th>\n                            <th className=\"row__result\" scope=\"col\">Result</th>\n                            <th className=\"row__controls\" scope=\"col\">\n                                Controls\n                            </th>\n                        </tr>\n                        {matchList.map((match, pos) => (\n                            <MatchRow\n                                key={match.id}\n                                pos={pos}\n                                match={match}\n                                setMatchResult={setMatchResult}\n                                selectedMatch={selectedMatch}\n                                setSelectedMatch={setSelectedMatch}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </Panel>\n            <Panel>\n                {selectedMatch !== null && (\n                    <PanelContainer>\n                        <Panel>\n                            <PlayerMatchInfo\n                                match={getById(matchList, selectedMatch)}\n                                color={0}\n                                tourneyId={tourneyId}\n                                roundId={roundId}\n                            />\n                        </Panel>\n                        <Panel>\n                            <PlayerMatchInfo\n                                match={getById(matchList, selectedMatch)}\n                                color={1}\n                                tourneyId={tourneyId}\n                                roundId={roundId}\n                            />\n                        </Panel>\n                    </PanelContainer>\n                )}\n                <PairPicker\n                    tourneyId={tourneyId}\n                    roundId={roundId}\n                />\n            </Panel>\n        </PanelContainer>\n    );\n}\n\nfunction MatchRow({\n    pos,\n    match,\n    setMatchResult,\n    selectedMatch,\n    setSelectedMatch\n}) {\n    const {data} = useContext(DataContext);\n    const getPlayer = curry(getPlayerById)(data.players);\n    const whiteWon = match.result[0] > match.result[1];\n    const blackWon = match.result[1] > match.result[0];\n    const draw = match.result.every((x) => x === 0.5);\n    const whiteName = (\n        getPlayer(match.players[0]).firstName\n        + \" \"\n        + getPlayer(match.players[0]).lastName\n    );\n    const blackName = (\n        getPlayer(match.players[1]).firstName\n        + \" \"\n        + getPlayer(match.players[1]).lastName\n    );\n    return (\n        <tr>\n            <th className=\"table__number row__id\" scope=\"row\">{pos + 1}</th>\n            <td className=\"table__player row__player\">\n                {whiteName}{\" \"}\n                {whiteWon && (\n                    <span role=\"img\" aria-label=\"Winner\">\n                        🏆\n                    </span>\n                )}\n            </td>\n            <td className=\"table__player row__player\">\n                {blackName}{\" \"}\n                {blackWon && (\n                    <span role=\"img\" aria-label=\"Winner\">\n                        🏆\n                    </span>\n                )}\n            </td>\n            <td className=\"row__result\">\n                {whiteWon && \"White won\"}\n                {blackWon && \"Black won\"}\n                {draw && \"Draw\"}\n            </td>\n            <td className=\"data__input row__controls\">\n                <Menu>\n                    <MenuButton\n                        disabled={match.players.includes(dummyPlayer.id)}\n                    >\n                        <VisuallyHidden>\n                            Set result for {whiteName} versus {blackName}\n                        </VisuallyHidden>\n                        <span aria-hidden>Set result ▾</span>\n                    </MenuButton>\n                    <MenuList>\n                        <MenuItem\n                            onSelect={() => setMatchResult(match.id, [1, 0])}\n                        >\n                            {whiteName} won\n                        </MenuItem>\n                        <MenuItem\n                            onSelect={() => setMatchResult(match.id, [0, 1])}\n                        >\n                            {blackName} won\n                        </MenuItem>\n                        <MenuItem\n                            onSelect={() =>\n                                setMatchResult(match.id, [0.5, 0.5])\n                            }\n                        >\n                            Draw\n                        </MenuItem>\n                    </MenuList>\n                </Menu>{\" \"}\n                {selectedMatch !== match.id ? (\n                    <InfoButton action={() => setSelectedMatch(match.id)} />\n                ) : (\n                    <BackButton action={() => setSelectedMatch(null)} />\n                )}\n            </td>\n        </tr>\n    );\n}\n\nfunction PlayerMatchInfo({match, color, tourneyId, roundId}) {\n    const {data} = useContext(DataContext);\n    // const playerList = data.players;\n    const getPlayer = curry(getPlayerById)(data.players);\n    const playerData = genPlayerData(\n        match.players[color],\n        data.players,\n        data.avoid,\n        data.tourneys[tourneyId].roundList,\n        roundId\n    );\n    const colorBalance = playerData.colorBalance;\n    let prettyBalance = \"Even\";\n    if (colorBalance < 0) {\n        prettyBalance = \"White +\" + Math.abs(colorBalance);\n    } else if (colorBalance > 0) {\n        prettyBalance = \"Black +\" + colorBalance;\n    }\n    return (\n        <dl className=\"player-card\">\n            <h3>\n                {playerData.data.firstName} {playerData.data.lastName}\n            </h3>\n            <dt>Score</dt>\n            <dd>{playerData.score}</dd>\n            <dt>Rating</dt>\n            <dd>\n                {match.origRating[color]} (\n                {numeral(\n                    match.newRating[color] - match.origRating[color]\n                ).format(\"+0\")}\n                )\n            </dd>\n            <dt>Color balance</dt>\n            <dd>{prettyBalance}</dd>\n            <dt>Has had a bye round</dt>\n            <dd>{playerData.hasHadBye ? \"Yes\" : \"No\"}</dd>\n            <dt>Opponent history</dt>\n            <dd>\n                <ol>\n                    {playerData.opponentHistory.map((opId) => (\n                        <li key={opId}>\n                            {getPlayer(opId).firstName}{\" \"}\n                            {getPlayer(opId).lastName}\n                        </li>\n                    ))}\n                </ol>\n            </dd>\n            <dt>Players to avoid</dt>\n            <dd>\n                <ol>\n                    {playerData.avoidList.map((pId) => (\n                        <li key={pId}>\n                            {getPlayer(pId).firstName} {getPlayer(pId).lastName}\n                        </li>\n                    ))}\n                </ol>\n            </dd>\n        </dl>\n    );\n}\n\nfunction PairPicker({tourneyId, roundId}) {\n    const {data, dispatch} = useContext(DataContext);\n    const getPlayer = curry(getPlayerById)(data.players);\n    const tourney = data.tourneys[tourneyId];\n    const matchList = tourney.roundList[roundId];\n    /** @type {number[]} */\n    const defaultPlayers = [];\n    const [selectedPlayers, setSelectedPlayers] = useState(defaultPlayers);\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\n    function selectPlayer(event) {\n        const pId = Number(event.target.value);\n        if (event.target.checked) {\n            setSelectedPlayers(function (prevState) {\n                // stop React from adding an ID twice in a row\n                if (!prevState.includes(pId)) {\n                    prevState.push(pId);\n                }\n                // ensure that only the last two players stay selected.\n                return prevState.slice(-2);\n            });\n        } else {\n            setSelectedPlayers(selectedPlayers.filter((id) => id !== pId));\n        }\n    }\n    const matched = matchList.reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    );\n    const unMatched = tourney.players.filter((pId) => !matched.includes(pId));\n    return (\n        <div>\n            <h3>Unmatched players</h3>\n            <ul>\n                {unMatched.map((pId) => (\n                    <li key={pId}>\n                        <input\n                            id={pId}\n                            type=\"checkbox\"\n                            checked={selectedPlayers.includes(pId)}\n                            value={pId}\n                            onChange={selectPlayer}\n                        />{\" \"}\n                        <label htmlFor={pId}>\n                            {getPlayer(pId).firstName} {getPlayer(pId).lastName}\n                        </label>\n                    </li>\n                ))}\n                {unMatched.length % 2 !== 0 && (\n                    <li>\n                        <input\n                            type=\"checkbox\"\n                            checked={selectedPlayers.includes(\n                                dummyPlayer.id\n                            )}\n                            value={dummyPlayer.id}\n                            onChange={selectPlayer}\n                        />\n                        {dummyPlayer.firstName} {dummyPlayer.lastName}\n                    </li>\n                )}\n            </ul>\n            <button\n                onClick={() => dispatch({\n                    type: \"MANUAL_PAIR\",\n                    tourneyId: tourneyId,\n                    roundId: roundId,\n                    pair: selectedPlayers\n                })}\n                disabled={selectedPlayers.length !== 2}\n            >\n                Pair checked\n            </button>{\" \"}\n            <button\n                onClick={() => dispatch({\n                    type: \"AUTO_PAIR\",\n                    tourneyId: tourneyId,\n                    roundId: roundId,\n                    unpairedPlayers: unMatched\n                })}\n                disabled={unMatched.length === 0}\n            >\n                Auto-pair\n            </button>\n        </div>\n    );\n}\n","import React, {useContext, useState} from \"react\";\nimport curry from \"ramda/src/curry\";\nimport {getPlayerById} from \"../../data/player\";\nimport {hasHadBye} from \"../../pairing-scoring/scoring\";\nimport {DataContext} from \"../../state/global-state\";\n\n/**\n * @param {Object} props\n * @param {number} props.tourneyId\n */\nexport default function PlayerSelect({tourneyId}) {\n    const {data, dispatch} = useContext(DataContext);\n    const getPlayer = curry(getPlayerById)(data.players);\n    const players = data.tourneys[tourneyId].players;\n    const tourney = data.tourneys[tourneyId];\n    const [isSelecting, setIsSelecting] = useState(players.length === 0);\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\n    function togglePlayer(event) {\n        const id = Number(event.target.value);\n        if (event.target.checked) {\n            dispatch({\n                type: \"SET_TOURNEY_PLAYERS\",\n                tourneyId: tourneyId,\n                players: players.concat([id])\n            });\n        } else {\n            dispatch({\n                type: \"SET_TOURNEY_PLAYERS\",\n                tourneyId: tourneyId,\n                players: players.filter((pId) => pId !== id)\n            });\n        }\n    }\n    if (isSelecting) {\n        return (\n            <table>\n                <caption>Select players</caption>\n                <thead>\n                    <tr>\n                        <th>First name</th>\n                        <th>Last name</th>\n                        <th />\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.players.map((p) => (\n                        <tr key={p.id}>\n                            <td>{p.firstName}</td>\n                            <td>{p.lastName}</td>\n                            <td>\n                                <input\n                                    type=\"checkbox\"\n                                    value={p.id}\n                                    checked={players.includes(p.id)}\n                                    onChange={togglePlayer}\n                                />\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n                <tfoot>\n                    <tr>\n                        <td colSpan={3}>\n                            <button\n                                onClick={() =>\n                                    dispatch({\n                                        type: \"SET_TOURNEY_PLAYERS\",\n                                        players: data.players.map((p) => p.id)\n                                    })\n                                }\n                            >\n                                Select all\n                            </button>\n                            <button\n                                onClick={() =>\n                                    dispatch({\n                                        type: \"SET_TOURNEY_PLAYERS\",\n                                        players: []\n                                    })\n                                }\n                            >\n                                Select none\n                            </button>\n                            <button onClick={() => setIsSelecting(false)}>\n                                Done\n                            </button>\n                        </td>\n                    </tr>\n                </tfoot>\n            </table>\n        );\n    } else {\n        return (\n            <div>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>First name</th>\n                            <th>Last name</th>\n                            <th />\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {players.map((pId) => (\n                            <tr\n                                key={pId}\n                                className={getPlayer(pId).type + \" player\"}\n                            >\n                                <td>{getPlayer(pId).firstName}</td>\n                                <td>{getPlayer(pId).lastName}</td>\n                                <td>\n                                    <button\n                                        onClick={() =>\n                                            dispatch({\n                                                type: \"SET_BYE_QUEUE\",\n                                                tourneyId: tourneyId,\n                                                // eslint-disable-next-line max-len\n                                                byeQueue: tourney.byeQueue.concat(\n                                                    [pId]\n                                                )\n                                            })\n                                        }\n                                        disabled={tourney.byeQueue.includes(\n                                            pId\n                                        )}\n                                    >\n                                        Bye signup\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                <button onClick={() => setIsSelecting(true)}>\n                    Edit player roster\n                </button>\n                <h3>Bye queue</h3>\n                <ol>\n                    {tourney.byeQueue.map((pId) => (\n                        <li\n                            key={pId}\n                            className={\n                                hasHadBye(pId, tourney.roundList)\n                                    ? \"disabled\"\n                                    : \"\"\n                            }\n                        >\n                            {getPlayer(pId).firstName}{\" \"}\n                            {getPlayer(pId).lastName}\n                            <button\n                                onClick={() =>\n                                    dispatch({\n                                        type: \"SET_BYE_QUEUE\",\n                                        tourneyId: tourneyId,\n                                        byeQueue: tourney.byeQueue.filter(\n                                            (id) => pId !== id\n                                        )\n                                    })\n                                }\n                            >\n                                Remove\n                            </button>\n                        </li>\n                    ))}\n                </ol>\n            </div>\n        );\n    }\n}\n","import React, {useState, useContext} from \"react\";\nimport curry from \"ramda/src/curry\";\nimport numeral from \"numeral\";\nimport dashify from \"dashify\";\nimport {PanelContainer, Panel} from \"../utility\";\nimport {dummyPlayer, getPlayerById} from \"../../data/player\";\nimport {DataContext} from \"state/global-state\";\nimport {calcStandings, tieBreakMethods} from \"../../pairing-scoring/scoring\";\nimport style from \"./scores.module.css\";\n\n// let's make a custom numeral format. I don't really know how this works.\nnumeral.register(\"format\", \"half\", {\n    regexps: {\n        format: /(1\\/2)/,\n        unformat: /(1\\/2)/\n    },\n    format: function (value, format, roundingFunction) {\n        let whole = Math.floor(value);\n        let remainder = value - whole;\n        if (remainder === 0.5) {\n            remainder = \"½\";\n        } else if (remainder === 0) {\n            remainder = \"\";\n        }\n        if (whole === 0 && remainder) {\n            whole = \"\";\n        }\n        // let output = numeral._.numberToFormat(value, format, roundingFunction);\n        // return output;\n        return String(whole) + remainder;\n    }\n});\n\n/**\n * @param {Object} props\n * @param {number} props.tourneyId\n */\nfunction ScoreList({tourneyId}) {\n    const {data} = useContext(DataContext);\n    const getPlayer = curry(getPlayerById)(data.players);\n    const tourney = data.tourneys[tourneyId];\n    const [standingTree, tbMethods] = calcStandings(\n        tourney.tieBreaks,\n        tourney.roundList\n    );\n    return (\n        <table className={style.table}>\n            <caption>Standings</caption>\n            <tbody>\n                <tr className={style.topHeader}>\n                    <th scope=\"col\">Rank</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Score</th>\n                    {tbMethods.map((name, i) => (\n                        <th key={i} scope=\"col\">\n                            {name}\n                        </th>\n                    ))}\n                </tr>\n                {standingTree.map((standingsFlat, rank) =>\n                    standingsFlat.filter(\n                        (p) => p.id !== dummyPlayer.id\n                    ).map((standing, j, src) => (\n                        <tr key={standing.id} className={style.row}>\n                            {j === 0 && ( // Only display the rank once\n                                <th\n                                    scope=\"row\"\n                                    className={\"table__number \" + style.rank}\n                                    rowSpan={src.length}\n                                >\n                                    {numeral(rank + 1).format(\"0o\")}\n                                </th>\n                            )}\n                            <th\n                                scope=\"row\"\n                                className={style.playerName}\n                                data-testid={rank}\n                            >\n                                {getPlayer(standing.id).firstName}&nbsp;\n                                {getPlayer(standing.id).lastName}\n                            </th>\n                            <td\n                                className=\"table__number\"\n                                data-testid={dashify(\n                                    getPlayer(standing.id).firstName\n                                    + getPlayer(standing.id).lastName\n                                    + \" score\"\n                                )}\n                            >\n                                {numeral(standing.score).format(\"1/2\")}\n                            </td>\n                            {standing.tieBreaks.map((score, i) => (\n                                <td\n                                    key={i}\n                                    className=\"table__number\"\n                                    data-testid={dashify(\n                                        getPlayer(standing.id).firstName\n                                        + getPlayer(standing.id).lastName\n                                        + tbMethods[i]\n                                    )}\n                                >\n                                    {numeral(score).format(\"1/2\")}\n                                </td>\n                            ))}\n                        </tr>\n                    ))\n                )}\n            </tbody>\n        </table>\n    );\n}\n\nfunction SelectTieBreaks({tourneyId}) {\n    const {data, dispatch} = useContext(DataContext);\n    const tourney = data.tourneys[tourneyId];\n    const [selectedTb, setSelectedTb] = useState(null);\n    /** @param {number} [id] */\n    function toggleTb(id = null) {\n        if (!id) {\n            id = selectedTb;\n        }\n        const tieBreaks = data.tourneys[tourneyId].tieBreaks;\n        if (tieBreaks.includes(id)) {\n            dispatch({type: \"DEL_TIEBREAK\", id: id, tourneyId: tourneyId});\n        } else {\n            dispatch({type: \"ADD_TIEBREAK\", id: id, tourneyId: tourneyId});\n        }\n    }\n    /** @param {number} direction */\n    function moveTb(direction) {\n        const index = data.tourneys[tourneyId].tieBreaks.indexOf(selectedTb);\n        dispatch({\n            type: \"MOVE_TIEBREAK\",\n            tourneyId: tourneyId,\n            oldIndex: index,\n            newIndex: index + direction\n        });\n    }\n    return (\n        <div>\n            <h3>Selected tiebreak methods</h3>\n            <div className=\"toolbar\">\n                <button\n                    onClick={() => toggleTb()}\n                    disabled={selectedTb === null}\n                >\n                    Toggle\n                </button>\n                <button\n                    onClick={() => moveTb(-1)}\n                    disabled={selectedTb === null}\n                >\n                    Move up\n                </button>\n                <button\n                    onClick={() => moveTb(1)}\n                    disabled={selectedTb === null}\n                >\n                    Move down\n                </button>\n                <button\n                    onClick={() => setSelectedTb(null)}\n                    disabled={selectedTb === null}\n                >\n                    Done\n                </button>\n            </div>\n            <ol>\n                {tourney.tieBreaks.map((id) => (\n                    <li key={id}>\n                        {tieBreakMethods[id].name}\n                        <button\n                            onClick={() =>\n                                selectedTb === id\n                                    ? setSelectedTb(null)\n                                    : setSelectedTb(id)\n                            }\n                            disabled={\n                                selectedTb !== null && selectedTb !== id\n                            }\n                        >\n                            {selectedTb === id ? \"Done\" : \"Edit\"}\n                        </button>\n                    </li>\n                ))}\n            </ol>\n            <h3>Available tiebreak methods</h3>\n            <ol>\n                {tieBreakMethods.map((method, i) => (\n                    <li key={i}>\n                        <span\n                            className={\n                                tourney.tieBreaks.includes(i)\n                                    ? \"enabled\"\n                                    : \"disabled\"\n                            }\n                        >\n                            {method.name}\n                        </span>\n                        {!tourney.tieBreaks.includes(i) && (\n                            <button onClick={() => toggleTb(i)}>\n                                Add\n                            </button>\n                        )}\n                    </li>\n                ))}\n            </ol>\n        </div>\n    );\n}\n\nconst Scores = ({tourneyId}) => (\n    <PanelContainer>\n        <Panel>\n            <ScoreList tourneyId={tourneyId}/>\n        </Panel>\n        <Panel>\n            <SelectTieBreaks tourneyId={tourneyId}/>\n        </Panel>\n    </PanelContainer>\n);\n\nexport default Scores;\n","// @ts-check\nimport React, {useContext, useState} from \"react\";\nimport {Tabs, TabList, Tab, TabPanels, TabPanel} from \"@reach/tabs\";\nimport {calcNumOfRounds} from \"../../data/utility\";\nimport Round from \"./round\";\nimport PlayerSelect from \"./player-select\";\nimport {DataContext} from \"../../state/global-state\";\nimport Scores from \"./scores\";\n\n/**\n * @param {Object} props\n * @param {number} props.tourneyId\n * @param {React.ReactNode} [props.backButton]\n */\nexport default function TournamentTabs({tourneyId, backButton}) {\n    const {data, dispatch} = useContext(DataContext);\n    const tourney = data.tourneys[tourneyId];\n    const players = tourney.players;\n    const [defaultTab, setDefaultTab] = useState(0);\n    function newRound() {\n        dispatch({type: \"ADD_ROUND\", tourneyId: tourneyId});\n        setDefaultTab(tourney.roundList.length + 1);\n    }\n    return (\n        <Tabs defaultIndex={defaultTab}>\n            <div>\n                {backButton}\n                <h2>{tourney.name}</h2>\n                Round progress: {tourney.roundList.length}/\n                {calcNumOfRounds(players.length)}{\" \"}\n                <button onClick={() => newRound()}>New round</button>{\" \"}\n                <button\n                    className=\"danger\"\n                    onClick={() =>\n                        dispatch({\n                            type: \"DEL_LAST_ROUND\",\n                            tourneyId: tourneyId\n                        })\n                    }\n                    disabled={tourney.roundList.length === 0}\n                >\n                    Remove last round\n                </button>\n            </div>\n            <TabList>\n                <Tab>Players</Tab>\n                <Tab>Scores</Tab>\n                {Object.keys(tourney.roundList).map((id) => (\n                    <Tab key={id}>Round {Number(id) + 1}</Tab>\n                ))}\n            </TabList>\n            <TabPanels>\n                <TabPanel>\n                    <PlayerSelect tourneyId={tourneyId} />\n                </TabPanel>\n                <TabPanel>\n                    <Scores tourneyId={tourneyId} />\n                </TabPanel>\n                {Object.keys(tourney.roundList).map((id) => (\n                    <TabPanel key={id}>\n                        <Round roundId={Number(id)} tourneyId={tourneyId} />\n                    </TabPanel>\n                ))}\n            </TabPanels>\n        </Tabs>\n    );\n}\n","// @ts-check\nimport React, {Fragment, useContext, useState} from \"react\";\nimport {BackButton} from \"../utility\";\nimport createTournament from \"../../data/tournament\";\nimport {DataContext} from \"../../state/global-state\";\nimport TournamentTabs from \"./tabs\";\n\nexport default function TournamentList() {\n    const {data, dispatch} = useContext(DataContext);\n    const tourneyList = data.tourneys;\n    /** @type {number} */\n    const defaultTourney = null;\n    const [openTourney, setOpenTourney] = useState(defaultTourney);\n    const [newTourneyName, setNewTourneyName] = useState(\"\");\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\n    function updateNewName(event) {\n        setNewTourneyName(event.target.value);\n    }\n    /** @param {React.FormEvent<HTMLFormElement>} event */\n    function makeTournament(event) {\n        event.preventDefault();\n        dispatch({\n            type: \"ADD_TOURNEY\",\n            tourney: createTournament({name: newTourneyName})\n        });\n        setNewTourneyName(\"\");\n    }\n    let content = <Fragment></Fragment>;\n    if (openTourney !== null) {\n        content = (\n            <TournamentTabs\n                tourneyId={openTourney}\n                backButton={<BackButton action={() => setOpenTourney(null)}/>}\n            />\n        );\n    } else {\n        content = (\n            <div>\n                {(tourneyList.length > 0)\n                    ?\n                    <ol>{tourneyList.map((tourney, i) =>\n                        <li key={i}>\n                            <button\n                                className=\"tourney-select\"\n                                onClick={() => setOpenTourney(i)}>\n                                {tourney.name}\n                            </button>\n                            <button\n                                className=\"danger\"\n                                onClick={\n                                    () => dispatch({\n                                        type: \"DEL_TOURNEY\",\n                                        index: i\n                                    })\n                                }>\n                                delete\n                            </button>\n                        </li>\n                    )}</ol>\n                    :\n                    <p>No tournaments added yet.</p>\n                }\n                <form onSubmit={makeTournament}>\n                    <fieldset>\n                        <legend>Make a new tournament</legend>\n                        <input\n                            type=\"text\"\n                            placeholder=\"tournament name\"\n                            value={newTourneyName}\n                            onChange={updateNewName}\n                            required={true}/>\n                        <input type=\"submit\" value=\"Create\" />\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n    return (\n        <div>\n            {content}\n        </div>\n    );\n}\n","// @ts-check\nimport React, {Fragment, useState, useContext} from \"react\";\nimport {OpenButton} from \"../utility\";\nimport {createPlayer} from \"../../data/player\";\nimport {DataContext} from \"../../state/global-state\"; \n\n/**\n * @param {Object} props\n * @param {React.Dispatch<React.SetStateAction<number>>} props.setOpenPlayer\n */\nexport default function PlayerList({setOpenPlayer}) {\n    const {data, dispatch} = useContext(DataContext);\n    const playerList = data.players;\n    const newPlayerDefault = {firstName: \"\", lastName: \"\", rating: 1200};\n    const [newPlayerData, setNewPlayerdata] = useState(newPlayerDefault);\n    const ids = playerList.map((p) => p.id);\n    ids.sort((a, b) => a - b);\n    ids.reverse();\n    const [nextId, setNextId] = useState(ids[0] + 1);\n    /** @param {React.FormEvent<HTMLFormElement>} event */\n    const handleSubmit = function (event) {\n        event.preventDefault();\n        const newPlayer = createPlayer(newPlayerData);\n        newPlayer.id = nextId;\n        setNextId((prevId) => prevId + 1);\n        setNewPlayerdata(newPlayerDefault);\n        dispatch({type: \"ADD_PLAYER\", newPlayer: newPlayer});\n    };\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\n    const updateField = function (event) {\n        event.preventDefault();\n        /** @type {Object<string, string>} */\n        let update = {};\n        update[event.currentTarget.name] = event.currentTarget.value;\n        setNewPlayerdata(Object.assign({}, newPlayerData, update));\n    };\n    /**\n     * @param {React.MouseEvent<HTMLButtonElement, MouseEvent>} event\n     * @param {number} player\n     */\n    const delPlayer = function (event, player) {\n        event.preventDefault();\n        dispatch({type: \"DEL_PLAYER\", player: player});\n    };\n    let rosterTable = <Fragment></Fragment>;\n    if (playerList.length > 0) {\n        rosterTable =\n        <table>\n            <caption>Demo Roster</caption>\n            <thead>\n                <tr>\n                    <th>First name</th>\n                    <th>Last name</th>\n                    <th>Rating</th>\n                    <th></th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>{playerList.map((player) =>\n                <tr key={player.id}>\n                    <td className=\"table__player\">{player.firstName}</td>\n                    <td className=\"table__player\">{player.lastName}</td>\n                    <td className=\"table__number\">{player.rating}</td>\n                    <td>\n                        <button\n                            className=\"danger\"\n                            onClick={(event) =>\n                                delPlayer(event, player)\n                            }>\n                            delete\n                        </button>\n                    </td>\n                    <td>\n                        <OpenButton\n                            action={() => setOpenPlayer(player.id)} />\n                    </td>\n                </tr>\n            )}</tbody>\n        </table>;\n    }\n    return (\n        <div className=\"roster\">\n            {rosterTable}\n            <form onSubmit={handleSubmit}>\n                <fieldset>\n                    <legend>Add your own players</legend>\n                    <p>\n                        <label>\n                            First name\n                            {\" \"}\n                            <input type=\"text\" name=\"firstName\"\n                                onChange={updateField}\n                                value={newPlayerData.firstName} required />\n                        </label>\n                    </p>\n                    <p>\n                        <label>\n                            Last name\n                            {\" \"}\n                            <input type=\"text\" name=\"lastName\"\n                                onChange={updateField}\n                                value={newPlayerData.lastName} required />\n                        </label>\n                    </p>\n                    <p>\n                        <label>\n                            Rating\n                            {\" \"}\n                            <input\n                                type=\"number\"\n                                name=\"rating\"\n                                onChange={updateField}\n                                value={newPlayerData.rating}\n                                required />\n                        </label>\n                    </p>\n                    <p>\n                        <input type=\"submit\" value=\"Add\"/>\n                    </p>\n                </fieldset>\n            </form>\n        </div>\n    );\n}","// @ts-check\nimport React, {useState, useEffect, useContext} from \"react\";\nimport numeral from \"numeral\";\nimport curry from \"ramda/src/curry\";\nimport {BackButton} from \"../utility\";\nimport {getPlayerById, getPlayerAvoidList, kFactor} from \"../../data/player\";\nimport {DataContext} from \"../../state/global-state\";\n\n/**\n * @param {Object} props\n * @param {number} props.playerId\n * @param {React.Dispatch<React.SetStateAction<number>>} [props.setOpenPlayer]\n */\nexport default function PlayerInfoBox({playerId, setOpenPlayer}) {\n    const {data, dispatch} = useContext(DataContext);\n    // const playerList = data.players;\n    const getPlayer = curry(getPlayerById)(data.players);\n    const avoidList = data.avoid;\n    const [singAvoidList, setSingAvoidList] = useState(\n        getPlayerAvoidList(playerId, avoidList)\n    );\n    const unAvoided = () =>\n        data.players\n            .map((player) => player.id)\n            .filter((pId) => !singAvoidList.includes(pId) && pId !== playerId);\n    const [selectedAvoider, setSelectedAvoider] = useState(unAvoided()[0]);\n    /** @param {React.FormEvent<HTMLFormElement>} event */\n    function avoidAdd(event) {\n        event.preventDefault();\n        setSelectedAvoider(unAvoided()[0]);\n        dispatch({\n            type: \"ADD_AVOID_PAIR\",\n            pair: [playerId, Number(selectedAvoider)]\n        });\n    }\n    useEffect(\n        function () {\n            setSingAvoidList(getPlayerAvoidList(playerId, avoidList));\n        },\n        [avoidList, playerId]\n    );\n    return (\n        <div>\n            <BackButton action={() => setOpenPlayer(null)} />\n            <h2>\n                {getPlayer(playerId).firstName} {getPlayer(playerId).lastName}\n            </h2>\n            <dl>\n                <dt id=\"match-count\">Matches played</dt>\n                <dd aria-labelledby=\"match-count\">\n                    {getPlayer(playerId).matchCount}\n                </dd>\n                <dt id=\"rating\">Rating</dt>\n                <dd aria-labelledby=\"rating\">{getPlayer(playerId).rating}</dd>\n                <dt>K factor</dt>\n                <dd>\n                    {numeral(kFactor(getPlayer(playerId).matchCount)).format(\n                        \"00\"\n                    )}\n                </dd>\n                <dt>Players to avoid</dt>\n                <dd>\n                    <ul>\n                        {singAvoidList.map((pId) => (\n                            <li key={pId}>\n                                {getPlayer(pId).firstName}{\" \"}\n                                {getPlayer(pId).lastName}\n                                <button\n                                    className=\"danger\"\n                                    onClick={() =>\n                                        dispatch({\n                                            type: \"DEL_AVOID_PAIR\",\n                                            pair: [playerId, pId]\n                                        })\n                                    }\n                                >\n                                    remove\n                                </button>\n                            </li>\n                        ))}\n                        {avoidList.length === 0 && <li>None</li>}\n                    </ul>\n                </dd>\n            </dl>\n            <form onSubmit={(event) => avoidAdd(event)}>\n                <fieldset>\n                    <legend>Add player to avoid</legend>\n                    <select\n                        onBlur={(event) =>\n                            setSelectedAvoider(event.target.value)\n                        }\n                    >\n                        {unAvoided().map((pId) => (\n                            <option key={pId} value={pId}>\n                                {getPlayer(pId).firstName}{\" \"}\n                                {getPlayer(pId).lastName}\n                            </option>\n                        ))}\n                    </select>\n                    <input type=\"submit\" value=\"Add\" />\n                </fieldset>\n            </form>\n        </div>\n    );\n}\n","// @ts-check\nimport React, {useState} from \"react\";\nimport PlayerList from \"./list\";\nimport PlayerInfoBox from \"./info-box\";\n\nexport default function PlayerView() {\n    /** @type {number} */\n    const defaultOpen = null;\n    const [openPlayer, setOpenPlayer] = useState(defaultOpen);\n    if (openPlayer !== null) {\n        return (\n            <PlayerInfoBox\n                key={openPlayer}\n                playerId={openPlayer}\n                setOpenPlayer={setOpenPlayer} />\n        );\n    } else {\n        return (\n            <PlayerList setOpenPlayer={setOpenPlayer}/>\n        );\n    }\n}\n","// @ts-check\nimport React, {useContext} from \"react\";\nimport {DataContext} from \"../state/global-state\";\n\nexport function Options() {\n    const {data, dispatch} = useContext(DataContext);\n    const options = data.options;\n    return (\n        <div>\n            <form>\n                <fieldset>\n                    <legend>Bye options</legend>\n                    Select how many points a bye is worth:\n                    {\" \"}\n                    <label>\n                        1\n                        <input\n                            type=\"radio\"\n                            checked={options.byeValue === 1}\n                            onChange={\n                                () => dispatch({\n                                    type: \"SET_BYE_VALUE\",\n                                    byeValue: 1\n                                })\n                            } />\n                    </label>\n                    <label>\n                        0.5\n                        <input\n                            type=\"radio\"\n                            checked={options.byeValue === 0.5}\n                            onChange={\n                                () => dispatch({\n                                    type: \"SET_BYE_VALUE\",\n                                    byeValue: 0.5\n                                })\n                            } />\n                    </label>\n                </fieldset>\n            </form>\n            {/* <form onSubmit={(event) => event.preventDefault()}>\n            <fieldset>\n                <legend>Export tournaments</legend>\n                <textarea\n                    className=\"json\"\n                    rows={25}\n                    cols={50}\n                    value={outputTourney}\n                    readOnly\n                    name=\"tourneyData\"\n                    />\n                <input type=\"submit\" value=\"load\" disabled />\n            </fieldset>\n            </form> */}\n            <form onSubmit={(event) => event.preventDefault()}>\n                <fieldset>\n                    <legend>Export data</legend>\n                    <textarea\n                        className=\"json\"\n                        rows={25}\n                        cols={50}\n                        value={JSON.stringify(data, null, 2)}\n                        name=\"playerdata\"\n                        readOnly />\n                    <input type=\"submit\" value=\"Load\" disabled />\n                </fieldset>\n            </form>\n        </div>\n    );\n}\n","import React from \"react\";\nimport styles from \"./index.module.css\";\n\nexport default function Caution() {\n    return (\n        <div className={styles.caution}>\n            <p className={styles.caution__text}>\n                <span role=\"img\" aria-label=\"warning\">⚠️</span>\n                &nbsp;\n                This is an unstable demo build.\n                &nbsp;\n                <span role=\"img\" aria-label=\"warning\">⚠️</span>\n                {\" \"}\n                Want to help make it better? Head to the\n                {\" \"}\n                <span role=\"img\" aria-label=\"finger pointing right\">👉</span>\n                &nbsp;\n                <a\n                    className={styles.caution__link}\n                    href=\"https://github.com/johnridesabike/chessahoochee\">\n                    Git repository\n                </a>.\n            </p>\n        </div>\n    );\n}","// @ts-check\nimport React, {useReducer} from \"react\";\nimport \"./App.css\";\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\";\nimport \"@reach/tabs/styles.css\";\nimport TournamentList from \"./components/tournament/list\";\nimport PlayerView from \"./components/players/index\";\nimport {Options} from \"./components/options\";\nimport Caution from \"./components/caution\";\nimport {defaultData, dataReducer, DataContext} from \"./state/global-state\";\n\nfunction App() {\n    const [data, dispatch] = useReducer(dataReducer, defaultData);\n    return (\n        <React.StrictMode>\n            <DataContext.Provider value={{data, dispatch}}>\n                <Tabs className=\"app\" defaultIndex={1}>\n                    <Caution />\n                    <TabList className=\"header\">\n                        <Tab>Players</Tab>\n                        <Tab>Tournaments</Tab>\n                        <Tab>Options</Tab>\n                        <Tab>About</Tab>\n                    </TabList>\n                    <TabPanels className=\"content\">\n                        <TabPanel>\n                            <PlayerView />\n                        </TabPanel>\n                        <TabPanel>\n                            <TournamentList />\n                        </TabPanel>\n                        <TabPanel>\n                            <Options />\n                        </TabPanel>\n                        <TabPanel>\n                            <p>\n                                {/* eslint-disable-next-line max-len*/}\n                                This is an early, proof-of-concept, demo of a chess tournament manager. <a href=\"https://github.com/johnridesabike/chessahoochee\">You can find out more here.</a>\n                            </p>\n                        </TabPanel>\n                    </TabPanels>\n                </Tabs>\n            </DataContext.Provider>\n        </React.StrictMode>\n    );\n}\n\nexport default App;\n","/*jslint browser*/\n/*global process fetch*/\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"scores_table__3lvMB\",\"topHeader\":\"scores_topHeader__2tB60\",\"row\":\"scores_row__2tesj\",\"playerName\":\"scores_playerName__2J8Ps\",\"rank\":\"scores_rank__1h3on\"};"],"sourceRoot":""}