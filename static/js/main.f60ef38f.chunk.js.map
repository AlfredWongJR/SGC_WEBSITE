{"version":3,"sources":["components/tournament/scores.module.css","App.module.css","components/caution/index.module.css","components/tournament/round.module.css","data/tournament.js","data/constants.js","data/player.js","data/utility.js","data/match.js","pairing-scoring/scoring.js","pairing-scoring/pairing.js","state/match-functions.js","state/global-state.js","components/tournament/list.jsx","components/utility.jsx","components/players/list.jsx","components/players/info-box.jsx","components/players/index.jsx","components/options.jsx","components/caution/index.jsx","components/tournament/round.jsx","components/tournament/player-select.jsx","components/tournament/scores.jsx","components/tournament/tournament.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","table","topHeader","row","playerName","rank","link","caution","caution__text","caution__link","Object","freeze","importObj","name","tieBreaks","byeQueue","players","roundList","BLACK","WHITE","createPlayer","arguments","length","undefined","id","type","firstName","lastName","rating","matchCount","dummyPlayer","getPlayerById","playerList","player","filter","p","getPlayerAvoidList","playerId","avoidList","pair","includes","reduce","accumulator","concat","kFactor","calcNewRatings","origRatings","matchCounts","result","whiteElo","EloRank","blackElo","scoreExpected","getExpected","updateRating","map","calcNumOfRounds","playerCount","roundId","Math","ceil","log2","Number","isFinite","getById","list","x","getIndexById","indexOf","ids","pairs","origRating","newRating","isBye","match","playerMatchColor","matchList","color","m","getMatchesByPlayer","slice","acc","round","hasHadBye","getPlayersByOpponent","opponentId","playerScore","score","scoreList","playerScoreList","a","b","playerScoreCum","runningScore","cumScores","playerScoreListNoByes","forEach","push","totalScore","playerColorBalance","modifiedMedian","pId","isSolkoff","scores","opponent","sort","pop","shift","finalScore","tieBreakMethods","func","oppScores","calcStandings","methods","standingsFlat","allPlayers","Array","from","Set","getAllPlayers","method","sortFunc","firstBy","standing","ignore","index","thenBy","standingsTree","runningRank","i","orig","standing1","standing2","areEqual","keys","areScoresEqual","dueColor","genPlayerData","data","colorBalance","opponentHistory","upperHalf","avoidMeetingTwicePriority","sameScoresPriority","differentHalfPriority","differentDueColorPriority","calcPairIdeal","player1","player2","scoreDiff","priority","metBefore","mustAvoid","abs","byeMatch","potentialMatches","matches","reducedResults","playerData","byePlayerData","last","playersWithScore","pd","reverse","splitAt","playerDatum","src","playerMatches","blossom","p1Id","p2Id","p1","p2","ideal","matched","autoPair","state","tourneyId","unPairedPlayers","tourney","tourneys","getPlayer","curry","nextBye","createMatch","newMatchList","pairPlayers","avoid","join","dummy","options","byeValue","manualPair","swapColors","matchId","defaultData","defaultOptions","defaultPlayers","defaultTourneyList","dataReducer","action","assign","newPlayer","move","oldIndex","newIndex","unpairedPlayers","Error","DataContext","createContext","TournamentList","_ref","path","_useContext","useContext","dispatch","tourneyList","_useState","useState","_useState2","slicedToArray","newTourneyName","setNewTourneyName","react_default","createElement","key","es","to","tooltip_es","label","aria-label","className","onClick","trash_2_default","visually_hidden_es","onSubmit","event","preventDefault","createTournament","placeholder","value","onChange","target","required","Button","children","BackButton","_ref2","utility_Button","OpenButton","_ref3","Panel","_ref4","style","objectSpread","PanelContainer","_ref5","display","React","Children","child","PlayerList","setOpenPlayer","newPlayerDefault","newPlayerData","setNewPlayerdata","_useState3","_useState4","nextId","setNextId","updateField","update","currentTarget","rosterTable","react","delPlayer","utility_OpenButton","prevId","PlayerInfoBox","singAvoidList","setSingAvoidList","unAvoided","selectedAvoider","setSelectedAvoider","useEffect","utility_BackButton","aria-labelledby","numeral","format","avoidAdd","onBlur","PlayerView","openPlayer","Options","checked","rows","cols","JSON","stringify","readOnly","disabled","Caution","styles","role","href","Round","selectedMatch","setSelectedMatch","moveMatch","direction","unMatch","repeat_default","arrow_up_default","arrow_down_default","scope","pos","MatchRow","PlayerMatchInfo","PairPicker","_useContext2","whiteWon","blackWon","draw","every","whiteName","blackName","setMatchResult","theMatch","white","black","data-testid","menu_button_es","aria-hidden","onSelect","more_horizontal_default","x_default","prettyBalance","opId","_useContext4","selectedPlayers","setSelectedPlayers","selectPlayer","prevState","unMatched","htmlFor","PlayerSelect","isSelecting","setIsSelecting","togglePlayer","colSpan","ScoreList","_calcStandings","_calcStandings2","standingTree","tbMethods","j","rowSpan","dashify","SelectTieBreaks","selectedTb","setSelectedTb","toggleTb","moveTb","register","regexps","unformat","roundingFunction","whole","floor","remainder","String","Scores","Tournament","defaultTab","setDefaultTab","origTitle","document","title","tabs_es","defaultIndex","chevron_left_default","tournament_scores","source","createHashSource","history","createHistory","About","App","_useReducer","useReducer","_useReducer2","Provider","App_About","Boolean","window","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f60ef38f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"scores_table__3lvMB\",\"topHeader\":\"scores_topHeader__2tB60\",\"row\":\"scores_row__2tesj\",\"playerName\":\"scores_playerName__2J8Ps\",\"rank\":\"scores_rank__1h3on\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"App_link__2RdBq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"caution\":\"caution_caution__3GmMJ\",\"caution__text\":\"caution_caution__text__2ZzEu\",\"caution__link\":\"caution_caution__link__2xeym\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"round_table__1Rm4K\"};","/**\n * @typedef {import(\"./index\").Tournament} Tournament\n */\n/**\n * @param {Object} importObj\n */\nfunction createTournament(importObj) {\n    /** @type {Tournament} */\n    const tourney = {\n        name: importObj.name || \"\",\n        tieBreaks: importObj.tieBreaks || [0, 1, 2, 3],\n        byeQueue: importObj.byeQueue || [],\n        players: importObj.players || [],\n        roundList: importObj.roundList || []\n    };\n    return tourney;\n}\nexport default Object.freeze(createTournament);\n","const BLACK = 1;\nexport {BLACK};\nconst WHITE = 0;\nexport {WHITE};\n","import EloRank from \"elo-rank\";\nimport {WHITE, BLACK} from \"./constants\";\n/**\n * @typedef {import(\"./index\").Player} Player\n */\n\n/**\n * @param {Object} importObj\n */\nfunction createPlayer(importObj = {}) {\n    /** @type {Player} */\n    const player = {\n        id: importObj.id || 0,\n        type: importObj.type || \"person\", // used for CSS styling etc.\n        firstName: importObj.firstName || \"\",\n        lastName: importObj.lastName || \"\",\n        rating: importObj.rating || 0,\n        matchCount: importObj.matchCount || 0\n    };\n    return player;\n}\nObject.freeze(createPlayer);\nexport {createPlayer};\n\nconst dummyPlayer = createPlayer();\ndummyPlayer.id = -1;\ndummyPlayer.firstName = \"Bye\";\ndummyPlayer.lastName = \"Player\";\ndummyPlayer.type = \"dummy\";\nObject.freeze(dummyPlayer);\nexport {dummyPlayer};\n\n\n/**\n * @param {Player[]} playerList\n * @param {number} id\n * @returns {Player}\n */\nfunction getPlayerById(playerList, id) {\n    if (id === -1) {\n        return dummyPlayer;\n    }\n    let player = playerList.filter((p) => p.id === id)[0];\n    if (!player) {\n        player = createPlayer({\n            id: id,\n            firstName: \"Anonymous\",\n            type: \"missing\"\n        });\n    }\n    return player;\n}\nObject.freeze(getPlayerById);\nexport {getPlayerById};\n\n/**\n * @param {number} playerId\n * @param {number[][]} avoidList\n * @returns {number[]}\n */\nfunction getPlayerAvoidList(playerId, avoidList) {\n    return avoidList.filter( // get pairings with the player\n        (pair) => pair.includes(playerId)\n    ).reduce( // Flatten the array\n        (accumulator, pair) => pair.concat(accumulator),\n        []\n    ).filter( // filter out the player's id\n        (id) => id !== playerId\n    );\n}\nObject.freeze(getPlayerAvoidList);\nexport {getPlayerAvoidList};\n\n/**\n * @param {number[][]} avoidList\n * @param {Player[]} playerList\n */\nfunction cleanAvoidList(avoidList, playerList) {\n    const ids = playerList.map((p) => p.id);\n    return avoidList.filter(\n        (pairs) => (ids.includes(pairs[0]) && ids.includes(pairs[1]))\n    );\n}\nObject.freeze(cleanAvoidList);\nexport {cleanAvoidList};\n\n/**\n * @param {number} matchCount\n */\nfunction kFactor(matchCount) {\n    const ne = matchCount || 1;\n    return (800 / ne);\n}\nObject.freeze(kFactor);\nexport {kFactor};\n\n/**\n * @param {[number, number]} origRatings\n * @param {[number, number]} matchCounts\n * @param {[number, number]} result\n * @returns {[number, number]}\n */\nfunction calcNewRatings(origRatings, matchCounts, result) {\n    const whiteElo = new EloRank(kFactor(matchCounts[WHITE]));\n    const blackElo = new EloRank(kFactor(matchCounts[BLACK]));\n    const FLOOR = 100;\n    const scoreExpected = [\n        whiteElo.getExpected(origRatings[WHITE], origRatings[BLACK]),\n        blackElo.getExpected(origRatings[BLACK], origRatings[WHITE])\n    ];\n    /** @type {[number, number]} */\n    const newRating = [\n        whiteElo.updateRating(\n            scoreExpected[WHITE],\n            result[WHITE],\n            origRatings[WHITE]\n        ),\n        blackElo.updateRating(\n            scoreExpected[BLACK],\n            result[BLACK],\n            origRatings[BLACK]\n        )\n    ];\n    // @ts-ignore\n    return newRating.map(\n        (rating) => (\n            rating < FLOOR\n            ? FLOOR\n            : rating\n        )\n    );\n}\nObject.freeze(calcNewRatings);\nexport {calcNewRatings};\n","/**\n * @param {number} playerCount\n */\nfunction calcNumOfRounds(playerCount) {\n    let roundId = Math.ceil(Math.log2(playerCount));\n    if (!Number.isFinite(roundId)) {\n        roundId = 0;\n    }\n    return roundId;\n}\nObject.freeze(calcNumOfRounds);\nexport {calcNumOfRounds};\n\n/**\n * @template {object} T\n * @param {T[]} list\n * @param {number | string} id\n * @returns {T}\n */\nfunction getById(list, id) {\n    return list.filter((x) => x.id === id)[0];\n}\nObject.freeze(getById);\nexport {getById};\n/**\n * @param {Object[]} list\n * @param {number | string} id\n */\nfunction getIndexById(list, id) {\n    return list.indexOf(getById(list, id));\n}\nObject.freeze(getIndexById);\nexport {getIndexById};\n","/**\n * @typedef {import(\"./index\").Match} Match\n */\n/**\n *\n * @param {object} importObj\n */\nfunction createMatch(importObj) {\n    /** @type {Match} */\n    const match = {\n        id: importObj.id,\n        players: importObj.players,\n        result: importObj.result || [0, 0],\n        origRating: importObj.origRating,\n        newRating: importObj.newRating\n    };\n    return match;\n}\nexport default Object.freeze(createMatch);\n","import {firstBy} from \"thenby\";\nimport {\n    dummyPlayer,\n    getPlayerById,\n    getPlayerAvoidList\n} from \"../data/player\";\n\n/**\n * @typedef {import(\"./\").ScoreCalculator} ScoreCalculator\n * @typedef {import(\"./\").PlayerData} PlayerData\n * @typedef {import(\"./\").Standing} Standing\n * @typedef {import(\"../data/\").Match} Match\n * @typedef {import(\"../data/\").Player} Player\n */\n\n/**\n *\n * @param {Match} match\n * @returns {boolean}\n */\nfunction isBye(match) {\n    return match.players.includes(dummyPlayer.id);\n}\n\n/**\n * @param {number} playerId\n * @param {object[]} matchList\n * @returns {number?}\n */\nfunction playerMatchColor(playerId, matchList) {\n    /**@type {number} */\n    let color = null;\n    const match = matchList.filter((m) => m.players.includes(playerId))[0];\n    if (match) {\n        color = match.players.indexOf(playerId);\n    }\n    return color;\n}\nObject.freeze(playerMatchColor);\nexport {playerMatchColor};\n\n/**\n * @type {ScoreCalculator}\n * @returns {Match[]}\n */\nfunction getMatchesByPlayer(playerId, roundList, roundId = null) {\n    /** @type {Match[]} */\n    let rounds;\n    if (roundId === null) {\n        rounds = roundList;\n    } else {\n        rounds = roundList.slice(0, roundId + 1);\n    }\n    return rounds.reduce( // flatten the rounds to just the matches\n        (acc, round) => acc.concat(round),\n        []\n    ).filter(\n        (match) => match.players.includes(playerId)\n    );\n}\n\n/**\n * @type {ScoreCalculator}\n * @returns {boolean}\n */\nfunction hasHadBye(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        playerId,\n        roundList,\n        roundId\n    ).reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    ).includes(dummyPlayer.id);\n}\nObject.freeze(hasHadBye);\nexport {hasHadBye};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number[]}\n */\nfunction getPlayersByOpponent(opponentId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        opponentId,\n        roundList,\n        roundId\n    ).reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    ).filter(\n        (playerId) => playerId !== opponentId\n    );\n}\nObject.freeze(getPlayersByOpponent);\nexport {getPlayersByOpponent};\n\n/**\n * Get a list of all of a player's scores from each match.\n * @type {ScoreCalculator}\n * @returns {number[]} the list of scores\n */\nfunction playerScoreList(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(playerId, roundList, roundId).map(\n        (match) => match.result[match.players.indexOf(playerId)]\n    );\n}\n\n/**\n * TODO: Maybe merge this with the other function?\n */\n/**\n * @type {ScoreCalculator}\n * @returns {number[]}\n */\nfunction playerScoreListNoByes(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        playerId,\n        roundList,\n        roundId\n    ).filter(\n        (match) => !isBye(match)\n    ).map(\n        (match) => match.result[match.players.indexOf(playerId)]\n    );\n}\n\n/**\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerScore(playerId, roundList, roundId = null) {\n    let score = 0;\n    const scoreList = playerScoreList(playerId, roundList, roundId);\n    if (scoreList.length > 0) {\n        score = scoreList.reduce((a, b) => a + b);\n    }\n    return score;\n}\nObject.freeze(playerScore);\nexport {playerScore};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerScoreCum(playerId, roundList, roundId = null) {\n    let runningScore = 0;\n    /** @type {number[]} */\n    let cumScores = [];\n    let scores = playerScoreListNoByes(playerId, roundList, roundId);\n    scores.forEach(function (score) {\n        runningScore += score;\n        cumScores.push(runningScore);\n    });\n    let totalScore = 0;\n    if (cumScores.length !== 0) {\n        totalScore = cumScores.reduce((a, b) => a + b);\n    }\n    return totalScore;\n}\n\n/**\n * Calculate a player's color balance. A negative number means they played as\n * white more. A positive number means they played as black more.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerColorBalance(playerId, roundList, roundId = null) {\n    let color = 0;\n    getMatchesByPlayer(playerId, roundList, roundId).filter(\n        (match) => !isBye(match)\n    ).forEach(\n        function (match) {\n            if (match.players[0] === playerId) {\n                color += -1;\n            } else if (match.players[1] === playerId) {\n                color += 1;\n            }\n        }\n    );\n    return color;\n}\nObject.freeze(playerColorBalance);\nexport {playerColorBalance};\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @type {ScoreCalculator}\n * @param {boolean} [isSolkoff]\n * @returns {number}\n */\nfunction modifiedMedian(pId, roundList, roundId = null, isSolkoff = false) {\n    // get all of the opponent's scores\n    let scores = getPlayersByOpponent(\n        pId,\n        roundList,\n        roundId\n    ).filter(\n        (opponent) => opponent !== dummyPlayer.id\n    ).map(\n        (opponent) => playerScore(opponent, roundList, roundId)\n    );\n    //sort them, then remove the first and last items\n    scores.sort();\n    if (!isSolkoff) {\n        scores.pop();\n        scores.shift();\n    }\n    let finalScore = 0;\n    if (scores.length > 0) {\n        finalScore = scores.reduce((a, b) => a + b);\n    }\n    return finalScore;\n}\n\n/**\n * A shortcut for passing the `isSolkoff` variable to `modifiedMedian`.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction solkoff(playerId, roundList, roundId = null) {\n    return modifiedMedian(playerId, roundList, roundId, true);\n}\n\n/**\n * Get the cumulative scores of a player's opponents.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerOppScoreCum(playerId, roundList, roundId = null) {\n    const opponents = getPlayersByOpponent(\n        playerId,\n        roundList,\n        roundId\n    ).filter(\n        (opponent) => opponent !== dummyPlayer.id\n    );\n    let oppScores = opponents.map((p) => playerScoreCum(p, roundList, roundId));\n    let score = 0;\n    if (oppScores.length !== 0) {\n        score = oppScores.reduce((a, b) => a + b);\n    }\n    return score;\n}\n\nconst tieBreakMethods = [\n    {\n        name: \"Modified median\",\n        func: modifiedMedian\n    },\n    {\n        name: \"Solkoff\",\n        func: solkoff\n    },\n    {\n        name: \"Cumulative score\",\n        func: playerScoreCum\n    },\n    {\n        name: \"Cumulative of opposition\",\n        func: playerOppScoreCum\n    },\n    {\n        name: \"Most black\",\n        func: playerColorBalance\n    }\n];\n\nObject.freeze(tieBreakMethods);\nexport {tieBreakMethods};\n\n/**\n * @param {Standing} standing1\n * @param {Standing} standing2\n * @returns {boolean}\n */\nfunction areScoresEqual(standing1, standing2) {\n    let areEqual = true;\n    // Check if any of them aren't equal\n    if (standing1.score !== standing2.score) {\n        areEqual = false;\n    }\n    Object.keys(standing1.tieBreaks).forEach(function (index) {\n        const i = Number(index);\n        if (standing1.tieBreaks[i] !== standing2.tieBreaks[i]) {\n            areEqual = false;\n        }\n    });\n    return areEqual;\n}\n\n/**\n * @typedef {import(\"../data/index\").Round} Round\n */\n\n/**\n * @param {Round[]} roundList\n * @returns {number[]}\n */\nfunction getAllPlayers(roundList) {\n    const allPlayers = roundList.reduce( // flatten the rounds\n        (acc, round) => acc.concat(round),\n        []\n    ).reduce( // flaten the players\n        (acc, match) => acc.concat(match.players),\n        []\n    );\n    return Array.from(new Set(allPlayers));\n}\n\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * @param {number[]} methods\n * @param {Round[]} roundList\n * @param {number} [roundId]\n * @returns {[Standing[][], string[]]} The standings and the list of method used\n */\nfunction calcStandings(methods, roundList, roundId = null) {\n    const tieBreaks = methods.map((m) => tieBreakMethods[m]);\n    // Get a flat list of all of the players and their scores.\n    const standingsFlat = getAllPlayers(roundList).map(function (pId) {\n        /** @type {Standing} */\n        const standing = {\n            id: pId,\n            score: playerScore(pId, roundList, roundId),\n            tieBreaks: tieBreaks.map((method) => (\n                method.func(pId, roundList, roundId)\n            ))\n        };\n        return standing;\n    });\n    // Create a function to sort the players\n    let sortFunc = firstBy((standing) => standing.score, -1);\n    // For each tiebreak method, chain another `thenBy` to the function.\n    tieBreaks.forEach(function (ignore, index) {\n        sortFunc = sortFunc.thenBy((standing) => standing.tieBreaks[index], -1);\n    });\n    // Finally, sort the players.\n    standingsFlat.sort(sortFunc);\n    /** @type {Standing[][]} */\n    const standingsTree = [];\n    let runningRank = 0;\n    standingsFlat.forEach(function (standing, i, orig) {\n        if (i !== 0) { // we can't compare the first player with a previous one\n            const prevPlayer = orig[i - 1];\n            if (!areScoresEqual(standing, prevPlayer)) {\n                runningRank += 1;\n            }\n        }\n        if (!standingsTree[runningRank]) {\n            standingsTree[runningRank] = [];\n        }\n        standingsTree[runningRank].push(standing);\n    });\n    return [standingsTree, tieBreaks.map((m) => m.name)];\n}\nObject.freeze(calcStandings);\nexport {calcStandings};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number?} 0 for white, 1 for black, null if no color history\n */\nfunction dueColor(playerId, roundList, roundId = null) {\n    if (!roundList[roundId - 1]) {\n        return null;\n    }\n    let color = 0;\n    let prevColor = playerMatchColor(\n        playerId,\n        roundList[roundId - 1]\n    );\n    if (prevColor === 0) {\n        color = 1;\n    }\n    return color;\n}\n\n/**\n * @param {number} playerId\n * @param {Round[]} roundList\n * @param {number} roundId\n * @param {Player[]} playerList\n * @param {number[][]} avoidList\n * @returns {PlayerData}\n */\nfunction genPlayerData(playerId, playerList, avoidList, roundList, roundId) {\n    const player = getPlayerById(playerList, playerId);\n    return {\n        data: player,\n        rating: player.rating,\n        id: playerId,\n        score: playerScore(playerId, roundList, roundId),\n        dueColor: dueColor(playerId, roundList, roundId),\n        colorBalance: playerColorBalance(playerId, roundList, roundId),\n        opponentHistory: getPlayersByOpponent(playerId, roundList, null),\n        upperHalf: false,\n        avoidList: getPlayerAvoidList(playerId, avoidList),\n        hasHadBye: hasHadBye(playerId, roundList, roundId)\n    };\n}\nObject.freeze(genPlayerData);\nexport {genPlayerData};\n","import {firstBy} from \"thenby\";\nimport splitAt from \"ramda/src/splitAt\";\nimport last from \"ramda/src/last\";\nimport blossom from \"edmonds-blossom\";\nimport {dummyPlayer} from \"../data/player\";\nimport {genPlayerData} from \"./scoring\";\n/**\n * @typedef {import(\"./\").PlayerData} PlayerData\n */\n\n/**\n * TODO: These probably need to be tweaked a lot.\n */\n/**\n * @constant avoidMeetingTwicePriority The weight given to avoid players\n * meeting twice. This same weight is given to avoid matching players on each\n * other's \"avoid\" list. This is the highest priority. (USCF § 27A1)\n * @type {number}\n */\nconst avoidMeetingTwicePriority = 20;\n/**\n * @constant sameScoresPriority The weight given to match players with\n * equal scores. This gets muliplied against a ratio taken from the distance\n * between each player's score. For example, if the tournament has players\n * scoring 0, 1, 2, and 3, and if a player scoring 1 gets compared with a\n * player scoring 3, then their `sameScoresPriority` will be reduced by 50%.\n * (`(3 - 1) / 4 = 0.5`) (USCF § 27A2)\n * @type {number}\n */\nconst sameScoresPriority = 16;\n/**\n * @constant differentHalfPriority The weight given to match players in lower\n * versus upper halves. This is only applied to players being matched within\n * the same score group. (USCF § 27A3)\n * @type {number}\n */\nconst differentHalfPriority = 2;\n/**\n * @constant differentDueColorPriority The weight given to match players with\n * opposite due colors. (USCF § 27A4 and § 27A5)\n * @type {number}\n */\nconst differentDueColorPriority = 1;\n// /** @type {number} */\n// const maxPriority = (\n//     avoidMeetingTwicePriority\n//     + sameScoresPriority\n//     + differentHalfPriority\n//     + differentDueColorPriority\n// );\n\n\n/**\n * Create an array of blossom-compatible weighted matchups. This returns\n * an array of each potential match, formatted like so: [idOfPlayer1,\n * idOfPlayer2, priority]. A higher priority means a more likely matchup.\n * @param {PlayerData} player1\n * @param {PlayerData} player2\n * @param {number[]} scoreList\n * @returns {number}\n */\nfunction calcPairIdeal(player1, player2, scoreList) {\n    let priority = 0;\n    let scoreDiff;\n    const metBefore = player1.opponentHistory.includes(player2.id);\n    const mustAvoid = player1.avoidList.includes(player2.id);\n    if (!metBefore && !mustAvoid) {\n        priority += avoidMeetingTwicePriority;\n    }\n    // Calculate the \"distance\" between their scores and multiply that\n    // against the `sameScoresPriority` constant.\n    scoreDiff = Math.abs(\n        scoreList.indexOf(player1.score)\n        - scoreList.indexOf(player2.score)\n    );\n    scoreDiff = (scoreList.length - scoreDiff) / scoreList.length;\n    priority += sameScoresPriority * scoreDiff;\n    // Only include `differentHalfPriority` if they're in the same\n    // score group.\n    if (player1.score === player2.score) {\n        if (player1.upperHalf !== player2.upperHalf) {\n            priority += differentHalfPriority;\n        }\n    }\n    if (player1.dueColor === null) {\n        priority += differentDueColorPriority;\n    } else if (player1.dueColor !== player2.dueColor) {\n        priority += differentDueColorPriority;\n    }\n    return Math.ceil(priority);\n}\nObject.freeze(calcPairIdeal);\nexport {calcPairIdeal};\n\n/**\n * Creates pairings according to the rules specified in USCF § 27, § 28,\n * and § 29. This is a work in progress and does not account for all of the\n * rules yet.\n * @param {object[][]} roundList\n * @param {number} roundId\n * @param {number[]} players\n * @param {object[]} playerList\n * @param {number[][]} avoidList\n */\nfunction pairPlayers(players, roundId, roundList, playerList, avoidList) {\n    /** @type {number[]} */\n    let byeMatch;\n    /** @type {number[][]} */\n    let potentialMatches;\n    /** @type {Number[][]} */\n    let matches;\n    /** @type {number[]} */\n    let blossomResults;\n    /** @type {[PlayerData, PlayerData, number][]} */\n    let reducedResults;\n    /** @type {number[]} */\n    let scoreList;\n    /** @type {PlayerData[]} */\n    let playerData = players.map((playerId) => (\n        genPlayerData(playerId, playerList, avoidList, roundList, roundId)\n    ));\n    scoreList = Array.from(new Set(playerData.map((p) => p.score)));\n    scoreList.sort();\n    // Sort the data so matchups default to order by score and rating.\n    playerData.sort(\n        firstBy((p) => p.score, -1).thenBy((p) => p.rating, -1)\n    );\n    // If there's an odd number of players, time to assign a bye.\n    if (playerData.length % 2 !== 0) {\n        // Assign a bye to the lowest-rated player in the lowest score group.\n        // (USCF § 29L2.)\n        // filter out players who have had a bye already.\n        let byePlayerData = last(playerData.filter((p) => !p.hasHadBye));\n        // In the impossible situation that *everyone* has played a bye round\n        // previously, then just pick the last player.\n        if (!byePlayerData) {\n            byePlayerData = last(playerData);\n        }\n        byeMatch = [byePlayerData.id, dummyPlayer.id];\n        // Remove the bye'd player from the list so they won't be matched again.\n        playerData = playerData.filter((p) => p !== byePlayerData);\n    }\n    // Determine which players are in the upper and lower halves of their score\n    // groups.\n    scoreList.forEach(function (score) {\n        let playersWithScore = playerData.filter((pd) => pd.score === score);\n        playersWithScore.sort((pd) => pd.rating).reverse();\n        if (playersWithScore.length > 1) {\n            splitAt(\n                playersWithScore.length / 2,\n                playersWithScore\n            )[0].forEach(function (playerDatum) {\n                playerDatum.upperHalf = true;\n            });\n        }\n    });\n    // Turn the data into blossom-compatible input.\n    potentialMatches = playerData.reduce(\n        function (acc, player1, ignore, src) {\n            const playerMatches = src.filter(\n                (player) => player !== player1\n            ).map(\n                (player2) => [\n                    player1.id,\n                    player2.id,\n                    calcPairIdeal(player1, player2, scoreList)\n                ]\n            );\n            return acc.concat(playerMatches);\n        },\n        []\n    );\n    // Feed all of the potential matches to Edmonds-blossom and let the\n    // algorithm work its magic. This returns an array where each index is the\n    // ID of one player and each value is the ID of the matched player.\n    blossomResults = blossom(potentialMatches);\n    // Translate those IDs into actual pairs of players.\n    reducedResults = blossomResults.reduce(\n        function (acc, p1Id, p2Id) {\n            // Filter out unmatched players. Even though we removed the byes\n            // from the list, blossom will automatically include their missing\n            // IDs in its results.\n            if (p1Id !== -1) {\n                const p1 = playerData.filter((p) => p.id === p1Id)[0];\n                const p2 = playerData.filter((p) => p.id === p2Id)[0];\n                const ideal = potentialMatches.filter(\n                    (pair) => pair[0] === p1Id && pair[1] === p2Id\n                )[0][2];\n                const matched = acc.map((pair) => pair[0]);\n                // Blossom returns a lot of redundant matches. Check that this\n                // matchup wasn't already added.\n                if (!matched.includes(p1) && !matched.includes(p2)) {\n                    acc.push([p1, p2, ideal]);\n                }\n            }\n            return acc;\n        },\n        []\n    );\n    // Sort by net score and rating for board placement.\n    reducedResults.sort(\n        firstBy(\n            /** @param {[PlayerData, PlayerData, number]} pair */\n            (pair) => pair[0].score + pair[1].score,\n            -1\n        ).thenBy(\n            /** @param {[PlayerData, PlayerData, number]} pair */\n            (pair) => pair[0].rating + pair[1].rating,\n            -1\n        )\n    );\n    // Turn the results into new match objects.\n    matches = reducedResults.map(\n        function (pair) {\n            const player1 = pair[0];\n            const player2 = pair[1];\n            // const ideal = pair[2];\n            const match = [player1.id, player2.id];\n            if (player1.colorBalance < player2.colorBalance) {\n                match.reverse();\n            }\n            return match;\n        }\n    );\n    // The bye match always gets added last so as not to affect the numbering.\n    if (byeMatch) {\n        matches.push(byeMatch);\n    }\n    return matches;\n}\nexport default Object.freeze(pairPlayers);\n","import curry from \"ramda/src/curry\";\nimport {BLACK, WHITE} from \"../data/constants\";\nimport createMatch from \"../data/match\";\nimport {hasHadBye} from \"../pairing-scoring/scoring\";\nimport {dummyPlayer, getPlayerById} from \"../data/player\";\nimport pairPlayers from \"../pairing-scoring/pairing\";\nimport {getById} from \"../data/utility\";\n/**\n* @typedef {import(\"./dispatch\").GlobalState} GlobalState\n*/\n\n/**\n * @param {GlobalState} state\n * @param {number} tourneyId\n * @param {number} roundId\n * @param {number[]} unPairedPlayers\n */\nfunction autoPair(state, tourneyId, roundId, unPairedPlayers) {\n    const tourney = state.tourneys[tourneyId];\n    const roundList = tourney.roundList;\n    const getPlayer = curry(getPlayerById)(state.players);\n    const nextBye = tourney.byeQueue.filter(\n        (pId) => !hasHadBye(pId, roundList)\n    )[0];\n    let byeMatch = null;\n    if (nextBye >= 0) {\n        byeMatch = createMatch({\n            id: nextBye + \"-\" + dummyPlayer.id,\n            players: [nextBye, dummyPlayer.id],\n            origRating: [\n                getPlayer(nextBye).rating,\n                dummyPlayer.rating\n            ],\n            newRating: [\n                getPlayer(nextBye).rating,\n                dummyPlayer.rating\n            ]\n        });\n        unPairedPlayers = unPairedPlayers.filter((pId) => pId !== nextBye);\n    }\n    const pairs = pairPlayers(\n        unPairedPlayers,\n        roundId,\n        roundList,\n        state.players,\n        state.avoid\n    );\n    const newMatchList = pairs.map(\n        (pair) => createMatch({\n            id: pair.join(\"-\"),\n            players: [pair[WHITE], pair[BLACK]],\n            origRating: [\n                getPlayer(pair[WHITE]).rating,\n                getPlayer(pair[BLACK]).rating\n            ],\n            newRating: [\n                getPlayer(pair[WHITE]).rating,\n                getPlayer(pair[BLACK]).rating\n            ]\n        })\n    );\n    if (byeMatch) {\n        newMatchList.push(byeMatch);\n    }\n    // this covers manual bye matches and auto-paired bye matches\n    newMatchList.forEach(function (match) {\n        const dummy = match.players.indexOf(dummyPlayer.id);\n        if (dummy === BLACK) {\n            match.result[WHITE] = state.options.byeValue;\n        }\n        if (dummy === WHITE) {\n            match.result[BLACK] = state.options.byeValue;\n        }\n    });\n    return newMatchList;\n}\nObject.freeze(autoPair);\nexport {autoPair};\n\n/**\n * @param {GlobalState} state\n * @param {number[]} pair\n */\nfunction manualPair(state, pair) {\n    const getPlayer = curry(getPlayerById)(state.players);\n    const match = createMatch({\n        id: pair.join(\"-\"),\n        players: [pair[WHITE], pair[BLACK]],\n        origRating: [\n            getPlayer(pair[WHITE]).rating,\n            getPlayer(pair[BLACK]).rating\n        ],\n        newRating: [\n            getPlayer(pair[WHITE]).rating,\n            getPlayer(pair[BLACK]).rating\n        ]\n    });\n    if (pair[WHITE] === dummyPlayer.id) {\n        match.result = [state.options.byeValue, 0];\n    }\n    if (pair[BLACK] === dummyPlayer.id) {\n        match.result = [0, state.options.byeValue];\n    }\n    return match;\n}\nObject.freeze(manualPair);\nexport {manualPair};\n\n/**\n * @param {GlobalState} state\n * @param {number} tourneyId\n * @param {number} roundId\n * @param {string} matchId\n */\nfunction swapColors(state, tourneyId, roundId, matchId) {\n    const round = state.tourneys[tourneyId].roundList[roundId];\n    const match = getById(round, matchId);\n    match.players.reverse();\n    match.origRating.reverse();\n    match.newRating.reverse();\n}\nObject.freeze(swapColors);\nexport {swapColors};\n","import {createContext} from \"react\";\nimport last from \"ramda/src/last\";\nimport curry from \"ramda/src/curry\";\nimport move from \"ramda/src/move\";\nimport {createPlayer, getPlayerById} from \"../data/player\";\nimport {getById} from \"../data/utility\";\nimport defaultOptions from \"./demo-options.json\";\nimport defaultPlayers from \"./demo-players.json\";\nimport defaultTourneyList from \"./demo-tourney.json\";\nimport {autoPair, manualPair, swapColors} from \"./match-functions\";\n/**\n * @typedef {import(\"./dispatch\").Action} Action\n * @typedef {import(\"./dispatch\").GlobalState} GlobalState\n */\n\n/**\n * @type {GlobalState}\n */\nconst defaultData = {\n    options: defaultOptions,\n    players: defaultPlayers.playerList.map((p) => createPlayer(p)),\n    avoid: defaultPlayers.avoidList,\n    // @ts-ignore\n    tourneys: defaultTourneyList\n};\nexport {defaultData};\n\n/**\n * @param {GlobalState} state\n * @param {Action} action\n * @returns {GlobalState}\n */\nfunction dataReducer(state, action) {\n    const {avoid, players, options, tourneys} = state;\n    const getPlayer = curry(getPlayerById)(players);\n    switch (action.type) {\n    // Options\n    case \"SET_BYE_VALUE\":\n        options.byeValue = action.byeValue;\n        return Object.assign({}, state);\n    // Players\n    case \"ADD_PLAYER\":\n        return Object.assign(\n            {},\n            state,\n            {players: players.concat([action.newPlayer])}\n        );\n    case \"DEL_PLAYER\":\n        return Object.assign(\n            {},\n            state,\n            {\n                players: players.filter((p) => p.id !== action.id),\n                avoid: avoid.filter(\n                    (pair) => !pair.includes(action.id)\n                )\n            }\n        );\n    case \"SET_PLAYER_MATCHCOUNT\":\n        Object.assign(\n            players[players.map((p) => p.id).indexOf(action.id)],\n            {matchCount: action.matchCount}\n        );\n        return Object.assign({}, state);\n    case \"SET_PLAYER_RATING\":\n        Object.assign(\n            players[players.map((p) => p.id).indexOf(action.id)],\n            {rating: action.rating}\n        );\n        return Object.assign({}, state);\n    // Avoid\n    case \"ADD_AVOID_PAIR\":\n        return Object.assign(\n            {},\n            state,\n            {avoid: avoid.concat([action.pair])}\n        );\n    case \"DEL_AVOID_PAIR\":\n        return Object.assign(\n            {},\n            state,\n            {avoid: avoid.filter(\n                (pair) => !(\n                    pair.includes(action.pair[0])\n                    && pair.includes(action.pair[1])\n                )\n            )}\n        );\n    // Tournaments\n    case \"ADD_TOURNEY\":\n        return Object.assign(\n            {},\n            state,\n            {tourneys: tourneys.concat([action.tourney])}\n        );\n    case \"DEL_TOURNEY\":\n        return Object.assign(\n            {},\n            state,\n            {tourneys: tourneys.filter((ignore, i) => i !== action.index)}\n        );\n    case \"ADD_ROUND\":\n        tourneys[action.tourneyId].roundList = (\n            tourneys[action.tourneyId].roundList.concat([[]])\n        );\n        return Object.assign({}, state);\n    case \"DEL_LAST_ROUND\":\n        // if a match has been scored, then reset it.\n        last(\n            tourneys[action.tourneyId].roundList\n        ).forEach(function (match) {\n            if (match.result.reduce((a, b) => a + b) !== 0) {\n                match.players.forEach(function (pId, color) {\n                    getPlayer(pId).matchCount -= 1;\n                    getPlayer(pId).rating = (\n                        match.origRating[color]\n                    );\n                });\n            }\n        });\n        tourneys[action.tourneyId].roundList = (\n            tourneys[action.tourneyId].roundList.slice(\n                0,\n                tourneys[action.tourneyId].roundList.length - 1\n            )\n        );\n        return Object.assign({}, state);\n    case \"ADD_TIEBREAK\":\n        tourneys[action.tourneyId].tieBreaks = (\n            tourneys[action.tourneyId].tieBreaks.concat([action.id])\n        );\n        return Object.assign({}, state);\n    case \"DEL_TIEBREAK\":\n        tourneys[action.tourneyId].tieBreaks = (\n            tourneys[action.tourneyId].tieBreaks.filter(\n                (id) => id !== action.id\n            )\n        );\n        return Object.assign({}, state);\n    case \"MOVE_TIEBREAK\":\n        tourneys[action.tourneyId].tieBreaks = move(\n            action.oldIndex,\n            action.newIndex,\n            tourneys[action.tourneyId].tieBreaks\n        );\n        return Object.assign({}, state);\n    case \"SET_TOURNEY_PLAYERS\":\n        tourneys[action.tourneyId].players = action.players;\n        return Object.assign({}, state);\n    case \"SET_BYE_QUEUE\":\n        tourneys[action.tourneyId].byeQueue = action.byeQueue;\n        return Object.assign({}, state);\n    case \"AUTO_PAIR\":\n        tourneys[action.tourneyId].roundList[action.roundId] = (\n            tourneys[action.tourneyId].roundList[action.roundId].concat(\n                autoPair(\n                    state,\n                    action.tourneyId,\n                    action.roundId,\n                    action.unpairedPlayers\n                )\n            )\n        );\n        return Object.assign({}, state);\n    case \"MANUAL_PAIR\":\n        tourneys[action.tourneyId].roundList[action.roundId] = (\n            tourneys[action.tourneyId].roundList[action.roundId].concat([\n                manualPair(\n                    state,\n                    action.pair\n                )\n            ])\n        );\n        return Object.assign({}, state);\n    case \"SET_MATCH_RESULT\":\n        getById(\n            tourneys[action.tourneyId].roundList[action.roundId],\n            action.matchId\n        ).result = action.result;\n        getById(\n            tourneys[action.tourneyId].roundList[action.roundId],\n            action.matchId\n        ).newRating = action.newRating;\n        return Object.assign({}, state);\n    case \"DEL_MATCH\":\n        tourneys[action.tourneyId].roundList[action.roundId] = (\n            tourneys[action.tourneyId].roundList[action.roundId].filter(\n                (match) => match.id !== action.matchId\n            )\n        );\n        return Object.assign({}, state);\n    case \"SWAP_COLORS\":\n        swapColors(state, action.tourneyId, action.roundId, action.matchId);\n        return Object.assign({}, state);\n    case \"MOVE_MATCH\":\n        tourneys[action.tourneyId].roundList[action.roundId] = move(\n            action.oldIndex,\n            action.newIndex,\n            tourneys[action.tourneyId].roundList[action.roundId]\n        );\n        return Object.assign({}, state);\n    default:\n        throw new Error(\"Unexpected action type\");\n    }\n}\nObject.freeze(dataReducer);\nexport {dataReducer};\n\n/** @type {{data: GlobalState, dispatch: React.Dispatch<Action>}} */\nconst defaultContext = null;\nconst DataContext = createContext(defaultContext);\nexport {DataContext};\n","import React, {useContext, useState} from \"react\";\nimport Trash from \"react-feather/dist/icons/trash-2\";\nimport Tooltip from \"@reach/tooltip\";\nimport {Link} from \"@reach/router\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport createTournament from \"../../data/tournament\";\nimport {DataContext} from \"../../state/global-state\";\nimport \"@reach/tooltip/styles.css\";\n\n/**\n * @param {Object} props\n * @param {string} props.path\n */\nexport default function TournamentList({path}) {\n    const {data, dispatch} = useContext(DataContext);\n    const tourneyList = data.tourneys;\n    const [newTourneyName, setNewTourneyName] = useState(\"\");\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\n    function updateNewName(event) {\n        setNewTourneyName(event.target.value);\n    }\n    /** @param {React.FormEvent<HTMLFormElement>} event */\n    function makeTournament(event) {\n        event.preventDefault();\n        dispatch({\n            type: \"ADD_TOURNEY\",\n            tourney: createTournament({name: newTourneyName})\n        });\n        setNewTourneyName(\"\");\n    }\n    return (\n        <div>\n            {(tourneyList.length > 0) &&\n                <h2>Tournament list</h2>\n            }\n            {(tourneyList.length > 0)\n                ?\n                <ol>\n                    {tourneyList.map((tourney, i) =>\n                        <li key={i}>\n                            <Link to={`tourney/${i}`}>\n                                {tourney.name}\n                            </Link>\n                            <Tooltip\n                                label={`Delete “${tourney.name}”`}\n                                aria-label={`Delete “${tourney.name}”`}>\n                                <button\n                                    className=\"danger\"\n                                    onClick={\n                                        () => dispatch({\n                                            type: \"DEL_TOURNEY\",\n                                            index: i\n                                        })\n                                    }>\n                                    <Trash />\n                                    <VisuallyHidden>\n                                        {/* Does the tooltip make this\n                                            redundant? react-testing-library\n                                            can't query the tooltips AFAIK.\n                                        */}\n                                        Delete “{tourney.name}”\n                                    </VisuallyHidden>\n                                </button>\n                            </Tooltip>\n                        </li>\n                    )}\n                </ol>\n                : <p>No tournaments added yet.</p>\n            }\n            <form onSubmit={makeTournament}>\n                <fieldset>\n                    <legend>Make a new tournament</legend>\n                    <label>Name{\" \"}\n                        <input\n                            type=\"text\"\n                            placeholder=\"tournament name\"\n                            value={newTourneyName}\n                            onChange={updateNewName}\n                            required={true}\n                        />\n                    </label>\n                    <input type=\"submit\" value=\"Create\" />\n                </fieldset>\n            </form>\n        </div>\n    );\n}\n","import React, {useReducer} from \"react\";\nimport {dataReducer, defaultData, DataContext} from \"../state/global-state\";\n\n/**\n * @typedef {(event: React.MouseEvent | React.KeyboardEvent) => void} Action\n */\n\n/** @param {{children: JSX.Element | string, action: Action}} props */\nexport const Button = ({children, action}) => (\n    <button onClick={action}>\n        {children}\n    </button>\n);\n\n/** @param {{action: Action}} action */\nexport const BackButton = ({action}) => (\n    <Button action={action}>&lt; Back</Button>\n);\n\n/** @param {{action: Action}} action */\nexport const OpenButton = ({action}) => (\n    <Button action={action}>Open &gt;</Button>\n);\n\n// /** @param {{action: Action}} props */\n// export const InfoButton = ({action}) => (\n//     <Button action={action}>Info</Button>\n// );\n\n\n/**\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {React.CSSProperties} [props.style]\n */\nexport function Panel({children, style}) {\n    return (\n        <div style={{...style}}>\n            {children}\n        </div>\n    );\n}\n\n/**\n *\n * @param {object} props\n */\nexport function PanelContainer({children}) {\n    return (\n        <div style={{display: \"flex\"}}>\n            {React.Children.map(children, (child) => child)}\n        </div>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {React.ReactNode} props.children\n */\nexport function TestApp({children}) {\n    const [data, dispatch] = useReducer(dataReducer, defaultData);\n    return (\n        <DataContext.Provider value={{data, dispatch}}>\n            {children}\n        </DataContext.Provider>\n    );\n}\n","import React, {Fragment, useState, useContext} from \"react\";\nimport {OpenButton} from \"../utility\";\nimport {createPlayer} from \"../../data/player\";\nimport {DataContext} from \"../../state/global-state\";\n\n/**\n * @param {Object} props\n * @param {React.Dispatch<React.SetStateAction<number>>} props.setOpenPlayer\n */\nexport default function PlayerList({setOpenPlayer}) {\n    const {data, dispatch} = useContext(DataContext);\n    const newPlayerDefault = {firstName: \"\", lastName: \"\", rating: 1200};\n    const [newPlayerData, setNewPlayerdata] = useState(newPlayerDefault);\n    const ids = data.players.map((p) => p.id);\n    ids.sort((a, b) => a - b);\n    ids.reverse();\n    const [nextId, setNextId] = useState(ids[0] + 1);\n    /** @param {React.FormEvent<HTMLFormElement>} event */\n    const handleSubmit = function (event) {\n        event.preventDefault();\n        const newPlayer = createPlayer(newPlayerData);\n        newPlayer.id = nextId;\n        setNextId((prevId) => prevId + 1);\n        setNewPlayerdata(newPlayerDefault);\n        dispatch({type: \"ADD_PLAYER\", newPlayer});\n    };\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\n    const updateField = function (event) {\n        event.preventDefault();\n        /** @type {Object<string, string>} */\n        let update = {};\n        update[event.currentTarget.name] = event.currentTarget.value;\n        setNewPlayerdata(Object.assign({}, newPlayerData, update));\n    };\n    /**\n     * @param {React.MouseEvent<HTMLButtonElement, MouseEvent>} event\n     * @param {number} id\n     */\n    const delPlayer = function (event, id) {\n        event.preventDefault();\n        dispatch({type: \"DEL_PLAYER\", id});\n    };\n    let rosterTable = <Fragment></Fragment>;\n    if (data.players.length > 0) {\n        rosterTable =\n        <table>\n            <caption>Demo Roster</caption>\n            <thead>\n                <tr>\n                    <th>First name</th>\n                    <th>Last name</th>\n                    <th>Rating</th>\n                    <th></th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>{data.players.map((player) =>\n                <tr key={player.id}>\n                    <td className=\"table__player\">{player.firstName}</td>\n                    <td className=\"table__player\">{player.lastName}</td>\n                    <td className=\"table__number\">{player.rating}</td>\n                    <td>\n                        <button\n                            className=\"danger\"\n                            onClick={(event) =>\n                                delPlayer(event, player.id)\n                            }>\n                            delete\n                        </button>\n                    </td>\n                    <td>\n                        <OpenButton\n                            action={() => setOpenPlayer(player.id)} />\n                    </td>\n                </tr>\n            )}</tbody>\n        </table>;\n    }\n    return (\n        <div className=\"roster\">\n            {rosterTable}\n            <form onSubmit={handleSubmit}>\n                <fieldset>\n                    <legend>Add your own players</legend>\n                    <p>\n                        <label>\n                            First name\n                            {\" \"}\n                            <input type=\"text\" name=\"firstName\"\n                                onChange={updateField}\n                                value={newPlayerData.firstName} required />\n                        </label>\n                    </p>\n                    <p>\n                        <label>\n                            Last name\n                            {\" \"}\n                            <input type=\"text\" name=\"lastName\"\n                                onChange={updateField}\n                                value={newPlayerData.lastName} required />\n                        </label>\n                    </p>\n                    <p>\n                        <label>\n                            Rating\n                            {\" \"}\n                            <input\n                                type=\"number\"\n                                name=\"rating\"\n                                onChange={updateField}\n                                value={newPlayerData.rating}\n                                required />\n                        </label>\n                    </p>\n                    <p>\n                        <input type=\"submit\" value=\"Add\"/>\n                    </p>\n                </fieldset>\n            </form>\n        </div>\n    );\n}\n","import React, {useState, useEffect, useContext} from \"react\";\nimport numeral from \"numeral\";\nimport curry from \"ramda/src/curry\";\nimport {BackButton} from \"../utility\";\nimport {getPlayerById, getPlayerAvoidList, kFactor} from \"../../data/player\";\nimport {DataContext} from \"../../state/global-state\";\n\n/**\n * @param {Object} props\n * @param {number} props.playerId\n * @param {React.Dispatch<React.SetStateAction<number>>} [props.setOpenPlayer]\n */\nexport default function PlayerInfoBox({playerId, setOpenPlayer}) {\n    const {data, dispatch} = useContext(DataContext);\n    // const playerList = data.players;\n    const getPlayer = curry(getPlayerById)(data.players);\n    const avoidList = data.avoid;\n    const [singAvoidList, setSingAvoidList] = useState(\n        getPlayerAvoidList(playerId, avoidList)\n    );\n    const unAvoided = () => (\n        data.players.map(\n            (player) => player.id\n        ).filter(\n            (pId) => !singAvoidList.includes(pId) && pId !== playerId\n        )\n    );\n    const [selectedAvoider, setSelectedAvoider] = useState(unAvoided()[0]);\n    /** @param {React.FormEvent<HTMLFormElement>} event */\n    function avoidAdd(event) {\n        event.preventDefault();\n        setSelectedAvoider(unAvoided()[0]);\n        dispatch({\n            type: \"ADD_AVOID_PAIR\",\n            pair: [playerId, Number(selectedAvoider)]\n        });\n    }\n    useEffect(\n        function () {\n            setSingAvoidList(getPlayerAvoidList(playerId, avoidList));\n        },\n        [avoidList, playerId]\n    );\n    return (\n        <div>\n            <BackButton action={() => setOpenPlayer(null)} />\n            <h2>\n                {getPlayer(playerId).firstName} {getPlayer(playerId).lastName}\n            </h2>\n            <dl>\n                <dt id=\"match-count\">Matches played</dt>\n                <dd aria-labelledby=\"match-count\">\n                    {getPlayer(playerId).matchCount}\n                </dd>\n                <dt id=\"rating\">Rating</dt>\n                <dd aria-labelledby=\"rating\">{getPlayer(playerId).rating}</dd>\n                <dt>K factor</dt>\n                <dd>\n                    {numeral(kFactor(getPlayer(playerId).matchCount)).format(\n                        \"00\"\n                    )}\n                </dd>\n                <dt>Players to avoid</dt>\n                <dd>\n                    <ul>\n                        {singAvoidList.map((pId) => (\n                            <li key={pId}>\n                                {getPlayer(pId).firstName}{\" \"}\n                                {getPlayer(pId).lastName}\n                                <button\n                                    className=\"danger\"\n                                    onClick={() =>\n                                        dispatch({\n                                            type: \"DEL_AVOID_PAIR\",\n                                            pair: [playerId, pId]\n                                        })\n                                    }\n                                >\n                                    remove\n                                </button>\n                            </li>\n                        ))}\n                        {avoidList.length === 0 && <li>None</li>}\n                    </ul>\n                </dd>\n            </dl>\n            <form onSubmit={(event) => avoidAdd(event)}>\n                <fieldset>\n                    <legend>Add player to avoid</legend>\n                    <select\n                        onBlur={(event) =>\n                            setSelectedAvoider(Number(event.target.value))\n                        }\n                    >\n                        {unAvoided().map((pId) => (\n                            <option key={pId} value={pId}>\n                                {getPlayer(pId).firstName}{\" \"}\n                                {getPlayer(pId).lastName}\n                            </option>\n                        ))}\n                    </select>\n                    <input type=\"submit\" value=\"Add\" />\n                </fieldset>\n            </form>\n        </div>\n    );\n}\n","import React, {useState} from \"react\";\nimport PlayerList from \"./list\";\nimport PlayerInfoBox from \"./info-box\";\n\n/**\n * @param {Object} props\n * @param {string} props.path\n */\nexport default function PlayerView({path}) {\n    /** @type {number} */\n    const defaultOpen = null;\n    const [openPlayer, setOpenPlayer] = useState(defaultOpen);\n    if (openPlayer !== null) {\n        return (\n            <PlayerInfoBox\n                key={openPlayer}\n                playerId={openPlayer}\n                setOpenPlayer={setOpenPlayer} />\n        );\n    } else {\n        return (\n            <PlayerList setOpenPlayer={setOpenPlayer}/>\n        );\n    }\n}\n","import React, {useContext} from \"react\";\nimport {DataContext} from \"../state/global-state\";\n\n/**\n * @param {Object} props\n * @param {string} props.path\n */\nexport function Options({path}) {\n    const {data, dispatch} = useContext(DataContext);\n    const options = data.options;\n    return (\n        <div>\n            <form>\n                <fieldset>\n                    <legend>Bye options</legend>\n                    Select how many points a bye is worth:\n                    {\" \"}\n                    <label>\n                        1\n                        <input\n                            type=\"radio\"\n                            checked={options.byeValue === 1}\n                            onChange={\n                                () => dispatch({\n                                    type: \"SET_BYE_VALUE\",\n                                    byeValue: 1\n                                })\n                            } />\n                    </label>\n                    <label>\n                        0.5\n                        <input\n                            type=\"radio\"\n                            checked={options.byeValue === 0.5}\n                            onChange={\n                                () => dispatch({\n                                    type: \"SET_BYE_VALUE\",\n                                    byeValue: 0.5\n                                })\n                            } />\n                    </label>\n                </fieldset>\n            </form>\n            {/* <form onSubmit={(event) => event.preventDefault()}>\n            <fieldset>\n                <legend>Export tournaments</legend>\n                <textarea\n                    className=\"json\"\n                    rows={25}\n                    cols={50}\n                    value={outputTourney}\n                    readOnly\n                    name=\"tourneyData\"\n                    />\n                <input type=\"submit\" value=\"load\" disabled />\n            </fieldset>\n            </form> */}\n            <form onSubmit={(event) => event.preventDefault()}>\n                <fieldset>\n                    <legend>Export data</legend>\n                    <textarea\n                        className=\"json\"\n                        rows={25}\n                        cols={50}\n                        value={JSON.stringify(data, null, 2)}\n                        name=\"playerdata\"\n                        readOnly />\n                    <input type=\"submit\" value=\"Load\" disabled />\n                </fieldset>\n            </form>\n        </div>\n    );\n}\n","import React from \"react\";\nimport styles from \"./index.module.css\";\n\nconst Caution = () => (\n    <div className={styles.caution}>\n        <p className={styles.caution__text}>\n            <span role=\"img\" aria-label=\"warning\">⚠️</span>\n            &nbsp;\n            This is an unstable demo build.\n            &nbsp;\n            <span role=\"img\" aria-label=\"warning\">⚠️</span>\n            {\" \"}\n            Want to help make it better? Head to the\n            {\" \"}\n            <span role=\"img\" aria-label=\"finger pointing right\">👉</span>\n            &nbsp;\n            <a\n                className={styles.caution__link}\n                href=\"https://github.com/johnridesabike/chessahoochee\">\n                Git repository\n            </a>.\n        </p>\n    </div>\n);\n\nexport default Caution;\n","import React, {useState, useContext} from \"react\";\nimport {Menu, MenuList, MenuButton, MenuItem} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport numeral from \"numeral\";\nimport curry from \"ramda/src/curry\";\nimport Repeat from \"react-feather/dist/icons/repeat\";\nimport Trash from \"react-feather/dist/icons/trash-2\";\nimport ArrowUp from \"react-feather/dist/icons/arrow-up\";\nimport ArrowDown from \"react-feather/dist/icons/arrow-down\";\nimport More from \"react-feather/dist/icons/more-horizontal\";\nimport Close from \"react-feather/dist/icons/x\";\nimport {PanelContainer, Panel} from \"../utility\";\nimport {getPlayerById, calcNewRatings, dummyPlayer} from \"../../data/player\";\nimport {genPlayerData} from \"../../pairing-scoring/scoring\";\nimport {BLACK, WHITE} from \"../../data/constants\";\nimport {getById, getIndexById} from \"../../data/utility\";\nimport {DataContext} from \"../../state/global-state\";\nimport style from \"./round.module.css\";\n\n/**\n * @param {Object} props\n * @param {number} props.roundId\n * @param {number} props.tourneyId\n */\nexport default function Round({roundId, tourneyId}) {\n    const {data, dispatch} = useContext(DataContext);\n    const getPlayer = curry(getPlayerById)(data.players);\n    const tourney = data.tourneys[tourneyId];\n    const matchList = tourney.roundList[roundId];\n    /** @type {string} */\n    const defaultMatch = null;\n    const [selectedMatch, setSelectedMatch] = useState(defaultMatch);\n    /** @param {string} matchId */\n    function unMatch(matchId) {\n        const match = getById(tourney.roundList[roundId], matchId);\n        if (match.result.reduce((a, b) => a + b) !== 0) {\n            // checks if the match has been scored yet & resets the players'\n            // records\n            match.players.forEach(function (pId, color) {\n                dispatch({\n                    type: \"SET_PLAYER_MATCHCOUNT\",\n                    id: pId,\n                    matchCount: getPlayer(pId).matchCount - 1\n                });\n                dispatch({\n                    type: \"SET_PLAYER_RATING\",\n                    id: pId,\n                    rating: match.origRating[color]\n                });\n            });\n        }\n        dispatch({type: \"DEL_MATCH\", tourneyId, roundId, matchId});\n        setSelectedMatch(null);\n    }\n    /** @param {string} matchId */\n    function swapColors(matchId) {\n        dispatch({type: \"SWAP_COLORS\", tourneyId, roundId, matchId});\n    }\n    /**\n     * @param {string} matchId\n     * @param {number} direction\n     */\n    function moveMatch(matchId, direction) {\n        const matchesRef = data.tourneys[tourneyId].roundList[roundId];\n        const oldIndex = getIndexById(matchesRef, matchId);\n        const newIndex = (\n            (oldIndex + direction >= 0)\n            ? oldIndex + direction\n            : 0\n        );\n        dispatch({type: \"MOVE_MATCH\", tourneyId, roundId, oldIndex, newIndex});\n    }\n    return (\n        <PanelContainer>\n            <Panel>\n                <div className=\"toolbar\">\n                    <button\n                        className=\"danger\"\n                        onClick={() => unMatch(selectedMatch)}\n                        disabled={selectedMatch === null}\n                    >\n                        <Trash />\n                        <VisuallyHidden>Unmatch</VisuallyHidden>\n                    </button>\n                    <button\n                        onClick={() => swapColors(selectedMatch)}\n                        disabled={selectedMatch === null}\n                    >\n                        <Repeat />\n                        <VisuallyHidden>Swap colors</VisuallyHidden>\n                    </button>\n                    <button\n                        onClick={() => moveMatch(selectedMatch, -1)}\n                        disabled={selectedMatch === null}\n                    >\n                        <ArrowUp />\n                        <VisuallyHidden>Move up</VisuallyHidden>\n                    </button>\n                    <button\n                        onClick={() => moveMatch(selectedMatch, 1)}\n                        disabled={selectedMatch === null}\n                    >\n                        <ArrowDown/>\n                        <VisuallyHidden>Move down</VisuallyHidden>\n                    </button>\n                </div>\n                {(matchList.length === 0) &&\n                    <p>No players matched yet.</p>\n                }\n                <table className={style.table}>\n                    {(matchList.length > 0) &&\n                        <caption>Round {roundId + 1} results</caption>\n                    }\n                    <tbody>\n                        {(matchList.length > 0) &&\n                            <tr>\n                                <th className=\"row__id\" scope=\"col\">\n                                    #\n                                </th>\n                                <th className=\"row__player\" scope=\"col\">\n                                    White\n                                </th>\n                                <th className=\"row__player\" scope=\"col\">\n                                    Black\n                                </th>\n                                <th className=\"row__result\" scope=\"col\">\n                                    Result\n                                </th>\n                                <th className=\"row__controls\" scope=\"col\">\n                                    Controls\n                                </th>\n                            </tr>\n                        }\n                        {matchList.map((match, pos) => (\n                            <MatchRow\n                                key={match.id}\n                                pos={pos}\n                                match={match}\n                                tourneyId={tourneyId}\n                                roundId={roundId}\n                                selectedMatch={selectedMatch}\n                                setSelectedMatch={setSelectedMatch}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </Panel>\n            <Panel>\n                {selectedMatch !== null && (\n                    <PanelContainer>\n                        <Panel>\n                            <PlayerMatchInfo\n                                match={getById(matchList, selectedMatch)}\n                                color={0}\n                                tourneyId={tourneyId}\n                                roundId={roundId}\n                            />\n                        </Panel>\n                        <Panel>\n                            <PlayerMatchInfo\n                                match={getById(matchList, selectedMatch)}\n                                color={1}\n                                tourneyId={tourneyId}\n                                roundId={roundId}\n                            />\n                        </Panel>\n                    </PanelContainer>\n                )}\n                <PairPicker\n                    tourneyId={tourneyId}\n                    roundId={roundId}\n                />\n            </Panel>\n        </PanelContainer>\n    );\n}\n\n/**\n * @typedef {import(\"../../data/\").Match} Match\n */\n\n/**\n * @param {Object} props\n * @param {number} props.pos\n * @param {Match} props.match\n * @param {number} props.tourneyId\n * @param {number} props.roundId\n * @param {string} props.selectedMatch\n * @param {React.Dispatch<React.SetStateAction<string>>} props.setSelectedMatch\n */\nfunction MatchRow({\n    pos,\n    match,\n    tourneyId,\n    roundId,\n    selectedMatch,\n    setSelectedMatch\n}) {\n    const {data, dispatch} = useContext(DataContext);\n    const tourney = data.tourneys[tourneyId];\n    const getPlayer = curry(getPlayerById)(data.players);\n    const whiteWon = match.result[0] > match.result[1];\n    const blackWon = match.result[1] > match.result[0];\n    const draw = match.result.every((x) => x === 0.5);\n    const whiteName = (\n        getPlayer(match.players[0]).firstName\n        + \" \"\n        + getPlayer(match.players[0]).lastName\n    );\n    const blackName = (\n        getPlayer(match.players[1]).firstName\n        + \" \"\n        + getPlayer(match.players[1]).lastName\n    );\n\n    /**\n     * @param {string} matchId\n     * @param {[number, number]} result\n     */\n    function setMatchResult(matchId, result) {\n        const theMatch = getById(tourney.roundList[roundId], matchId);\n        const white = getPlayer(theMatch.players[WHITE]);\n        const black = getPlayer(theMatch.players[BLACK]);\n        const newRating = calcNewRatings(\n            theMatch.origRating,\n            [white.matchCount, black.matchCount],\n            result\n        );\n        dispatch({\n            type: \"SET_PLAYER_RATING\",\n            id: white.id,\n            rating: newRating[WHITE]\n        });\n        dispatch({\n            type: \"SET_PLAYER_RATING\",\n            id: black.id,\n            rating: newRating[BLACK]\n        });\n        // if the result hasn't been scored yet, increment the matchCount\n        if (theMatch.result.reduce((a, b) => a + b) === 0) {\n            dispatch({\n                type: \"SET_PLAYER_MATCHCOUNT\",\n                id: white.id,\n                matchCount: white.matchCount + 1\n            });\n            dispatch({\n                type: \"SET_PLAYER_MATCHCOUNT\",\n                id: black.id,\n                matchCount: black.matchCount + 1\n            });\n        }\n        dispatch({\n            type: \"SET_MATCH_RESULT\",\n            tourneyId,\n            roundId,\n            matchId,\n            result,\n            newRating\n        });\n    }\n    return (\n        <tr>\n            <th className=\"table__number row__id\" scope=\"row\">{pos + 1}</th>\n            <td\n                className=\"table__player row__player\"\n                data-testid={`match-${pos}-white`}\n            >\n                {whiteName}{\" \"}\n                {whiteWon && (\n                    <span role=\"img\" aria-label=\"Winner\">\n                        🏆\n                    </span>\n                )}\n            </td>\n            <td\n                className=\"table__player row__player\"\n                data-testid={`match-${pos}-black`}\n            >\n                {blackName}{\" \"}\n                {blackWon && (\n                    <span role=\"img\" aria-label=\"Winner\">\n                        🏆\n                    </span>\n                )}\n            </td>\n            <td className=\"row__result\">\n                {whiteWon && \"White won\"}\n                {blackWon && \"Black won\"}\n                {draw && \"Draw\"}\n            </td>\n            <td className=\"data__input row__controls\">\n                <Menu>\n                    <MenuButton\n                        disabled={match.players.includes(dummyPlayer.id)}\n                    >\n                        <VisuallyHidden>\n                            Set result for {whiteName} versus {blackName}\n                        </VisuallyHidden>\n                        <span aria-hidden>Set result ▾</span>\n                    </MenuButton>\n                    <MenuList>\n                        <MenuItem\n                            onSelect={() => setMatchResult(match.id, [1, 0])}\n                        >\n                            {whiteName} won\n                        </MenuItem>\n                        <MenuItem\n                            onSelect={() => setMatchResult(match.id, [0, 1])}\n                        >\n                            {blackName} won\n                        </MenuItem>\n                        <MenuItem onSelect={() =>\n                            setMatchResult(match.id, [0.5, 0.5])\n                        }>\n                            Draw\n                        </MenuItem>\n                    </MenuList>\n                </Menu>{\" \"}\n                {(selectedMatch !== match.id)\n                ?\n                    <button onClick={() => setSelectedMatch(match.id)}>\n                        <More />\n                        <VisuallyHidden>\n                            More information and options for {whiteName} versus\n                            {\" \"}{blackName}\n                        </VisuallyHidden>\n                    </button>\n                :\n                    <button onClick={() => setSelectedMatch(null)}>\n                        <Close/>\n                        <VisuallyHidden>Close information.</VisuallyHidden>\n                    </button>\n                }\n            </td>\n        </tr>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {Match} props.match\n * @param {number} props.color\n * @param {number} props.tourneyId\n * @param {number} props.roundId\n */\nfunction PlayerMatchInfo({match, color, tourneyId, roundId}) {\n    const {data} = useContext(DataContext);\n    // const playerList = data.players;\n    const getPlayer = curry(getPlayerById)(data.players);\n    const playerData = genPlayerData(\n        match.players[color],\n        data.players,\n        data.avoid,\n        data.tourneys[tourneyId].roundList,\n        roundId\n    );\n    const colorBalance = playerData.colorBalance;\n    let prettyBalance = \"Even\";\n    if (colorBalance < 0) {\n        prettyBalance = \"White +\" + Math.abs(colorBalance);\n    } else if (colorBalance > 0) {\n        prettyBalance = \"Black +\" + colorBalance;\n    }\n    return (\n        <dl className=\"player-card\">\n            <h3>\n                {playerData.data.firstName} {playerData.data.lastName}\n            </h3>\n            <dt>Score</dt>\n            <dd>{playerData.score}</dd>\n            <dt>Rating</dt>\n            <dd>\n                {match.origRating[color]} (\n                {numeral(\n                    match.newRating[color] - match.origRating[color]\n                ).format(\"+0\")}\n                )\n            </dd>\n            <dt>Color balance</dt>\n            <dd>{prettyBalance}</dd>\n            <dt>Has had a bye round</dt>\n            <dd>{playerData.hasHadBye ? \"Yes\" : \"No\"}</dd>\n            <dt>Opponent history</dt>\n            <dd>\n                <ol>\n                    {playerData.opponentHistory.map((opId) => (\n                        <li key={opId}>\n                            {getPlayer(opId).firstName}{\" \"}\n                            {getPlayer(opId).lastName}\n                        </li>\n                    ))}\n                </ol>\n            </dd>\n            <dt>Players to avoid</dt>\n            <dd>\n                <ol>\n                    {playerData.avoidList.map((pId) => (\n                        <li key={pId}>\n                            {getPlayer(pId).firstName} {getPlayer(pId).lastName}\n                        </li>\n                    ))}\n                </ol>\n            </dd>\n        </dl>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {number} props.tourneyId\n * @param {number} props.roundId\n */\nfunction PairPicker({tourneyId, roundId}) {\n    const {data, dispatch} = useContext(DataContext);\n    const getPlayer = curry(getPlayerById)(data.players);\n    const tourney = data.tourneys[tourneyId];\n    const matchList = tourney.roundList[roundId];\n    /** @type {number[]} */\n    const defaultPlayers = [];\n    const [selectedPlayers, setSelectedPlayers] = useState(defaultPlayers);\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\n    function selectPlayer(event) {\n        const pId = Number(event.target.value);\n        if (event.target.checked) {\n            setSelectedPlayers(function (prevState) {\n                // stop React from adding an ID twice in a row\n                if (!prevState.includes(pId)) {\n                    prevState.push(pId);\n                }\n                // ensure that only the last two players stay selected.\n                return prevState.slice(-2);\n            });\n        } else {\n            setSelectedPlayers(selectedPlayers.filter((id) => id !== pId));\n        }\n    }\n    const matched = matchList.reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    );\n    const unMatched = tourney.players.filter((pId) => !matched.includes(pId));\n    if (unMatched.length === 0) {\n        return null;\n    }\n    return (\n        <div>\n            <h3>Unmatched players</h3>\n            <ul>\n                {unMatched.map((pId) => (\n                    <li key={pId}>\n                        <input\n                            id={`${pId}`}\n                            type=\"checkbox\"\n                            checked={selectedPlayers.includes(pId)}\n                            value={pId}\n                            onChange={selectPlayer}\n                        />{\" \"}\n                        <label htmlFor={`${pId}`}>\n                            {getPlayer(pId).firstName} {getPlayer(pId).lastName}\n                        </label>\n                    </li>\n                ))}\n                {unMatched.length % 2 !== 0 && (\n                    <li>\n                        <input\n                            type=\"checkbox\"\n                            checked={selectedPlayers.includes(\n                                dummyPlayer.id\n                            )}\n                            value={dummyPlayer.id}\n                            onChange={selectPlayer}\n                        />\n                        {dummyPlayer.firstName} {dummyPlayer.lastName}\n                    </li>\n                )}\n            </ul>\n            <button\n                onClick={() => dispatch({\n                    type: \"MANUAL_PAIR\",\n                    pair: selectedPlayers,\n                    tourneyId,\n                    roundId\n                })}\n                disabled={selectedPlayers.length !== 2}\n            >\n                Pair checked\n            </button>{\" \"}\n            <button\n                onClick={() => dispatch({\n                    type: \"AUTO_PAIR\",\n                    unpairedPlayers: unMatched,\n                    tourneyId,\n                    roundId\n                })}\n                disabled={unMatched.length === 0}\n            >\n                Auto-pair\n            </button>\n        </div>\n    );\n}\n","import React, {useContext, useState} from \"react\";\nimport curry from \"ramda/src/curry\";\nimport {getPlayerById} from \"../../data/player\";\nimport {hasHadBye} from \"../../pairing-scoring/scoring\";\nimport {DataContext} from \"../../state/global-state\";\n\n/**\n * @param {Object} props\n * @param {number} props.tourneyId\n */\nexport default function PlayerSelect({tourneyId}) {\n    const {data, dispatch} = useContext(DataContext);\n    const getPlayer = curry(getPlayerById)(data.players);\n    const players = data.tourneys[tourneyId].players;\n    const tourney = data.tourneys[tourneyId];\n    const [isSelecting, setIsSelecting] = useState(players.length === 0);\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\n    function togglePlayer(event) {\n        const id = Number(event.target.value);\n        if (event.target.checked) {\n            dispatch({\n                type: \"SET_TOURNEY_PLAYERS\",\n                players: players.concat([id]),\n                tourneyId\n            });\n        } else {\n            dispatch({\n                type: \"SET_TOURNEY_PLAYERS\",\n                players: players.filter((pId) => pId !== id),\n                tourneyId\n            });\n        }\n    }\n    if (isSelecting) {\n        return (\n            <table>\n                <caption>Select players</caption>\n                <thead>\n                    <tr>\n                        <th>First name</th>\n                        <th>Last name</th>\n                        <th />\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.players.map((p) => (\n                        <tr key={p.id}>\n                            <td>{p.firstName}</td>\n                            <td>{p.lastName}</td>\n                            <td>\n                                <input\n                                    type=\"checkbox\"\n                                    value={p.id}\n                                    checked={players.includes(p.id)}\n                                    onChange={togglePlayer}\n                                />\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n                <tfoot>\n                    <tr>\n                        <td colSpan={3}>\n                            <button\n                                onClick={() =>\n                                    dispatch({\n                                        type: \"SET_TOURNEY_PLAYERS\",\n                                        players: data.players.map((p) => p.id),\n                                        tourneyId\n                                    })\n                                }\n                            >\n                                Select all\n                            </button>\n                            <button\n                                onClick={() =>\n                                    dispatch({\n                                        type: \"SET_TOURNEY_PLAYERS\",\n                                        players: [],\n                                        tourneyId\n                                    })\n                                }\n                            >\n                                Select none\n                            </button>\n                            <button onClick={() => setIsSelecting(false)}>\n                                Done\n                            </button>\n                        </td>\n                    </tr>\n                </tfoot>\n            </table>\n        );\n    } else {\n        return (\n            <div>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>First name</th>\n                            <th>Last name</th>\n                            <th />\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {players.map((pId) => (\n                            <tr\n                                key={pId}\n                                className={getPlayer(pId).type + \" player\"}\n                            >\n                                <td>{getPlayer(pId).firstName}</td>\n                                <td>{getPlayer(pId).lastName}</td>\n                                <td>\n                                    <button\n                                        onClick={() =>\n                                            dispatch({\n                                                type: \"SET_BYE_QUEUE\",\n                                                // eslint-disable-next-line max-len\n                                                byeQueue: tourney.byeQueue.concat(\n                                                    [pId]\n                                                ),\n                                                tourneyId\n                                            })\n                                        }\n                                        disabled={tourney.byeQueue.includes(\n                                            pId\n                                        )}\n                                    >\n                                        Bye signup\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                <button onClick={() => setIsSelecting(true)}>\n                    Edit player roster\n                </button>\n                <h3>Bye queue</h3>\n                <ol>\n                    {tourney.byeQueue.map((pId) => (\n                        <li\n                            key={pId}\n                            className={\n                                hasHadBye(pId, tourney.roundList)\n                                    ? \"disabled\"\n                                    : \"\"\n                            }\n                        >\n                            {getPlayer(pId).firstName}{\" \"}\n                            {getPlayer(pId).lastName}\n                            <button\n                                onClick={() =>\n                                    dispatch({\n                                        type: \"SET_BYE_QUEUE\",\n                                        byeQueue: tourney.byeQueue.filter(\n                                            (id) => pId !== id\n                                        ),\n                                        tourneyId\n                                    })\n                                }\n                            >\n                                Remove\n                            </button>\n                        </li>\n                    ))}\n                </ol>\n            </div>\n        );\n    }\n}\n","import React, {useState, useContext} from \"react\";\nimport curry from \"ramda/src/curry\";\nimport numeral from \"numeral\";\nimport dashify from \"dashify\";\nimport {PanelContainer, Panel} from \"../utility\";\nimport {dummyPlayer, getPlayerById} from \"../../data/player\";\nimport {DataContext} from \"../../state/global-state\";\nimport {calcStandings, tieBreakMethods} from \"../../pairing-scoring/scoring\";\nimport style from \"./scores.module.css\";\n\n// let's make a custom numeral format. I don't really know how this works.\nnumeral.register(\"format\", \"half\", {\n    regexps: {\n        format: /(1\\/2)/,\n        unformat: /(1\\/2)/\n    },\n    format: function (value, format, roundingFunction) {\n        /** @type {number | string} */\n        let whole = Math.floor(value);\n        /** @type {number | string} */\n        let remainder = value - whole;\n        if (remainder === 0.5) {\n            remainder = \"½\";\n        } else if (remainder === 0) {\n            remainder = \"\";\n        }\n        if (whole === 0 && remainder) {\n            whole = \"\";\n        }\n        // let output = numeral._.numberToFormat(value, format, roundingFunction);\n        // return output;\n        return String(whole) + remainder;\n    },\n    unformat: function (value) {\n        return Number(value); // doesn't work... todo?\n    }\n});\n\n/**\n * @param {Object} props\n * @param {number} props.tourneyId\n */\nfunction ScoreList({tourneyId}) {\n    const {data} = useContext(DataContext);\n    const getPlayer = curry(getPlayerById)(data.players);\n    const tourney = data.tourneys[tourneyId];\n    const [standingTree, tbMethods] = calcStandings(\n        tourney.tieBreaks,\n        tourney.roundList\n    );\n    return (\n        <table className={style.table}>\n            <caption>Standings</caption>\n            <tbody>\n                <tr className={style.topHeader}>\n                    <th scope=\"col\">Rank</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Score</th>\n                    {tbMethods.map((name, i) => (\n                        <th key={i} scope=\"col\">\n                            {name}\n                        </th>\n                    ))}\n                </tr>\n                {standingTree.map((standingsFlat, rank) =>\n                    standingsFlat.filter(\n                        (p) => p.id !== dummyPlayer.id\n                    ).map((standing, j, src) => (\n                        <tr key={standing.id} className={style.row}>\n                            {j === 0 && ( // Only display the rank once\n                                <th\n                                    scope=\"row\"\n                                    className={\"table__number \" + style.rank}\n                                    rowSpan={src.length}\n                                >\n                                    {numeral(rank + 1).format(\"0o\")}\n                                </th>\n                            )}\n                            <th\n                                scope=\"row\"\n                                className={style.playerName}\n                                data-testid={rank}\n                            >\n                                {getPlayer(standing.id).firstName}&nbsp;\n                                {getPlayer(standing.id).lastName}\n                            </th>\n                            <td\n                                className=\"table__number\"\n                                data-testid={dashify(\n                                    getPlayer(standing.id).firstName\n                                    + getPlayer(standing.id).lastName\n                                    + \" score\"\n                                )}\n                            >\n                                {numeral(standing.score).format(\"1/2\")}\n                            </td>\n                            {standing.tieBreaks.map((score, i) => (\n                                <td\n                                    key={i}\n                                    className=\"table__number\"\n                                    data-testid={dashify(\n                                        getPlayer(standing.id).firstName\n                                        + getPlayer(standing.id).lastName\n                                        + tbMethods[i]\n                                    )}\n                                >\n                                    {numeral(score).format(\"1/2\")}\n                                </td>\n                            ))}\n                        </tr>\n                    ))\n                )}\n            </tbody>\n        </table>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {number} props.tourneyId\n */\nfunction SelectTieBreaks({tourneyId}) {\n    const {data, dispatch} = useContext(DataContext);\n    const tourney = data.tourneys[tourneyId];\n    const [selectedTb, setSelectedTb] = useState(null);\n    /** @param {number} [id] */\n    function toggleTb(id = null) {\n        if (!id) {\n            id = selectedTb;\n        }\n        const tieBreaks = data.tourneys[tourneyId].tieBreaks;\n        if (tieBreaks.includes(id)) {\n            dispatch({type: \"DEL_TIEBREAK\", id, tourneyId});\n        } else {\n            dispatch({type: \"ADD_TIEBREAK\", id, tourneyId});\n        }\n    }\n    /** @param {number} direction */\n    function moveTb(direction) {\n        const index = data.tourneys[tourneyId].tieBreaks.indexOf(selectedTb);\n        dispatch({\n            type: \"MOVE_TIEBREAK\",\n            oldIndex: index,\n            newIndex: index + direction,\n            tourneyId\n        });\n    }\n    return (\n        <div>\n            <h3>Selected tiebreak methods</h3>\n            <div className=\"toolbar\">\n                <button\n                    onClick={() => toggleTb()}\n                    disabled={selectedTb === null}\n                >\n                    Toggle\n                </button>\n                <button\n                    onClick={() => moveTb(-1)}\n                    disabled={selectedTb === null}\n                >\n                    Move up\n                </button>\n                <button\n                    onClick={() => moveTb(1)}\n                    disabled={selectedTb === null}\n                >\n                    Move down\n                </button>\n                <button\n                    onClick={() => setSelectedTb(null)}\n                    disabled={selectedTb === null}\n                >\n                    Done\n                </button>\n            </div>\n            <ol>\n                {tourney.tieBreaks.map((id) => (\n                    <li key={id}>\n                        {tieBreakMethods[id].name}\n                        <button\n                            onClick={() =>\n                                selectedTb === id\n                                    ? setSelectedTb(null)\n                                    : setSelectedTb(id)\n                            }\n                            disabled={\n                                selectedTb !== null && selectedTb !== id\n                            }\n                        >\n                            {selectedTb === id ? \"Done\" : \"Edit\"}\n                        </button>\n                    </li>\n                ))}\n            </ol>\n            <h3>Available tiebreak methods</h3>\n            <ol>\n                {tieBreakMethods.map((method, i) => (\n                    <li key={i}>\n                        <span\n                            className={\n                                tourney.tieBreaks.includes(i)\n                                    ? \"enabled\"\n                                    : \"disabled\"\n                            }\n                        >\n                            {method.name}\n                        </span>\n                        {!tourney.tieBreaks.includes(i) && (\n                            <button onClick={() => toggleTb(i)}>\n                                Add\n                            </button>\n                        )}\n                    </li>\n                ))}\n            </ol>\n        </div>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {number} props.tourneyId\n */\nconst Scores = ({tourneyId}) => (\n    <PanelContainer>\n        <Panel>\n            <ScoreList tourneyId={tourneyId}/>\n        </Panel>\n        <Panel>\n            <SelectTieBreaks tourneyId={tourneyId}/>\n        </Panel>\n    </PanelContainer>\n);\n\nexport default Scores;\n","import React, {useContext, useState, useEffect} from \"react\";\nimport {Tabs, TabList, Tab, TabPanels, TabPanel} from \"@reach/tabs\";\nimport {Link} from \"@reach/router\";\nimport {calcNumOfRounds} from \"../../data/utility\";\nimport Round from \"./round\";\nimport PlayerSelect from \"./player-select\";\nimport {DataContext} from \"../../state/global-state\";\nimport Scores from \"./scores\";\nimport ChevronLeft from \"react-feather/dist/icons/chevron-left\";\nimport \"@reach/tabs/styles.css\";\n\n/**\n * @param {Object} props\n * @param {string} props.path\n * @param {number} [props.tourneyId]\n */\nexport default function Tournament({tourneyId, path}) {\n    const {data, dispatch} = useContext(DataContext);\n    const tourney = data.tourneys[tourneyId];\n    const players = tourney.players;\n    const [defaultTab, setDefaultTab] = useState(0);\n    function newRound() {\n        dispatch({type: \"ADD_ROUND\", tourneyId});\n        setDefaultTab(tourney.roundList.length + 1);\n    }\n    useEffect(\n        function () {\n            const origTitle = document.title;\n            document.title = tourney.name;\n            return function () {\n                document.title = origTitle;\n            };\n        },\n        [tourney.name]\n    );\n    return (\n        <Tabs defaultIndex={defaultTab}>\n            <div>\n                <Link to=\"/\">\n                    <ChevronLeft/> Back\n                </Link>\n                <h2>{tourney.name}</h2>\n                Round progress: {tourney.roundList.length}/\n                {calcNumOfRounds(players.length)}{\" \"}\n                <button onClick={() => newRound()}>New round</button>{\" \"}\n                <button\n                    className=\"danger\"\n                    onClick={() =>\n                        dispatch({type: \"DEL_LAST_ROUND\", tourneyId})\n                    }\n                    disabled={tourney.roundList.length === 0}\n                >\n                    Remove last round\n                </button>\n            </div>\n            <TabList>\n                <Tab>Players</Tab>\n                <Tab>Scores</Tab>\n                {Object.keys(tourney.roundList).map((id) => (\n                    <Tab key={id}>Round {Number(id) + 1}</Tab>\n                ))}\n            </TabList>\n            <TabPanels>\n                <TabPanel>\n                    <PlayerSelect tourneyId={tourneyId} />\n                </TabPanel>\n                <TabPanel>\n                    <Scores tourneyId={tourneyId} />\n                </TabPanel>\n                {Object.keys(tourney.roundList).map((id) => (\n                    <TabPanel key={id}>\n                        <Round roundId={Number(id)} tourneyId={tourneyId} />\n                    </TabPanel>\n                ))}\n            </TabPanels>\n        </Tabs>\n    );\n}\n","import React, {useReducer} from \"react\";\nimport {Router, Link, LocationProvider, createHistory} from \"@reach/router\";\nimport createHashSource from \"hash-source\";\nimport TournamentList from \"./components/tournament/list\";\nimport PlayerView from \"./components/players/index\";\nimport {Options} from \"./components/options\";\nimport Caution from \"./components/caution\";\nimport {defaultData, dataReducer, DataContext} from \"./state/global-state\";\nimport Tournament from \"./components/tournament/tournament\";\nimport \"./global.css\";\n// @ts-ignore\nimport {link} from \"./App.module.css\";\n\nlet source = createHashSource();\nlet history = createHistory(source);\n\nfunction App() {\n    const [data, dispatch] = useReducer(dataReducer, defaultData);\n    return (\n        <div className=\"app\">\n            <LocationProvider history={history}>\n                <Caution />\n                <nav className=\"header\">\n                    <Link to=\"/\" className={link}>Tournaments</Link>\n                    <Link to=\"players\" className={link}>Players</Link>\n                    <Link to=\"options\" className={link}>Options</Link>\n                    <Link to=\"about\" className={link}>About</Link>\n                </nav>\n                <main className=\"content\">\n                    <DataContext.Provider value={{data, dispatch}}>\n                        <Router>\n                            <TournamentList path=\"/\" />\n                            <PlayerView path=\"players\"/>\n                            <Options path=\"options\" />\n                            <About path=\"about\" />\n                            <Tournament path=\"tourney/:tourneyId\" />\n                        </Router>\n                    </DataContext.Provider>\n                </main>\n            </LocationProvider>\n        </div>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {string} props.path\n */\nconst About = ({path}) => (\n    <p>\n        This is an early, proof-of-concept, demo of a\n        chess tournament manager.{\" \"}\n        <a href=\"https://github.com/johnridesabike/chessahoochee\">\n        You can find out more here.</a>\n    </p>\n);\n\nexport default App;\n","/*jslint browser*/\n/*global process fetch*/\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {StrictMode} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <StrictMode><App /></StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}