{"version":3,"sources":["App.module.css","components/tournament/scores.module.css","serviceWorker.js","side-effects.js","data-types/types.js","data-types/constants.js","data-types/factories.js","data-types/index.js","pairing-scoring/ratings.js","pairing-scoring/helpers.js","pairing-scoring/scoring.js","pairing-scoring/factories.js","pairing-scoring/pairing.js","components/icons.jsx","hooks/reducers/generic-db-reducer.js","hooks/reducers/options-reducer.js","hooks/reducers/players-reducer.js","hooks/reducers/match-functions.js","hooks/reducers/tournament-reducer.js","demo-data/index.js","hooks/db.js","hooks/tournament-provider.jsx","hooks/hooks.js","components/tournament/crosstable.jsx","components/utility.jsx","components/new-player.jsx","components/tournament/player-select/selecting.jsx","components/tournament/player-select/index.jsx","components/tournament/pair-picker/player-info.jsx","components/tournament/pair-picker/select-list.jsx","components/tournament/pair-picker/stage.jsx","components/tournament/pair-picker/index.jsx","components/404.jsx","components/tournament/round/player-match-info.jsx","components/tournament/round/match-row.jsx","components/tournament/round/round-table.jsx","components/tournament/round/round.jsx","components/tournament/round/index.jsx","components/tournament/scores.jsx","components/tournament/header.jsx","components/tournament/options.jsx","components/tournament/sidebar.jsx","components/tournament/status.jsx","components/tournament/tournament.jsx","components/sidebar-default.jsx","components/tournament/tournament-list.jsx","components/tournament/index.jsx","components/caution/index.jsx","components/options.jsx","components/players/player-list.jsx","components/players/player-profile.jsx","components/players/index.jsx","components/splash.jsx","App.jsx","index.jsx","components/tournament/round/round.module.css","components/splash.module.css","components/tournament/tournament.module.css","components/players/index.module.css","components/caution/index.module.css","components/utility.module.css"],"names":["module","exports","link","mainMenu","table","topHeader","row","compact","playerName","rank","Boolean","window","location","hostname","match","numeral","register","format","value","roundingFunction","whole","Math","floor","remainder","fraction","String","regexps","unformat","Number","Id","t","refinement","id","test","AvoidPair","tuple","Player","interface","firstName","lastName","matchCount","rating","type","PlayerStats","avoidList","list","colorBalance","dueColor","maybe","hasHadBye","isDueBye","opponentHistory","profile","score","upperHalf","Match","newRating","origRating","playerIds","result","RoundList","Tournament","byeQueue","date","Date","name","roundList","tieBreaks","ScoreCalulator","func","Standing","BLACK","WHITE","DUMMY_ID","createMatch","importObj","nanoid","createPlayer","arguments","length","undefined","dummyPlayer","missingPlayer","kFactor","isNotDummy","playerId","getPlayerMaybe","playerDict","dict","player","isNotBye","includes","getMatchesByPlayer","matchList","filter","getMatchesByPlayerNoByes","getMatchDetailsForPlayer","index","indexOf","color","rounds2Matches","roundId","slice","reduce","acc","round","concat","getAllPlayersFromMatches","allPlayers","Array","from","Set","getUnmatched","tourney","players","matchedIds","Object","values","assoc","getPlayerAvoidList","pair","accumulator","getDueColor","lastMatch","last","getPlayersByOpponent","opponentId","getOpponentScores","map","opponent","getPlayerScore","of","scoreList","getPlayerScoreList","sum","getCumulativeScore","getPlayerScoreListNoByes","getCumulativeOfOpponentScore","oppScores","getColorBalanceScore","colorList","tieBreakMethods","0","scores","pipe","sort","a","b","init","tail","1","2","3","4","createStandingList","methods","selectedTiebreakMethods","selectedTieBreaks","i","tieBreakNames","m","standings","_ref","sortFuncList","keys","key","descend","path","prop","sortWith","createStandingTree","_createStandingList","_createStandingList2","slicedToArray","standingsFlat","standing","orig","standing1","standing2","prevStanding","append","over","lensIndex","createPlayerStats","_ref2","matches","freeze","priority","condition","avoidMeetingTwice","sameScores","divider","differentHalf","differentDueColor","maxPriority","add","calcPairIdeal","player1","player2","metBefore","mustAvoid","abs","setUpperHalves","playerStatsList","splitInHalf","splitAt","ignore","src","isUpperHalf","view","setByePlayer","hasNotHadBye","p","nextByeSignup","indexOfDueBye","findLastIndex","sortPlayersForPairing","simpleIcon","icon","props","react_default","createElement","assign","dangerouslySetInnerHTML","__html","svg","aria-label","title","role","style","fill","hex","icons","Activity","Alert","ArrowDown","ArrowLeft","ArrowUp","Award","Check","CheckCircle","ChevronDown","ChevronLeft","ChevronRight","ChevronUp","Circle","Download","Edit","Info","Javascript","Layers","List","Plus","React","ReactIcon","Repeat","Settings","Sidebar","Trash","UserMinus","UserPlus","Users","X","ActionLoadState","state","Any","ActionDelItem","ActionAddItem","item","ActionAddTourney","AdctionAddPlayer","ActionSetPlayer","ActionTypes","union","genericDbReducer","action","nextId","console","warn","dissoc","lensProp","mergeLeft","Error","dispatch","x","ADD_ITEM","ADD_PLAYER","ADD_TOURNEY","DEL_ITEM","LOAD_STATE","SET_PLAYER","ActionSetOption","option","ActionAvoidPair","ActionAvoidSingle","optionsReducer","ADD_AVOID_PAIR","DEL_AVOID_PAIR","DEL_AVOID_SINGLE","SET_OPTION","ActionAddPlayer","ActionDelPlayer","ActionSetMatchcount","ActionSetRating","playersReducer","lensPath","set","DEL_PLAYER","SET_PLAYER_MATCHCOUNT","SET_PLAYER_RATING","autoPair","byeValue","pairs","curry","potentialMatches","playerMatches","reducedResults","blossom","p1Index","p2Index","p1Id","p2Id","p1","p2","matched","pair1","pair2","reverse","byePlayer","pairPlayers","log","getPlayer","idsPair","ActionAddRound","ActionDelLastRound","ActionAddRemoveTieBreak","ActionMoveTieBreak","newIndex","oldIndex","ActionSetTourneyPlayers","ActionSetByeQueue","ActionAutoPair","ActionManualPair","ActionSetMatchResult","matchId","ActionEditMatch","ActionMoveMatch","ActionSetName","ActionSetDate","ActionUpdateByeScores","tournamentReducer","remove","move","__","manualPair","findIndex","propEq","mergeRight","ADD_ROUND","ADD_TIEBREAK","AUTO_PAIR","DEL_LAST_ROUND","DEL_MATCH","DEL_TIEBREAK","MANUAL_PAIR","MOVE_MATCH","MOVE_TIEBREAK","SET_BYE_QUEUE","SET_DATE","SET_MATCH_RESULT","SET_NAME","SET_STATE","SET_TOURNEY_PLAYERS","SWAP_COLORS","UPDATE_BYE_SCORES","demo_data","options","tournaments","fromJSON","setItemsPrototype","localForage","removeItemsPrototype","optionsStore","createInstance","storeName","playerStore","tourneyStore","useAllItemsFromDb","store","_useReducer","useReducer","_useReducer2","items","_useState","useState","_useState2","isLoaded","setIsLoaded","useEffect","document","body","cursor","getItems","then","results","_config","catch","setItems","deleted","difference","removeItems","useAllPlayersDb","useAllTournamentsDb","useOptionsDb","_useReducer3","demoData","_useReducer4","_useState3","_useState4","iterate","TournamentContext","createContext","useTournament","useContext","TournamentProvider","children","tourneyId","tourneyDispatch","playersDispatch","isTourneyLoaded","setIsTourneyLoaded","isPlayersLoaded","setIsPlayersLoaded","_useState5","_useState6","isDbError","setIsDbError","getItem","allTheIds","unChangedPlayers","symmetricDifference","error","setItem","Provider","useSortedTable","origTable","defaultKey","defaultDescend","setTable","setKey","isDescending","setIsDescending","direction","ascend","toggleDirection","useDocumentTitle","origTitle","Crosstable","_useTournament","oppResults","defaultTo","opponentScores","getRatingChangeTds","_getPerformanceRating","firstMatch","getPerformanceRatings","_getPerformanceRating2","firstRating","lastRating","change","Fragment","className","colSpan","scope","index2","player1Id","player2Id","getXScore","Panel","_ref4","styles","panel","objectSpread","PanelContainer","panels","DateFormat","dateFormat","Intl","DateTimeFormat","day","month","year","cleanProps","omit","dateTime","toISOString","Notification","_ref5","success","warning","_ref6","PlaceholderButton","aria-hidden","disabled","SortLabel","_ref7","label","sortKey","data","utility_PlaceholderButton","onClick","findById","NewPlayer","newPlayerDefault","newPlayerData","setNewPlayerdata","updateField","event","preventDefault","_event$currentTarget","currentTarget","prevState","onSubmit","htmlFor","required","onChange","Selecting","_useAllPlayersDb","_useAllPlayersDb2","allPlayersDispatch","togglePlayer","target","checked","pId","PlayerSelect","isSelecting","setIsSelecting","flexShrink","dialog_es","isOpen","PlayerInfo","_useOptionsDb","_createPlayerStats","avoidPairs","prettyBalance","opId","SelectList","stagedPlayers","setStagedPlayers","unmatched","unmatchedCount","unmatchedWithDummy","selectPlayer","visually_hidden_es","Stage","_stagedPlayers","white","black","unstage","react","every","PairPicker","isModalOpen","setIsModalOpen","statsList","useMemo","matchIdeal","ideal","flexGrow","NotFound","data-testid","PlayerMatchInfo","playerData","MatchRow","pos","selectedMatch","setSelectedMatch","openModal","setOpenModal","resultCode","whitePlayer","blackPlayer","whiteName","blackName","ResultDisplay","setMatchResult","origRatings","matchCounts","whiteElo","EloRank","blackElo","scoreExpected","getExpected","updateRating","calcNewRatings","rowId","playerResult","matchResult","winnerSelect","onBlur","controls","RoundTable","tbody","Round","_404","moveMatch","forEach","unMatch","Index","openTab","setOpenTab","tabs_es","ScoreTable","_createStandingTree","_createStandingTree2","standingTree","tbMethods","rowSpan","dashify","j","SelectTieBreaks","_useTournament2","selectedTb","setSelectedTb","toggleTb","defaultId","moveTb","width","marginTop","Scores","Header","isEditingName","setIsEditingName","isEditingDate","setIsEditingDate","dateInput","getFullYear","getMonth","getDate","_event$currentTarget$","split","_event$currentTarget$2","rawYear","rawMonth","rawDay","Options","alert","es","to","isNewRoundReady","lastRound","roundCount","playerCount","ceil","log2","isFinite","calcNumOfRounds","isItOver","tooltipText","tooltipWarn","_delLastRound","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","confirm","navigate","stop","apply","this","Status","lastRoundId","textAlign","justifyContent","tournament","header","sidebar","contentFrame","tournament_scores","default","HasSidebar","sidebar_default_Sidebar","TournamentList","_useAllTournamentsDb","_useAllTournamentsDb2","tourneys","sorted","newTourneyName","setNewTourneyName","isFormOpen","setIsFormOpen","message","deleteTournament","placeholder","TournamentIndex","Caution","caution","caution__text","caution__link","href","tourneysDispatch","text","setText","_useOptionsDb2","optionsDispatch","exportData","loadData","JSON","stringify","download","encodeURIComponent","reader","FileReader","onload","ev","parse","readAsText","files","cols","rows","spellCheck","PlayerList","delPlayer","PlayerProfile","singAvoidList","setSingAvoidList","unAvoided","selectedAvoider","setSelectedAvoider","handleChange","playerInfo","defaultValue","readOnly","arial-label","PlayerProfileWrapper","Players","childProps","basepath","Splash","splash","hint","Promise","all","subtitle","footer","fontSize","source","createHashSource","history","createHistory","electron","require","App","isSidebarOpen","setIsSidebarOpen","classNames","open-sidebar","closed-sidebar","traffic-light-padding","navigator","appVersion","tournament_Tournament","options_Options","ReactDOM","render","src_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4605903.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"App_link__TB6Cl\",\"mainMenu\":\"App_mainMenu__3u0XV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"scores_table__22BFZ\",\"topHeader\":\"scores_topHeader__2RVRR\",\"row\":\"scores_row__bmBzX\",\"compact\":\"scores_compact__1-hlH\",\"playerName\":\"scores_playerName__3ghv9\",\"rank\":\"scores_rank__3AxBb\"};","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import numeral from \"numeral\";\n\n// let's make a custom numeral format. I don't really know how this works.\nnumeral.register(\"format\", \"fraction\", {\n    // eslint-disable-next-line no-unused-vars\n    format: function (value, format, roundingFunction) {\n        const whole = Math.floor(value);\n        const remainder = value - whole;\n        const fraction = (function () {\n            switch (remainder) {\n            case 0.25:\n                return \"¼\";\n            case 0.5:\n                return \"½\";\n            case 0.75:\n                return \"¾\";\n            default:\n                return \"\";\n            }\n        }());\n        const stringedWhole = (\n            (whole === 0 && remainder)\n            ? \"\"\n            : String(whole)\n        );\n        return stringedWhole + fraction;\n    },\n    regexps: {\n        format: /(1\\/2)/,\n        unformat: /(1\\/2)/\n    },\n    unformat: function (value) {\n        // TODO: This doesn't do anything currently\n        return Number(value);\n    }\n});\n","import t from \"tcomb\";\n\nconst Id = t.refinement(\n    t.String,\n    (id) => /^[A-Za-z0-9_-]{21}$/.test(id),\n    \"NanoId\"\n);\nexport {Id};\n\nconst AvoidPair = t.tuple([Id, Id], \"AvoidPair\");\nexport {AvoidPair};\n\nconst Player = t.interface(\n    {\n        firstName: t.String,\n        id: Id,\n        lastName: t.String,\n        matchCount: t.Number,\n        rating: t.Number,\n        type: t.String // used for CSS styling etc\n    },\n    \"Player\"\n);\nexport {Player};\n\nconst PlayerStats = t.interface(\n    {\n        avoidList: t.list(Id),\n        colorBalance: t.Number,\n        dueColor: t.maybe(t.Number),\n        hasHadBye: t.Boolean,\n        id: Id,\n        isDueBye: t.Boolean,\n        opponentHistory: t.list(Id),\n        profile: Player,\n        rating: t.Number,\n        score: t.Number,\n        upperHalf: t.Boolean\n    },\n    \"PlayerStats\"\n);\nexport {PlayerStats};\n\nconst Match = t.interface(\n    {\n        id: Id,\n        newRating: t.tuple([t.Number, t.Number]),\n        origRating: t.tuple([t.Number, t.Number]),\n        playerIds: t.tuple([Id, Id]),\n        result: t.tuple([t.Number, t.Number])\n    },\n    \"Match\"\n);\nexport {Match};\n\nconst RoundList = t.list(t.list(Match), \"Round list\");\nexport {RoundList};\n\nconst Tournament = t.interface(\n    {\n        byeQueue: t.list(t.String),\n        date: Date,\n        id: Id,\n        name: t.String,\n        playerIds: t.list(t.String),\n        roundList: RoundList,\n        tieBreaks: t.list(t.Number)\n    },\n    \"Tournament\"\n);\nexport {Tournament};\n\nconst ScoreCalulator = t.func(\n    [Id, t.list(Match)],\n    t.Number,\n    \"ScoreCalulator\"\n);\nexport {ScoreCalulator};\n\nconst Standing = t.interface(\n    {\n        id: Id,\n        score: t.Number,\n        tieBreaks: t.list(t.Number)\n    },\n    \"Standing\"\n);\nexport {Standing};\n","const BLACK = 1;\nexport {BLACK};\nconst WHITE = 0;\nexport {WHITE};\nconst DUMMY_ID = \"________DUMMY________\";\nexport {DUMMY_ID};\n","// These factories are mainly useful as a shortcut to provide default values.\nimport {Match, Player, Tournament} from \"./types\";\nimport nanoid from \"nanoid\";\n\nexport function createMatch(importObj) {\n    return Match({\n        id: importObj.id || nanoid(),\n        newRating: importObj.newRating,\n        origRating: importObj.origRating,\n        playerIds: importObj.playerIds,\n        result: importObj.result || [0, 0]\n    });\n}\n\nexport function createPlayer(importObj = {}) {\n    return Player({\n        firstName: importObj.firstName || \"\",\n        id: importObj.id || nanoid(),\n        lastName: importObj.lastName || \"\",\n        matchCount: importObj.matchCount || 0,\n        rating: importObj.rating || 0,\n        type: importObj.type || \"person\" // used for CSS styling etc.\n    });\n}\n\nexport function createTournament(importObj) {\n    return Tournament({\n        byeQueue: importObj.byeQueue || [],\n        date: importObj.date || new Date(),\n        id: importObj.id || nanoid(),\n        name: importObj.name || \"\",\n        playerIds: importObj.playerIds || [],\n        roundList: importObj.roundList || [],\n        tieBreaks: importObj.tieBreaks || [0, 1, 2, 3]\n    });\n}\n","import {\n    AvoidPair,\n    Id,\n    Match,\n    Player,\n    PlayerStats,\n    RoundList,\n    ScoreCalulator,\n    Standing,\n    Tournament\n} from \"./types\";\nimport {BLACK, DUMMY_ID, WHITE} from \"./constants\";\nimport {createMatch, createPlayer, createTournament} from \"./factories\";\n\nconst dummyPlayer = createPlayer({\n    firstName: \"Bye\",\n    id: DUMMY_ID,\n    lastName: \"Player\",\n    type: \"dummy\"\n});\n\nconst missingPlayer = (id) => createPlayer({\n    firstName: \"Anonymous\",\n    id: id,\n    lastName: \"Player\",\n    type: \"missing\"\n});\n\nexport {\n    AvoidPair,\n    BLACK,\n    DUMMY_ID,\n    Id,\n    Match,\n    Player,\n    PlayerStats,\n    RoundList,\n    ScoreCalulator,\n    Standing,\n    Tournament,\n    WHITE,\n    createMatch,\n    createPlayer,\n    createTournament,\n    dummyPlayer,\n    missingPlayer\n};\n","import {BLACK, WHITE} from \"../data-types\";\nimport EloRank from \"elo-rank\";\nimport t from \"tcomb\";\n\nexport function kFactor(matchCount) {\n    const ne = t.Number(matchCount) || 1;\n    return (800 / ne);\n}\n\nexport function calcNewRatings(origRatings, matchCounts, result) {\n    t.tuple([t.Number, t.Number])(origRatings);\n    t.tuple([t.Number, t.Number])(matchCounts);\n    t.tuple([t.Number, t.Number])(result);\n    const whiteElo = new EloRank(kFactor(matchCounts[WHITE]));\n    const blackElo = new EloRank(kFactor(matchCounts[BLACK]));\n    const FLOOR = 100;\n    const scoreExpected = [\n        whiteElo.getExpected(origRatings[WHITE], origRatings[BLACK]),\n        blackElo.getExpected(origRatings[BLACK], origRatings[WHITE])\n    ];\n    const newRating = [\n        whiteElo.updateRating(\n            scoreExpected[WHITE],\n            result[WHITE],\n            origRatings[WHITE]\n        ),\n        blackElo.updateRating(\n            scoreExpected[BLACK],\n            result[BLACK],\n            origRatings[BLACK]\n        )\n    ];\n    return newRating.map((rating) => (rating < FLOOR) ? FLOOR : rating);\n}\n","import {\n    AvoidPair,\n    DUMMY_ID,\n    Id,\n    Match,\n    Player,\n    RoundList,\n    Standing,\n    Tournament,\n    dummyPlayer,\n    missingPlayer\n} from \"../data-types\";\nimport {assoc} from \"ramda\";\nimport t from \"tcomb\";\n/*******************************************************************************\n * Player functions\n ******************************************************************************/\nconst isNotDummy = (playerId) => playerId !== DUMMY_ID;\nexport {isNotDummy};\n\nexport function areScoresEqual(standing1, standing2) {\n    Standing(standing1);\n    Standing(standing2);\n    // Check if any of them aren't equal\n    if (standing1.score !== standing2.score) {\n        return false;\n    }\n    // Check if any tie-break values are not equal\n    return !(\n        standing1.tieBreaks.reduce(\n            (acc, value, i) => acc.concat(value !== standing2.tieBreaks[i]),\n            []\n        ).includes(true)\n    );\n}\n\n/**\n * Retrive a specific player from a list or object.\n * @param playerList This can either be typed as `[Player1, Player1]` or\n * `{\"1\": Player, \"2\": Player}`, where `Player1.id` equals its dict key.\n * @param id the `id` property of the desired `Player` object.\n * @returns The desired Player object.\n */\nexport function getPlayerById(playerList, id) {\n    t.union([\n        t.list(Player),\n        t.dict(Id, Player)\n    ])(playerList);\n    if (id === DUMMY_ID) {\n        return dummyPlayer;\n    }\n    const player = (playerList.filter)\n        ? playerList.filter((p) => p.id === id)[0]\n        : playerList[id];\n    return (player) ? player : missingPlayer(id);\n}\n\n/**\n * A replacement for `getPlayerById`, with an emphasis on the indented feature\n * of *maybe* getting a player, *maybe* getting a `dummyPlayer`, or *maybe*\n * getting a missing (deleted) player.\n */\nexport function getPlayerMaybe(playerDict, id) {\n    t.dict(Id, Player)(playerDict);\n    Id(id);\n    if (id === DUMMY_ID) {\n        return dummyPlayer;\n    }\n    const player = playerDict[id];\n    return (player) ? player : missingPlayer(id);\n}\n\n/*******************************************************************************\n * Match functions\n ******************************************************************************/\nconst isNotBye = (match) => !match.playerIds.includes(DUMMY_ID);\nexport {isNotBye};\n\nexport function getMatchesByPlayer(playerId, matchList) {\n    t.list(Match)(matchList);\n    return matchList.filter((match) => match.playerIds.includes(playerId));\n}\n\nexport function getMatchesByPlayerNoByes(playerId, matchList) {\n    t.list(Match)(matchList);\n    return matchList.filter(\n        (match) => match.playerIds.includes(playerId) && isNotBye(match)\n    );\n}\n\nexport function getMatchDetailsForPlayer(playerId, match) {\n    Id(playerId);\n    Match(match);\n    const index = match.playerIds.indexOf(playerId);\n    return {\n        color: index,\n        newRating: match.newRating[index],\n        origRating: match.origRating[index],\n        result: match.result[index]\n    };\n}\n\n/**\n * Flatten a list of rounds to a list of matches.\n */\nexport function rounds2Matches(roundList, roundId = null) {\n    RoundList(roundList);\n    t.maybe(t.Number)(roundId);\n    const rounds = (\n        (roundId === null)\n        ? roundList\n        : roundList.slice(0, roundId + 1)\n    );\n    return rounds.reduce((acc, round) => acc.concat(round), []);\n}\n\nexport function getAllPlayersFromMatches(matchList) {\n    t.list(Match)(matchList);\n    const allPlayers = matchList.reduce(\n        (acc, match) => acc.concat(match.playerIds),\n        []\n    );\n    return Array.from(new Set(allPlayers));\n}\n\n/**\n * Get a list of all of a player's scores from each match.\n */\nexport function getPlayerScoreList(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    return getMatchesByPlayer(\n        playerId,\n        matchList,\n    ).map(\n        (match) => getMatchDetailsForPlayer(playerId, match).result\n    );\n}\n\nexport function getPlayerScoreListNoByes(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    return getMatchesByPlayerNoByes(\n        playerId,\n        matchList\n    ).map(\n        (match) => getMatchDetailsForPlayer(playerId, match).result\n    );\n}\n\n/**\n * This creates a filtered version of `players` with only the players that are\n * not matched for the specified round.\n */\nexport function getUnmatched(tourney, players, roundId) {\n    Tournament(tourney);\n    t.dict(Id, Player)(players);\n    t.Number(roundId);\n    const matchList = tourney.roundList[roundId] || [];\n    const matchedIds = matchList.reduce(\n        (acc, match) => acc.concat(match.playerIds),\n        []\n    );\n    const unmatched = Object.values(players).reduce(\n        (acc, player) => (\n            (matchedIds.includes(player.id))\n            ? acc\n            : assoc(player.id, player, acc)\n        ),\n        {}\n    );\n    return unmatched;\n}\n\n/*******************************************************************************\n * Round functions\n ******************************************************************************/\nexport function calcNumOfRounds(playerCount) {\n    const roundCount = Math.ceil(Math.log2(playerCount));\n    return (Number.isFinite(roundCount)) ? roundCount : 0;\n}\n\n/*******************************************************************************\n * Avoid list functions\n ******************************************************************************/\nexport function getPlayerAvoidList(playerId, avoidList) {\n    t.list(AvoidPair)(avoidList);\n    Id(playerId);\n    return avoidList.filter( // get pairings with the player\n        (pair) => pair.includes(playerId)\n    ).reduce( // Flatten the array\n        (accumulator, pair) => pair.concat(accumulator),\n        []\n    ).filter( // filter out the player's id\n        (id) => id !== playerId\n    );\n}\n\n// TODO: This isn't currently in use, but it probably should be.\nexport function cleanAvoidList(avoidList, playerList) {\n    t.list(AvoidPair)(avoidList);\n    t.list(Player)(playerList);\n    const ids = playerList.map((p) => p.id);\n    return avoidList.filter(\n        (pairs) => (ids.includes(pairs[0]) && ids.includes(pairs[1]))\n    );\n}\n","import {\n    BLACK,\n    DUMMY_ID,\n    Id,\n    Match,\n    ScoreCalulator,\n    WHITE\n} from \"../data-types\";\nimport {\n    descend,\n    init,\n    last,\n    path,\n    pipe,\n    prop,\n    sort,\n    sum,\n    tail\n} from \"ramda\";\nimport {\n    getMatchDetailsForPlayer,\n    getMatchesByPlayer,\n    getMatchesByPlayerNoByes,\n    getPlayerScoreList,\n    getPlayerScoreListNoByes,\n    isNotDummy\n} from \"./helpers\";\n// import {firstBy} from \"thenby\";\nimport t from \"tcomb\";\n\nexport function getDueColor(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    const lastMatch = last(getMatchesByPlayer(playerId, matchList));\n    if (!lastMatch) {\n        return null;\n    }\n    const {color} = getMatchDetailsForPlayer(playerId, lastMatch);\n    return (color === WHITE) ? BLACK : WHITE;\n}\n\nexport function hasHadBye(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    return getMatchesByPlayer(\n        playerId,\n        matchList\n    ).reduce(\n        (acc, match) => acc.concat(match.playerIds),\n        []\n    ).includes(DUMMY_ID);\n}\n\nexport function getPlayersByOpponent(opponentId, matchList) {\n    Id(opponentId);\n    t.list(Match)(matchList);\n    return getMatchesByPlayer(\n        opponentId,\n        matchList\n    ).reduce(\n        (acc, match) => acc.concat(match.playerIds),\n        []\n    ).filter(\n        (playerId) => playerId !== opponentId\n    );\n}\n\n/**\n * Used for `modifiedMedian` and `solkoff`.\n */\nfunction getOpponentScores(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    const scores = getPlayersByOpponent(\n        playerId,\n        matchList\n    ).filter(\n        isNotDummy\n    ).map(\n        (opponent) => getPlayerScore(opponent, matchList)\n    );\n    return scores;\n}\n\n/*******************************************************************************\n * The main scoring methods\n ******************************************************************************/\nconst getPlayerScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getPlayerScore(playerId, matchList) {\n        const scoreList = getPlayerScoreList(playerId, matchList);\n        return sum(scoreList);\n    }\n);\nexport {getPlayerScore};\n\n/**\n * The player's cumulative score.\n */\nconst getCumulativeScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getCumulativeScore(playerId, matchList) {\n        const scoreList = getPlayerScoreListNoByes(\n            playerId,\n            matchList\n        ).reduce( // turn the regular score list into a \"running\" score list\n            (acc, score) => acc.concat([last(acc) + score]),\n            [0]\n        );\n        return sum(scoreList);\n    }\n);\n\n/**\n * Get the cumulative scores of a player's opponents.\n */\nconst getCumulativeOfOpponentScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getCumulativeOfOpponentScore(playerId, matchList) {\n        const oppScores = getPlayersByOpponent(\n            playerId,\n            matchList\n        ).filter(\n            isNotDummy\n        ).map(\n            (id) => getCumulativeScore(id, matchList)\n        );\n        return sum(oppScores);\n    }\n);\n\n/**\n * Calculate a player's color balance. A negative number means they played as\n * white more. A positive number means they played as black more.\n */\nconst getColorBalanceScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getColorBalanceScore(playerId, matchList) {\n        const colorList = getMatchesByPlayerNoByes(\n            playerId,\n            matchList\n        ).reduce(\n            (acc, match) => (\n                (match.playerIds[WHITE] === playerId)\n                ? acc.concat(-1) // White = -1\n                : acc.concat(1) // Black = +1\n            ),\n            [0]\n        );\n        return sum(colorList);\n    }\n);\nexport {getColorBalanceScore};\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n */\nconst getModifiedMedianScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getModifiedMedianScore(playerId, matchList) {\n        const scores = getOpponentScores(playerId, matchList);\n        return pipe(\n            sort((a, b) => a - b),\n            init,\n            tail,\n            sum\n        )(scores);\n    }\n);\n\nconst getSolkoffScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getSolkoffScore(playerId, matchList) {\n        const scoreList = getOpponentScores(playerId, matchList);\n        return sum(scoreList);\n    }\n);\n\nconst tieBreakMethods = {\n    0: {\n        func: getModifiedMedianScore,\n        id: 0,\n        name: \"Modified median\"\n    },\n    1: {\n        func: getSolkoffScore,\n        id: 1,\n        name: \"Solkoff\"\n    },\n    2: {\n        func: getCumulativeScore,\n        id: 2,\n        name: \"Cumulative score\"\n    },\n    3: {\n        func: getCumulativeOfOpponentScore,\n        id: 3,\n        name: \"Cumulative of opposition\"\n    },\n    4: {\n        func: getColorBalanceScore,\n        id: 4,\n        name: \"Most black\"\n    }\n};\nObject.freeze(tieBreakMethods);\nexport {tieBreakMethods};\n\n/**\n * Create a function to sort the standings. This dynamically creates a `thenBy`\n * function based on the list of desired tiebreak sort methods.\n * TODO: improve the way this is structured to be more intuitive.\n * @returns A function to be used with a list of standings and `sort()`.\n */\nexport function createTiebreakSorter(selectedTiebreakMethods) {\n    // return Object.keys(selectedTiebreakMethods).reduce(\n    //     (acc, key) => (\n    //         acc.thenBy(\n    //             (standing1, standing2) => (\n    //                 standing2.tieBreaks[key] - standing1.tieBreaks[key]\n    //             )\n    //         )\n    //     ),\n    //     firstBy((standing1, standing2) => standing2.score - standing1.score)\n    // );\n    return Object.keys(selectedTiebreakMethods).reduce(\n        (acc, key) => acc.concat([descend(path([\"tieBreaks\", key]))]),\n        [descend(prop(\"score\"))]\n    );\n}\n","import {\n    AvoidPair,\n    Id,\n    Match,\n    Player,\n    PlayerStats,\n    RoundList,\n    Standing\n} from \"../data-types\";\nimport {\n    add,\n    append,\n    defaultTo,\n    last,\n    lensIndex,\n    lensProp,\n    over,\n    pipe,\n    sortWith\n} from \"ramda\";\nimport {\n    areScoresEqual,\n    getAllPlayersFromMatches,\n    getMatchDetailsForPlayer,\n    getMatchesByPlayer,\n    getPlayerAvoidList,\n    isNotDummy,\n    rounds2Matches\n} from \"./helpers\";\nimport {\n    createTiebreakSorter,\n    getColorBalanceScore,\n    getDueColor,\n    getPlayerScore,\n    getPlayersByOpponent,\n    hasHadBye,\n    tieBreakMethods\n} from \"./scoring\";\nimport t from \"tcomb\";\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * TODO: this needs performance improvements.\n * @returns {[Standing[], string[]]} The standings and the list of method used\n */\nexport function createStandingList(methods, roundList, roundId) {\n    t.list(t.Number)(methods);\n    t.list(t.Array)(roundList);\n    t.maybe(t.Number)(roundId);\n    const matchList = rounds2Matches(roundList, roundId);\n    const selectedTieBreaks = methods.map((i) => tieBreakMethods[i]);\n    const tieBreakNames = selectedTieBreaks.map((m) => m.name);\n    // Get a flat list of all of the players and their scores.\n    const standings = getAllPlayersFromMatches(\n        matchList\n    ).map(\n        (id) => Standing({\n            id,\n            score: getPlayerScore(id, matchList),\n            tieBreaks: selectedTieBreaks.map(({func}) => func(id, matchList))\n        })\n    );\n    const sortFuncList = createTiebreakSorter(selectedTieBreaks);\n    const standingsSorted = sortWith(sortFuncList, standings);\n    return [standingsSorted, tieBreakNames];\n}\n\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * example: `[[Dale, Audrey], [Pete], [Bob]]`\n * Dale and Audrey are tied for first, Pete is 2nd, Bob is 3rd.\n * @returns {[Standing[][], string[]]} The standings and the list of method used\n */\nexport function createStandingTree(methods, roundList, roundId = null) {\n    t.list(t.Number)(methods);\n    RoundList(roundList);\n    t.maybe(t.Number)(roundId);\n    const [\n        standingsFlat,\n        tieBreakNames\n    ] = createStandingList(methods, roundList, roundId);\n    const standingsFlatNoByes = standingsFlat.filter(isNotDummy);\n    const standingsTree = standingsFlatNoByes.reduce(\n        /** @param {Standing[][]} acc*/\n        function assignStandingsToTree(acc, standing, i, orig) {\n            const prevStanding = orig[i - 1];\n            const isNewRank = (\n                // Always make a new rank for the first player\n                (i === 0) ? true : !areScoresEqual(standing, prevStanding)\n            );\n            if (isNewRank) {\n                return append([standing], acc);\n            }\n            // If this player has the same score as the last, list them together\n            return over(lensIndex(acc.length - 1), append(standing), acc);\n        },\n        []\n    );\n    return [standingsTree, tieBreakNames];\n}\n\n/**\n * @returns {PlayerStats}\n */\nexport function createPlayerStats({\n    avoidList,\n    id,\n    players,\n    roundList,\n    roundId\n}) {\n    Id(id);\n    t.Number(roundId);\n    t.dict(Id, Player)(players);\n    t.list(AvoidPair)(avoidList);\n    RoundList(roundList);\n    const matches = rounds2Matches(roundList, roundId);\n    return PlayerStats({\n        avoidList: getPlayerAvoidList(id, avoidList),\n        colorBalance: getColorBalanceScore(id, matches),\n        dueColor: getDueColor(id, matches),\n        hasHadBye: hasHadBye(id, matches),\n        id: id, // is this shortcut necessary?\n        isDueBye: false,\n        opponentHistory: getPlayersByOpponent(id, matches),\n        profile: players[id],\n        rating: players[id].rating, // is this shortcut necessary?\n        score: getPlayerScore(id, matches),\n        upperHalf: false\n    });\n}\n\n/**\n * NOTE: these params are flipped. Should others be flipped too?\n * @returns {Object.<string, number>} {opponentId: result}\n */\nfunction getResultsByOpponent(matchList, playerId) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    const matches = getMatchesByPlayer(playerId, matchList);\n    return matches.reduce(\n        function (acc, match) {\n            const opponent = match.playerIds.filter(\n                (id) => id !== playerId\n            )[0];\n            const {result} = getMatchDetailsForPlayer(playerId, match);\n            // This sets a default result of 0 and then adds the existing\n            // result. Most of the time, this would be the same as using\n            // `set()` with the result, but if two players play each other\n            // multiple times then the total results will be displayed.\n            return over(\n                lensProp(opponent),\n                pipe(defaultTo(0), add(result)),\n                acc\n            );\n        },\n        {}\n    );\n}\nexport {getResultsByOpponent};\n\n/**\n * NOTE: these params are flipped. Should others be flipped too?\n */\nfunction getPerformanceRatings(matchList, playerId) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    const matches = getMatchesByPlayer(playerId, matchList);\n    const firstMatch = matches[0];\n    const lastMatch = last(matches);\n    return [\n        getMatchDetailsForPlayer(playerId, firstMatch).origRating,\n        getMatchDetailsForPlayer(playerId, lastMatch).newRating\n    ];\n}\nexport {getPerformanceRatings};\n","// This file is a work in progress. The weighting for the ratings needs to be\n// tweaked a lot, and the pairing function itself needs to be cleaned up and\n// made more reusable.\nimport {\n    AvoidPair,\n    DUMMY_ID,\n    Id,\n    Player,\n    PlayerStats,\n    RoundList\n} from \"../data-types\";\nimport {\n    add,\n    assoc,\n    curry,\n    descend,\n    filter,\n    findLastIndex,\n    lensIndex,\n    map,\n    over,\n    pipe,\n    prop,\n    reverse,\n    sortWith,\n    splitAt,\n    view\n} from \"ramda\";\nimport blossom from \"edmonds-blossom\";\nimport {createPlayerStats} from \"./factories\";\n// import {firstBy} from \"thenby\";\nimport t from \"tcomb\";\n\nconst priority = (value) => (condition) => condition ? value : 0;\nconst divisiblePriority = (value) => (divider) => value / divider;\n\n// TODO: These probably need to be tweaked a lot.\n/**\n * @constant avoidMeetingTwicePriority The weight given to avoid players\n * meeting twice. This same weight is given to avoid matching players on each\n * other's \"avoid\" list. This is the highest priority. (USCF § 27A1)\n */\nconst avoidMeetingTwice = priority(20);\n/**\n * @constant sameScoresPriority The weight given to match players with\n * equal scores. This gets divided against the difference between each players'\n * scores, plus one. For example, players with scores `1` and `3` would have\n * this priority divided by `3`. Players with scores `0` and `3` would have this\n * priority divided by `4`. Players with equal scores would divide it by `1`,\n * leaving it unchanged. (USCF § 27A2)\n */\nconst sameScores = divisiblePriority(16);\n\n/**\n * @constant differentHalfPriority The weight given to match players in lower\n * versus upper halves. This is only applied to players being matched within\n * the same score group. (USCF § 27A3)\n */\nconst differentHalf = priority(2);\n/**\n * @constant differentDueColorPriority The weight given to match players with\n * opposite due colors. (USCF § 27A4 and § 27A5)\n */\nconst differentDueColor = priority(1);\n\nconst maxPriority = pipe(\n    add(differentHalf(true)),\n    add(differentDueColor(true)),\n    add(sameScores(1)),\n    add(avoidMeetingTwice(true))\n)(0);\nexport {maxPriority};\n\n/**\n * @returns {number}\n */\nexport function calcPairIdeal(player1, player2) {\n    PlayerStats(player1);\n    PlayerStats(player2);\n    if (player1.id === player2.id) {\n        return 0;\n    }\n    const metBefore = player1.opponentHistory.includes(player2.id);\n    const mustAvoid = player1.avoidList.includes(player2.id);\n    return pipe(\n        add(differentHalf(\n            player1.upperHalf !== player2.upperHalf\n            && player1.score === player2.score\n        )),\n        add(differentDueColor(\n            player1.dueColor === null\n            || player1.dueColor !== player2.dueColor\n        )),\n        add(sameScores(Math.abs(player1.score - player2.score) + 1)),\n        add(avoidMeetingTwice(!metBefore && !mustAvoid))\n    )(0);\n}\n\n/**\n * Determine which players are in the upper and lower halves of their score\n * groups.\n * This function does not sort the list. The list should be sorted first.\n */\nexport function setUpperHalves(playerStatsList) {\n    t.list(PlayerStats)(playerStatsList);\n    const splitInHalf = (list) => splitAt(list.length / 2, list);\n    return playerStatsList.reduce(\n        function (acc, player, ignore, src) {\n            const upperHalfIds = pipe(\n                filter((a) => a.score === player.score),\n                splitInHalf,\n                view(lensIndex(0)),\n                map((a) => a.id)\n            )(src);\n            const isUpperHalf = upperHalfIds.includes(player.id);\n            return acc.concat([assoc(\"upperHalf\", isUpperHalf, player)]);\n        },\n        []\n    );\n}\n\nfunction setByePlayer(byeQueue, playerStatsList) {\n    t.list(t.Number)(byeQueue);\n    t.list(PlayerStats)(playerStatsList);\n    // if the list is even, just return it.\n    if (playerStatsList.length % 2 === 0) {\n        return playerStatsList;\n    }\n    const hasNotHadBye = playerStatsList.filter(\n        (p) => !p.hasHadBye\n    ).map((p) => p.id);\n    const nextByeSignup = byeQueue.filter((id) => hasNotHadBye.includes(id))[0];\n    const indexOfDueBye = (\n        (nextByeSignup)\n        // Assign the bye to the next person who signed up.\n        ? findLastIndex((p) => p.id === nextByeSignup, playerStatsList)\n        // Assign a bye to the lowest-rated player in the lowest score group.\n        // Because the list is sorted, the last player is the lowest.\n        // (USCF § 29L2.)\n        : findLastIndex((p) => !p.hasHadBye, playerStatsList)\n    );\n    // In the impossible situation that *everyone* has played a bye round\n    // previously, then just pick the last player.\n    const index = (\n        (indexOfDueBye === -1)\n        ? playerStatsList.length - 1\n        : indexOfDueBye\n    );\n    return over(\n        lensIndex(index),\n        assoc(\"isDueBye\", true),\n        playerStatsList\n    );\n}\n\n/**\n * Sort the data so matchups default to order by score and rating.\n */\nexport function sortPlayersForPairing(playerStatsList) {\n    t.list(PlayerStats)(playerStatsList);\n    return sortWith(\n        // firstBy(\n        //     (a, b) => b.score - a.score\n        // ).thenBy(\n        //     (a, b) => b.rating - a.rating\n        // ),\n        [descend(prop(\"score\")), descend(prop(\"rating\"))],\n        playerStatsList\n    );\n}\n\n/**\n * Creates pairings according to the rules specified in USCF § 27, § 28,\n * and § 29. This is a work in progress and does not account for all of the\n * rules yet.\n */\nexport default function pairPlayers({\n    players,\n    roundId,\n    roundList,\n    avoidList,\n    byeQueue\n}) {\n    t.Number(roundId);\n    t.dict(Id, Player)(players);\n    t.list(t.Number)(byeQueue);\n    RoundList(roundList);\n    t.list(AvoidPair)(avoidList);\n    const playerIds = Object.keys(players);\n    const playerStatsList = pipe(\n        map((id) => (\n            createPlayerStats({\n                avoidList,\n                id,\n                players,\n                roundId,\n                roundList\n            })\n        )),\n        sortPlayersForPairing,\n        setUpperHalves,\n        curry(setByePlayer)(byeQueue)\n    )(playerIds);\n    // Turn the data into blossom-compatible input.\n    const potentialMatches = playerStatsList.filter(\n        (p) => !p.isDueBye\n    ).reduce(\n        function (acc, player1, ignore, src) {\n            const playerMatches = src.map(\n                (player2) => [\n                    playerIds.indexOf(player1.id),\n                    playerIds.indexOf(player2.id),\n                    calcPairIdeal(player1, player2)\n                ]\n            );\n            return acc.concat(playerMatches);\n        },\n        []\n    );\n    // Feed all of the potential matches to Edmonds-blossom and let the\n    // algorithm work its magic. This returns an array where each index is the\n    // ID of one player and each value is the ID of the matched player.\n    const blossomResults = blossom(potentialMatches);\n    // Translate those IDs into actual pairs of player Ids.\n    const reducedResults = blossomResults.reduce(\n        function (acc, p1Index, p2Index) {\n            // Filter out unmatched players. Blossom will automatically include\n            // their missing IDs in its results.\n            if (p1Index !== -1) {\n                // const p1 = playerStatsList.filter((p) => p.id === p1Id)[0];\n                // const p2 = playerStatsList.filter((p) => p.id === p2Id)[0];\n                // Translate the indices into ID strings\n                const p1Id = playerIds[p1Index];\n                const p2Id = playerIds[p2Index];\n                const p1 = playerStatsList.filter((p) => p.id === p1Id)[0];\n                const p2 = playerStatsList.filter((p) => p.id === p2Id)[0];\n                // const ideal = potentialMatches.filter(\n                //     (pair) => pair[0] === p1Id && pair[1] === p2Id\n                // )[0][2];\n                // Blossom returns a lot of redundant matches. Check that this\n                // matchup wasn't already added.\n                const matched = acc.map((pair) => pair[0]);\n                if (!matched.includes(p1) && !matched.includes(p2)) {\n                    return acc.concat([[p1, p2]]);\n                }\n            }\n            return acc;\n        },\n        []\n    );\n    // Sort by net score and rating for board placement.\n    const sortedResults = sortWith(\n        [\n            (pair1, pair2) => (\n                pair2[0].score + pair2[1].score\n                - pair1[0].score - pair1[1].score\n            ),\n            (pair1, pair2) => (\n                pair2[0].rating + pair2[1].rating\n                - pair1[0].rating - pair1[1].rating\n            )\n        ],\n        reducedResults\n    );\n    const matches = sortedResults.map(\n        function (pair) {\n            const player1 = pair[0];\n            const player2 = pair[1];\n            const match = [player1.id, player2.id];\n            if (player1.colorBalance < player2.colorBalance) {\n                return reverse(match);\n            }\n            return match;\n        }\n    );\n    // The bye match always gets added last so the the numbering isn't affected.\n    const byePlayer = playerStatsList.filter((p) => p.isDueBye)[0];\n    if (byePlayer) {\n        return matches.concat([[byePlayer.id, DUMMY_ID]]);\n    }\n    return matches;\n}\n","import Activity from \"react-feather/dist/icons/activity\";\nimport Alert from \"react-feather/dist/icons/alert-triangle\";\nimport ArrowDown from \"react-feather/dist/icons/arrow-down\";\nimport ArrowLeft from \"react-feather/dist/icons/arrow-left\";\nimport ArrowUp from \"react-feather/dist/icons/arrow-up\";\nimport Award from \"react-feather/dist/icons/award\";\nimport Check from \"react-feather/dist/icons/check\";\nimport CheckCircle from \"react-feather/dist/icons/check-circle\";\nimport ChevronDown from \"react-feather/dist/icons/chevron-down\";\nimport ChevronLeft from \"react-feather/dist/icons/chevron-left\";\nimport ChevronRight from \"react-feather/dist/icons/chevron-right\";\nimport ChevronUp from \"react-feather/dist/icons/chevron-up\";\nimport Circle from \"react-feather/dist/icons/circle\";\nimport Download from \"react-feather/dist/icons/download\";\nimport Edit from \"react-feather/dist/icons/edit\";\nimport Info from \"react-feather/dist/icons/info\";\nimport Javascript from \"simple-icons/icons/javascript\";\nimport Layers from \"react-feather/dist/icons/layers\";\nimport List from \"react-feather/dist/icons/list\";\nimport Plus from \"react-feather/dist/icons/plus\";\nimport React from \"react\";\nimport ReactIcon from \"simple-icons/icons/react\";\nimport Repeat from \"react-feather/dist/icons/repeat\";\nimport Settings from \"react-feather/dist/icons/settings\";\nimport Sidebar from \"react-feather/dist/icons/sidebar\";\nimport Trash from \"react-feather/dist/icons/trash-2\";\nimport UserMinus from \"react-feather/dist/icons/user-minus\";\nimport UserPlus from \"react-feather/dist/icons/user-plus\";\nimport Users from \"react-feather/dist/icons/users\";\nimport X from \"react-feather/dist/icons/x\";\n\n/**\n * This converts a specified `simple-icons` icon into a React component.\n */\nconst simpleIcon = (icon) => (props) => (\n    <span\n        dangerouslySetInnerHTML={{__html: icon.svg}}\n        aria-label={icon.title}\n        role=\"img\"\n        style={{fill: \"#\" + icon.hex}}\n        {...props}\n    />\n);\n\nexport default {\n    Activity,\n    Alert,\n    ArrowDown,\n    ArrowLeft,\n    ArrowUp,\n    Award,\n    Check,\n    CheckCircle,\n    ChevronDown,\n    ChevronLeft,\n    ChevronRight,\n    ChevronUp,\n    Circle,\n    Download,\n    Edit,\n    Info,\n    Javascript: simpleIcon(Javascript),\n    Layers,\n    List,\n    Plus,\n    React: simpleIcon(ReactIcon),\n    Repeat,\n    Settings,\n    Sidebar,\n    Trash,\n    UserMinus,\n    UserPlus,\n    Users,\n    X\n};\n","import {Id, createPlayer, createTournament} from \"../../data-types\";\nimport {\n    assoc,\n    dissoc,\n    lensProp,\n    mergeLeft,\n    over\n} from \"ramda\";\nimport nanoid from \"nanoid\";\nimport t from \"tcomb\";\n\nconst ActionLoadState = t.interface({\n    state: t.Any\n});\nconst ActionDelItem = t.interface({\n    id: t.String\n});\nconst ActionAddItem = t.interface({\n    item: t.Any\n});\nconst ActionAddTourney = t.interface({\n    name: t.String\n});\nconst AdctionAddPlayer = t.interface({\n    firstName: t.String,\n    lastName: t.String,\n    rating: t.Number\n});\n// This is copied from players-reducer.js since the profile editor uses it\n// TODO: unify those\nconst ActionSetPlayer = t.interface({\n    firstName: t.String,\n    id: Id,\n    lastName: t.String,\n    matchCount: t.Number,\n    rating: t.Number\n});\nconst ActionTypes = t.union([\n    ActionLoadState,\n    ActionDelItem,\n    ActionAddItem,\n    AdctionAddPlayer,\n    ActionAddTourney,\n    ActionSetPlayer\n]);\nActionTypes.dispatch = function (x) {\n    const typeToConstructor = {\n        \"ADD_ITEM\": ActionAddItem,\n        \"ADD_PLAYER\": AdctionAddPlayer,\n        \"ADD_TOURNEY\": ActionAddTourney,\n        \"DEL_ITEM\": ActionDelItem,\n        \"LOAD_STATE\": ActionLoadState,\n        \"SET_PLAYER\": ActionSetPlayer\n    };\n    return typeToConstructor[x.type];\n};\n\nexport default function genericDbReducer(state, action) {\n    ActionTypes(action);\n    const nextId = nanoid();\n    switch (action.type) {\n    case \"ADD_ITEM\":\n        console.warn(\"Use a more specific action instead, please.\");\n        return assoc(nextId, action.item, state);\n    case \"ADD_TOURNEY\":\n        return assoc(\n            nextId,\n            createTournament({id: nextId, name: action.name}),\n            state\n        );\n    case \"ADD_PLAYER\":\n        return assoc(\n            nextId,\n            createPlayer({\n                firstName: action.firstName,\n                id: nextId,\n                lastName: action.lastName,\n                rating: action.rating\n            }),\n            state\n        );\n    case \"DEL_ITEM\":\n        // If using the player DB, be sure to delete avoid-pairs too.\n        return dissoc(action.id, state);\n    case \"SET_PLAYER\":\n        // This is copied from players-reducer since the profile editor uses it\n        return over(\n            lensProp(action.id),\n            mergeLeft(\n                {\n                    firstName: action.firstName,\n                    lastName: action.lastName,\n                    matchCount: action.matchCount,\n                    rating: action.rating\n                }\n            ),\n            state\n        );\n    case \"LOAD_STATE\":\n        return action.state;\n    default:\n        throw new Error(\"Unexpected action type\");\n    }\n}\n","import {AvoidPair, Id} from \"../../data-types\";\nimport {append, assoc, filter, lensProp, over} from \"ramda\";\nimport t from \"tcomb\";\n\nconst ActionLoadState = t.interface({\n    state: t.Any\n});\nconst ActionSetOption = t.interface({\n    option: t.String,\n    value: t.union([\n        t.Number,\n        t.list(AvoidPair)\n    ])\n});\nconst ActionAvoidPair = t.interface({\n    pair: AvoidPair\n});\nconst ActionAvoidSingle = t.interface({\n    id: Id\n});\nconst ActionTypes = t.union([\n    ActionLoadState,\n    ActionAvoidPair,\n    ActionAvoidSingle\n]);\nActionTypes.dispatch = function (x) {\n    const typeToConstructor = {\n        \"ADD_AVOID_PAIR\": ActionAvoidPair,\n        \"DEL_AVOID_PAIR\": ActionAvoidPair,\n        \"DEL_AVOID_SINGLE\": ActionAvoidSingle,\n        \"LOAD_STATE\": ActionLoadState,\n        \"SET_OPTION\": ActionSetOption\n    };\n    return typeToConstructor[x.type];\n};\n\nexport default function optionsReducer(state, action) {\n    ActionTypes(action);\n    switch (action.type) {\n    case \"ADD_AVOID_PAIR\":\n        return over(\n            lensProp(\"avoidPairs\"),\n            append(action.pair),\n            state\n        );\n    case \"DEL_AVOID_PAIR\":\n        return over(\n            lensProp(\"avoidPairs\"),\n            filter((pair) => !(\n                pair.includes(action.pair[0]) && pair.includes(action.pair[1])\n            )),\n            state\n        );\n    case \"DEL_AVOID_SINGLE\":\n        // call this when you delete a player ID\n        // TODO: make the avoidPairs list smartly auto-clean itself\n        return over(\n            lensProp(\"avoidPairs\"),\n            filter((pair) => !pair.includes(action.id)),\n            state\n        );\n    case \"SET_OPTION\":\n        return assoc(\n            action.option,\n            action.value,\n            state\n        );\n    case \"LOAD_STATE\":\n        return action.state;\n    default:\n        throw new Error(\"Unexpected action type.\");\n    }\n}\n\n","import {Id, createPlayer} from \"../../data-types\";\nimport {\n    assoc,\n    dissoc,\n    lensPath,\n    lensProp,\n    mergeLeft,\n    over,\n    set\n} from \"ramda\";\nimport nanoid from \"nanoid\";\nimport t from \"tcomb\";\n\nconst ActionSetPlayer = t.interface({\n    firstName: t.String,\n    id: Id,\n    lastName: t.String,\n    matchCount: t.Number,\n    rating: t.Number\n});\nconst ActionAddPlayer = t.interface({\n    firstName: t.String,\n    lastName: t.String,\n    rating: t.Number\n});\nconst ActionDelPlayer = t.interface({\n    id: Id\n});\nconst ActionSetMatchcount = t.interface({\n    id: Id,\n    matchCount: t.Number\n});\nconst ActionSetRating = t.interface({\n    id: Id,\n    rating: t.Number\n});\nconst ActionLoadState = t.interface({state: t.Any});\nconst ActionTypes = t.union([\n    ActionSetPlayer,\n    ActionAddPlayer,\n    ActionDelPlayer,\n    ActionSetMatchcount,\n    ActionSetRating,\n    ActionLoadState\n]);\nActionTypes.dispatch = function (x) {\n    const typeToConstructor = {\n        \"ADD_PLAYER\": ActionAddPlayer,\n        \"DEL_PLAYER\": ActionDelPlayer,\n        \"LOAD_STATE\": ActionLoadState,\n        \"SET_PLAYER\": ActionSetPlayer,\n        \"SET_PLAYER_MATCHCOUNT\": ActionSetMatchcount,\n        \"SET_PLAYER_RATING\": ActionSetRating\n    };\n    return typeToConstructor[x.type];\n};\n\nexport default function playersReducer(state, action) {\n    ActionTypes(action);\n    const nextId = nanoid();\n    switch (action.type) {\n    case \"ADD_PLAYER\":\n        return assoc(\n            nextId,\n            createPlayer({\n                firstName: action.firstName,\n                id: nextId,\n                lastName: action.lastName,\n                rating: action.rating\n            }),\n            state\n        );\n    case \"SET_PLAYER\":\n        return over(\n            lensProp(action.id),\n            mergeLeft(\n                {\n                    firstName: action.firstName,\n                    lastName: action.lastName,\n                    matchCount: action.matchCount,\n                    rating: action.rating\n                }\n            ),\n            state\n        );\n    case \"DEL_PLAYER\":\n        // You should delete all avoid-pairs with the id too.\n        return dissoc(\n            lensPath(action.id),\n            state\n        );\n    case \"SET_PLAYER_MATCHCOUNT\":\n        return set(\n            lensPath([action.id, \"matchCount\"]),\n            action.matchCount,\n            state\n        );\n    case \"SET_PLAYER_RATING\":\n        return set(\n            lensPath([action.id, \"rating\"]),\n            action.rating,\n            state\n        );\n    case \"LOAD_STATE\":\n        return action.state;\n    default:\n        throw new Error(\"Unexpected action type\");\n    }\n}\n","// TODO: this file needs to be replaced with something more organized.\nimport {\n    AvoidPair,\n    BLACK,\n    DUMMY_ID,\n    Id,\n    Player,\n    Tournament,\n    WHITE,\n    createMatch\n} from \"../../data-types\";\nimport {getPlayerMaybe, pairPlayers} from \"../../pairing-scoring\";\nimport {assoc} from \"ramda\";\nimport t from \"tcomb\";\n\nexport function autoPair({\n    avoidList,\n    byeValue,\n    players,\n    roundId,\n    tourney\n}) {\n    t.list(AvoidPair)(avoidList);\n    t.Number(byeValue);\n    Tournament(tourney);\n    t.dict(Id, Player)(players);\n    t.Number(roundId);\n    const roundList = tourney.roundList;\n    const pairs = pairPlayers({\n        avoidList: avoidList,\n        byeQueue: tourney.byeQueue,\n        players,\n        roundId,\n        roundList\n    });\n    console.log(\"pairs\", pairs);\n    console.log(\"players\", players);\n    const getPlayer = (id) => getPlayerMaybe(players, id); // curry\n    const newMatchList = pairs.map(\n        (idsPair) => (\n            createMatch({\n                newRating: [\n                    getPlayer(idsPair[WHITE]).rating,\n                    getPlayer(idsPair[BLACK]).rating\n                ],\n                origRating: [\n                    getPlayer(idsPair[WHITE]).rating,\n                    getPlayer(idsPair[BLACK]).rating\n                ],\n                playerIds: [idsPair[WHITE], idsPair[BLACK]]\n            })\n        )\n    );\n    return newMatchList.reduce(\n        // Set match results for bye matches\n        function (acc, match) {\n            if (match.playerIds[WHITE] === DUMMY_ID) {\n                return acc.concat([assoc(\"result\", [0, byeValue], match)]);\n            }\n            if (match.playerIds[BLACK] === DUMMY_ID) {\n                return acc.concat([assoc(\"result\", [byeValue, 0], match)]);\n            }\n            return acc.concat([match]);\n        },\n        []\n    );\n}\n\nexport function manualPair(pair, byeValue) {\n    t.tuple([Player, Player])(pair);\n    const match = createMatch({\n        newRating: [pair[WHITE].rating, pair[BLACK].rating],\n        origRating: [pair[WHITE].rating, pair[BLACK].rating],\n        playerIds: [pair[WHITE].id, pair[BLACK].id]\n    });\n    if (pair[WHITE].id === DUMMY_ID) {\n        return assoc(\"result\", [0, byeValue], match);\n    }\n    if (pair[BLACK].id === DUMMY_ID) {\n        return assoc(\"result\", [byeValue, 0], match);\n    }\n    return match;\n}\n","import {AvoidPair, BLACK, DUMMY_ID, Id, Player, WHITE} from \"../../data-types\";\nimport {\n    __,\n    append,\n    assoc,\n    concat,\n    filter,\n    findIndex,\n    lensPath,\n    lensProp,\n    map,\n    mergeRight,\n    move,\n    over,\n    pipe,\n    propEq,\n    remove,\n    reverse,\n    set\n} from \"ramda\";\nimport {autoPair, manualPair} from \"./match-functions\";\nimport t from \"tcomb\";\n\nconst ActionAddRound = t.interface({});\nconst ActionDelLastRound = t.interface({});\nconst ActionAddRemoveTieBreak = t.interface({\n    id: t.Number\n});\nconst ActionMoveTieBreak = t.interface({\n    newIndex: t.Number,\n    oldIndex: t.Number\n});\nconst ActionSetTourneyPlayers = t.interface({\n    playerIds: t.list(Id)\n});\nconst ActionSetByeQueue = t.interface({\n    byeQueue: t.list(Id)\n});\nconst ActionAutoPair = t.interface({\n    avoidList: t.list(AvoidPair),\n    byeValue: t.Number,\n    players: t.dict(Id, Player),\n    roundId: t.Number\n});\nconst ActionManualPair = t.interface({\n    byeValue: t.Number,\n    pair: t.tuple([Player, Player]),\n    roundId: t.Number\n});\nconst ActionSetMatchResult = t.interface({\n    matchId: t.String,\n    newRating: t.tuple([t.Number, t.Number]),\n    result: t.tuple([t.Number, t.Number]),\n    roundId: t.Number\n});\nconst ActionEditMatch = t.interface({\n    matchId: t.String,\n    roundId: t.Number\n});\nconst ActionMoveMatch = t.interface({\n    newIndex: t.Number,\n    oldIndex: t.Number,\n    roundId: t.Number\n});\nconst ActionSetName = t.interface({\n    name: t.String\n});\nconst ActionSetDate = t.interface({\n    date: Date\n});\nconst ActionUpdateByeScores = t.interface({\n    value: t.Number\n});\nconst ActionLoadState = t.interface({\n    state: t.Any\n});\nconst ActionTypes = t.union([\n    ActionAddRound,\n    ActionDelLastRound,\n    ActionAddRemoveTieBreak,\n    ActionAddRemoveTieBreak,\n    ActionMoveTieBreak,\n    ActionSetName,\n    ActionSetTourneyPlayers,\n    ActionSetByeQueue,\n    ActionSetDate,\n    ActionAutoPair,\n    ActionManualPair,\n    ActionSetMatchResult,\n    ActionEditMatch,\n    ActionMoveMatch,\n    ActionUpdateByeScores\n]);\nActionTypes.dispatch = function (action) {\n    const typeToConstructor = {\n        \"ADD_ROUND\": ActionAddRound,\n        \"ADD_TIEBREAK\": ActionAddRemoveTieBreak,\n        \"AUTO_PAIR\": ActionAutoPair,\n        \"DEL_LAST_ROUND\": ActionDelLastRound,\n        \"DEL_MATCH\": ActionEditMatch,\n        \"DEL_TIEBREAK\": ActionAddRemoveTieBreak,\n        \"MANUAL_PAIR\": ActionManualPair,\n        \"MOVE_MATCH\": ActionMoveMatch,\n        \"MOVE_TIEBREAK\": ActionMoveTieBreak,\n        \"SET_BYE_QUEUE\": ActionSetByeQueue,\n        \"SET_DATE\": ActionSetDate,\n        \"SET_MATCH_RESULT\": ActionSetMatchResult,\n        \"SET_NAME\": ActionSetName,\n        \"SET_STATE\": ActionLoadState,\n        \"SET_TOURNEY_PLAYERS\": ActionSetTourneyPlayers,\n        \"SWAP_COLORS\": ActionEditMatch,\n        \"UPDATE_BYE_SCORES\": ActionUpdateByeScores\n    };\n    return typeToConstructor[action.type];\n};\n\nexport default function tournamentReducer(state, action) {\n    ActionTypes(action);\n    switch (action.type) {\n    case \"ADD_ROUND\":\n        return over(\n            lensProp(\"roundList\"),\n            append([]),\n            state\n        );\n    case \"DEL_LAST_ROUND\":\n        return over(\n            lensProp(\"roundList\"),\n            remove(-1, 1),\n            state\n        );\n    case \"ADD_TIEBREAK\":\n        return over(\n            lensProp(\"tieBreaks\"),\n            append(action.id),\n            state\n        );\n    case \"DEL_TIEBREAK\":\n        return over(\n            lensProp(\"tieBreaks\"),\n            filter((id) => id !== action.id),\n            state\n        );\n    case \"MOVE_TIEBREAK\":\n        return over(\n            lensProp(\"tieBreaks\"),\n            move(action.oldIndex, action.newIndex),\n            state\n        );\n    case \"SET_TOURNEY_PLAYERS\":\n        return assoc(\n            \"playerIds\",\n            action.playerIds,\n            state\n        );\n    case \"SET_BYE_QUEUE\":\n        return assoc(\n            \"byeQueue\",\n            action.byeQueue,\n            state\n        );\n    case \"SET_NAME\":\n        return assoc(\n            \"name\",\n            action.name,\n            state\n        );\n    case \"AUTO_PAIR\":\n        return over(\n            lensPath([\"roundList\", action.roundId]),\n            concat(\n                __,\n                autoPair({\n                    avoidList: action.avoidList,\n                    byeValue: action.byeValue,\n                    players: action.players,\n                    roundId: action.roundId,\n                    tourney: state\n                })\n            ),\n            state\n        );\n    case \"MANUAL_PAIR\":\n        return over(\n            lensPath([\"roundList\", action.roundId]),\n            append(manualPair(action.pair, action.byeValue)),\n            state\n        );\n    case \"SET_DATE\":\n        return assoc(\n            \"date\",\n            action.date,\n            state\n        );\n    case \"SET_MATCH_RESULT\":\n        return pipe(\n            set(\n                lensPath([\n                    \"roundList\",\n                    action.roundId,\n                    findIndex(\n                        propEq(\"id\", action.matchId),\n                        state.roundList[action.roundId]\n                    ),\n                    \"result\"\n                ]),\n                action.result\n            ),\n            set(\n                lensPath([\n                    \"roundList\",\n                    action.roundId,\n                    findIndex(\n                        propEq(\"id\", action.matchId),\n                        state.roundList[action.roundId]\n                    ),\n                    \"newRating\"\n                ]),\n                action.newRating,\n            ),\n        )(state);\n    case \"DEL_MATCH\":\n        return over(\n            lensPath([\"roundList\", action.roundId]),\n            filter((match) => match.id !== action.matchId),\n            state\n        );\n    case \"SWAP_COLORS\":\n        return over(\n            lensPath([\n                \"roundList\",\n                action.roundId,\n                findIndex(\n                    propEq(\"id\", action.matchId),\n                    state.roundList[action.roundId]\n                )\n            ]),\n            (match) => mergeRight(\n                match,\n                {\n                    newRating: reverse(match.newRating),\n                    origRating: reverse(match.origRating),\n                    playerIds: reverse(match.playerIds),\n                    result: reverse(match.result)\n                }\n            ),\n            state\n        );\n    case \"MOVE_MATCH\":\n        return over(\n            lensPath([\"roundList\", action.roundId]),\n            move(action.oldIndex, action.newIndex),\n            state\n        );\n    case \"UPDATE_BYE_SCORES\":\n        return assoc(\n            \"roundList\",\n            map(\n                map(\n                    function (match) {\n                        if (match.playerIds[WHITE] === DUMMY_ID) {\n                            return assoc(\"result\", [0, action.value], match);\n                        } else if (match.playerIds[BLACK] === DUMMY_ID) {\n                            return assoc(\"result\", [action.value, 0], match);\n                        } else {\n                            return match;\n                        }\n                    }\n                ),\n                state.roundList\n            ),\n            state\n        );\n    case \"SET_STATE\":\n        console.log(\"setting state:\", action.state);\n        return action.state;\n    default:\n        throw new Error(\"Unexpected action type \" + action.type);\n    }\n}\n","import {Id, Player, Tournament} from \"../data-types\";\nimport fromJSON from \"tcomb/lib/fromJSON\";\nimport options from \"./options.json\";\nimport players from \"./players.json\";\nimport t from \"tcomb\";\nimport tournaments from \"./tournaments.json\";\n\nexport default {\n    options,\n    players: t.dict(Id, Player)(players),\n    tournaments: fromJSON(tournaments, t.dict(t.String, Tournament))\n};\n","import \"localforage-getitems\";\nimport {genericDbReducer, optionsReducer} from \"./reducers\";\nimport {useEffect, useReducer, useState} from \"react\";\nimport demoData from \"../demo-data\";\nimport {difference} from \"ramda\";\nimport localForage from \"localforage\";\nimport {extendPrototype as removeItemsPrototype} from \"localforage-removeitems\";\nimport {extendPrototype as setItemsPrototype} from \"localforage-setitems\";\n\n/*******************************************************************************\n * Initialize the databases\n ******************************************************************************/\nsetItemsPrototype(localForage);\nremoveItemsPrototype(localForage);\nconst DATABASE_NAME = \"Chessahoochee\";\nconst optionsStore = localForage.createInstance({\n    name: DATABASE_NAME,\n    storeName: \"Options\"\n});\nconst playerStore = localForage.createInstance({\n    name: DATABASE_NAME,\n    storeName: \"Players\"\n});\nconst tourneyStore = localForage.createInstance({\n    name: DATABASE_NAME,\n    storeName: \"Tournaments\"\n});\n\nexport {optionsStore, playerStore, tourneyStore};\n\nexport function loadDemoDB() {\n    document.body.style.cursor = \"wait\";\n    Promise.all([\n        optionsStore.setItems(demoData.options),\n        playerStore.setItems(demoData.players),\n        tourneyStore.setItems(demoData.tournaments)\n    ]).then(function () {\n        window.alert(\"Demo data loaded!\");\n        document.body.style.cursor = \"auto\";\n    });\n}\n\n/*******************************************************************************\n * Generic database hooks\n ******************************************************************************/\nfunction useAllItemsFromDb(store) {\n    const [items, dispatch] = useReducer(genericDbReducer, {});\n    const [isLoaded, setIsLoaded] = useState(false);\n    useEffect(\n        function loadItemsFromDb() {\n            document.body.style.cursor = \"wait\";\n            store.getItems().then(function (results) {\n                console.log(\"loaded items from\", store._config.storeName);\n                dispatch({state: results, type: \"LOAD_STATE\"});\n                setIsLoaded(true);\n                document.body.style.cursor = \"auto\";\n            }).catch(function () {\n                document.body.style.cursor = \"auto\";\n            });\n        },\n        [store]\n    );\n    useEffect(\n        function saveChangesToDb() {\n            if (!isLoaded) {\n                return;\n            }\n            store.setItems(items).then(function () {\n                console.log(\"saved items to\", store._config.storeName);\n            });\n            store.keys().then(function (keys) {\n                const deleted = difference(keys, Object.keys(items));\n                if (deleted.length > 0 ) {\n                    store.removeItems(deleted).then(function () {\n                        console.log(\"Deleted \" + deleted.length + \" items.\");\n                    });\n                }\n            });\n        },\n        [store, items, isLoaded]\n    );\n    return [items, dispatch];\n}\n\n/*******************************************************************************\n * Player & tournament wrapper hooks\n ******************************************************************************/\nexport function useAllPlayersDb() {\n    return useAllItemsFromDb(playerStore);\n}\n\nexport function useAllTournamentsDb() {\n    return useAllItemsFromDb(tourneyStore);\n}\n\n/*******************************************************************************\n * Options database hooks\n ******************************************************************************/\nexport function useOptionsDb() {\n    const [options, dispatch] = useReducer(optionsReducer, demoData.options);\n    const [isLoaded, setIsLoaded] = useState(false);\n    useEffect(\n        function initOptionsFromDb() {\n            document.body.style.cursor = \"wait\";\n            optionsStore.iterate(function (value, key) {\n                dispatch({option: key, type: \"SET_OPTION\", value: value});\n            }).then(function () {\n                setIsLoaded(true);\n                document.body.style.cursor = \"auto\";\n            }).catch(function () {\n                document.body.style.cursor = \"auto\";\n            });\n        },\n        []\n    );\n    useEffect(\n        function writeChangesToDb() {\n            if (!isLoaded) {\n                return;\n            }\n            optionsStore.setItems(options);\n        },\n        [options, isLoaded]\n    );\n    return [options, dispatch];\n}\n","import React, {\n    createContext,\n    useContext,\n    useEffect,\n    useReducer,\n    useState\n} from \"react\";\nimport {\n    getAllPlayersFromMatches,\n    getPlayerMaybe,\n    rounds2Matches\n} from \"../pairing-scoring\";\nimport {playerStore, tourneyStore} from \"./db\";\nimport {playersReducer, tournamentReducer} from \"./reducers\";\nimport PropTypes from \"prop-types\";\nimport {symmetricDifference} from \"ramda\";\n\nconst TournamentContext = createContext(null);\n\nexport function useTournament() {\n    const state = useContext(TournamentContext);\n    return state;\n}\n\nexport function TournamentProvider({children, tourneyId}) {\n    const [tourney, tourneyDispatch] = useReducer(tournamentReducer, {});\n    const [players, playersDispatch] = useReducer(playersReducer, {});\n    const [isTourneyLoaded, setIsTourneyLoaded] = useState(false);\n    const [isPlayersLoaded, setIsPlayersLoaded] = useState(false);\n    const [isDbError, setIsDbError] = useState(false);\n    useEffect(\n        function initTourneyFromDb() {\n            document.body.style.cursor = \"wait\";\n            tourneyStore.getItem(tourneyId).then(function (value) {\n                console.log(\"loaded:\", tourneyId);\n                if (!value) {\n                    setIsDbError(true);\n                }\n                tourneyDispatch({state: value || {}, type: \"SET_STATE\"});\n                setIsTourneyLoaded(true);\n                document.body.style.cursor = \"auto\";\n            }).catch(function () {\n                setIsDbError(true);\n                document.body.style.cursor = \"auto\";\n            });\n        },\n        [tourneyId]\n    );\n    useEffect(\n        function hydrateTourneyPlayersFromDb() {\n            if (!tourney.roundList || !tourney.playerIds) {\n                return; // the tournament hasn't been loaded yet\n            }\n            // Include players who have played matches but left the tournament,\n            // as well as players who are registered but havne't played yet.\n            const allTheIds = getAllPlayersFromMatches(\n                rounds2Matches(tourney.roundList)\n            ).concat(\n                tourney.playerIds\n            );\n            // If there are no ids, update the player state and exit early.\n            if (allTheIds.length === 0) {\n                // This check prevents an infinite loop & memory leak.\n                if (Object.keys(players).length !== 0) {\n                    playersDispatch({state: {}, type: \"LOAD_STATE\"});\n                }\n                setIsPlayersLoaded(true);\n                return;\n            }\n            document.body.style.cursor = \"wait\";\n            playerStore.getItems(allTheIds).then(function (values) {\n                // This safeguards against trying to fetch dummy IDs or IDs from\n                // deleted players. If we updated without this condition, then\n                // this `useEffect` would trigger an infinite loop and a memory\n                // leak.\n                const unChangedPlayers = symmetricDifference(\n                    Object.keys(values),\n                    Object.keys(players)\n                );\n                console.log(\"unchanged players:\", unChangedPlayers);\n                if (unChangedPlayers.length !== 0) {\n                    console.log(\"hydrated player data\");\n                    playersDispatch({state: values, type: \"LOAD_STATE\"});\n                }\n                setIsPlayersLoaded(true);\n                document.body.style.cursor = \"auto\";\n            }).catch(function (error) {\n                console.error(\"Couldn't load ids:\", allTheIds);\n                console.error(error);\n                document.body.style.cursor = \"auto\";\n            });\n        },\n        [tourney.roundList, players, tourney.playerIds]\n    );\n    useEffect(\n        function saveTourneyToDb() {\n            if (\n                !isTourneyLoaded\n                // The tourney length is 0 when it wasn't found in the DB\n                || Object.keys(tourney).length === 0\n                // I don't know why, but this happens sometimes with a bad URL\n                || tourneyId !== tourney.id\n            ) {\n                return;\n            }\n            tourneyStore.setItem(tourneyId, tourney).catch(function (error) {\n                console.log(\"error saving tourney:\", tourneyId, error);\n            });\n        },\n        [tourneyId, tourney, isTourneyLoaded]\n    );\n    useEffect(\n        function savePlayersToDb() {\n            if (!isPlayersLoaded) {\n                return;\n            }\n            playerStore.setItems(players).then(function (values) {\n                console.log(\"saved player changes to DB:\", values);\n            }).catch(function (error) {\n                console.log(\"couldn't save players to DB:\", error);\n            });\n        },\n        [players, isPlayersLoaded]\n    );\n    const getPlayer = (id) => getPlayerMaybe(players, id); // curry\n    if (isDbError) {\n        return <div>Error: tournament not found.</div>;\n    }\n    if (!isTourneyLoaded || !isPlayersLoaded) {\n        return <div>Loading...</div>;\n    }\n    return (\n        <TournamentContext.Provider\n            value={{\n                getPlayer,\n                players,\n                playersDispatch,\n                tourney,\n                tourneyDispatch\n            }}\n        >\n            {children}\n        </TournamentContext.Provider>\n    );\n}\nTournamentProvider.propTypes = {\n    children: PropTypes.node.isRequired,\n    tourneyId: PropTypes.string.isRequired\n};\n","import {ascend, descend, prop, sort} from \"ramda\";\nimport {useEffect, useState} from \"react\";\n\nexport function useSortedTable(origTable, defaultKey, defaultDescend = true) {\n    const [table, setTable] = useState(origTable);\n    const [key, setKey] = useState(defaultKey);\n    const [isDescending, setIsDescending] = useState(defaultDescend);\n    function toggleDirection() {\n        setIsDescending(!isDescending);\n    }\n    useEffect(\n        function () {\n            const direction = (isDescending) ? descend : ascend;\n            setTable(sort(direction(prop(key)), origTable));\n        },\n        [origTable, key, isDescending]\n    );\n    return {\n        isDescending,\n        key,\n        setIsDescending,\n        setKey,\n        setTable,\n        table,\n        toggleDirection\n    };\n}\n\nexport function useDocumentTitle(title) {\n    useEffect(\n        function () {\n            const origTitle = document.title;\n            document.title = \"Chessahoochee: \" + title;\n            return function () {\n                document.title = origTitle;\n            };\n        },\n        [title]\n    );\n}\n","import {\n    createStandingList,\n    getPerformanceRatings,\n    getResultsByOpponent,\n    rounds2Matches\n} from \"../../pairing-scoring\";\nimport Icons from \"../icons\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {assoc} from \"ramda\";\nimport numeral from \"numeral\";\nimport style from \"./scores.module.css\";\nimport {useTournament} from \"../../hooks\";\n\nexport default function Crosstable(props) {\n    const {tourney, getPlayer} = useTournament();\n    const {tieBreaks, roundList} = tourney;\n    const matches = rounds2Matches(roundList);\n    const oppResults = (id) => getResultsByOpponent(matches, id); // curry\n    const [standings] = createStandingList(tieBreaks, roundList);\n    const opponentScores = standings.reduce(\n        (acc, {id}) => assoc(id, oppResults(id), acc),\n        {}\n    );\n\n    function getXScore(player1Id, player2Id) {\n        if (player1Id === player2Id) {\n            return <Icons.X className=\"disabled\" />;\n        }\n        const result = opponentScores[player1Id][player2Id];\n        if (result === undefined) {\n            return null;\n        }\n        return numeral(result).format(\"1/2\");\n    }\n\n    function getRatingChangeTds(playerId) {\n        const [\n            firstRating,\n            lastRating\n        ] = getPerformanceRatings(matches, playerId);\n        const change = numeral(lastRating - firstRating).format(\"+0\");\n        return (\n            <>\n            <td className=\"table__number\">\n                {lastRating}\n            </td>\n            <td className=\"table__number body-10\">\n                ({change})\n            </td>\n            </>\n        );\n    }\n\n    return (\n        <table className={style.table}>\n            <caption>Crosstable</caption>\n            <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Name</th>\n                    {/* Display a rank as a shorthand for each player. */}\n                    {Object.keys(standings).map((rank) =>\n                        <th key={rank}>\n                            {Number(rank) + 1}\n                        </th>\n                    )}\n                    <th>Score</th>\n                    <th colSpan={2}>Rating</th>\n                </tr>\n            </thead>\n            <tbody>\n                {/* Output a row for each player */}\n                {standings.map((standing, index)=>\n                    <tr key={index} className={style.row}>\n                        <th className={style.rank} scope=\"col\">\n                            {index + 1}\n                        </th>\n                        <th className={style.playerName} scope=\"row\">\n                            {getPlayer(standing.id).firstName}&nbsp;\n                            {getPlayer(standing.id).lastName}\n                        </th>\n                        {/* Output a cell for each other player */}\n                        {standings.map((opponent, index2) =>\n                            <td\n                                key={index2}\n                                className=\"table__number\"\n                            >\n                                {getXScore(standing.id, opponent.id)}\n                            </td>\n                        )}\n                        {/* Output their score and rating change */}\n                        <td className=\"table__number\">\n                            {numeral(standing.score).format(\"1/2\")}\n                        </td>\n                        {getRatingChangeTds(standing.id)}\n                    </tr>\n                )}\n            </tbody>\n        </table>\n    );\n}\nCrosstable.propTypes = {\n    tourneyId: PropTypes.string\n};\n","import Icons from \"./icons\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {omit} from \"ramda\";\nimport styles from \"./utility.module.css\";\n// import {usePlayers} from \"../state\";\n\nexport const Button = ({children, action}) => (\n    <button onClick={action}>\n        {children}\n    </button>\n);\nButton.propTypes = {\n    action: PropTypes.func.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport const BackButton = ({action}) => (\n    <Button action={action}>&lt; Back</Button>\n);\nBackButton.propTypes = {\n    action: PropTypes.func.isRequired\n};\n\nexport const OpenButton = ({action}) => (\n    <Button action={action}>Open &gt;</Button>\n);\nOpenButton.propTypes = {\n    action: PropTypes.func.isRequired\n};\n\nexport function Panel({children, style}) {\n    return (\n        <div className={styles.panel} style={{...style}}>\n            {children}\n        </div>\n    );\n}\nPanel.propTypes = {\n    children: PropTypes.node.isRequired,\n    style: PropTypes.object\n};\n\nexport function PanelContainer(props) {\n    return (\n        <div {...props} className={styles.panels + \" \" + props.className}>\n            {props.children}\n            {/* {React.Children.map(props.children, (child) => child)} */}\n        </div>\n    );\n}\nPanelContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string\n};\n\nexport function DateFormat(props) {\n    const dateFormat = new Intl.DateTimeFormat(\n        \"en-US\",\n        {\n            day: \"2-digit\",\n            month: \"short\",\n            year: \"numeric\"\n        }\n    );\n    const cleanProps = omit([\"date\"], props);\n    return (\n        <time dateTime={props.date.toISOString()} {...cleanProps}>\n            {dateFormat.format(props.date)}\n        </time>\n    );\n}\nDateFormat.propTypes = {\n    date: PropTypes.instanceOf(Date)\n};\n\nexport function Notification(props) {\n    const [icon, className] = (function () {\n        if (props.success) {\n            return [<Icons.Check />, \"notification__success\"];\n        } else if (props.warning) {\n            return [<Icons.Alert />, \"notification__warning\"];\n        } else if (props.error) {\n            return [<Icons.X />, \"notification__error\"];\n        } else {\n            return [<Icons.Info />, \"notification__generic\"];\n        }\n    }());\n    const cleanProps = omit([\"warning\", \"error\", \"success\"], props);\n    return (\n        <div {...cleanProps} className={\"notification \" + className}>\n            <div className=\"notification__icon\">\n                {icon}\n            </div>\n            <div className=\"notification__text\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\nNotification.propTypes = {\n    children: PropTypes.node.isRequired,\n    error: PropTypes.bool,\n    success: PropTypes.bool,\n    warning: PropTypes.bool\n};\n\n/**\n * This just creates empty space to balance the layout, e.g. if there's a button\n * on one side of a label that's offsetting it.\n */\nconst PlaceholderButton = () => (\n    <button\n        className=\"button-ghost placeholder\"\n        aria-hidden\n        disabled\n    />\n);\nexport {PlaceholderButton};\n\nexport function SortLabel({label, sortKey, data}) {\n    function toggleDirAndSetKey() {\n        data.setKey(sortKey);\n        data.toggleDirection();\n    }\n    function setKeyOrToggleDir() {\n        if (data.key === sortKey) {\n            data.toggleDirection();\n        } else {\n            data.setKey(sortKey);\n        }\n    }\n    return (\n        <span className=\"buttons-on-hover\">\n            <PlaceholderButton />\n            <button\n                className=\"button-micro dont-hide button-text-ghost title-20\"\n                onClick={setKeyOrToggleDir}\n            >\n                {label}\n            </button>\n            <button\n                className={\n                    (data.key === sortKey)\n                    ? \"dont-hide button-ghost\"\n                    : \"button-ghost\"}\n                onClick={toggleDirAndSetKey}\n            >\n                {(data.isDescending)\n                    ? <Icons.ChevronUp />\n                    : <Icons.ChevronDown />}\n            </button>\n        </span>\n    );\n}\nSortLabel.propTypes = {\n    data: PropTypes.object.isRequired,\n    label: PropTypes.string.isRequired,\n    sortKey: PropTypes.string.isRequired\n};\n\n/*******************************************************************************\n * Non-JSX functions\n ******************************************************************************/\nexport function findById(id, list) {\n    return list.filter((x) => x.id === id)[0];\n}\n\nexport function findIndexById(id, list) {\n    return list.indexOf(findById(id, list));\n}\n","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {assoc} from \"ramda\";\n\nexport default function NewPlayer({dispatch}) {\n    const newPlayerDefault = {firstName: \"\", lastName: \"\", rating: 1200};\n    const [newPlayerData, setNewPlayerdata] = useState(newPlayerDefault);\n\n    const handleSubmit = function (event) {\n        event.preventDefault();\n        const {firstName, lastName, rating} = newPlayerData;\n        setNewPlayerdata(newPlayerDefault);\n        dispatch({\n            firstName,\n            lastName,\n            rating: Number(rating),\n            type: \"ADD_PLAYER\"\n        });\n    };\n\n    const updateField = function (event) {\n        event.preventDefault();\n        const {name, value} = event.currentTarget;\n        setNewPlayerdata((prevState) => assoc(name, value, prevState));\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <fieldset>\n                <legend>Register a new player</legend>\n                <p>\n                    <label htmlFor=\"firstName\">First name</label>\n                    <input\n                        name=\"firstName\"\n                        type=\"text\"\n                        value={newPlayerData.firstName}\n                        required\n                        onChange={updateField}\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"lastName\">Last name</label>\n                    <input\n                        name=\"lastName\"\n                        type=\"text\"\n                        value={newPlayerData.lastName}\n                        required\n                        onChange={updateField}\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"rating\">Rating</label>\n                    <input\n                        name=\"rating\"\n                        type=\"number\"\n                        value={newPlayerData.rating}\n                        required\n                        onChange={updateField}\n                    />\n                </p>\n                <p>\n                    <input type=\"submit\" value=\"Add\"/>\n                </p>\n            </fieldset>\n        </form>\n    );\n}\nNewPlayer.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n","import {useAllPlayersDb, useTournament} from \"../../../hooks\";\nimport NewPlayer from \"../../new-player\";\nimport React from \"react\";\n\nexport default function Selecting(props) {\n    const {tourney, tourneyDispatch} = useTournament();\n    const [players, allPlayersDispatch] = useAllPlayersDb();\n\n    function togglePlayer(event) {\n        const id = event.target.value;\n        if (event.target.checked) {\n            tourneyDispatch({\n                playerIds: tourney.playerIds.concat([id]),\n                type: \"SET_TOURNEY_PLAYERS\"\n            });\n        } else {\n            tourneyDispatch({\n                playerIds: tourney.playerIds.filter((pId) => pId !== id),\n                type: \"SET_TOURNEY_PLAYERS\"\n            });\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"toolbar\">\n                <button\n                    className=\"button-micro\"\n                    onClick={() => tourneyDispatch({\n                        playerIds: Object.keys(players),\n                        type: \"SET_TOURNEY_PLAYERS\"\n                    })}\n                >\n                    Select all\n                </button>\n                <button\n                    className=\"button-micro\"\n                    onClick={() => tourneyDispatch({\n                        playerIds: [],\n                        type: \"SET_TOURNEY_PLAYERS\"\n                    })}\n                >\n                    Select none\n                </button>\n            </div>\n            <table>\n                <caption>Select players</caption>\n                <thead>\n                    <tr>\n                        <th>First name</th>\n                        <th>Last name</th>\n                        <th>Select</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.values(players).map(({id, firstName, lastName}) =>\n                        <tr key={id}>\n                            <td>{firstName}</td>\n                            <td>{lastName}</td>\n                            <td>\n                                <input\n                                    checked={tourney.playerIds.includes(id)}\n                                    type=\"checkbox\"\n                                    value={id}\n                                    onChange={togglePlayer}\n                                />\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            <NewPlayer dispatch={allPlayersDispatch}/>\n        </div>\n    );\n}\nSelecting.propTypes = {};\n","import {Panel, PanelContainer} from \"../../utility\";\nimport React, {useState} from \"react\";\nimport {hasHadBye, rounds2Matches} from \"../../../pairing-scoring\";\nimport {Dialog} from \"@reach/dialog\";\nimport Icons from \"../../icons\";\nimport Selecting from \"./selecting\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function PlayerSelect(props) {\n    const {tourney, tourneyDispatch, players} = useTournament();\n    const {playerIds, roundList, byeQueue} = tourney;\n    const dispatch = tourneyDispatch;\n    const [isSelecting, setIsSelecting] = useState(playerIds.length === 0);\n    const matches = rounds2Matches(roundList);\n    return (\n        <div className=\"content-area\">\n            <div className=\"toolbar\">\n                <button onClick={() => setIsSelecting(true)}>\n                    <Icons.Edit /> Edit player roster\n                </button>\n            </div>\n            <PanelContainer>\n                <Panel style={{flexShrink: \"0\"}}>\n                    <table>\n                        <caption>Current roster</caption>\n                        <thead>\n                            <tr>\n                                <th colSpan={2}>Name</th>\n                                <th>Options</th>\n                            </tr>\n                        </thead>\n                        <tbody className=\"content\">\n                            {Object.values(players).map((p) => (\n                                <tr key={p.id} className={p.type + \" player\"}>\n                                    <td>{p.firstName}</td>\n                                    <td>{p.lastName}</td>\n                                    <td>\n                                        <button\n                                            className=\"button-micro\"\n                                            disabled={byeQueue.includes(p.id)}\n                                            onClick={() =>\n                                                dispatch({\n                                                    byeQueue:\n                                                        byeQueue.concat([p.id]),\n                                                    type: \"SET_BYE_QUEUE\"\n                                                })\n                                            }\n                                        >\n                                            Bye signup\n                                        </button>\n                                    </td>\n                                </tr>\n                            )\n                            )}\n                        </tbody>\n                    </table>\n                </Panel>\n                <Panel>\n                    <h3>Bye queue</h3>\n                    {byeQueue.length === 0 &&\n                        <p>No players have signed up for a bye round.</p>\n                    }\n                    <ol>\n                        {byeQueue.map((pId) => (\n                            <li\n                                key={pId}\n                                className={\n                                    (hasHadBye(pId, matches))\n                                    ? \"disabled buttons-on-hover\"\n                                    : \"buttons-on-hover\"\n                                }\n                            >\n                                {players[pId].firstName}{\" \"}\n                                {players[pId].lastName}{\" \"}\n                                <button\n                                    className=\"button-micro\"\n                                    onClick={() =>\n                                        dispatch({\n                                            byeQueue: byeQueue.filter(\n                                                (id) => pId !== id\n                                            ),\n                                            type: \"SET_BYE_QUEUE\"\n                                        })\n                                    }\n                                >\n                                    Remove\n                                </button>\n                            </li>\n                        ))}\n                    </ol>\n                </Panel>\n                <Dialog isOpen={isSelecting}>\n                    <button\n                        className=\"button-micro button-primary\"\n                        onClick={() => setIsSelecting(false)}\n                    >\n                        Done\n                    </button>\n                    <Selecting />\n                </Dialog>\n            </PanelContainer>\n        </div>\n    );\n}\nPlayerSelect.propTypes = {};\n","// this component should eventually replace player-match-info.jsx\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {createPlayerStats} from \"../../../pairing-scoring\";\n\nexport default function PlayerInfo({playerId, roundId}) {\n    const {tourney, players} = useTournament();\n    const [options] = useOptionsDb();\n    const {\n        profile,\n        rating,\n        score,\n        colorBalance,\n        hasHadBye,\n        opponentHistory,\n        avoidList\n    } = createPlayerStats({\n        avoidList: options.avoidPairs,\n        id: playerId,\n        players,\n        roundId,\n        roundList: tourney.roundList\n    });\n    const prettyBalance = (function () {\n        if (colorBalance < 0) {\n            return \"White +\" + Math.abs(colorBalance);\n        } else if (colorBalance > 0) {\n            return \"Black +\" + colorBalance;\n        } else {\n            return \"Even\";\n        }\n    }());\n    return (\n        <dl className=\"player-card\">\n            <h3>\n                {profile.firstName} {profile.lastName}\n            </h3>\n            <p>Score: {score}</p>\n            <p>Rating: {rating}</p>\n            <p>Color balance: {prettyBalance}</p>\n            <p>Has had a bye round: {hasHadBye ? \"Yes\" : \"No\"}</p>\n            <p>Opponent history:</p>\n            <ol>\n                {opponentHistory.map((opId) => (\n                    <li key={opId}>\n                        {players[opId].firstName}{\" \"}\n                        {players[opId].lastName}\n                    </li>\n                ))}\n            </ol>\n            <p>\n                Players to avoid:\n            </p>\n            <ol>\n                {avoidList.map((pId) => (\n                    <li key={pId}>\n                        {players[pId].firstName} {players[pId].lastName}\n                    </li>\n                ))}\n            </ol>\n        </dl>\n    );\n}\nPlayerInfo.propTypes = {\n    playerId: PropTypes.string,\n    roundId: PropTypes.number\n};\n","import {BLACK, DUMMY_ID, WHITE, dummyPlayer} from \"../../../data-types\";\nimport {assoc, lensIndex, set} from \"ramda\";\nimport Hidden from \"@reach/visually-hidden\";\nimport Icons from \"../../icons\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {getUnmatched} from \"../../../pairing-scoring\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function SelectList({roundId, stagedPlayers, setStagedPlayers}) {\n    const {tourney, players} = useTournament();\n    // only use unmatched players if this is the last round.\n    const unmatched = (roundId === tourney.roundList.length - 1)\n        ? getUnmatched(tourney, players, roundId)\n        : {};\n\n    function selectPlayer(id) {\n        if (stagedPlayers[WHITE] === null) {\n            setStagedPlayers(\n                (prevState) => set(lensIndex(WHITE), id, prevState)\n            );\n        } else if (stagedPlayers[BLACK] === null) {\n            setStagedPlayers(\n                (prevState) => set(lensIndex(BLACK), id, prevState)\n            );\n        }\n        // else... nothing happens\n    }\n\n    const unmatchedCount = Object.keys(unmatched).length;\n\n    // make a new list so as not to affect auto-pairing\n    const unmatchedWithDummy = (\n        (unmatchedCount % 2 !== 0)\n        ? assoc(DUMMY_ID, dummyPlayer, unmatched)\n        : unmatched\n    );\n    if (unmatchedCount === 0) {\n        return null;\n    }\n    return (\n        <div>\n            <ul className=\"content plain-list\">\n                {Object.values(unmatchedWithDummy).map(\n                    ({id, firstName, lastName}) => (\n                        <li key={id}>\n                            <button\n                                className=\"button-ghost\"\n                                disabled={\n                                    !stagedPlayers.includes(null)\n                                    || stagedPlayers.includes(id)\n                                }\n                                onClick={() => selectPlayer(id)}\n                            >\n                                <Icons.UserPlus/>\n                                <Hidden>\n                                    Select {firstName} {lastName}\n                                </Hidden>\n                            </button>\n                            {\" \"}\n                            {firstName} {lastName}\n                        </li>\n                    )\n                )}\n            </ul>\n        </div>\n    );\n}\nSelectList.propTypes = {\n    roundId: PropTypes.number,\n    setStagedPlayers: PropTypes.func,\n    stagedPlayers: PropTypes.arrayOf(PropTypes.string)\n};\n","import {BLACK, WHITE} from \"../../../data-types\";\nimport React, {Fragment} from \"react\";\nimport {lensIndex, set} from \"ramda\";\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\nimport Icons from \"../../icons\";\nimport PropTypes from \"prop-types\";\n\nexport default function Stage({\n    roundId,\n    stagedPlayers,\n    setStagedPlayers\n}) {\n    const {tourneyDispatch, players} = useTournament();\n    const dispatch = tourneyDispatch;\n    const [options] = useOptionsDb();\n    const [white, black] = stagedPlayers;\n\n    function unstage(color) {\n        setStagedPlayers((prevState) => set(lensIndex(color), null, prevState));\n    }\n\n    function match() {\n        dispatch({\n            byeValue: options.byeValue,\n            pair: [players[white], players[black]],\n            roundId,\n            type: \"MANUAL_PAIR\"\n        });\n        setStagedPlayers([null, null]);\n    }\n\n    return (\n        <div>\n            <h2>Selected for matching:</h2>\n            <div className=\"content\">\n                <p>\n                    White:{\" \"}\n                    {white !== null &&\n                        <Fragment>\n                            {players[white].firstName}{\" \"}\n                            {players[white].lastName}{\" \"}\n                            <button\n                                className=\"button-micro\"\n                                onClick={() => unstage(WHITE)}\n                            >\n                                <Icons.UserMinus /> Remove\n                            </button>\n                        </Fragment>\n                    }\n                </p>\n                <p>\n                    Black:{\" \"}\n                    {black !== null &&\n                        <Fragment>\n                            {players[black].firstName}{\" \"}\n                            {players[black].lastName}{\" \"}\n                            <button\n                                className=\"button-micro\"\n                                onClick={() => unstage(BLACK)}\n                            >\n                                <Icons.UserMinus /> Remove\n                            </button>\n                        </Fragment>\n                    }\n                </p>\n            </div>\n            <div className=\"toolbar\">\n                <button\n                    disabled={\n                        stagedPlayers.every((id) => id === null)\n                    }\n                    onClick={() => setStagedPlayers(\n                        (prevState) => ([prevState[BLACK], prevState[WHITE]])\n                    )}\n                >\n                    <Icons.Repeat/> Swap colors\n                </button>{\" \"}\n                <button\n                    className=\"button-primary\"\n                    disabled={stagedPlayers.includes(null)}\n                    onClick={match}\n                >\n                    <Icons.Check/> Match selected\n                </button>\n            </div>\n        </div>\n    );\n}\nStage.propTypes = {\n    roundId: PropTypes.number,\n    setStagedPlayers: PropTypes.func,\n    stagedPlayers: PropTypes.arrayOf(PropTypes.string)\n};\n","import {Panel, PanelContainer} from \"../../utility\";\nimport React, {useState} from \"react\";\nimport {\n    calcPairIdeal,\n    createPlayerStats,\n    maxPriority,\n    setUpperHalves,\n    sortPlayersForPairing\n} from \"../../../pairing-scoring\";\nimport {map, pipe} from \"ramda\";\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\nimport {Dialog} from \"@reach/dialog\";\nimport PlayerInfo from \"./player-info\";\nimport PropTypes from \"prop-types\";\nimport SelectList  from \"./select-list\";\nimport Selecting from \"../player-select/selecting\";\nimport Stage from \"./stage\";\nimport {findById} from \"../../utility\";\nimport {getUnmatched} from \"../../../pairing-scoring\";\nimport numeral from \"numeral\";\n\nexport default function PairPicker({roundId}) {\n    const [stagedPlayers, setStagedPlayers] = useState([null, null]);\n    const [options] = useOptionsDb();\n    const {tourney, players, tourneyDispatch} = useTournament();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const statsList = React.useMemo(\n        () => (\n            pipe(\n                Object.values,\n                map((player) => (\n                    createPlayerStats({\n                        avoidList: options.avoidPairs,\n                        id: player.id,\n                        players,\n                        roundId,\n                        roundList: tourney.roundList\n                    })\n                )),\n                sortPlayersForPairing,\n                setUpperHalves\n            )(players)\n        ),\n        [\n            tourney.roundList,\n            roundId,\n            options.avoidPairs,\n            players\n        ]\n    );\n    const matchIdeal = React.useMemo(\n        function () {\n            if (stagedPlayers.includes(null)) {\n                return null;\n            }\n            const player0stats = findById(stagedPlayers[0], statsList);\n            const player1stats = findById(stagedPlayers[1], statsList);\n            const ideal = calcPairIdeal(player0stats, player1stats);\n            return numeral(ideal / maxPriority).format(\"%\");\n        },\n        [stagedPlayers, statsList]\n    );\n    const unmatched = (roundId === tourney.roundList.length - 1)\n        ? getUnmatched(tourney, players, roundId)\n        : {};\n    const unmatchedCount = Object.keys(unmatched).length;\n    return (\n        <div className=\"content-area\">\n            <div className=\"toolbar\">\n                <button\n                    className=\"button-primary\"\n                    disabled={unmatchedCount === 0}\n                    onClick={() => tourneyDispatch({\n                        avoidList: options.avoidPairs,\n                        byeValue: options.byeValue,\n                        players: unmatched,\n                        roundId,\n                        type: \"AUTO_PAIR\"\n                    })}\n                >\n                    Auto-pair unmatched players\n                </button>{\" \"}\n                <button onClick={() => setIsModalOpen(true)}>\n                    Add or remove players from the roster.\n                </button>\n            </div>\n            <PanelContainer>\n                <Panel>\n                    <SelectList\n                        roundId={roundId}\n                        setStagedPlayers={setStagedPlayers}\n                        stagedPlayers={stagedPlayers}\n                    />\n                </Panel>\n                <Panel style={{flexGrow: \"1\"}}>\n                    <Stage\n                        roundId={roundId}\n                        setStagedPlayers={setStagedPlayers}\n                        stagedPlayers={stagedPlayers}\n                    />\n                    <PanelContainer>\n                        {stagedPlayers.map((id) =>\n                            id !== null && (\n                                <Panel key={id}>\n                                    <PlayerInfo\n                                        playerId={id}\n                                        roundId={roundId}\n                                    />\n                                </Panel>\n                            )\n                        )}\n                    </PanelContainer>\n                    {!stagedPlayers.includes(null) &&\n                        <span>Match ideal: {matchIdeal}</span>\n                    }\n                </Panel>\n            </PanelContainer>\n            <Dialog isOpen={isModalOpen}>\n                <button\n                    className=\"button-micro\"\n                    onClick={() => setIsModalOpen(false)}\n                >\n                    Done\n                </button>\n                <Selecting />\n            </Dialog>\n        </div>\n    );\n}\nPairPicker.propTypes = {\n    roundId: PropTypes.number,\n    tourneyId: PropTypes.number\n};\n","import React from \"react\";\n\nconst NotFound = (props) => (\n    <div data-testid=\"404\">\n        <p>Page not found.</p>\n    </div>\n);\n\nexport default NotFound;\n","import {useOptionsDb, useTournament} from \"../../../hooks\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {createPlayerStats} from \"../../../pairing-scoring\";\nimport {findById} from \"../../utility\";\nimport numeral from \"numeral\";\n\nexport default function PlayerMatchInfo({matchId, color, roundId}) {\n    const {tourney, players, getPlayer} = useTournament();\n    const matchList = tourney.roundList[roundId];\n    const [options] = useOptionsDb();\n    const match = findById(matchId, matchList);\n    const playerData = createPlayerStats({\n        avoidList: options.avoidPairs,\n        id: match.playerIds[color],\n        players,\n        roundId,\n        roundList: tourney.roundList\n    });\n    const colorBalance = playerData.colorBalance;\n    const prettyBalance = (function () {\n        if (colorBalance < 0) {\n            return \"White +\" + Math.abs(colorBalance);\n        } else if (colorBalance > 0) {\n            return \"Black +\" + colorBalance;\n        } else {\n            return \"Even\";\n        }\n    }());\n    return (\n        <dl className=\"player-card\">\n            <h3>\n                {playerData.profile.firstName} {playerData.profile.lastName}\n            </h3>\n            <dt>Score</dt>\n            <dd>{playerData.score}</dd>\n            <dt>Rating</dt>\n            <dd data-testid={`rating-${playerData.id}`}>\n                {match.origRating[color]} (\n                {numeral(\n                    match.newRating[color] - match.origRating[color]\n                ).format(\"+0\")}\n                )\n            </dd>\n            <dt>Color balance</dt>\n            <dd>{prettyBalance}</dd>\n            <dt>Has had a bye round</dt>\n            <dd>{playerData.hasHadBye ? \"Yes\" : \"No\"}</dd>\n            <dt>Opponent history</dt>\n            <dd>\n                <ol>\n                    {playerData.opponentHistory.map((opId) => (\n                        <li key={opId}>\n                            {getPlayer(opId).firstName}{\" \"}\n                            {getPlayer(opId).lastName}\n                        </li>\n                    ))}\n                </ol>\n            </dd>\n        </dl>\n    );\n}\nPlayerMatchInfo.propTypes = {\n    color: PropTypes.number,\n    matchId: PropTypes.string,\n    roundId: PropTypes.number\n};\n","import \"@reach/dialog/styles.css\";\nimport {BLACK, DUMMY_ID, WHITE} from \"../../../data-types\";\nimport {Panel, PanelContainer} from \"../../utility\";\nimport React, {useState} from \"react\";\nimport {Dialog} from \"@reach/dialog\";\nimport Hidden from \"@reach/visually-hidden\";\nimport Icons from \"../../icons\";\nimport PlayerMatchInfo from \"./player-match-info\";\nimport PropTypes from \"prop-types\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport {calcNewRatings} from \"../../../pairing-scoring\";\nimport styles from \"./round.module.css\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function MatchRow({\n    compact,\n    pos,\n    match,\n    roundId,\n    selectedMatch,\n    setSelectedMatch\n}) {\n    const {\n        tourney,\n        tourneyDispatch,\n        players,\n        getPlayer,\n        playersDispatch\n    } = useTournament();\n    const dispatch = tourneyDispatch;\n    const [openModal, setOpenModal] = useState(false);\n    const resultCode = (function () {\n        if (match.result[0] > match.result[1]) {\n            return \"WHITE\";\n        } else if (match.result[1] > match.result[0]) {\n            return \"BLACK\";\n        } else if (match.result.every((x) => x === 0.5)) {\n            return \"DRAW\";\n        } else {\n            return \"NOTSET\";\n        }\n    }());\n    const whitePlayer = getPlayer(match.playerIds[WHITE]);\n    const blackPlayer = getPlayer(match.playerIds[BLACK]);\n    const whiteName = whitePlayer.firstName + \" \" + whitePlayer.lastName;\n    const blackName = blackPlayer.firstName + \" \" + blackPlayer.lastName;\n\n\n    function ResultDisplay(color) {\n        if (resultCode === \"NOTSET\") {\n            return <VisuallyHidden>Not set</VisuallyHidden>;\n        } else if (resultCode === \"DRAW\") {\n            // return <Icons.Minus aria-label=\"Draw\" />;\n            return (\n                <span\n                    aria-label=\"Draw\"\n                    role=\"img\"\n                    style={{filter: \"grayscale(100%)\"}}\n                >\n                    🤝\n                </span>\n            );\n        } else if (resultCode === color) {\n            return <Icons.Award  aria-label=\"Won\" />;\n        } else {\n            return <VisuallyHidden>Lost</VisuallyHidden>;\n        }\n    }\n\n    function setMatchResult(event) {\n        const result = (function () {\n            switch (event.target.value) {\n            case \"WHITE\":\n                return [1, 0];\n            case \"BLACK\":\n                return [0, 1];\n            case \"DRAW\":\n                return [0.5, 0.5];\n            case \"NOTSET\":\n                return [0, 0];\n            default:\n                throw new Error();\n            }\n        }());\n        const white = players[match.playerIds[WHITE]];\n        const black = players[match.playerIds[BLACK]];\n        const newRating = (\n            (event.currentTarget.value === \"NOTSET\")\n            ? match.origRating\n            : calcNewRatings(\n                match.origRating,\n                [white.matchCount, black.matchCount],\n                result\n            )\n        );\n        playersDispatch({\n            id: white.id,\n            rating: newRating[WHITE],\n            type: \"SET_PLAYER_RATING\"\n        });\n        playersDispatch({\n            id: black.id,\n            rating: newRating[BLACK],\n            type: \"SET_PLAYER_RATING\"\n        });\n        // if the result hasn't been scored yet, increment the matchCount\n        if (match.result.reduce((a, b) => a + b) === 0) {\n            playersDispatch({\n                id: white.id,\n                matchCount: white.matchCount + 1,\n                type: \"SET_PLAYER_MATCHCOUNT\"\n            });\n            playersDispatch({\n                id: black.id,\n                matchCount: black.matchCount + 1,\n                type: \"SET_PLAYER_MATCHCOUNT\"\n            });\n        }\n        dispatch({\n            matchId: match.id,\n            newRating,\n            result,\n            roundId,\n            type: \"SET_MATCH_RESULT\"\n        });\n    }\n\n    return (\n        <tr\n            className={\n                (match.id === selectedMatch)\n                ? \"selected\"\n                : \"buttons-on-hover\"\n            }\n        >\n            <th className={\"table__number \" + styles.rowId} scope=\"row\">\n                {pos + 1}\n            </th>\n            <td className={styles.playerResult}>\n                {ResultDisplay(\"WHITE\")}\n            </td>\n            <td\n                className={\"table__player row__player \" + whitePlayer.type}\n                data-testid={`match-${pos}-white`}\n            >\n                {whiteName}\n            </td>\n            <td className={styles.playerResult}>\n                {ResultDisplay(\"BLACK\")}\n            </td>\n            <td\n                className={\"table__player row__player \" + blackPlayer.type}\n                data-testid={`match-${pos}-black`}\n            >\n                {blackName}\n            </td>\n            <td className={styles.matchResult + \" data__input row__controls\"}>\n                <select\n                    className={styles.winnerSelect}\n                    disabled={match.playerIds.includes(DUMMY_ID)}\n                    value={resultCode}\n                    onBlur={setMatchResult}\n                    onChange={setMatchResult}\n                >\n                    <option value=\"NOTSET\">\n                        Select winner\n                    </option>\n                    <option value=\"WHITE\">\n                        White won\n                    </option>\n                    <option value=\"BLACK\">\n                        Black won\n                    </option>\n                    <option value=\"DRAW\">\n                        Draw\n                    </option>\n                </select>\n            </td>\n            {!compact &&\n                <td className={styles.controls + \" data__input\"}>\n                    {(selectedMatch !== match.id)\n                    ? (\n                        <button\n                            className=\"button-ghost\"\n                            title=\"Edit match\"\n                            onClick={() => setSelectedMatch(match.id)}\n                        >\n                            <Icons.Circle />\n                        </button>\n                    ) : (\n                        <button\n                            className=\"button-ghost button-pressed\"\n                            title=\"End editing match\"\n                            onClick={() => setSelectedMatch(null)}\n                        >\n                            <Icons.CheckCircle />\n                        </button>\n                    )}\n                    <button\n                        className=\"button-ghost\"\n                        title=\"Open match information.\"\n                        onClick={() => setOpenModal(true)}\n                    >\n                        <Icons.Info />\n                        <Hidden>\n                            View information for match:{\" \"}\n                            {whiteName} versus {blackName}\n                        </Hidden>\n                    </button>\n                    <Dialog isOpen={openModal}>\n                        <button\n                            className=\"button-micro button-primary\"\n                            onClick={() => setOpenModal(false)}\n                        >\n                            close\n                        </button>\n                        <p>{tourney.name}</p>\n                        <p>Round {roundId + 1}, match {pos + 1}</p>\n                        <PanelContainer>\n                            <Panel>\n                                <PlayerMatchInfo\n                                    color={0}\n                                    matchId={match.id}\n                                    roundId={roundId}\n                                />\n                            </Panel>\n                            <Panel>\n                                <PlayerMatchInfo\n                                    color={1}\n                                    matchId={match.id}\n                                    roundId={roundId}\n                                />\n                            </Panel>\n                        </PanelContainer>\n                    </Dialog>\n                </td>\n            }\n        </tr>\n    );\n}\nMatchRow.propTypes = {\n    compact: PropTypes.bool,\n    match: PropTypes.object,\n    pos: PropTypes.number,\n    roundId: PropTypes.number,\n    selectedMatch: PropTypes.string,\n    setSelectedMatch: PropTypes.func\n};\n","import MatchRow from \"./match-row\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport style from \"./round.module.css\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function RoundTable({\n    compact,\n    roundId,\n    selectedMatch,\n    setSelectedMatch\n}) {\n    const {tourney} = useTournament();\n    const matchList = tourney.roundList[roundId];\n    return (\n        <table className={style.table}>\n            {matchList.length > 0 &&\n                <>\n                <caption\n                    className={(compact) ? \"title-30\" : \"title-40\"}\n                >\n                    Round {roundId + 1} matches\n                </caption>\n                <thead>\n                    <tr>\n                        <th className={style.rowId} scope=\"col\">\n                            #\n                        </th>\n                        <th scope=\"col\">\n                            <VisuallyHidden>White result</VisuallyHidden>\n                        </th>\n                        <th className=\"row__player\" scope=\"col\">\n                            White\n                        </th>\n                        <th scope=\"col\">\n                            <VisuallyHidden>Black result</VisuallyHidden>\n                        </th>\n                        <th className=\"row__player\" scope=\"col\">\n                            Black\n                        </th>\n                        <th className=\"row__result\" scope=\"col\">\n                            Match result\n                        </th>\n                        {!compact &&\n                            <th className=\"row__controls\" scope=\"col\">\n                                <VisuallyHidden>Controls</VisuallyHidden>\n                            </th>\n                        }\n                    </tr>\n                </thead>\n                </>\n            }\n            <tbody className={style.tbody + \" content\"}>\n                {matchList.map((match, pos) => (\n                    <MatchRow\n                        key={match.id}\n                        compact={compact}\n                        match={match}\n                        pos={pos}\n                        roundId={roundId}\n                        selectedMatch={selectedMatch}\n                        setSelectedMatch={setSelectedMatch}\n                    />\n                ))}\n            </tbody>\n        </table>\n    );\n}\nRoundTable.propTypes = {\n    compact: PropTypes.bool,\n    roundId: PropTypes.number,\n    selectedMatch: PropTypes.string,\n    setSelectedMatch: PropTypes.func\n};\n","import React, {useState} from \"react\";\nimport {findById, findIndexById} from \"../../utility\";\nimport Icons from \"../../icons\";\nimport NotFound from \"../../404\";\nimport PropTypes from \"prop-types\";\nimport RoundTable from \"./round-table\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function Round({roundId}) {\n    const {\n        tourney,\n        players,\n        tourneyDispatch,\n        playersDispatch\n    } = useTournament();\n    const matchList = tourney.roundList[roundId];\n    const [selectedMatch, setSelectedMatch] = useState(null);\n    if (!matchList) {\n        return <NotFound />;\n    }\n    function unMatch(matchId) {\n        const match = findById(matchId, matchList);\n        if (match.result.reduce((a, b) => a + b) !== 0) {\n            // checks if the match has been scored yet & resets the players'\n            // records\n            match.playerIds.forEach(function (pId, color) {\n                playersDispatch({\n                    id: pId,\n                    matchCount: players[pId].matchCount - 1,\n                    type: \"SET_PLAYER_MATCHCOUNT\"\n                });\n                playersDispatch({\n                    id: pId,\n                    rating: match.origRating[color],\n                    type: \"SET_PLAYER_RATING\"\n                });\n            });\n        }\n        tourneyDispatch({matchId, roundId, type: \"DEL_MATCH\"});\n        setSelectedMatch(null);\n    }\n\n    function swapColors(matchId) {\n        tourneyDispatch({matchId, roundId, type: \"SWAP_COLORS\"});\n    }\n\n    function moveMatch(matchId, direction) {\n        const oldIndex = findIndexById(matchId, matchList);\n        const newIndex = (oldIndex + direction >= 0) ? oldIndex + direction : 0;\n        tourneyDispatch({newIndex, oldIndex, roundId, type: \"MOVE_MATCH\"});\n    }\n\n    return (\n        <div className=\"content-area\">\n            <div className=\"toolbar\">\n                <button\n                    className=\"button-micro\"\n                    disabled={selectedMatch === null}\n                    onClick={() => unMatch(selectedMatch)}\n                >\n                    <Icons.Trash /> Unmatch\n                </button>{\" \"}\n                <button\n                    className=\"button-micro\"\n                    disabled={selectedMatch === null}\n                    onClick={() => swapColors(selectedMatch)}\n                >\n                    <Icons.Repeat /> Swap colors\n                </button>{\" \"}\n                <button\n                    className=\"button-micro\"\n                    disabled={selectedMatch === null}\n                    onClick={() => moveMatch(selectedMatch, -1)}\n                >\n                    <Icons.ArrowUp /> Move up\n                </button>{\" \"}\n                <button\n                    className=\"button-micro\"\n                    disabled={selectedMatch === null}\n                    onClick={() => moveMatch(selectedMatch, 1)}\n                >\n                    <Icons.ArrowDown /> Move down\n                </button>\n            </div>\n            {matchList.length === 0 &&\n                <p>No players matched yet.</p>\n            }\n            <RoundTable\n                roundId={roundId}\n                selectedMatch={selectedMatch}\n                setSelectedMatch={setSelectedMatch}\n            />\n        </div>\n    );\n}\nRound.propTypes = {\n    roundId: PropTypes.number,\n    tourneyId: PropTypes.number\n};\n","import React, {useEffect, useState} from \"react\";\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from \"@reach/tabs\";\nimport Icons from \"../../icons\";\nimport PairPicker from \"../pair-picker\";\nimport PropTypes from \"prop-types\";\nimport Round from \"./round\";\nimport {getUnmatched} from \"../../../pairing-scoring\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function Index(props) {\n    const roundId = Number(props.roundId); // Reach Router passes a string.\n    const {tourney, players} = useTournament();\n    // only use unmatched players if this is the last round.\n    const unmatched = (roundId === tourney.roundList.length - 1)\n        ? getUnmatched(tourney, players, roundId)\n        : {};\n    const unmatchedCount = Object.keys(unmatched).length;\n    const [openTab, setOpenTab] = useState(0);\n    useEffect(\n        function () {\n            (unmatchedCount > 0) ? setOpenTab(1) : setOpenTab(0);\n        },\n        [unmatchedCount]\n    );\n    return (\n        <Tabs\n            index={openTab}\n            onChange={(index) => setOpenTab(index)}\n        >\n            <TabList>\n                <Tab><Icons.List/> Matches</Tab>\n                <Tab disabled={unmatchedCount === 0}>\n                    <Icons.Users/> Unmatched players\n                </Tab>\n            </TabList>\n            <TabPanels>\n                <TabPanel>\n                    <Round roundId={roundId}/>\n                </TabPanel>\n                <TabPanel>\n                    <PairPicker roundId={roundId} />\n                </TabPanel>\n            </TabPanels>\n        </Tabs>\n    );\n}\nIndex.propTypes = {\n    path: PropTypes.string,\n    roundId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n","import {Panel, PanelContainer} from \"../utility\";\nimport React, {useState} from \"react\";\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from \"@reach/tabs\";\nimport {\n    createStandingTree,\n    tieBreakMethods\n} from \"../../pairing-scoring\";\nimport Icons from \"../icons\";\nimport PropTypes from \"prop-types\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport dashify from \"dashify\";\nimport {defaultTo} from \"ramda\";\nimport numeral from \"numeral\";\nimport style from \"./scores.module.css\";\nimport {useTournament} from \"../../hooks\";\n\nexport function ScoreTable({compact, title}) {\n    const {tourney, getPlayer} = useTournament();\n    const {tieBreaks, roundList} = tourney;\n    const [standingTree, tbMethods] = createStandingTree(tieBreaks, roundList);\n    return (\n        <table\n            className={\n                (compact)\n                ? style.compact + \" \" + style.table\n                : style.table\n            }\n        >\n            <caption\n                className={(compact) ? \"title-30\" : \"title-40\"}\n            >\n                {title}\n            </caption>\n            <thead>\n                <tr className={style.topHeader}>\n                    <th className=\"title-10\" scope=\"col\">Rank</th>\n                    <th className=\"title-10\" scope=\"col\">Name</th>\n                    <th className=\"title-10\" scope=\"col\">Score</th>\n                    {!compact && tbMethods.map((name, i) => (\n                        <th key={i} className=\"title-10\" scope=\"col\">\n                            {name}\n                        </th>\n                    ))}\n                </tr>\n            </thead>\n            <tbody>\n                {standingTree.map((standingsFlat, rank) =>\n                    standingsFlat.map((standing, i, src) => (\n                        <tr key={standing.id} className={style.row}>\n                            {i === 0 && ( // Only display the rank once\n                                <th\n                                    className={\"table__number \" + style.rank}\n                                    rowSpan={src.length}\n                                    scope=\"row\"\n                                >\n                                    {numeral(rank + 1).format(\"0o\")}\n                                </th>\n                            )}\n                            {(compact) // use <td> if it's compact.\n                            ? (\n                                <td className={style.playerName}>\n                                    {getPlayer(standing.id).firstName}&nbsp;\n                                    {getPlayer(standing.id).lastName}\n                                </td>\n                            ) : ( // Use the name as a header if not compact.\n                                <th\n                                    className={style.playerName}\n                                    data-testid={rank}\n                                    scope=\"row\"\n                                >\n                                    {getPlayer(standing.id).firstName}&nbsp;\n                                    {getPlayer(standing.id).lastName}\n                                </th>\n                            )}\n                            <td\n                                className=\"table__number\"\n                                data-testid={dashify(\n                                    getPlayer(standing.id).firstName\n                                    + getPlayer(standing.id).lastName\n                                    + \" score\"\n                                )}\n                            >\n                                {numeral(standing.score).format(\"1/2\")}\n                            </td>\n                            {!compact && standing.tieBreaks.map((score, j) => (\n                                <td\n                                    key={j}\n                                    className=\"table__number\"\n                                    data-testid={dashify(\n                                        getPlayer(standing.id).firstName\n                                        + getPlayer(standing.id).lastName\n                                        + tbMethods[j]\n                                    )}\n                                >\n                                    {numeral(score).format(\"1/2\")}\n                                </td>\n                            ))}\n                        </tr>\n                    ))\n                )}\n            </tbody>\n        </table>\n    );\n}\nScoreTable.propTypes = {\n    compact: PropTypes.bool,\n    title: PropTypes.string.isRequired\n};\n\nfunction SelectTieBreaks(props) {\n    const {tourney, tourneyDispatch} = useTournament();\n    const dispatch = tourneyDispatch;\n    const {tieBreaks} = tourney;\n    const [selectedTb, setSelectedTb] = useState(null);\n\n    function toggleTb(id = null) {\n        const defaultId = defaultTo(selectedTb);\n        if (tieBreaks.includes(defaultId(id))) {\n            dispatch({id: defaultId(id), type: \"DEL_TIEBREAK\"});\n            setSelectedTb(null);\n        } else {\n            dispatch({id: defaultId(id), type: \"ADD_TIEBREAK\"});\n        }\n    }\n\n    function moveTb(direction) {\n        const index = tieBreaks.indexOf(selectedTb);\n        dispatch({\n            newIndex: index + direction,\n            oldIndex: index,\n            type: \"MOVE_TIEBREAK\"\n        });\n    }\n\n    return (\n        <PanelContainer className=\"content-area\">\n            <Panel>\n                <div className=\"toolbar\">\n                    <button\n                        className=\"button-micro\"\n                        disabled={selectedTb === null}\n                        onClick={() => toggleTb()}\n                    >\n                        Toggle\n                    </button>\n                    <button\n                        className=\"button-micro\"\n                        disabled={selectedTb === null}\n                        onClick={() => moveTb(-1)}\n                    >\n                        <Icons.ArrowUp/> Move up\n                    </button>\n                    <button\n                        className=\"button-micro\"\n                        disabled={selectedTb === null}\n                        onClick={() => moveTb(1)}\n                    >\n                        <Icons.ArrowDown/> Move down\n                    </button>\n                    <button\n                        className={\n                            (selectedTb !== null)\n                            ? \"button-micro button-primary\"\n                            : \"button-micro\"\n                        }\n                        disabled={selectedTb === null}\n                        onClick={() => setSelectedTb(null)}\n                    >\n                        Done\n                    </button>\n                </div>\n                <table>\n                    <caption className=\"title-30\">\n                        Selected tiebreak methods\n                    </caption>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th><VisuallyHidden>Controls</VisuallyHidden></th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"content\">\n                        {tieBreaks.map((id) => (\n                            <tr\n                                key={id}\n                                className={selectedTb === id ? \"selected\" : \"\"}\n                            >\n                                <td>\n                                    {tieBreakMethods[id].name}\n                                </td>\n                                <td style={{width: \"48px\"}}>\n                                    <button\n                                        className=\"button-micro\"\n                                        disabled={\n                                            selectedTb !== null\n                                            && selectedTb !== id\n                                        }\n                                        onClick={() =>\n                                            selectedTb === id\n                                                ? setSelectedTb(null)\n                                                : setSelectedTb(id)\n                                        }\n                                    >\n                                        {selectedTb === id ? \"Done\" : \"Edit\"}\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </Panel>\n            <Panel>\n                <div className=\"toolbar\">&nbsp;</div>\n                <table style={{marginTop: \"16px\"}}>\n                    <caption className=\"title-30\">\n                        Available tiebreak methods\n                    </caption>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th><VisuallyHidden>Controls</VisuallyHidden></th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"content\">\n                        {Object.values(tieBreakMethods).map(({name, id}) => (\n                            <tr key={id}>\n                                <td>\n                                    <span\n                                        className={\n                                            tieBreaks.includes(id)\n                                                ? \"disabled\"\n                                                : \"enabled\"\n                                        }\n                                    >\n                                        {name}\n                                    </span>\n                                </td>\n                                <td>\n                                    {!tieBreaks.includes(id) && (\n                                        <button\n                                            className=\"button-micro\"\n                                            onClick={() => toggleTb(id)}\n                                        >\n                                            Add\n                                        </button>\n                                    )}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </Panel>\n        </PanelContainer>\n    );\n}\nSelectTieBreaks.propTypes = {};\n\nconst Scores = (props) => (\n    <Tabs>\n        <TabList>\n            <Tab><Icons.List /> Scores</Tab>\n            <Tab><Icons.Settings /> Edit tiebreak rules</Tab>\n        </TabList>\n        <TabPanels>\n            <TabPanel>\n                <ScoreTable title=\"Score detail\" />\n            </TabPanel>\n            <TabPanel>\n                <SelectTieBreaks />\n            </TabPanel>\n        </TabPanels>\n    </Tabs>\n);\nScores.propTypes = {\n    path: PropTypes.string\n};\n\nexport default Scores;\n","import {DateFormat, PlaceholderButton} from \"../utility\";\nimport React, {useState} from \"react\";\nimport Icons from \"../icons\";\nimport PropTypes from \"prop-types\";\nimport {useTournament} from \"../../hooks\";\n\nexport default function Header(props) {\n    const {tourney, tourneyDispatch} = useTournament();\n    const [isEditingName, setIsEditingName] = useState(false);\n    const [isEditingDate, setIsEditingDate] = useState(false);\n    const dateInput = (function () {\n        const year = tourney.date.getFullYear();\n        const month = (tourney.date.getMonth() < 9)\n            ? \"0\" + (tourney.date.getMonth() + 1)\n            : tourney.date.getMonth() + 1;\n        const day = (tourney.date.getDate() < 10)\n            ? \"0\" + tourney.date.getDate()\n            : tourney.date.getDate();\n        return year + \"-\" + month + \"-\" + day;\n    }());\n\n    function updateDate(event) {\n        const [\n            rawYear,\n            rawMonth,\n            rawDay\n        ] = event.currentTarget.value.split(\"-\");\n        const year = Number(rawYear);\n        const month = Number(rawMonth) - 1;\n        const day = Number(rawDay);\n        tourneyDispatch({\n            date: new Date(year, month, day),\n            type: \"SET_DATE\"\n        });\n    }\n    // TODO: Audit accesibility of these edit controls. (Keyboard focus etc.)\n    return (\n        <div className={props.className}>\n            {(isEditingName)\n            ? (\n                <p className=\"display-20\">\n                    <PlaceholderButton />{\" \"}\n                    <input\n                        className=\"display-20\"\n                        type=\"text\"\n                        value={tourney.name}\n                        onChange={(event) => tourneyDispatch({\n                            name: event.currentTarget.value,\n                            type: \"SET_NAME\"\n                        })}\n                    />{\" \"}\n                    <button\n                        className=\"button-ghost\"\n                        onClick={() => setIsEditingName(false)}\n                    >\n                        <Icons.Check />\n                    </button>\n                </p>\n            ) : (\n                <h1 className=\"buttons-on-hover\">\n                    <PlaceholderButton />{\" \"}\n                    <span className=\"inputPlaceholder\">\n                        {tourney.name}\n                    </span>{\" \"}\n                    <button\n                        className=\"button-ghost\"\n                        onClick={() => setIsEditingName(true)}\n                    >\n                        <Icons.Edit />\n                    </button>\n                </h1>\n            )}\n            {(isEditingDate)\n            ? (\n                <p className=\"caption-30\">\n                    <PlaceholderButton />{\" \"}\n                    <input\n                        className=\"caption-30\"\n                        type=\"date\"\n                        value={dateInput}\n                        onChange={updateDate}\n                    />{\" \"}\n                    <button\n                        className=\"button-ghost\"\n                        onClick={() => setIsEditingDate(false)}\n                    >\n                        <Icons.Check />\n                    </button>\n                </p>\n            )\n            : (\n                <p className=\"caption-30 buttons-on-hover\">\n                    <PlaceholderButton />{\" \"}\n                    <DateFormat date={tourney.date} />{\" \"}\n                    <button\n                        className=\"button-ghost\"\n                        onClick={() => setIsEditingDate(true)}\n                    >\n                        <Icons.Edit />\n                    </button>\n                </p>\n            )}\n\n        </div>\n    );\n}\nHeader.propTypes = {\n    className: PropTypes.string\n};\n","import {useDocumentTitle, useTournament} from \"../../hooks\";\nimport {Link} from \"@reach/router\";\nimport React from \"react\";\n\nexport default function Options() {\n    const {tourneyDispatch} = useTournament();\n    useDocumentTitle(\"tournament options\");\n    function changeToOne() {\n        tourneyDispatch({\n            type: \"UPDATE_BYE_SCORES\",\n            value: 1\n        });\n        window.alert(\"Bye value updated to 1.\");\n    }\n    function changeToOneHalf() {\n        tourneyDispatch({\n            type: \"UPDATE_BYE_SCORES\",\n            value: 0.5\n        });\n        window.alert(\"Bye value updated to ½.\");\n    }\n    return (\n        <div className=\"content-area\">\n            <h2>Change bye scores</h2>\n            <button onClick={changeToOne}>Change to 1</button>{\" \"}\n            <button onClick={changeToOneHalf}>Change to ½</button>\n            <p className=\"caption-30\">\n                This will update all bye matches which have been previously\n                scored in this tournament. To change the default bye value in\n                future matches, go to the{\" \"}\n                <Link to=\"/options\">app options</Link>.\n            </p>\n        </div>\n    );\n}\n","import {calcNumOfRounds, getUnmatched} from \"../../pairing-scoring\";\nimport {useDocumentTitle, useTournament} from \"../../hooks\";\nimport {DUMMY_ID} from \"../../data-types\";\nimport Icons from \"../icons\";\nimport {Link} from \"@reach/router\";\nimport {Notification} from \"../utility\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport last from \"ramda/src/last\";\n\nexport default function Sidebar(props) {\n    const {\n        tourney,\n        players,\n        getPlayer,\n        playersDispatch,\n        tourneyDispatch\n    } = useTournament();\n    useDocumentTitle(tourney.name);\n    const {roundList} = tourney;\n    const unmatched = getUnmatched(tourney, players, roundList.length - 1);\n\n    const isNewRoundReady = (function () {\n        const lastRound = last(roundList);\n        if (!lastRound) {\n            return true;\n        }\n        const results = lastRound.map(\n            (match) => match.result[0] + match.result[1]\n        );\n        return Object.keys(unmatched).length === 0 && !results.includes(0);\n    }());\n    const roundCount = calcNumOfRounds(Object.keys(players).length);\n    const isItOver = roundList.length >= roundCount;\n    const [tooltipText, tooltipWarn] = (function () {\n        if (!isNewRoundReady) {\n            return [\n                \"Complete the last round before beginning a new one.\",\n                true\n            ];\n        } else if (isItOver) {\n            return [\"All rounds have completed.\", true];\n        } else {\n            return [\"Ready to begin a new round.\", false];\n        }\n    }());\n\n    function newRound() {\n        const confirmText = \"All rounds have completed. Are you sure you want \"\n            + \"to begin a new one?\";\n        if (isItOver) {\n            if (!window.confirm(confirmText)) {\n                return;\n            }\n        }\n        tourneyDispatch({type: \"ADD_ROUND\"});\n    }\n\n    async function delLastRound() {\n        if (window.confirm(\"Are you sure you want to delete the last round?\")) {\n            await props.navigate(\".\");\n            // If a match has been scored, then reset it.\n            // Should this logic be somewhere else?\n            last(roundList).forEach(function (match) {\n                if (match.result[0] + match.result[1] === 0) {\n                    return; // Don't change players who haven't scored.\n                }\n                match.playerIds.forEach(function (pId, color) {\n                    if (pId === DUMMY_ID) {\n                        return; // Don't try to set the dummy.\n                    }\n                    const {matchCount} = getPlayer(pId);\n                    playersDispatch({\n                        id: pId,\n                        matchCount: matchCount - 1,\n                        type: \"SET_PLAYER_MATCHCOUNT\"\n                    });\n                    playersDispatch({\n                        id: pId,\n                        rating: match.origRating[color],\n                        type: \"SET_PLAYER_RATING\"\n                    });\n                });\n            });\n            tourneyDispatch({type: \"DEL_LAST_ROUND\"});\n            if (tourney.roundList.length === 1) {\n                // Automatically remake round 1.\n                tourneyDispatch({type: \"ADD_ROUND\"});\n            }\n        }\n    }\n\n    return (\n        <div className={props.className}>\n            <nav>\n                <ul>\n                    <li>\n                        <Link to=\"..\">\n                            <Icons.X/>Close\n                        </Link>\n                    </li>\n                </ul>\n                <hr />\n                <ul>\n                    <li>\n                        <Link to=\".\">\n                            <Icons.Users /> Players\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"status\">\n                            <Icons.Activity /> Status\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"crosstable\">\n                            <Icons.Layers /> Crosstable\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"scores\">\n                            <Icons.List /> Score detail\n                        </Link>\n                    </li>\n                </ul>\n                <hr />\n                <ul>\n                    {Object.keys(roundList).map((id) => (\n                        <li key={id}>\n                            <Link to={`round/${id}`}>\n                            Round {Number(id) + 1}\n                            </Link>\n                        </li>\n                    ))}\n                </ul>\n            </nav>\n            <hr />\n            <ul>\n                <li className=\"caption-30\">\n                    Round progress: {roundList.length}/{roundCount}\n                </li>\n                <li>\n                    <button\n                        className={(tooltipWarn ? \"\" : \"button-primary\")}\n                        disabled={!isNewRoundReady}\n                        onClick={newRound}\n                    >\n                        <Icons.Plus/> New round\n                    </button>\n                    <Notification success={!tooltipWarn}>\n                        {tooltipText}\n                    </Notification>\n                </li>\n                <li>\n                    <button\n                        className=\"button-micro\"\n                        disabled={roundList.length === 0}\n                        onClick={delLastRound}\n                    >\n                        <Icons.Trash /> Remove last round\n                    </button>\n                </li>\n            </ul>\n            <hr />\n            <ul>\n                <li>\n                    <Link to=\"options\"><Icons.Settings /> Options</Link>\n                </li>\n            </ul>\n        </div>\n    );\n}\nSidebar.propTypes = {\n    className: PropTypes.string,\n    navigate: PropTypes.func.isRequired\n};\n","import {Panel, PanelContainer} from \"../utility\";\nimport React from \"react\";\nimport RoundTable from \"./round/round-table\";\nimport {ScoreTable} from \"./scores\";\nimport {useTournament} from \"../../hooks\";\n\nexport default function Status() {\n    const {tourney} = useTournament();\n    const lastRound = (function () {\n        if (tourney.roundList.length === 0) {\n            return <p>No rounds played yet.</p>;\n        }\n        const lastRoundId = tourney.roundList.length - 1;\n        if (tourney.roundList[lastRoundId].length === 0) {\n            return <p>Matched players will be shown here.</p>;\n        }\n        return (\n            <RoundTable\n                roundId={lastRoundId}\n                compact\n            />\n        );\n    }());\n    return (\n        <>\n            <h2 style={{textAlign: \"center\"}}>Tournament status</h2>\n            <PanelContainer\n                style={{justifyContent: \"center\"}}\n            >\n                <Panel>\n                    {lastRound}\n                </Panel>\n                <Panel>\n                    <ScoreTable title=\"Rankings\" compact />\n                </Panel>\n            </PanelContainer>\n        </>\n    );\n}\n","import Crosstable from \"./crosstable\";\nimport Header from \"./header\";\nimport NotFound from \"../404\";\nimport Options from \"./options\";\nimport PlayerSelect from \"./player-select\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Round from \"./round\";\nimport {Router} from \"@reach/router\";\nimport Scores from \"./scores\";\nimport Sidebar from \"./sidebar\";\nimport Status from \"./status\";\nimport {TournamentProvider} from \"../../hooks\";\nimport styles from \"./tournament.module.css\";\n\nexport default function Tournament(props) {\n    return (\n        <TournamentProvider tourneyId={props.tourneyId}>\n            <div className={styles.tournament + \" has-sidebar\"}>\n                <Header className={styles.header} />\n                <Sidebar\n                    className={styles.sidebar + \" has-sidebar__sidebar\"}\n                    navigate={props.navigate}\n                />\n                <div className={styles.contentFrame + \" has-sidebar__content\"}>\n                    <Router>\n                        <PlayerSelect path=\"/\" />\n                        <Status path=\"status\" />\n                        <Crosstable path=\"crosstable\" />\n                        <Scores path=\"scores\" />\n                        <Round path=\"round/:roundId\" />\n                        <Options path=\"options\" />\n                        <NotFound default />\n                    </Router>\n                </div>\n            </div>\n        </TournamentProvider>\n    );\n}\nTournament.propTypes = {\n    children: PropTypes.node,\n    navigate: PropTypes.func,\n    path: PropTypes.string,\n    tourneyId: PropTypes.string\n};\n","import Icons from \"./icons\";\nimport {Link} from \"@reach/router\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nfunction Sidebar() {\n    return (\n        <nav className=\"has-sidebar__sidebar\">\n            <ul>\n                <li>\n                    <Link to=\"/tourneys\">\n                        <Icons.Award /> Tournaments\n                    </Link>\n                </li>\n                <li>\n                    <Link  to=\"/players\">\n                        <Icons.Users /> Players\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/options\">\n                        <Icons.Settings /> Options\n                    </Link>\n                </li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default function HasSidebar({children}) {\n    return (\n        <div className=\"has-sidebar\">\n            <Sidebar />\n            <div className=\"has-sidebar__content\">\n                {children}\n            </div>\n        </div>\n    );\n}\nHasSidebar.propTypes = {\n    children: PropTypes.node.isRequired\n};\n","import {DateFormat, SortLabel} from \"../utility\";\nimport React, {useState} from \"react\";\nimport {\n    useAllTournamentsDb,\n    useDocumentTitle,\n    useSortedTable\n} from \"../../hooks\";\nimport {Dialog} from \"@reach/dialog\";\nimport HasSidebar from \"../sidebar-default\";\nimport Icons from \"../icons\";\nimport {Link} from \"@reach/router\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\nexport default function TournamentList(props) {\n    const [tourneys, dispatch] = useAllTournamentsDb();\n    const sorted = useSortedTable(Object.values(tourneys), \"date\", true);\n    const [newTourneyName, setNewTourneyName] = useState(\"\");\n    const [isFormOpen, setIsFormOpen] = useState(false);\n    useDocumentTitle(\"tournament list\");\n\n    function updateNewName(event) {\n        setNewTourneyName(event.target.value);\n    }\n\n    function makeTournament(event) {\n        event.preventDefault();\n        dispatch({\n            name: newTourneyName,\n            type: \"ADD_TOURNEY\"\n        });\n        setNewTourneyName(\"\");\n        setIsFormOpen(false);\n    }\n\n    function deleteTournament(id, name) {\n        const message = \"Are you sure you want to delete “\" + name + \"”?\";\n        if (window.confirm(message)) {\n            dispatch({id, type: \"DEL_ITEM\"});\n        }\n    }\n\n    return (\n        <HasSidebar>\n            <div className=\"content-area\">\n                <div className=\"toolbar toolbar__left\">\n                    <button\n                        onClick={() => setIsFormOpen(true)}\n                    >\n                        <Icons.Plus /> Add tournament\n                    </button>\n                </div>\n                {(Object.keys(tourneys).length > 0)\n                ?\n                <table>\n                    <caption>Tournament list</caption>\n                    <thead>\n                        <tr>\n                            <th>\n                                <SortLabel\n                                    data={sorted}\n                                    label=\"Name\"\n                                    sortKey=\"name\"\n                                />\n                            </th>\n                            <th>\n                                <SortLabel\n                                    data={sorted}\n                                    label=\"Date\"\n                                    sortKey=\"date\"\n                                />\n                            </th>\n                            <th><VisuallyHidden>Controls</VisuallyHidden></th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"content\">\n                        {sorted.table.map(({date, id, name}) =>\n                            <tr key={id} className=\"buttons-on-hover\">\n                                <td>\n                                    <Link to={id}>\n                                        {name}\n                                    </Link>\n                                </td>\n                                <td>\n                                    <DateFormat date={date} />\n                                </td>\n                                <td>\n                                    <button\n                                        aria-label={`Delete “${name}”`}\n                                        className=\"danger button-ghost\"\n                                        title={`Delete “${name}”`}\n                                        onClick={\n                                            () => deleteTournament(id, name)\n                                        }\n                                    >\n                                        <Icons.Trash />\n                                    </button>\n                                </td>\n                            </tr>\n                        )}\n                    </tbody>\n                </table>\n                : <p>No tournaments added yet.</p>\n                }\n                <Dialog isOpen={isFormOpen}>\n                    <button\n                        className=\"button-micro\"\n                        onClick={() => setIsFormOpen(false)}\n                    >\n                        Close\n                    </button>\n                    <form onSubmit={makeTournament}>\n                        <fieldset>\n                            <legend>Make a new tournament</legend>\n                            <label htmlFor=\"tourney-name\">Name:</label>\n                            <input\n                                name=\"tourney-name\"\n                                placeholder=\"tournament name\"\n                                required={true}\n                                type=\"text\"\n                                value={newTourneyName}\n                                onChange={updateNewName}\n                            />{\" \"}\n                            <input\n                                className=\"button-primary\"\n                                type=\"submit\"\n                                value=\"Create\"\n                            />\n                        </fieldset>\n                    </form>\n                </Dialog>\n            </div>\n        </HasSidebar>\n    );\n}\n","import Crosstable from \"./crosstable\";\nimport PlayerSelect from \"./player-select\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Round from \"./round\";\nimport Scores from \"./scores\";\nimport Tournament from \"./tournament\";\nimport TournamentList from \"./tournament-list\";\n\nconst TournamentIndex = (props) => (\n    <div className=\"passthrough\">\n        {props.children}\n    </div>\n);\nTournamentIndex.propTypes = {\n    children: PropTypes.node\n};\n\nexport default TournamentIndex;\nexport {Crosstable, PlayerSelect, Round, Scores, Tournament, TournamentList};\n","import React from \"react\";\nimport styles from \"./index.module.css\";\n\nconst Caution = () => (\n    <aside className={styles.caution + \" body-20\"}>\n        <p className={styles.caution__text}>\n            This is beta software. Want to help make it better? Check out the\n            {\" \"}\n            <span role=\"img\" aria-hidden>👉</span>\n            &nbsp;\n            <a\n                className={styles.caution__link}\n                href=\"https://github.com/johnridesabike/chessahoochee\"\n            >\n                Git repository\n            </a>.\n        </p>\n    </aside>\n);\n\nexport default Caution;\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport {\n    useAllPlayersDb,\n    useAllTournamentsDb,\n    useDocumentTitle,\n    useOptionsDb\n} from \"../hooks\";\nimport HasSidebar from \"./sidebar-default\";\nimport Icons from \"./icons\";\nimport demoData from \"../demo-data\";\n\nexport default function Options(props) {\n    const [tourneys, tourneysDispatch] = useAllTournamentsDb();\n    const [players, playersDispatch] = useAllPlayersDb();\n    const [text, setText] = useState(\"\");\n    const [options, optionsDispatch] = useOptionsDb();\n    useDocumentTitle(\"Options\");\n    // memoize this so the `useEffect` hook syncs with the correct states\n    const exportData = useMemo(\n        () => ({options, players, tourneys}),\n        [options, tourneys, players]\n    );\n    useEffect(\n        function () {\n            setText(JSON.stringify(exportData, null, 4));\n        },\n        [exportData]\n    );\n    function loadData(data) {\n        tourneysDispatch({state: data.tournaments, type: \"LOAD_STATE\"});\n        optionsDispatch({state: data.options, type: \"LOAD_STATE\"});\n        playersDispatch({state: data.players, type: \"LOAD_STATE\"});\n        window.alert(\"Data loaded!\");\n    }\n    function handleText(event) {\n        event.preventDefault();\n        const importData = JSON.parse(text);\n        loadData(importData);\n    }\n    function handleFile(event) {\n        event.preventDefault();\n        const reader = new FileReader();\n        // eslint-disable-next-line fp/no-mutation\n        reader.onload = function (ev) {\n            const data = ev.target.result;\n            const importData = JSON.parse(data);\n            loadData(importData);\n        };\n        reader.readAsText(event.currentTarget.files[0]);\n        event.currentTarget.value = \"\"; // so the filename won't linger onscreen\n    }\n    function reloadDemoData(event) {\n        event.preventDefault();\n        loadData(demoData);\n    }\n    return (\n        <HasSidebar>\n            <div className=\"content-area\">\n                <h2>Game settings</h2>\n                <form>\n                    <fieldset>\n                        <legend>Default bye value</legend>\n                        <label className=\"monospace body-30\">\n                            1{\" \"}\n                            <input\n                                checked={options.byeValue === 1}\n                                type=\"radio\"\n                                onChange={() => optionsDispatch({\n                                    option: \"byeValue\",\n                                    type: \"SET_OPTION\",\n                                    value: 1\n                                })}\n                            />\n                        </label>\n                        <label className=\"monospace body-30\">\n                            ½{\" \"}\n                            <input\n                                checked={options.byeValue === 0.5}\n                                type=\"radio\"\n                                onChange={() => optionsDispatch({\n                                    option: \"byeValue\",\n                                    type: \"SET_OPTION\",\n                                    value: 0.5\n                                })}\n                            />\n                        </label>\n                    </fieldset>\n                </form>\n                <h2>Data</h2>\n                <fieldset>\n                    <legend>Manage data</legend>\n                    <p>\n                        <a\n                            download=\"chessahoochee.json\"\n                            href={\n                                \"data:application/json,\"\n                                + encodeURIComponent(JSON.stringify(exportData))\n                            }\n                        >\n                            <Icons.Download /> Export all data\n                        </a>\n                    </p>\n                    <label htmlFor=\"file\">Load data file:</label>\n                    <input\n                        id=\"file\"\n                        name=\"file\"\n                        type=\"file\"\n                        onChange={handleFile}\n                    />\n                </fieldset>\n                <fieldset>\n                    <legend>Reset all changes</legend>\n                    <button onClick={reloadDemoData}>Reload demo data</button>\n                </fieldset>\n                <form onSubmit={handleText}>\n                    <fieldset>\n                        <legend>\n                            Advanced: manually edit data\n                        </legend>\n                        <textarea\n                            className=\"json\"\n                            cols={50}\n                            name=\"playerdata\"\n                            rows={25}\n                            spellCheck={false}\n                            value={text}\n                            onChange={\n                                (event) => setText(event.currentTarget.value)\n                            }\n                        />\n                        <p>\n                            <input type=\"submit\" value=\"Load\" />\n                        </p>\n                    </fieldset>\n                </form>\n            </div>\n        </HasSidebar>\n    );\n}\n","import React, {useState} from \"react\";\nimport {Dialog} from \"@reach/dialog\";\nimport Icons from \"../icons\";\nimport {Link} from \"@reach/router\";\nimport NewPlayer from \"../new-player\";\nimport PropTypes from \"prop-types\";\nimport {SortLabel} from \"../utility\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport styles from \"./index.module.css\";\nimport {useDocumentTitle} from \"../../hooks\";\n\nexport default function PlayerList({\n    sorted,\n    players,\n    playersDispatch,\n    optionsDispatch\n}) {\n    const [isFormOpen, setIsFormOpen] = useState(false);\n    useDocumentTitle(\"Players\");\n    const delPlayer = function (event, id) {\n        event.preventDefault();\n        const message = \"Are you sure you want to delete \"\n            + players[id].firstName + \" \" + players[id].lastName + \"?\";\n        if (window.confirm(message)) {\n            playersDispatch({id, type: \"DEL_ITEM\"});\n            optionsDispatch({id, type: \"DEL_AVOID_SINGLE\"});\n        }\n    };\n    return (\n        <div className=\"content-area\">\n            <div className=\"toolbar toolbar__left\">\n                <button onClick={() => setIsFormOpen(true)}>\n                    <Icons.UserPlus /> Add a new player\n                </button>\n            </div>\n            <table className={styles.table}>\n                <caption>Player roster</caption>\n                <thead>\n                    <tr>\n                        <th>\n                            <SortLabel\n                                data={sorted}\n                                label=\"Name\"\n                                sortKey=\"firstName\"\n                            />\n                        </th>\n                        <th>\n                            <SortLabel\n                                data={sorted}\n                                label=\"Rating\"\n                                sortKey=\"rating\"\n                            />\n                        </th>\n                        <th>\n                            <SortLabel\n                                data={sorted}\n                                label=\"Matches\"\n                                sortKey=\"matchCount\"\n                            />\n                        </th>\n                        <th><VisuallyHidden>Controls</VisuallyHidden></th>\n                    </tr>\n                </thead>\n                <tbody className=\"content\">\n                    {sorted.table.map((player) =>\n                        <tr key={player.id}  className=\"buttons-on-hover\">\n                            <td className=\"table__player\">\n                                <Link to={player.id}>\n                                    {player.firstName} {player.lastName}\n                                </Link>\n                            </td>\n                            <td className=\"table__number\">\n                                {player.rating}\n                            </td>\n                            <td className=\"table__number\">\n                                {player.matchCount}\n                            </td>\n                            <td>\n                                <button\n                                    className=\"danger button-ghost\"\n                                    onClick={\n                                        (event) => delPlayer(event, player.id)\n                                    }\n                                >\n                                    <Icons.Trash />\n                                    <VisuallyHidden>\n                                    Delete {player.firstName} {player.lastName}\n                                    </VisuallyHidden>\n                                </button>\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            <Dialog isOpen={isFormOpen}>\n                <button\n                    className=\"button-micro\"\n                    onClick={() => setIsFormOpen(false)}\n                >\n                    Close\n                </button>\n                <NewPlayer dispatch={playersDispatch} />\n            </Dialog>\n        </div>\n    );\n}\nPlayerList.propTypes = {\n    optionsDispatch: PropTypes.func.isRequired,\n    players: PropTypes.object.isRequired,\n    playersDispatch: PropTypes.func.isRequired,\n    sorted: PropTypes.object.isRequired\n};\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport {getPlayerAvoidList, kFactor} from \"../../pairing-scoring\";\nimport Icons from \"../icons\";\nimport {Link} from \"@reach/router\";\nimport PropTypes from \"prop-types\";\nimport numeral from \"numeral\";\nimport styles from \"./index.module.css\";\nimport {useDocumentTitle} from \"../../hooks\";\n\nfunction PlayerProfile({\n    playerId,\n    players,\n    playersDispatch,\n    options,\n    optionsDispatch\n}) {\n    const player = players[playerId];\n    const [singAvoidList, setSingAvoidList] = useState(\n        getPlayerAvoidList(playerId, options.avoidPairs)\n    );\n    const playerName = (player) ? player.firstName + \" \" + player.lastName : \"\";\n    useDocumentTitle(\"profile for \" + playerName);\n    // Memoize this so useEffect doesn't cause a memory leak.\n    const unAvoided = useMemo(\n        () => Object.keys(players).filter(\n            (id) => !singAvoidList.includes(id) && id !== playerId\n        ),\n        [players, playerId, singAvoidList]\n    );\n    const [selectedAvoider, setSelectedAvoider] = useState(unAvoided[0]);\n    function avoidAdd(event) {\n        event.preventDefault();\n        optionsDispatch({\n            pair: [playerId, selectedAvoider],\n            type: \"ADD_AVOID_PAIR\"\n        });\n    }\n    useEffect(\n        function () {\n            setSingAvoidList(getPlayerAvoidList(playerId, options.avoidPairs));\n        },\n        [options.avoidPairs, playerId]\n    );\n    useEffect(\n        function () {\n            setSelectedAvoider(unAvoided[0]);\n        },\n        [setSelectedAvoider, unAvoided]\n    );\n    function handleChange(event) {\n        event.preventDefault();\n        const {firstName, lastName, matchCount, rating} = event.currentTarget;\n        playersDispatch({\n            firstName: firstName.value,\n            id: playerId,\n            lastName: lastName.value,\n            matchCount: Number(matchCount.value),\n            rating: Number(rating.value),\n            type: \"SET_PLAYER\"\n        });\n    }\n    if (!player) {\n        return <div>Loading...</div>;\n    }\n    return (\n        <div className={styles.playerInfo + \" content-area\"}>\n            <Link to=\"..\"><Icons.ChevronLeft /> Back</Link>\n            <h2>\n                Profile for {player.firstName} {player.lastName}\n            </h2>\n            <form onChange={handleChange} onSubmit={handleChange}>\n                <p>\n                    <label htmlFor=\"firstName\">First name</label>\n                    <input\n                        defaultValue={player.firstName}\n                        name=\"firstName\"\n                        type=\"text\"\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"lastName\">Last name</label>\n                    <input\n                        defaultValue={player.lastName}\n                        name=\"lastName\"\n                        type=\"text\"\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"matchCount\">Matches played</label>\n                    <input\n                        defaultValue={String(player.matchCount)}\n                        name=\"matchCount\"\n                        type=\"number\"\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"rating\">Rating</label>\n                    <input\n                        defaultValue={String(player.rating)}\n                        name=\"rating\"\n                        type=\"number\"\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"Kfactor\">K factor</label>\n                    <input\n                        name=\"kfactor\"\n                        type=\"number\"\n                        value={numeral(kFactor(player.matchCount)).format(\"00\")}\n                        readOnly\n                    />\n                </p>\n            </form>\n            <h3>Players to avoid</h3>\n            <ul>\n                {singAvoidList.map((pId) =>\n                    <li key={pId}>\n                        {players[pId].firstName} {players[pId].lastName}\n                        <button\n                            arial-label={`Remove \n${players[pId].firstName} ${players[pId].lastName} from avoid list.`}\n                            className=\"danger button-ghost\"\n                            title={`Remove ${players[pId].firstName} \n${players[pId].lastName}`}\n                            onClick={() =>\n                                optionsDispatch({\n                                    pair: [playerId, pId],\n                                    type: \"DEL_AVOID_PAIR\"\n                                })\n                            }\n                        >\n                            <Icons.Trash />\n                        </button>\n                    </li>\n                )}\n                {singAvoidList.length === 0 &&\n                    <li>None</li>\n                }\n            </ul>\n            <form onSubmit={avoidAdd}>\n                <fieldset>\n                    <legend>Add player to avoid</legend>\n                    <select\n                        onBlur={(event) =>\n                            setSelectedAvoider(event.target.value)\n                        }\n                    >\n                        {unAvoided.map((pId) => (\n                            <option key={pId} value={pId}>\n                                {players[pId].firstName} {players[pId].lastName}\n                            </option>\n                        ))}\n                    </select>{\" \"}\n                    <input type=\"submit\" value=\"Add\" />\n                </fieldset>\n            </form>\n        </div>\n    );\n}\nPlayerProfile.propTypes = {\n    options: PropTypes.object.isRequired,\n    optionsDispatch: PropTypes.func.isRequired,\n    playerId: PropTypes.string,\n    players: PropTypes.object.isRequired,\n    playersDispatch: PropTypes.func.isRequired\n};\n\nexport default function PlayerProfileWrapper(props) {\n    if (!props.players[props.playerId]) {\n        return <div>Error: player profile not found.</div>;\n    } else {\n        return <PlayerProfile {...props} />;\n    }\n}\nPlayerProfileWrapper.propTypes = {\n    playerId: PropTypes.string,\n    players: PropTypes.object.isRequired\n};\n","import {useAllPlayersDb, useOptionsDb, useSortedTable} from \"../../hooks\";\nimport HasSidebar from \"../sidebar-default\";\nimport PlayerList from \"./player-list\";\nimport PlayerProfile from \"./player-profile\";\nimport React from \"react\";\nimport {Router} from \"@reach/router\";\n\nexport default function Players(props) {\n    const [players, playersDispatch] = useAllPlayersDb();\n    const sorted = useSortedTable(Object.values(players), \"firstName\", false);\n    const [options, optionsDispatch] = useOptionsDb();\n    const childProps = {options, optionsDispatch, players, playersDispatch};\n    return (\n        <HasSidebar>\n            <Router basepath=\"players\">\n                <PlayerList path=\"/\" sorted={sorted} {...childProps} />\n                <PlayerProfile path=\":playerId\" {...childProps} />\n            </Router>\n        </HasSidebar>\n    );\n}\nPlayers.propTypes = {};\n\nexport {PlayerProfile, PlayerList};\n","import HasSidebar from \"./sidebar-default\";\nimport Icons from \"./icons\";\nimport {Notification} from \"./utility\";\nimport React from \"react\";\nimport {loadDemoDB} from \"../hooks/db\";\nimport styles from \"./splash.module.css\";\n\nconst Splash = (props) => (\n    <HasSidebar>\n        <div className={styles.splash}>\n            <aside className={styles.hint}>\n                <ol>\n                    <li>\n                        <button\n                            className=\"button-primary\"\n                            onClick={() => loadDemoDB()}\n                        >\n                            Click here to load the demo data\n                        </button>{\" \"}\n                        (optional)\n                    </li>\n                    <li>\n                        <Icons.ArrowLeft /> Select a menu item.\n                    </li>\n                    <li>\n                        Start creating your tournaments!\n                    </li>\n                </ol>\n                <Notification warning>\n                    If you experience any glitches or crashes,<br />\n                    clear your browser cache and try again.\n                </Notification>\n            </aside>\n            <div className={styles.title}>\n                <h1>\n                    <span aria-hidden>♘</span>{\" \"}\n                    Chessahoochee\n                </h1>\n                <p className={styles.subtitle + \" caption-30\"}>\n                    a chess tournament app\n                </p>\n            </div>\n            <footer className={\"body-20 \" + styles.footer}>\n                <p>\n                    This is an early, proof-of-concept chess tournament app.\n                    <br />\n                    <a href=\"https://github.com/johnridesabike/chessahoochee\">\n                        Suggetions, bug reports, and contributions are welcome.\n                    </a>\n                </p>\n                <p>\n                    Built with JavaScript and{\" \"}\n                    <a href=\"https://reactjs.org/\">React</a>.{\" \"}\n                    <span style={{fontSize: \"16px\"}}>\n                        <Icons.Javascript /> <Icons.React />\n                    </span>\n                </p>\n            </footer>\n        </div>\n    </HasSidebar>\n);\nexport default Splash;\n","import \"side-effects\";\nimport {\n    Link,\n    LocationProvider,\n    Router,\n    createHistory\n} from \"@reach/router\";\nimport React, {useState} from \"react\";\nimport TournamentIndex, {\n    Tournament,\n    TournamentList\n} from \"./components/tournament\";\nimport Caution from \"./components/caution\";\nimport Icons from \"./components/icons\";\nimport NotFound from \"./components/404\";\nimport Options from \"./components/options\";\nimport Players from \"./components/players\";\nimport Splash from \"./components/splash\";\nimport classNames from \"classnames\";\nimport createHashSource from \"hash-source\";\nimport {link} from \"./App.module.css\";\nimport {useDocumentTitle} from \"./hooks\";\n// These are just for deploying to GitHub pages.\nlet source = createHashSource();\nlet history = createHistory(source);\n\nconst electron = (window.require) ? window.require(\"electron\") : false;\n\nfunction App() {\n    useDocumentTitle(\"a chess tournament app\");\n    const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n    return (\n        <div\n            className={classNames(\n                \"app\",\n                {\"open-sidebar\": isSidebarOpen},\n                {\"closed-sidebar\": !isSidebarOpen}\n            )}\n        >\n            <LocationProvider history={history}>\n                <header\n                    className={classNames(\n                        \"header\",\n                        {\"traffic-light-padding\": (\n                            navigator.appVersion.includes(\"Mac\") && electron\n                        )}\n                    )}\n                >\n                    <button\n                        onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n                    >\n                        <Icons.Sidebar/> Toggle sidebar\n                    </button>\n                    <span className=\"body-20\">\n                        Chessahoochee\n                    </span>\n                    <Link className={link} to=\"/\">\n                        About\n                    </Link>\n                </header>\n                <main className=\"main\">\n                    <Router>\n                        <Splash path=\"/\" />\n                        <TournamentIndex path=\"tourneys\">\n                            <TournamentList path=\"/\" />\n                            <Tournament path=\":tourneyId/*\" />\n                        </TournamentIndex>\n                        <Players path=\"players/*\" />\n                        <Options path=\"options\" />\n                        <NotFound default />\n                    </Router>\n                </main>\n            </LocationProvider>\n            <footer className=\"footer\">\n                <Caution />\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import \"./styles\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport React, {StrictMode} from \"react\";\nimport App from \"./App\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n    <StrictMode><App /></StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"winnerSelect\":\"round_winnerSelect__317oT\",\"table\":\"round_table__2JmnE\",\"tbody\":\"round_tbody__2KCya\",\"rowId\":\"round_rowId__L4JJD\",\"controls\":\"round_controls__3xs_k\",\"matchResult\":\"round_matchResult__1CYIo\",\"playerResult\":\"round_playerResult__pCrMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"splash\":\"splash_splash__37_vi\",\"hint\":\"splash_hint__2lVJb\",\"footer\":\"splash_footer__2Z__A\",\"title\":\"splash_title__Cm7sw\",\"subtitle\":\"splash_subtitle__PvmGO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tournament\":\"tournament_tournament__2nSxH\",\"header\":\"tournament_header__9nZzI\",\"contentFrame\":\"tournament_contentFrame__B3iPi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"players_table__yk6rK\",\"playerInfo\":\"players_playerInfo__nGWwZ\",\"controls\":\"players_controls__1rlpj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"caution\":\"caution_caution__17Bbq\",\"caution__text\":\"caution_caution__text__2ptRS\",\"caution__link\":\"caution_caution__link__X_K5Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panels\":\"utility_panels__LN75I\",\"panel\":\"utility_panel__2GOiH\"};"],"sourceRoot":""}