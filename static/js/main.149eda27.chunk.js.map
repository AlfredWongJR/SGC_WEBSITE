{"version":3,"sources":["chess-tourney.js","demo-players.js","chess-tourney-ui.js","App.js","serviceWorker.js","index.js"],"names":["require","chain","flatten","last","times","zip","EloRank","firstBy","ELO","Player","firstName","lastName","arguments","length","undefined","rating","this","dummy","Object","assign","DUMMYPLAYER","Tournament","name","timeControl","roster","byeValue","all","inactive","active","_this","filter","i","includes","roundList","Round","tourney","roundNum","prevRound","players","playerTree","matches","hasDummy","Match","round","white","black","result","scoreExpected","origRating","newRating","dummies","map","p","prototype","addPlayer","player","push","addPlayers","concat","deactivatePlayer","activatePlayer","splice","indexOf","numOfRounds","Math","ceil","log2","Infinity","calcStandings","playerScoreList","_this2","scores","forEach","match","index","playerScore","score","reduce","a","b","playerScoreCum","runningScore","cumScores","totalScore","playerColorBalance","_this3","color","playerStandings","_this4","playersClone","sort","thenBy","modifiedMedian","solkoff","playerOppScoreCum","_this5","playerOppHistory","opponent","pop","shift","finalScore","_this6","opponents","player2","_this7","oppScores","newRound","isNewRoundReady","pairPlayers","defineProperties","get","isComplete","_this8","keys","reverse","scoreList","oddPlayer","newGroup","sortBy","chunk","value","upperHalf","lowerHalf","construct","toConsumableArray","upperHalfHistory","p2","error","console","log","player1","history","othersHistory","slice","_this8$_findAMatch","_findAMatch","x","_this8$_findAMatch2","slicedToArray","_this8$_findAMatch3","_this8$_findAMatch4","_this8$_findAMatch5","_this8$_findAMatch6","foundASwap","otherPlayer","otherMatch","m","otherPlayer2","otherHistory","pool","newMatch","_this9","blackList","lastColor","playerColor","hasntPlayed","oppColor","whitePlayer","set","blackPlayer","whiteOrigRating","blackOrigRating","isBye","blackWon","calcRatings","whiteWon","draw","resetResult","getExpected","updateRating","demoPlayers","lastname","Roster","_ref","_useState","useState","_useState2","setRoster","_useState3","_useState4","demoLoaded","setDemoLoaded","newPlayer","updateField","event","target","react_default","createElement","className","key","disabled","onClick","demoRoster","onSubmit","preventDefault","type","onChange","required","_ref2","_useState5","o","_useState6","setMatches","setWinner","origMatch","checked","Standings","_ref3","cvlTourney","App","contents","tabList","setTabList","currentTab","setCurrentTab","tab","chess_tourney_ui_Round","alert","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.149eda27.chunk.js","sourcesContent":["/* ----------------------------------------------------------------------------\n*                               Chess Tourney js\n*\n* This file handles all of the tournament logic.\n* At some point, this could turn into a standalone node module.\n* --------------------------------------------------------------------------- */\nconst {chain, flatten, last, times, zip} = require('lodash');\nconst EloRank = require('elo-rank');\nconst {firstBy} = require('thenby');\n\n/**\n * @constant KFACTOR The k-factor used for calculating ratings\n * @constant ELO     The EloRank object\n */\nconst KFACTOR = 16;\nconst ELO = new EloRank(KFACTOR);\n\n\n/**\n * Represents an indivudal player. Call it with `Player('John', ...)` or\n * `Player({firstName: 'John', ...})`. The latter is convenient for converting \n * JSON objects.\n * @param {string or object} firstName\n * @param {string} lastName\n * @param {int}    rating\n */\nfunction Player(firstName, lastName = '', rating = 1200) {\n  if (!(this instanceof Player)) {\n    return new Player(firstName, lastName, rating)\n  }\n  this.dummy = false;\n  if (typeof firstName === 'object') {\n    Object.assign(this, firstName)\n  } else {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.rating = rating;\n  }\n}\n\n/**\n * A stand-in for bye matches.\n * @constant {Player} DUMMYPLAYER\n */\nconst DUMMYPLAYER =  Player('Dummy');\nDUMMYPLAYER.dummy = true;\nDUMMYPLAYER.rating = 0;\n\n/**\n * Tournament class\n * @param {string} name\n * @param {int}    timeControl\n * @param {array}  roster\n * @param {int}    byeValue\n */\nfunction Tournament (name = '', timeControl = 15, roster = [], byeValue = 1) {\n  if (!(this instanceof Tournament)) {\n    return new Tournament(name, timeControl, roster, byeValue)\n  }\n  this.name = name;\n  this.timeControl = timeControl;\n  this.roster = {\n    all: roster,\n    inactive: [],\n    active: function() {\n      return this.all.filter(i => !this.inactive.includes(i))\n    }\n  };\n  this.roundList = [];\n  this.byeValue = byeValue;\n}\n\n/**\n * Add a player to the roster.\n * @param {Player} player the player to add\n */\nTournament.prototype.addPlayer = function(player) {\n  this.roster.all.push(player);\n}\n\n/**\n * Add a list of players to the roster.\n * @param {Array} players the list of players to add\n */\nTournament.prototype.addPlayers = function(players) {\n  this.roster.all = this.roster.all.concat(players);\n}\n\n/**\n * Remove a player from the active roster. This player won't be placed in\n * future rounds.\n * @param {Player} player \n */\nTournament.prototype.deactivatePlayer = function(player) {\n  this.roster.inactive.push(player);\n}\n  \n/**\n * Add a player to the active roster. This player will be placed in future\n * rounds.\n * @param {Player} player \n */\nTournament.prototype.activatePlayer = function(player) {\n  this.roster.inactive.splice(this.roster.inactive.indexOf(player), 1);\n}\n\n/**\n * Calculate number of rounds.\n * @returns {int} the number of rounds\n */\nTournament.prototype.numOfRounds = function() {\n  var roundNum = Math.ceil(Math.log2(this.roster.active().length));\n  if (roundNum === -Infinity) {\n    roundNum = 0;\n  }\n  return roundNum;\n}\n\n/**\n * Calculate standings\n */\nTournament.prototype.calcStandings = function() {\n  return true; // todo\n}\n\n/**\n * Get a list of all of a player's scores from each match.\n * @param {Player} player\n * @returns {array} the list of scores\n */\nTournament.prototype.playerScoreList = function(player, round = null) {\n  var scores = [];\n  if ( round === null) {\n    round = this.roundList.length;\n  }\n  times(round + 1, i => {\n    if(this.roundList[i] !== undefined) {\n      this.roundList[i].matches.forEach(match => {\n        var index = match.players.indexOf(player);\n        if (index !== -1) {\n          scores.push(match.result[index]);\n        }\n      });\n    }\n  });\n  return scores;\n}\n\n/**\n * Get the total score of a player after a given round.\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.playerScore = function(player, roundNum = null) {\n  var score = 0;\n  var scores = this.playerScoreList(player, roundNum);\n  if (scores.length > 0) {\n    score = scores.reduce((a, b) => a + b);\n  }\n  return score;\n}\n\n/**\n * Get the cumulative score of a player\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.playerScoreCum = function(player, roundNum = null) {\n  var runningScore = 0;\n  var cumScores = []\n  var scores = this.playerScoreList(player, roundNum);\n  scores.forEach(score => {\n    runningScore += score;\n    cumScores.push(runningScore);\n  });\n  var totalScore = 0;\n  if (cumScores.length !== 0) {\n    totalScore = cumScores.reduce((a, b) => a + b);\n  }\n  return totalScore;\n}\n\n/**\n * Calculate a player's color balance\n * @param {Player} player\n * @param {Int}    round The ID of the highest round to consider\n * @returns {Int} A negative number means they played as black more. A positive number means they played as white more.\n */\nTournament.prototype.playerColorBalance = function(player, round = null) {\n  var color = 0;\n  if ( round === null) {\n    round = this.roundList.length;\n  }\n  times(round + 1, i => {\n    if(this.roundList[i] !== undefined) {\n      this.roundList[i].matches.forEach(match => {\n        if (match.players[0] === player) {\n          color += 1;\n        } else if (match.players[1] === player) {\n          color += -1;\n        }\n      });\n    }\n  });\n  return color;\n}\n\n/**\n * Sort the standings by score and USCF tie-break rules from § 34. USCF\n * recommends using these methods in-order: modified median, solkoff, \n * cumulative, and cumulative of opposition.\n * @param {number} roundNum \n * @returns {Array} The sorted list of players\n */\nTournament.prototype.playerStandings = function(roundNum = null) {\n  var playersClone = [].concat(this.roster.all);\n  playersClone.sort(\n    firstBy(p => this.playerScore(p, roundNum), -1)\n    .thenBy(p => this.modifiedMedian(p, roundNum), -1) /* USCF § 34E1 */\n    .thenBy(p => this.solkoff(p, roundNum), -1) /* USCF § 34E2 */\n    .thenBy(p => this.playerScoreCum(p, roundNum), -1) /* USCF § 34E3 */\n    .thenBy(p => this.playerOppScoreCum(p, roundNum), -1) /* USCF § 34E9 */\n  );\n  return playersClone;\n}\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.modifiedMedian = function(player, roundNum = null, solkoff = false) {\n  // get all of the opponent's scores\n  var scores = this.playerOppHistory(player, roundNum)\n    .map(opponent => this.playerScore(opponent, roundNum));\n  //sort them, then remove the first and last items\n  scores.sort();\n  if (!solkoff) {\n    scores.pop();\n    scores.shift();\n  }\n  var finalScore = 0;\n  if (scores.length > 0) {\n    finalScore = scores.reduce((a,b) => a + b);\n  }\n  return finalScore;\n}\n  \n/**\n * A shortcut for passing the `solkoff` variable to `this.modifiedMedian`.\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.solkoff = function(player, roundNum = null) {\n  return this.modifiedMedian(player, roundNum, true);\n}\n\n/**\n * Generate a list of a player's opponents.\n * @param   {Player} player\n * @returns {Array} A list of past opponents\n */\nTournament.prototype.playerOppHistory = function(player, round = null) {\n  var opponents = [];\n  if ( round === null) {\n    round = this.roundList.length - 1;\n  }\n  times(round + 1, i => {\n    this.roundList[i].matches.forEach(match => {\n      if (match.players.includes(player)) {\n        opponents = opponents.concat(\n          match.players\n            .filter(player2 => player2 !== player)\n            .filter(player2 => !opponents.includes(player2))\n        );\n      }\n    });\n  });\n  return opponents\n}\n\nTournament.prototype.playerOppScoreCum = function(player, round = null) {\n  const opponents = this.playerOppHistory(player, round);\n  var oppScores = opponents.map(p => this.playerScoreCum(p, round));\n  var score = 0;\n  if (oppScores.length !== 0){\n    score = oppScores.reduce((a, b) => a + b);\n  }\n  return score;\n}\n\n/**\n * Generates a new round.\n * @returns {Array} the new round\n */\nTournament.prototype.newRound = function() {\n  if (!this.isNewRoundReady) {\n    return false;\n  }\n  var newRound = Round(\n    this,\n    this.roundList.length,\n    last(this.roundList),\n    this.roster.active()\n  );\n  newRound.pairPlayers();\n  this.roundList.push(newRound);\n  return newRound;\n}\n\nObject.defineProperties(\n  Tournament.prototype,\n  {\n    isNewRoundReady: {\n      get: function() {\n        var isReady = false;\n        if (this.roundList.length > 0) {\n          isReady = last(this.roundList).isComplete;\n        } else {\n          isReady = (this.roster.all.length > 0);\n        }\n        return isReady\n      }\n    }\n  }\n);\n\n/**\n * Represents a round in a tournament.\n */\nfunction Round(tourney, roundNum, prevRound, players) {\n  if (!(this instanceof Round)) {\n    return new Round(tourney, roundNum, prevRound, players)\n  }\n  this.roundNum = roundNum;\n  this.tourney = tourney;\n  this.roster = players;\n  this.prevRound = prevRound;\n  this.playerTree = {};\n  this.matches = [];\n  this.hasDummy = false;\n}\n\n/**\n * Pair the players\n */\nRound.prototype.pairPlayers = function() {\n  /**\n   * Part 1: Split players into separate groups based on their scores\n   * (USCF § 27A2)\n   * Tree structure:\n   * {\n   *  score: [list of players],\n   *  ...\n   * }\n   */\n  this.roster.forEach(player => {\n    var score = this.tourney.playerScore(player);\n    if(!(score in this.playerTree)) {\n      this.playerTree[score] = [];\n    }\n    this.playerTree[score].push(player);\n  });\n  /**\n   * Part 2: Split each score group into an upper half and a lower half, \n   * based on rating (USCF § 27A3)\n   * Tree structure:\n   * {\n   *  score: [\n   *    [upper half list of players],\n   *    [lower half list of players]\n   *  ],\n   *  ...\n   * }\n   */\n  Object.keys(this.playerTree).reverse().forEach((score, i, scoreList) => {\n    var players = this.playerTree[score];\n    /**\n     * If there's an odd number of players in this score group,\n     */\n    if (players.length % 2 !== 0) {\n      /**\n       * ...and if there's an odd number of players in the total round, then\n       * add a dummy player.\n       */\n      if (this.roster.length % 2 !== 0 && !this.hasDummy) {\n        players.push(DUMMYPLAYER);\n        this.hasDummy = true;\n      /**\n       * But if there's an even number of players in the total round, then\n       * just move a player to the next score group.\n       */\n      } else {\n        var oddPlayer = players[players.length - 1];\n        players.splice(players.length - 1, 1);\n        var newGroup = scoreList[i + 1]; // the group to move the player to\n        if(!(newGroup in this.playerTree)) {\n          this.playerTree[newGroup] = [];\n        }\n        this.playerTree[newGroup].push(oddPlayer);\n      }\n    }\n    /**\n     * If there are no players in this group (e.g. a lone player got pushed\n     * to another group) then delete the key.\n     */\n    if (players.length === 0) {\n      delete this.playerTree[score];\n    } else {\n      this.playerTree[score] = chain(players)\n      .sortBy('rating')\n      .reverse()\n      .chunk(players.length / 2)\n      .value();\n    }\n  });\n  Object.keys(this.playerTree).forEach(score => {\n    // name the upperHalf and lowerHalf to make the code easier to read\n    var upperHalf = this.playerTree[score][0];\n    var lowerHalf = this.playerTree[score][1];\n    /**\n     * If there was no previous round, zip the players and call it a day.\n     */\n    if (this.prevRound === undefined) {\n      zip(upperHalf, lowerHalf)\n        .forEach(match => \n          this.matches.push(new Match(this, ...match))\n        );\n    } else {\n      /**\n       * If there was a previous round, then things get complicated....\n       * 1. Record each upper-half player's opponent history\n       * 2. Iterate through each upper-half player to find an opponent in the\n       *    lower half\n       * 3. Attempt to match with a lower-half opponent who isn't in their\n       *    history yet AND who is in the history of other upper-half\n       *    players. The second part helps eliminate a small percentage of\n       *    history overlap.\n       *      * (USCF § 27A1 - highest priority rule)\n       * 4. If no opponent was found, try again but don't consider the\n       *    history of other upper-half players.\n       * 5. If still no opponent was found, just pick whoever is left in the\n       *    lower half, even if they've played each other before.\n       * 6. If they have played each other before, attempt to swap opponents\n       *    with another upper-half player.\n       * \n       * This code is certainly not the most reliable or the most efficient.\n       * Changes will be needed.\n       */\n      /**\n       * 1.\n       * @var {Array} upperHalfHistory Each index matches the player's indexin upperHalf. Each sub-array is a list of their opponents.\n       */\n      try {\n        var upperHalfHistory = upperHalf.map(p => \n          [].concat(lowerHalf).concat(upperHalf) // merge the upperHalf and lowerHalf\n            .filter(p2 =>\n              this.tourney.playerOppHistory(p2).includes(p) // filter the players who have played this player\n            )\n        );\n      } catch (error) {\n        console.log(score, this.playerTree[score]);\n        throw error;\n      }\n      /**\n       * 2.\n       */\n      upperHalf.forEach(player1 => {\n        var history = upperHalfHistory[upperHalf.indexOf(player1)];\n        var othersHistory = flatten(upperHalfHistory\n          .slice(upperHalf.indexOf(player1))\n        );\n        /**\n         * 3.\n         */\n        var [ player2, match ] = this\n          ._findAMatch(player1, lowerHalf.filter(x =>\n            othersHistory.includes(x)), history\n        );\n        /**\n         * 4.\n         */\n        if (!player2) {\n          [ player2, match ] = this._findAMatch(player1, lowerHalf, history);\n        }\n        /**\n         * 5.\n         */\n        if (!player2) {\n          [ player2, match ] = this._findAMatch(player1, lowerHalf, []);\n        }\n        /**\n         * 6.\n         */\n        if (history.includes(player2)) {\n          var foundASwap = false;\n          upperHalf.filter(p => p !== player1).forEach(otherPlayer => {\n            if(!foundASwap) {\n              var otherMatch = this.matches\n                .filter(m => m.players.includes(otherPlayer))[0];\n              if(otherMatch) {\n                var otherPlayer2 = otherMatch.players\n                  .filter(p => p !== otherPlayer)[0];\n                var otherHistory = upperHalfHistory[upperHalf\n                  .indexOf(otherPlayer)];\n                if (!history.includes(otherPlayer2)\n                    && !otherHistory.includes(player2)) {\n                  match.players = [player1, otherPlayer2];\n                  otherMatch.players = [otherPlayer, player2];\n                  foundASwap = true;\n                }\n              }\n            }\n          })\n        }\n      })\n    }\n  })\n  return this.matches;\n}\n  \n/**\n * Find a match for a given player.\n * @param   {Player} player1  The player to be paired\n * @param   {Array}  pool      The pool of available players\n * @param   {Array}  blackList A blacklist of players, possibly in the pool, who should not be paired\n * @returns {Array}  The paired player and the Match object. Both will be undefined if no match was made.\n */\nRound.prototype._findAMatch = function(player1, pool, blackList = []) {\n  /**\n   * Try to pair the player as the opposite color as their last round.\n   * (USCF § 27A4 and § 27A5)\n   */\n  var lastColor = this.prevRound.playerColor(player1);\n  var hasntPlayed = pool\n    .filter(p2 => !blackList.includes(p2)) // Filter anyone on the blacklist (e.g. past opponents [USCF § 27A1])\n    .filter(p2 => p2 !== player1) // Don't pair players with themselves\n    .filter(p2 => !flatten(this.matches.map(m => m.players)).includes(p2)); // Don't pair anyone who's already been paired\n  /**\n   * Prioritize opponents who played that color for *their* last round. (USCF § 27A4 and § 27A5)\n   */\n  var oppColor = pool\n    .filter(p2 => lastColor !== this.prevRound.playerColor(p2));\n  var player2 = hasntPlayed\n    .filter(p2 => oppColor.includes(p2))[0] || hasntPlayed[0];\n  var newMatch;\n  if (player2) {\n    newMatch = new Match(this, player1, player2);\n    if (this.tourney.playerColorBalance(player1) > this.tourney.playerColorBalance(player2)) {\n      newMatch.players.reverse();\n    }\n    this.matches.push(newMatch);\n  }\n  return [ player2, newMatch ];\n}\n\n/**\n * Sees what color a player was for this round.\n * @param {Player} player \n * @return {number} 0 for white and 1 for black\n */\nRound.prototype.playerColor = function(player) {\n  var color = -1;\n  this.matches.forEach(match => {\n    if (match.players.includes(player)) {\n      color = match.players.indexOf(player);\n    }\n  })\n  return color;\n}\n\n/**\n * Add a player to the roster\n *\n * @param {Player} player\n */\nRound.prototype.addPlayer = function(player) {\n  this.players.push(player);\n  return this;\n}\n\nObject.defineProperties(\n  Round.prototype,\n  {\n    isComplete: {\n      get: function(){\n        return !this.matches.map(m => m.isComplete).includes(false);\n      }\n    }\n  }\n);\n\n/**\n * Represents a match in a tournament.\n *\n * @param {Player} black\n * @param {Player} white\n */\nfunction Match(round, white, black) {\n  if (!(this instanceof Match)) {\n    return new Match(round, white, black);\n  }\n  this.round = round;\n  this.players = [white, black];\n  this.result = [0, 0];\n  this.scoreExpected = [0, 0]; // used for the Elo calculator\n  this.origRating = [white.rating, black.rating]; // cache the ratings from when the match began\n  this.newRating = [white.rating, black.rating]; // the newly calculated ratings after the match ends\n  // set bye rounds\n  const dummies = this.players.map(p => p.dummy);\n  if (dummies[0]) {\n    this.result = [0, 1];\n  } else if(dummies[1]) {\n    this.result = [1, 0];\n  }\n}\n\nObject.defineProperties(\n  Match.prototype,\n  {\n    whitePlayer: {\n      get: function(){ return this.players[0]},\n      set: function(player){ this.players[0] = player}\n    },\n    blackPlayer: {\n      get: function(){ return this.players[1]},\n      set: function(player){ this.players[1] = player}\n    },\n    whiteOrigRating: {\n      get: function(){ return this.origRating[0]}\n    },\n    blackOrigRating: {\n      get: function(){ return this.origRating[1]}\n    },\n    isComplete: {\n      get: function(){ return this.result.reduce((a, b) => a + b) !== 0}\n    },\n    isBye: {\n      get: function(){ return this.players.includes(DUMMYPLAYER)}\n    }\n  }\n);\n  // get whitePlayer() {\n  //   return this.players[0];\n  // }\n\n  // get blackPlayer() {\n  //   return this.players[1];\n  // }\n\n  // get whiteOrigRating() {\n  //   return this.origRating[0];\n  // }\n\n  // get blackOrigRating() {\n  //   return this.origRating[1];\n  // }\n\n  // get isComplete() {\n  //   return this.result.reduce((a, b) => a + b) !== 0;\n  // }\n\n  // get isBye() {\n  //   return this.players.includes(DUMMYPLAYER);\n  // }\n\n/**\n * Sets black as the winner.\n */\nMatch.prototype.blackWon = function() {\n  this.result = [0, 1];\n  this.calcRatings();\n}\n\n/**\n * Sets white as the winner.\n */\nMatch.prototype.whiteWon = function() {\n  this.result = [1, 0];\n  this.calcRatings();\n}\n\n/**\n * Sets result as a draw.\n */\nMatch.prototype.draw = function() {\n  this.result = [0.5, 0.5];\n  this.calcRatings();\n}\n\nMatch.prototype.resetResult = function() {\n  this.result = [0, 0];\n  this.newRating = this.origRating;\n}\n\nMatch.prototype.calcRatings = function() {\n  this.scoreExpected = [\n    ELO.getExpected(this.whiteOrigRating, this.blackOrigRating),\n    ELO.getExpected(this.blackOrigRating, this.whiteOrigRating),\n  ];\n  this.newRating = [\n    ELO.updateRating(this.scoreExpected[0], this.result[0], this.whiteOrigRating),\n    ELO.updateRating(this.scoreExpected[1], this.result[1], this.blackOrigRating)\n  ];\n  this.whitePlayer.rating = this.newRating[0];\n  this.blackPlayer.rating = this.newRating[1];\n}\n\n// This fails for some reason...\n// module.exports = {Tournament, Player};\n\nexport {Tournament, Player};\n","const demoPlayers = [\n  {firstName: 'Matthew',     lastName: 'A', rating: 800},\n  {firstName: 'Mark',        lastName: 'B', rating: 850},\n  {firstName: 'Luke',        lastname: 'C', rating: 900},\n  {firstName: 'John',        lastname: 'D', rating: 950},\n  {firstName: 'Simon',       lastname: 'E', rating: 1000},\n  {firstName: 'Andrew',      lastname: 'F', rating: 1050},\n  {firstName: 'James',       lastname: 'G', rating: 1100},\n  {firstName: 'Philip',      lastname: 'H', rating: 1150},\n  {firstName: 'Bartholomew', lastname: 'I', rating: 1200},\n  {firstName: 'Thomas',      lastname: 'J', rating: 1250},\n  {firstName: 'Catherine',   lastname: 'K', rating: 1300},\n  {firstName: 'Clare',       lastname: 'L', rating: 1350},\n  {firstName: 'Judas',       lastname: 'M', rating: 1400},\n  {firstName: 'Matthias',    lastname: 'N', rating: 1450},\n  {firstName: 'Paul',        lastname: 'O', rating: 1500},\n  {firstName: 'Mary',        lastname: 'P', rating: 1600},\n  {firstName: 'Theresa',     lastname: 'Q', rating: 1650},\n  {firstName: 'Megan',       lastname: 'R', rating: 1700},\n  {firstName: 'Elizabeth',   lastname: 'S', rating: 1750}\n];\n\nexport default demoPlayers;","import React, { useState } from 'react';\nimport { Player } from './chess-tourney';\nimport demoRoster from './demo-players';\n\nfunction Roster ({tourney}) {\n  const [roster, setRoster] = useState(tourney.roster.all);\n  const [demoLoaded, setDemoLoaded] = useState(false);\n  const newPlayer = {firstName: '', lastName: '', rating: 1200};\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    tourney.addPlayer(\n      new Player(\n        newPlayer['firstName'],\n        newPlayer['lastName'],\n        newPlayer['rating']\n      )\n    );\n    setRoster([].concat(tourney.roster.all));\n  }\n  const updateField = (event) => {\n    newPlayer[event.target.name] = event.target.value;\n  }\n  const loadDemo = () => {\n    var players = demoRoster.slice(0,16).map(p => Player(p));\n    tourney.addPlayers(players);\n    setDemoLoaded(true);\n    setRoster([].concat(tourney.roster.all));\n  }\n  return (\n    <div className=\"roster\">\n      <table>\n        <caption>Roster</caption>\n        <thead>\n          <tr>\n            <th>First name</th>\n            <th>Rating</th>\n          </tr>\n        </thead>\n        <tbody>\n          { roster.map((player, i) =>\n            <tr key={i}>\n              <td>{player.firstName}</td>\n              <td className=\"table__number\">{player.rating}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <p>\n        <button disabled={demoLoaded} onClick={loadDemo}>Load a demo roster</button>\n      </p>\n      <p>\n        Or add your own players:\n      </p>\n      <form onSubmit={handleSubmit}>\n        <label>\n          First name\n          <input type=\"text\" name=\"firstName\" onChange={updateField} required />\n        </label>\n        <label>\n          Last name\n          <input type=\"text\" name=\"lastName\" onChange={updateField} required />\n        </label>\n        <label>\n          Rating\n          <input type=\"number\" name=\"rating\" onChange={updateField} value=\"1200\" />\n        </label>\n        <input type=\"submit\" value=\"Add\"/>\n      </form>\n      <p className=\"center\">Total rounds: {tourney.numOfRounds()}</p>\n    </div>\n  );\n}\n\nfunction Round ({tourney, roundNum}) {\n  /**\n   * Be careful when using the `setState` matches and the API's matches.\n   * They have to mirror each other but can't be the same objects.\n   */\n  const round = tourney.roundList[roundNum];\n  const [matches, setMatches] = useState(round.matches.map(o => Object.assign({}, o)));\n  const setWinner = (match, color, index, event) => {\n    var origMatch = round.matches[index];\n    if(event.target.checked) {\n      if(color === 0) {\n        origMatch.whiteWon();\n      } else if (color === 1) {\n        origMatch.blackWon();\n      } else if (color === 0.5) {\n        origMatch.draw();\n      }\n    } else {\n      origMatch.resetResult();\n    }\n    // matches[index] = match;\n    setMatches(round.matches.map(o => Object.assign({}, o)));\n  }\n  return (\n    <div>\n      <table key={round.roundNum}>\n        <caption>Round {round.roundNum + 1} results</caption>\n        <thead>\n          <tr>\n            <th>Won</th>\n            <th>Rating change</th>\n            <th>White</th>\n            <th>Draw</th>\n            <th>Black</th>\n            <th>Rating change</th>\n            <th>Won</th>\n          </tr>\n        </thead>\n        <tbody>\n          {matches.map((match, i) =>\n            <tr key={i}>\n              <td>\n                <form>\n                  <input \n                    type=\"checkbox\"\n                    checked={round.matches[i].result[0] === 1}\n                    onChange={(event) => setWinner(match, 0, i, event)} />\n                </form>\n              </td>\n              <td>{round.matches[i].newRating[0] - round.matches[i].origRating[0]}</td>\n              <td>{round.matches[i].whitePlayer.firstName}</td>\n              <td>\n                <form>\n                  <input \n                    type=\"checkbox\"\n                    checked={round.matches[i].result[0] === 0.5}\n                    onChange={(event) => setWinner(match, 0.5, i, event)} />\n                </form>\n              </td>\n              <td>{round.matches[i].blackPlayer.firstName}</td>\n              <td>{round.matches[i].newRating[1] - round.matches[i].origRating[1]}</td>\n              <td>\n                <form>\n                  <input \n                    type=\"checkbox\"\n                    checked={round.matches[i].result[1] === 1}\n                    onChange={(event) => setWinner(match, 1, i, event)} />\n                </form>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <Standings roundNum={round.roundNum} tourney={round.tourney} />\n    </div>\n  );\n}\n\nfunction Standings({tourney, roundNum}) {\n  return (\n    <table key={roundNum}>\n      <caption>Current Standings</caption>\n      <thead>\n        <tr>\n          <th>First name</th>\n          <th>Score</th>\n          <th>Median</th>\n          <th>Solkoff</th>\n          <th>Cumulative</th>\n          <th>Cumulative of opposition</th>\n          <th>Rating</th>\n          <th>Color balance</th>\n          <th>Opponent count</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tourney.playerStandings(roundNum).map((player, i) => \n          <tr key={i}>\n            <td>{player.firstName}</td>\n            <td className=\"table__number\">{tourney.playerScore(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.modifiedMedian(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.solkoff(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.playerScoreCum(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.playerOppScoreCum(player, roundNum)}</td>\n            <td>{player.rating}</td>\n            <td className=\"table__number\">{tourney.playerColorBalance(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.playerOppHistory(player, roundNum).length}</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n}\n\nexport {Roster, Round, Standings};","import React, { useState, useEffect, Component } from 'react';\nimport './App.css';\nimport {Tournament, Player} from './chess-tourney';\nimport {Roster, Round} from './chess-tourney-ui';\n\nconst cvlTourney = new Tournament(\n  'CVL Winter Open',\n  15\n)\n\nfunction App() {\n  const newRound = (event) => {\n    var round = cvlTourney.newRound();\n    if (!round) {\n      alert('Either add players or complete the current matches first.');\n      return;\n    }\n    tabList.push(\n      {\n        name: 'Round ' + (round.roundNum + 1),\n        contents: <Round tourney={cvlTourney} roundNum={round.roundNum} />\n      }\n    );\n    setTabList([].concat(tabList));\n    setCurrentTab(tabList[tabList.length - 1])\n  }\n  const [tabList, setTabList] = useState(\n    [\n      {\n        name: 'Roster',\n        contents: <Roster tourney={cvlTourney} />\n      }\n    ]\n  );\n  const [currentTab, setCurrentTab] = useState(tabList[0]);\n  return (\n    <div className=\"tournament\">\n      <nav className=\"tabbar\">\n        <ul>\n          {tabList.map((tab, i) => \n            <li key={i}>\n              <button\n                className=\"tab\"\n                onClick={() => setCurrentTab(tab)}\n                disabled={currentTab === tab}\n                >\n                {tab.name}\n              </button>\n            </li>\n          )}\n          <li>\n            <button \n              className=\"tab new_round\"\n              onClick={newRound}\n              >\n              New Round\n            </button>\n          </li>\n        </ul>\n      </nav>\n      <h1>Chessahoochee: a chess tournament app</h1>\n      {currentTab.contents}\n      {/* {cvlTourney.roundList.map(round => \n        <div className=\"round\" key={round.roundNum}>\n          <Round round={round} />\n        </div>\n      )} */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}