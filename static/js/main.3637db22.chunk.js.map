{"version":3,"sources":["serviceWorker.js","side-effects.js","data-types/types.js","data-types/constants.js","data-types/factories.js","data-types/index.js","pairing-scoring/ratings.js","pairing-scoring/helpers.js","pairing-scoring/scoring.js","pairing-scoring/factories.js","pairing-scoring/pairing.js","components/icons.jsx","hooks/reducers/generic-db-reducer.js","hooks/reducers/options-reducer.js","hooks/reducers/players-reducer.js","hooks/reducers/match-functions.js","hooks/reducers/tournament-reducer.js","demo-data/index.js","hooks/db.js","hooks/tournament-provider.jsx","hooks/index.js","components/tournament/crosstable.jsx","components/utility.jsx","components/new-player.jsx","components/tournament/player-select/selecting.jsx","components/tournament/player-select/index.jsx","components/tournament/pair-picker/player-info.jsx","components/tournament/pair-picker/select-list.jsx","components/tournament/pair-picker/stage.jsx","components/tournament/pair-picker/index.jsx","components/tournament/round/player-match-info.jsx","components/tournament/round/match-row.jsx","components/tournament/round/round.jsx","components/tournament/round/index.jsx","components/tournament/scores.jsx","components/tournament/header.jsx","components/tournament/sidebar.jsx","components/tournament/tournament.jsx","components/tournament/tournament-list.jsx","components/tournament/index.jsx","components/caution/index.jsx","components/404.jsx","components/options.jsx","components/players/info-box.jsx","components/players/player-list.jsx","components/players/index.jsx","components/splash.jsx","App.jsx","index.jsx","components/tournament/scores.module.css","App.module.css","components/splash.module.css","components/tournament/tournament.module.css","components/tournament/round/round.module.css","components/players/index.module.css","components/caution/index.module.css","components/utility.module.css"],"names":["Boolean","window","location","hostname","match","numeral","register","format","value","roundingFunction","whole","Math","floor","remainder","fraction","String","regexps","unformat","Number","Id","t","refinement","id","test","AvoidPair","tuple","Player","interface","firstName","lastName","matchCount","rating","type","PlayerStats","avoidList","list","colorBalance","dueColor","maybe","hasHadBye","isDueBye","opponentHistory","profile","score","upperHalf","Match","newRating","origRating","playerIds","result","RoundList","Tournament","byeQueue","name","roundList","tieBreaks","ScoreCalulator","func","Standing","BLACK","WHITE","DUMMY_ID","createMatch","importObj","nanoid","createPlayer","arguments","length","undefined","dummyPlayer","missingPlayer","kFactor","isNotDummy","playerId","getPlayerMaybe","playerDict","dict","player","isNotBye","includes","getMatchesByPlayer","matchList","filter","getMatchesByPlayerNoByes","getMatchDetailsForPlayer","index","indexOf","color","rounds2Matches","roundId","slice","reduce","acc","round","concat","getAllPlayersFromMatches","allPlayers","Array","from","Set","getUnmatched","tourney","players","matchedIds","Object","values","assoc","getPlayerAvoidList","pair","accumulator","getDueColor","lastMatch","last","getPlayersByOpponent","opponentId","getOpponentScores","map","opponent","getPlayerScore","of","scoreList","getPlayerScoreList","sum","getCumulativeScore","getPlayerScoreListNoByes","getCumulativeOfOpponentScore","oppScores","getColorBalanceScore","colorList","tieBreakMethods","0","scores","pipe","sort","a","b","init","tail","1","2","3","4","createStandingList","methods","selectedTiebreakMethods","selectedTieBreaks","i","tieBreakNames","m","standings","_ref","sortFunc","keys","key","thenBy","standing1","standing2","firstBy","createStandingTree","_createStandingList","_createStandingList2","slicedToArray","standingsFlat","standing","orig","prevStanding","append","over","lensIndex","createPlayerStats","_ref2","matches","freeze","priority","condition","avoidMeetingTwice","sameScores","divider","differentHalf","differentDueColor","maxPriority","add","calcPairIdeal","player1","player2","metBefore","mustAvoid","abs","setUpperHalves","playerStatsList","splitInHalf","splitAt","ignore","src","isUpperHalf","view","setByePlayer","hasNotHadBye","p","nextByeSignup","indexOfDueBye","findLastIndex","sortPlayersForPairing","simpleIcon","icon","props","react_default","createElement","assign","dangerouslySetInnerHTML","__html","svg","aria-label","title","role","style","fill","hex","icons","Alert","ArrowDown","ArrowUp","ArrowUpLeft","Check","ChevronLeft","ChevronRight","Edit","Info","Javascript","Layers","List","Plus","React","ReactIcon","Repeat","Settings","Trash","UserMinus","UserPlus","Users","X","ActionLoadState","state","Any","ActionDelItem","ActionAddItem","item","ActionAddTourney","AdctionAddPlayer","ActionTypes","union","genericDbReducer","action","nextId","console","warn","dissoc","Error","dispatch","x","ADD_ITEM","ADD_PLAYER","ADD_TOURNEY","DEL_ITEM","LOAD_STATE","ActionSetOption","option","ActionAvoidPair","ActionAvoidSingle","optionsReducer","lensProp","ADD_AVOID_PAIR","DEL_AVOID_PAIR","DEL_AVOID_SINGLE","SET_OPTION","ActionSetPlayer","ActionAddPlayer","ActionDelPlayer","ActionSetMatchcount","ActionSetRating","playersReducer","mergeLeft","lensPath","set","DEL_PLAYER","SET_PLAYER","SET_PLAYER_MATCHCOUNT","SET_PLAYER_RATING","autoPair","byeValue","pairs","curry","potentialMatches","playerMatches","reducedResults","blossom","p1Index","p2Index","p1Id","p2Id","p1","p2","matched","pair1","pair2","reverse","byePlayer","pairPlayers","log","getPlayer","idsPair","ActionAddRound","ActionDelLastRound","ActionAddRemoveTieBreak","ActionMoveTieBreak","newIndex","oldIndex","ActionSetTourneyPlayers","ActionSetByeQueue","ActionAutoPair","ActionManualPair","ActionSetMatchResult","matchId","ActionEditMatch","ActionMoveMatch","tournamentReducer","remove","move","__","manualPair","findIndex","propEq","mergeRight","ADD_ROUND","ADD_TIEBREAK","AUTO_PAIR","DEL_LAST_ROUND","DEL_MATCH","DEL_TIEBREAK","MANUAL_PAIR","MOVE_MATCH","MOVE_TIEBREAK","SET_BYE_QUEUE","SET_MATCH_RESULT","SET_STATE","SET_TOURNEY_PLAYERS","SWAP_COLORS","tournaments","demo_data","options","setItemsPrototype","localForage","removeItemsPrototype","optionsStore","createInstance","storeName","playerStore","tourneyStore","useAllItemsFromDb","store","_useReducer","useReducer","_useReducer2","items","_useState","useState","_useState2","isLoaded","setIsLoaded","useEffect","getItems","then","results","_config","setItems","deleted","difference","removeItems","useAllPlayersDb","useAllTournamentsDb","useOptionsDb","_useReducer3","demoData","_useReducer4","_useState3","_useState4","iterate","TournamentContext","createContext","useTournament","useContext","TournamentProvider","children","tourneyId","tourneyDispatch","playersDispatch","isTourneyLoaded","setIsTourneyLoaded","isPlayersLoaded","setIsPlayersLoaded","getItem","allTheIds","unChangedPlayers","symmetricDifference","catch","error","setItem","Provider","useDocumentTitle","origTitle","document","Crosstable","_useTournament","oppResults","defaultTo","opponentScores","getRatingChange","_getPerformanceRating","firstMatch","getPerformanceRatings","_getPerformanceRating2","firstRating","lastRating","change","className","table","rank","row","scope","playerName","index2","player1Id","player2Id","getXScore","Panel","_ref4","styles","panel","objectSpread","PanelContainer","panels","findById","NewPlayer","newPlayerDefault","newPlayerData","setNewPlayerdata","updateField","event","preventDefault","_event$currentTarget","currentTarget","prevState","onSubmit","htmlFor","required","onChange","Selecting","_useAllPlayersDb","_useAllPlayersDb2","allPlayersDispatch","togglePlayer","target","checked","pId","onClick","PlayerSelect","isSelecting","setIsSelecting","colSpan","disabled","dialog_es","isOpen","PlayerInfo","_useOptionsDb","_createPlayerStats","avoidPairs","prettyBalance","opId","SelectList","stagedPlayers","setStagedPlayers","unmatched","unmatchedCount","unmatchedWithDummy","selectPlayer","visually_hidden_es","Stage","_stagedPlayers","white","black","unstage","react","every","PairPicker","isModalOpen","setIsModalOpen","statsList","useMemo","matchIdeal","ideal","PlayerMatchInfo","playerData","data-testid","MatchRow","pos","selectedMatch","setSelectedMatch","openModal","setOpenModal","resultCode","whitePlayer","blackPlayer","whiteName","blackName","setMatchResult","origRatings","matchCounts","whiteElo","EloRank","blackElo","scoreExpected","getExpected","updateRating","calcNewRatings","aria-hidden","winnerSelect","onBlur","Round","moveMatch","direction","forEach","unMatch","Index","openTab","setOpenTab","tabs_es","ScoreTable","_createStandingTree","_createStandingTree2","standingTree","tbMethods","topHeader","j","rowSpan","dashify","SelectTieBreaks","_useTournament2","selectedTb","setSelectedTb","toggleTb","defaultId","moveTb","marginTop","Scores","Header","Sidebar","isNewRoundReady","lastRound","roundCount","playerCount","ceil","log2","isFinite","calcNumOfRounds","isItOver","tooltipText","tooltipWarn","_delLastRound","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","confirm","navigate","stop","apply","this","es","to","tooltip_es","label","tournament","header","sidebar","content","path","tournament_scores","TournamentList","_useAllTournamentsDb","_useAllTournamentsDb2","tourneys","newTourneyName","setNewTourneyName","isFormOpen","setIsFormOpen","placeholder","TournamentIndex","Caution","caution","caution__text","caution__link","href","NotFound","Options","tourneysDispatch","text","setText","_useOptionsDb2","optionsDispatch","exportData","loadData","data","alert","JSON","stringify","download","encodeURIComponent","reader","FileReader","onload","ev","parse","readAsText","files","cols","rows","spellCheck","PlayerInfoBox","singAvoidList","setSingAvoidList","unAvoided","selectedAvoider","setSelectedAvoider","handleChange","playerInfo","defaultValue","readOnly","arial-label","PlayerList","message","delPlayer","Players","childProps","basepath","Splash","splash","hint","subtitle","footer","fontSize","source","createHashSource","history","createHistory","App","mainMenu","link","tournament_Tournament","_404","default","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","controls"],"mappings":"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","file":"static/js/main.3637db22.chunk.js","sourcesContent":["/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import numeral from \"numeral\";\r\n\r\n// let's make a custom numeral format. I don't really know how this works.\r\nnumeral.register(\"format\", \"fraction\", {\r\n    // eslint-disable-next-line no-unused-vars\r\n    format: function (value, format, roundingFunction) {\r\n        const whole = Math.floor(value);\r\n        const remainder = value - whole;\r\n        const fraction = (function () {\r\n            switch (remainder) {\r\n            case 0.25:\r\n                return \"¼\";\r\n            case 0.5:\r\n                return \"½\";\r\n            case 0.75:\r\n                return \"¾\";\r\n            default:\r\n                return \"\";\r\n            }\r\n        }());\r\n        const stringedWhole = (\r\n            (whole === 0 && remainder)\r\n            ? \"\"\r\n            : String(whole)\r\n        );\r\n        return stringedWhole + fraction;\r\n    },\r\n    regexps: {\r\n        format: /(1\\/2)/,\r\n        unformat: /(1\\/2)/\r\n    },\r\n    unformat: function (value) {\r\n        // TODO: This doesn't do anything currently\r\n        return Number(value);\r\n    }\r\n});\r\n","import t from \"tcomb\";\r\n\r\nconst Id = t.refinement(\r\n    t.String,\r\n    (id) => /^[A-Za-z0-9_-]{21}$/.test(id),\r\n    \"NanoId\"\r\n);\r\nexport {Id};\r\n\r\nconst AvoidPair = t.tuple([Id, Id], \"AvoidPair\");\r\nexport {AvoidPair};\r\n\r\nconst Player = t.interface(\r\n    {\r\n        firstName: t.String,\r\n        id: Id,\r\n        lastName: t.String,\r\n        matchCount: t.Number,\r\n        rating: t.Number,\r\n        type: t.String // used for CSS styling etc\r\n    },\r\n    \"Player\"\r\n);\r\nexport {Player};\r\n\r\nconst PlayerStats = t.interface(\r\n    {\r\n        avoidList: t.list(Id),\r\n        colorBalance: t.Number,\r\n        dueColor: t.maybe(t.Number),\r\n        hasHadBye: t.Boolean,\r\n        id: Id,\r\n        isDueBye: t.Boolean,\r\n        opponentHistory: t.list(Id),\r\n        profile: Player,\r\n        rating: t.Number,\r\n        score: t.Number,\r\n        upperHalf: t.Boolean\r\n    },\r\n    \"PlayerStats\"\r\n);\r\nexport {PlayerStats};\r\n\r\nconst Match = t.interface(\r\n    {\r\n        id: Id,\r\n        newRating: t.tuple([t.Number, t.Number]),\r\n        origRating: t.tuple([t.Number, t.Number]),\r\n        playerIds: t.tuple([Id, Id]),\r\n        result: t.tuple([t.Number, t.Number])\r\n    },\r\n    \"Match\"\r\n);\r\nexport {Match};\r\n\r\nconst RoundList = t.list(t.list(Match), \"Round list\");\r\nexport {RoundList};\r\n\r\nconst Tournament = t.interface(\r\n    {\r\n        byeQueue: t.list(t.String),\r\n        id: Id,\r\n        name: t.String,\r\n        playerIds: t.list(t.String),\r\n        roundList: RoundList,\r\n        tieBreaks: t.list(t.Number)\r\n    },\r\n    \"Tournament\"\r\n);\r\nexport {Tournament};\r\n\r\nconst ScoreCalulator = t.func(\r\n    [Id, t.list(Match)],\r\n    t.Number,\r\n    \"ScoreCalulator\"\r\n);\r\nexport {ScoreCalulator};\r\n\r\nconst Standing = t.interface(\r\n    {\r\n        id: Id,\r\n        score: t.Number,\r\n        tieBreaks: t.list(t.Number)\r\n    },\r\n    \"Standing\"\r\n);\r\nexport {Standing};\r\n","const BLACK = 1;\r\nexport {BLACK};\r\nconst WHITE = 0;\r\nexport {WHITE};\r\nconst DUMMY_ID = \"________DUMMY________\";\r\nexport {DUMMY_ID};\r\n","// These factories are mainly useful as a shortcut to provide default values.\r\nimport {Match, Player, Tournament} from \"./types\";\r\nimport nanoid from \"nanoid\";\r\n\r\nexport function createMatch(importObj) {\r\n    return Match({\r\n        id: importObj.id || nanoid(),\r\n        newRating: importObj.newRating,\r\n        origRating: importObj.origRating,\r\n        playerIds: importObj.playerIds,\r\n        result: importObj.result || [0, 0]\r\n    });\r\n}\r\n\r\nexport function createPlayer(importObj = {}) {\r\n    return Player({\r\n        firstName: importObj.firstName || \"\",\r\n        id: importObj.id || nanoid(),\r\n        lastName: importObj.lastName || \"\",\r\n        matchCount: importObj.matchCount || 0,\r\n        rating: importObj.rating || 0,\r\n        type: importObj.type || \"person\" // used for CSS styling etc.\r\n    });\r\n}\r\n\r\nexport function createTournament(importObj) {\r\n    return Tournament({\r\n        byeQueue: importObj.byeQueue || [],\r\n        id: importObj.id || nanoid(),\r\n        name: importObj.name || \"\",\r\n        playerIds: importObj.playerIds || [],\r\n        roundList: importObj.roundList || [],\r\n        tieBreaks: importObj.tieBreaks || [0, 1, 2, 3]\r\n    });\r\n}\r\n","import {\r\n    AvoidPair,\r\n    Id,\r\n    Match,\r\n    Player,\r\n    PlayerStats,\r\n    RoundList,\r\n    ScoreCalulator,\r\n    Standing,\r\n    Tournament\r\n} from \"./types\";\r\nimport {BLACK, DUMMY_ID, WHITE} from \"./constants\";\r\nimport {createMatch, createPlayer, createTournament} from \"./factories\";\r\n\r\nconst dummyPlayer = createPlayer({\r\n    firstName: \"Bye\",\r\n    id: DUMMY_ID,\r\n    lastName: \"Player\",\r\n    type: \"dummy\"\r\n});\r\n\r\nconst missingPlayer = (id) => createPlayer({\r\n    firstName: \"Anonymous\",\r\n    id: id,\r\n    lastName: \"Player\",\r\n    type: \"missing\"\r\n});\r\n\r\nexport {\r\n    AvoidPair,\r\n    BLACK,\r\n    DUMMY_ID,\r\n    Id,\r\n    Match,\r\n    Player,\r\n    PlayerStats,\r\n    RoundList,\r\n    ScoreCalulator,\r\n    Standing,\r\n    Tournament,\r\n    WHITE,\r\n    createMatch,\r\n    createPlayer,\r\n    createTournament,\r\n    dummyPlayer,\r\n    missingPlayer\r\n};\r\n","import {BLACK, WHITE} from \"../data-types\";\r\nimport EloRank from \"elo-rank\";\r\nimport t from \"tcomb\";\r\n\r\nexport function kFactor(matchCount) {\r\n    const ne = t.Number(matchCount) || 1;\r\n    return (800 / ne);\r\n}\r\n\r\nexport function calcNewRatings(origRatings, matchCounts, result) {\r\n    t.tuple([t.Number, t.Number])(origRatings);\r\n    t.tuple([t.Number, t.Number])(matchCounts);\r\n    t.tuple([t.Number, t.Number])(result);\r\n    const whiteElo = new EloRank(kFactor(matchCounts[WHITE]));\r\n    const blackElo = new EloRank(kFactor(matchCounts[BLACK]));\r\n    const FLOOR = 100;\r\n    const scoreExpected = [\r\n        whiteElo.getExpected(origRatings[WHITE], origRatings[BLACK]),\r\n        blackElo.getExpected(origRatings[BLACK], origRatings[WHITE])\r\n    ];\r\n    const newRating = [\r\n        whiteElo.updateRating(\r\n            scoreExpected[WHITE],\r\n            result[WHITE],\r\n            origRatings[WHITE]\r\n        ),\r\n        blackElo.updateRating(\r\n            scoreExpected[BLACK],\r\n            result[BLACK],\r\n            origRatings[BLACK]\r\n        )\r\n    ];\r\n    return newRating.map((rating) => (rating < FLOOR) ? FLOOR : rating);\r\n}\r\n","import {\r\n    AvoidPair,\r\n    DUMMY_ID,\r\n    Id,\r\n    Match,\r\n    Player,\r\n    RoundList,\r\n    Standing,\r\n    Tournament,\r\n    dummyPlayer,\r\n    missingPlayer\r\n} from \"../data-types\";\r\nimport {assoc} from \"ramda\";\r\nimport t from \"tcomb\";\r\n/*******************************************************************************\r\n * Player functions\r\n ******************************************************************************/\r\nconst isNotDummy = (playerId) => playerId !== DUMMY_ID;\r\nexport {isNotDummy};\r\n\r\nexport function areScoresEqual(standing1, standing2) {\r\n    Standing(standing1);\r\n    Standing(standing2);\r\n    // Check if any of them aren't equal\r\n    if (standing1.score !== standing2.score) {\r\n        return false;\r\n    }\r\n    // Check if any tie-break values are not equal\r\n    return !(\r\n        standing1.tieBreaks.reduce(\r\n            (acc, value, i) => acc.concat(value !== standing2.tieBreaks[i]),\r\n            []\r\n        ).includes(true)\r\n    );\r\n}\r\n\r\n/**\r\n * Retrive a specific player from a list or object.\r\n * @param playerList This can either be typed as `[Player1, Player1]` or\r\n * `{\"1\": Player, \"2\": Player}`, where `Player1.id` equals its dict key.\r\n * @param id the `id` property of the desired `Player` object.\r\n * @returns The desired Player object.\r\n */\r\nexport function getPlayerById(playerList, id) {\r\n    t.union([\r\n        t.list(Player),\r\n        t.dict(Id, Player)\r\n    ])(playerList);\r\n    if (id === DUMMY_ID) {\r\n        return dummyPlayer;\r\n    }\r\n    const player = (playerList.filter)\r\n        ? playerList.filter((p) => p.id === id)[0]\r\n        : playerList[id];\r\n    return (player) ? player : missingPlayer(id);\r\n}\r\n\r\n/**\r\n * A replacement for `getPlayerById`, with an emphasis on the indented feature\r\n * of *maybe* getting a player, *maybe* getting a `dummyPlayer`, or *maybe*\r\n * getting a missing (deleted) player.\r\n */\r\nexport function getPlayerMaybe(playerDict, id) {\r\n    t.dict(Id, Player)(playerDict);\r\n    Id(id);\r\n    if (id === DUMMY_ID) {\r\n        return dummyPlayer;\r\n    }\r\n    const player = playerDict[id];\r\n    return (player) ? player : missingPlayer(id);\r\n}\r\n\r\n/*******************************************************************************\r\n * Match functions\r\n ******************************************************************************/\r\nconst isNotBye = (match) => !match.playerIds.includes(DUMMY_ID);\r\nexport {isNotBye};\r\n\r\nexport function getMatchesByPlayer(playerId, matchList) {\r\n    t.list(Match)(matchList);\r\n    return matchList.filter((match) => match.playerIds.includes(playerId));\r\n}\r\n\r\nexport function getMatchesByPlayerNoByes(playerId, matchList) {\r\n    t.list(Match)(matchList);\r\n    return matchList.filter(\r\n        (match) => match.playerIds.includes(playerId) && isNotBye(match)\r\n    );\r\n}\r\n\r\nexport function getMatchDetailsForPlayer(playerId, match) {\r\n    Id(playerId);\r\n    Match(match);\r\n    const index = match.playerIds.indexOf(playerId);\r\n    return {\r\n        color: index,\r\n        newRating: match.newRating[index],\r\n        origRating: match.origRating[index],\r\n        result: match.result[index]\r\n    };\r\n}\r\n\r\n/**\r\n * Flatten a list of rounds to a list of matches.\r\n */\r\nexport function rounds2Matches(roundList, roundId = null) {\r\n    RoundList(roundList);\r\n    t.maybe(t.Number)(roundId);\r\n    const rounds = (\r\n        (roundId === null)\r\n        ? roundList\r\n        : roundList.slice(0, roundId + 1)\r\n    );\r\n    return rounds.reduce((acc, round) => acc.concat(round), []);\r\n}\r\n\r\nexport function getAllPlayersFromMatches(matchList) {\r\n    t.list(Match)(matchList);\r\n    const allPlayers = matchList.reduce(\r\n        (acc, match) => acc.concat(match.playerIds),\r\n        []\r\n    );\r\n    return Array.from(new Set(allPlayers));\r\n}\r\n\r\n/**\r\n * Get a list of all of a player's scores from each match.\r\n */\r\nexport function getPlayerScoreList(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    return getMatchesByPlayer(\r\n        playerId,\r\n        matchList,\r\n    ).map(\r\n        (match) => getMatchDetailsForPlayer(playerId, match).result\r\n    );\r\n}\r\n\r\nexport function getPlayerScoreListNoByes(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    return getMatchesByPlayerNoByes(\r\n        playerId,\r\n        matchList\r\n    ).map(\r\n        (match) => getMatchDetailsForPlayer(playerId, match).result\r\n    );\r\n}\r\n\r\n/**\r\n * This creates a filtered version of `players` with only the players that are\r\n * not matched for the specified round.\r\n */\r\nexport function getUnmatched(tourney, players, roundId) {\r\n    Tournament(tourney);\r\n    t.dict(Id, Player)(players);\r\n    t.Number(roundId);\r\n    const matchList = tourney.roundList[roundId] || [];\r\n    const matchedIds = matchList.reduce(\r\n        (acc, match) => acc.concat(match.playerIds),\r\n        []\r\n    );\r\n    const unmatched = Object.values(players).reduce(\r\n        (acc, player) => (\r\n            (matchedIds.includes(player.id))\r\n            ? acc\r\n            : assoc(player.id, player, acc)\r\n        ),\r\n        {}\r\n    );\r\n    return unmatched;\r\n}\r\n\r\n/*******************************************************************************\r\n * Round functions\r\n ******************************************************************************/\r\nexport function calcNumOfRounds(playerCount) {\r\n    const roundCount = Math.ceil(Math.log2(playerCount));\r\n    return (Number.isFinite(roundCount)) ? roundCount : 0;\r\n}\r\n\r\n/*******************************************************************************\r\n * Avoid list functions\r\n ******************************************************************************/\r\nexport function getPlayerAvoidList(playerId, avoidList) {\r\n    t.list(AvoidPair)(avoidList);\r\n    Id(playerId);\r\n    return avoidList.filter( // get pairings with the player\r\n        (pair) => pair.includes(playerId)\r\n    ).reduce( // Flatten the array\r\n        (accumulator, pair) => pair.concat(accumulator),\r\n        []\r\n    ).filter( // filter out the player's id\r\n        (id) => id !== playerId\r\n    );\r\n}\r\n\r\n// TODO: This isn't currently in use, but it probably should be.\r\nexport function cleanAvoidList(avoidList, playerList) {\r\n    t.list(AvoidPair)(avoidList);\r\n    t.list(Player)(playerList);\r\n    const ids = playerList.map((p) => p.id);\r\n    return avoidList.filter(\r\n        (pairs) => (ids.includes(pairs[0]) && ids.includes(pairs[1]))\r\n    );\r\n}\r\n","import {\r\n    BLACK,\r\n    DUMMY_ID,\r\n    Id,\r\n    Match,\r\n    ScoreCalulator,\r\n    WHITE\r\n} from \"../data-types\";\r\nimport {\r\n    getMatchDetailsForPlayer,\r\n    getMatchesByPlayer,\r\n    getMatchesByPlayerNoByes,\r\n    getPlayerScoreList,\r\n    getPlayerScoreListNoByes,\r\n    isNotDummy\r\n} from \"./helpers\";\r\nimport {\r\n    init,\r\n    last,\r\n    pipe,\r\n    sort,\r\n    sum,\r\n    tail\r\n} from \"ramda\";\r\nimport {firstBy} from \"thenby\";\r\nimport t from \"tcomb\";\r\n\r\nexport function getDueColor(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    const lastMatch = last(getMatchesByPlayer(playerId, matchList));\r\n    if (!lastMatch) {\r\n        return null;\r\n    }\r\n    const {color} = getMatchDetailsForPlayer(playerId, lastMatch);\r\n    return (color === WHITE) ? BLACK : WHITE;\r\n}\r\n\r\nexport function hasHadBye(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    return getMatchesByPlayer(\r\n        playerId,\r\n        matchList\r\n    ).reduce(\r\n        (acc, match) => acc.concat(match.playerIds),\r\n        []\r\n    ).includes(DUMMY_ID);\r\n}\r\n\r\nexport function getPlayersByOpponent(opponentId, matchList) {\r\n    Id(opponentId);\r\n    t.list(Match)(matchList);\r\n    return getMatchesByPlayer(\r\n        opponentId,\r\n        matchList\r\n    ).reduce(\r\n        (acc, match) => acc.concat(match.playerIds),\r\n        []\r\n    ).filter(\r\n        (playerId) => playerId !== opponentId\r\n    );\r\n}\r\n\r\n/**\r\n * Used for `modifiedMedian` and `solkoff`.\r\n */\r\nfunction getOpponentScores(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    const scores = getPlayersByOpponent(\r\n        playerId,\r\n        matchList\r\n    ).filter(\r\n        isNotDummy\r\n    ).map(\r\n        (opponent) => getPlayerScore(opponent, matchList)\r\n    );\r\n    return scores;\r\n}\r\n\r\n/*******************************************************************************\r\n * The main scoring methods\r\n ******************************************************************************/\r\nconst getPlayerScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getPlayerScore(playerId, matchList) {\r\n        const scoreList = getPlayerScoreList(playerId, matchList);\r\n        return sum(scoreList);\r\n    }\r\n);\r\nexport {getPlayerScore};\r\n\r\n/**\r\n * The player's cumulative score.\r\n */\r\nconst getCumulativeScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getCumulativeScore(playerId, matchList) {\r\n        const scoreList = getPlayerScoreListNoByes(\r\n            playerId,\r\n            matchList\r\n        ).reduce( // turn the regular score list into a \"running\" score list\r\n            (acc, score) => acc.concat([last(acc) + score]),\r\n            [0]\r\n        );\r\n        return sum(scoreList);\r\n    }\r\n);\r\n\r\n/**\r\n * Get the cumulative scores of a player's opponents.\r\n */\r\nconst getCumulativeOfOpponentScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getCumulativeOfOpponentScore(playerId, matchList) {\r\n        const oppScores = getPlayersByOpponent(\r\n            playerId,\r\n            matchList\r\n        ).filter(\r\n            isNotDummy\r\n        ).map(\r\n            (id) => getCumulativeScore(id, matchList)\r\n        );\r\n        return sum(oppScores);\r\n    }\r\n);\r\n\r\n/**\r\n * Calculate a player's color balance. A negative number means they played as\r\n * white more. A positive number means they played as black more.\r\n */\r\nconst getColorBalanceScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getColorBalanceScore(playerId, matchList) {\r\n        const colorList = getMatchesByPlayerNoByes(\r\n            playerId,\r\n            matchList\r\n        ).reduce(\r\n            (acc, match) => (\r\n                (match.playerIds[WHITE] === playerId)\r\n                ? acc.concat(-1) // White = -1\r\n                : acc.concat(1) // Black = +1\r\n            ),\r\n            [0]\r\n        );\r\n        return sum(colorList);\r\n    }\r\n);\r\nexport {getColorBalanceScore};\r\n\r\n/**\r\n * Gets the modified median factor defined in USCF § 34E1\r\n */\r\nconst getModifiedMedianScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getModifiedMedianScore(playerId, matchList) {\r\n        const scores = getOpponentScores(playerId, matchList);\r\n        return pipe(\r\n            sort((a, b) => a - b),\r\n            init,\r\n            tail,\r\n            sum\r\n        )(scores);\r\n    }\r\n);\r\n\r\nconst getSolkoffScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getSolkoffScore(playerId, matchList) {\r\n        const scoreList = getOpponentScores(playerId, matchList);\r\n        return sum(scoreList);\r\n    }\r\n);\r\n\r\nconst tieBreakMethods = {\r\n    0: {\r\n        func: getModifiedMedianScore,\r\n        id: 0,\r\n        name: \"Modified median\"\r\n    },\r\n    1: {\r\n        func: getSolkoffScore,\r\n        id: 1,\r\n        name: \"Solkoff\"\r\n    },\r\n    2: {\r\n        func: getCumulativeScore,\r\n        id: 2,\r\n        name: \"Cumulative score\"\r\n    },\r\n    3: {\r\n        func: getCumulativeOfOpponentScore,\r\n        id: 3,\r\n        name: \"Cumulative of opposition\"\r\n    },\r\n    4: {\r\n        func: getColorBalanceScore,\r\n        id: 4,\r\n        name: \"Most black\"\r\n    }\r\n};\r\nObject.freeze(tieBreakMethods);\r\nexport {tieBreakMethods};\r\n\r\n/**\r\n * Create a function to sort the standings. This dynamically creates a `thenBy`\r\n * function based on the list of desired tiebreak sort methods.\r\n * @returns A function to be used with a list of standings and `sort()`.\r\n */\r\nexport function createTieBreakSorter(selectedTiebreakMethods) {\r\n    return Object.keys(selectedTiebreakMethods).reduce(\r\n        (acc, key) => (\r\n            acc.thenBy(\r\n                (standing1, standing2) => (\r\n                    standing2.tieBreaks[key] - standing1.tieBreaks[key]\r\n                )\r\n            )\r\n        ),\r\n        firstBy((standing1, standing2) => standing2.score - standing1.score)\r\n    );\r\n}\r\n","import {\r\n    AvoidPair,\r\n    Id,\r\n    Match,\r\n    Player,\r\n    PlayerStats,\r\n    RoundList,\r\n    Standing\r\n} from \"../data-types\";\r\nimport {\r\n    add,\r\n    append,\r\n    defaultTo,\r\n    last,\r\n    lensIndex,\r\n    lensProp,\r\n    over,\r\n    pipe,\r\n    sort\r\n} from \"ramda\";\r\nimport {\r\n    areScoresEqual,\r\n    getAllPlayersFromMatches,\r\n    getMatchDetailsForPlayer,\r\n    getMatchesByPlayer,\r\n    getPlayerAvoidList,\r\n    isNotDummy,\r\n    rounds2Matches\r\n} from \"./helpers\";\r\nimport {\r\n    createTieBreakSorter,\r\n    getColorBalanceScore,\r\n    getDueColor,\r\n    getPlayerScore,\r\n    getPlayersByOpponent,\r\n    hasHadBye,\r\n    tieBreakMethods\r\n} from \"./scoring\";\r\nimport t from \"tcomb\";\r\n/**\r\n * Sort the standings by score, see USCF tie-break rules from § 34.\r\n * @returns {[Standing[], string[]]} The standings and the list of method used\r\n */\r\nexport function createStandingList(methods, roundList, roundId) {\r\n    t.list(t.Number)(methods);\r\n    t.list(t.Array)(roundList);\r\n    t.maybe(t.Number)(roundId);\r\n    const matchList = rounds2Matches(roundList, roundId);\r\n    const selectedTieBreaks = methods.map((i) => tieBreakMethods[i]);\r\n    const tieBreakNames = selectedTieBreaks.map((m) => m.name);\r\n    // Get a flat list of all of the players and their scores.\r\n    const standings = getAllPlayersFromMatches(\r\n        matchList\r\n    ).map(\r\n        (id) => Standing({\r\n            id,\r\n            score: getPlayerScore(id, matchList),\r\n            tieBreaks: selectedTieBreaks.map(({func}) => func(id, matchList))\r\n        })\r\n    );\r\n    const sortFunc = createTieBreakSorter(selectedTieBreaks);\r\n    const standingsSorted = sort(sortFunc, standings);\r\n    return [standingsSorted, tieBreakNames];\r\n}\r\n\r\n/**\r\n * Sort the standings by score, see USCF tie-break rules from § 34.\r\n * example: `[[Dale, Audrey], [Pete], [Bob]]`\r\n * Dale and Audrey are tied for first, Pete is 2nd, Bob is 3rd.\r\n * @returns {[Standing[][], string[]]} The standings and the list of method used\r\n */\r\nexport function createStandingTree(methods, roundList, roundId = null) {\r\n    t.list(t.Number)(methods);\r\n    RoundList(roundList);\r\n    t.maybe(t.Number)(roundId);\r\n    const [\r\n        standingsFlat,\r\n        tieBreakNames\r\n    ] = createStandingList(methods, roundList, roundId);\r\n    const standingsFlatNoByes = standingsFlat.filter(isNotDummy);\r\n    const standingsTree = standingsFlatNoByes.reduce(\r\n        /** @param {Standing[][]} acc*/\r\n        function assignStandingsToTree(acc, standing, i, orig) {\r\n            const prevStanding = orig[i - 1];\r\n            const isNewRank = (\r\n                // Always make a new rank for the first player\r\n                (i === 0) ? true : !areScoresEqual(standing, prevStanding)\r\n            );\r\n            if (isNewRank) {\r\n                return append([standing], acc);\r\n            }\r\n            // If this player has the same score as the last, list them together\r\n            return over(lensIndex(acc.length - 1), append(standing), acc);\r\n        },\r\n        []\r\n    );\r\n    return [standingsTree, tieBreakNames];\r\n}\r\n\r\n/**\r\n * @returns {PlayerStats}\r\n */\r\nexport function createPlayerStats({\r\n    avoidList,\r\n    id,\r\n    players,\r\n    roundList,\r\n    roundId\r\n}) {\r\n    Id(id);\r\n    t.Number(roundId);\r\n    t.dict(Id, Player)(players);\r\n    t.list(AvoidPair)(avoidList);\r\n    RoundList(roundList);\r\n    const matches = rounds2Matches(roundList, roundId);\r\n    return PlayerStats({\r\n        avoidList: getPlayerAvoidList(id, avoidList),\r\n        colorBalance: getColorBalanceScore(id, matches),\r\n        dueColor: getDueColor(id, matches),\r\n        hasHadBye: hasHadBye(id, matches),\r\n        id: id, // is this shortcut necessary?\r\n        isDueBye: false,\r\n        opponentHistory: getPlayersByOpponent(id, matches),\r\n        profile: players[id],\r\n        rating: players[id].rating, // is this shortcut necessary?\r\n        score: getPlayerScore(id, matches),\r\n        upperHalf: false\r\n    });\r\n}\r\n\r\n/**\r\n * NOTE: these params are flipped. Should others be flipped too?\r\n * @returns {Object.<string, number>} {opponentId: result}\r\n */\r\nfunction getResultsByOpponent(matchList, playerId) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    const matches = getMatchesByPlayer(playerId, matchList);\r\n    return matches.reduce(\r\n        function (acc, match) {\r\n            const opponent = match.playerIds.filter(\r\n                (id) => id !== playerId\r\n            )[0];\r\n            const {result} = getMatchDetailsForPlayer(playerId, match);\r\n            // This sets a default result of 0 and then adds the existing\r\n            // result. Most of the time, this would be the same as using\r\n            // `set()` with the result, but if two players play each other\r\n            // multiple times then the total results will be displayed.\r\n            return over(\r\n                lensProp(opponent),\r\n                pipe(defaultTo(0), add(result)),\r\n                acc\r\n            );\r\n        },\r\n        {}\r\n    );\r\n}\r\nexport {getResultsByOpponent};\r\n\r\n/**\r\n * NOTE: these params are flipped. Should others be flipped too?\r\n */\r\nfunction getPerformanceRatings(matchList, playerId) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    const matches = getMatchesByPlayer(playerId, matchList);\r\n    const firstMatch = matches[0];\r\n    const lastMatch = last(matches);\r\n    return [\r\n        getMatchDetailsForPlayer(playerId, firstMatch).origRating,\r\n        getMatchDetailsForPlayer(playerId, lastMatch).newRating\r\n    ];\r\n}\r\nexport {getPerformanceRatings};\r\n","// This file is a work in progress. The weighting for the ratings needs to be\r\n// tweaked a lot, and the pairing function itself needs to be cleaned up and\r\n// made more reusable.\r\nimport {\r\n    AvoidPair,\r\n    DUMMY_ID,\r\n    Id,\r\n    Player,\r\n    PlayerStats,\r\n    RoundList\r\n} from \"../data-types\";\r\nimport {\r\n    add,\r\n    assoc,\r\n    curry,\r\n    filter,\r\n    findLastIndex,\r\n    lensIndex,\r\n    map,\r\n    over,\r\n    pipe,\r\n    reverse,\r\n    sort,\r\n    splitAt,\r\n    view\r\n} from \"ramda\";\r\nimport blossom from \"edmonds-blossom\";\r\nimport {createPlayerStats} from \"./factories\";\r\nimport {firstBy} from \"thenby\";\r\nimport t from \"tcomb\";\r\n\r\nconst priority = (value) => (condition) => condition ? value : 0;\r\nconst divisiblePriority = (value) => (divider) => value / divider;\r\n\r\n// TODO: These probably need to be tweaked a lot.\r\n/**\r\n * @constant avoidMeetingTwicePriority The weight given to avoid players\r\n * meeting twice. This same weight is given to avoid matching players on each\r\n * other's \"avoid\" list. This is the highest priority. (USCF § 27A1)\r\n */\r\nconst avoidMeetingTwice = priority(20);\r\n/**\r\n * @constant sameScoresPriority The weight given to match players with\r\n * equal scores. This gets divided against the difference between each players'\r\n * scores, plus one. For example, players with scores `1` and `3` would have\r\n * this priority divided by `3`. Players with scores `0` and `3` would have this\r\n * priority divided by `4`. Players with equal scores would divide it by `1`,\r\n * leaving it unchanged. (USCF § 27A2)\r\n */\r\nconst sameScores = divisiblePriority(16);\r\n\r\n/**\r\n * @constant differentHalfPriority The weight given to match players in lower\r\n * versus upper halves. This is only applied to players being matched within\r\n * the same score group. (USCF § 27A3)\r\n */\r\nconst differentHalf = priority(2);\r\n/**\r\n * @constant differentDueColorPriority The weight given to match players with\r\n * opposite due colors. (USCF § 27A4 and § 27A5)\r\n */\r\nconst differentDueColor = priority(1);\r\n\r\nconst maxPriority = pipe(\r\n    add(differentHalf(true)),\r\n    add(differentDueColor(true)),\r\n    add(sameScores(1)),\r\n    add(avoidMeetingTwice(true))\r\n)(0);\r\nexport {maxPriority};\r\n\r\n/**\r\n * @returns {number}\r\n */\r\nexport function calcPairIdeal(player1, player2) {\r\n    PlayerStats(player1);\r\n    PlayerStats(player2);\r\n    if (player1.id === player2.id) {\r\n        return 0;\r\n    }\r\n    const metBefore = player1.opponentHistory.includes(player2.id);\r\n    const mustAvoid = player1.avoidList.includes(player2.id);\r\n    return pipe(\r\n        add(differentHalf(\r\n            player1.upperHalf !== player2.upperHalf\r\n            && player1.score === player2.score\r\n        )),\r\n        add(differentDueColor(\r\n            player1.dueColor === null\r\n            || player1.dueColor !== player2.dueColor\r\n        )),\r\n        add(sameScores(Math.abs(player1.score - player2.score) + 1)),\r\n        add(avoidMeetingTwice(!metBefore && !mustAvoid))\r\n    )(0);\r\n}\r\n\r\n/**\r\n * Determine which players are in the upper and lower halves of their score\r\n * groups.\r\n * This function does not sort the list. The list should be sorted first.\r\n */\r\nexport function setUpperHalves(playerStatsList) {\r\n    t.list(PlayerStats)(playerStatsList);\r\n    const splitInHalf = (list) => splitAt(list.length / 2, list);\r\n    return playerStatsList.reduce(\r\n        function (acc, player, ignore, src) {\r\n            const upperHalfIds = pipe(\r\n                filter((a) => a.score === player.score),\r\n                splitInHalf,\r\n                view(lensIndex(0)),\r\n                map((a) => a.id)\r\n            )(src);\r\n            const isUpperHalf = upperHalfIds.includes(player.id);\r\n            return acc.concat([assoc(\"upperHalf\", isUpperHalf, player)]);\r\n        },\r\n        []\r\n    );\r\n}\r\n\r\nfunction setByePlayer(byeQueue, playerStatsList) {\r\n    t.list(t.Number)(byeQueue);\r\n    t.list(PlayerStats)(playerStatsList);\r\n    // if the list is even, just return it.\r\n    if (playerStatsList.length % 2 === 0) {\r\n        return playerStatsList;\r\n    }\r\n    const hasNotHadBye = playerStatsList.filter(\r\n        (p) => !p.hasHadBye\r\n    ).map((p) => p.id);\r\n    const nextByeSignup = byeQueue.filter((id) => hasNotHadBye.includes(id))[0];\r\n    const indexOfDueBye = (\r\n        (nextByeSignup)\r\n        // Assign the bye to the next person who signed up.\r\n        ? findLastIndex((p) => p.id === nextByeSignup, playerStatsList)\r\n        // Assign a bye to the lowest-rated player in the lowest score group.\r\n        // Because the list is sorted, the last player is the lowest.\r\n        // (USCF § 29L2.)\r\n        : findLastIndex((p) => !p.hasHadBye, playerStatsList)\r\n    );\r\n    // In the impossible situation that *everyone* has played a bye round\r\n    // previously, then just pick the last player.\r\n    const index = (\r\n        (indexOfDueBye === -1)\r\n        ? playerStatsList.length - 1\r\n        : indexOfDueBye\r\n    );\r\n    return over(\r\n        lensIndex(index),\r\n        assoc(\"isDueBye\", true),\r\n        playerStatsList\r\n    );\r\n}\r\n\r\n/**\r\n * Sort the data so matchups default to order by score and rating.\r\n */\r\nexport function sortPlayersForPairing(playerStatsList) {\r\n    t.list(PlayerStats)(playerStatsList);\r\n    return sort(\r\n        firstBy(\r\n            (a, b) => b.score - a.score\r\n        ).thenBy(\r\n            (a, b) => b.rating - a.rating\r\n        ),\r\n        playerStatsList\r\n    );\r\n}\r\n\r\n/**\r\n * Creates pairings according to the rules specified in USCF § 27, § 28,\r\n * and § 29. This is a work in progress and does not account for all of the\r\n * rules yet.\r\n */\r\nexport default function pairPlayers({\r\n    players,\r\n    roundId,\r\n    roundList,\r\n    avoidList,\r\n    byeQueue\r\n}) {\r\n    t.Number(roundId);\r\n    t.dict(Id, Player)(players);\r\n    t.list(t.Number)(byeQueue);\r\n    RoundList(roundList);\r\n    t.list(AvoidPair)(avoidList);\r\n    const playerIds = Object.keys(players);\r\n    const playerStatsList = pipe(\r\n        map((id) => (\r\n            createPlayerStats({\r\n                avoidList,\r\n                id,\r\n                players,\r\n                roundId,\r\n                roundList\r\n            })\r\n        )),\r\n        sortPlayersForPairing,\r\n        setUpperHalves,\r\n        curry(setByePlayer)(byeQueue)\r\n    )(playerIds);\r\n    // Turn the data into blossom-compatible input.\r\n    const potentialMatches = playerStatsList.filter(\r\n        (p) => !p.isDueBye\r\n    ).reduce(\r\n        function (acc, player1, ignore, src) {\r\n            const playerMatches = src.map(\r\n                (player2) => [\r\n                    playerIds.indexOf(player1.id),\r\n                    playerIds.indexOf(player2.id),\r\n                    calcPairIdeal(player1, player2)\r\n                ]\r\n            );\r\n            return acc.concat(playerMatches);\r\n        },\r\n        []\r\n    );\r\n    // Feed all of the potential matches to Edmonds-blossom and let the\r\n    // algorithm work its magic. This returns an array where each index is the\r\n    // ID of one player and each value is the ID of the matched player.\r\n    const blossomResults = blossom(potentialMatches);\r\n    // Translate those IDs into actual pairs of player Ids.\r\n    const reducedResults = blossomResults.reduce(\r\n        function (acc, p1Index, p2Index) {\r\n            // Filter out unmatched players. Blossom will automatically include\r\n            // their missing IDs in its results.\r\n            if (p1Index !== -1) {\r\n                // const p1 = playerStatsList.filter((p) => p.id === p1Id)[0];\r\n                // const p2 = playerStatsList.filter((p) => p.id === p2Id)[0];\r\n                // Translate the indices into ID strings\r\n                const p1Id = playerIds[p1Index];\r\n                const p2Id = playerIds[p2Index];\r\n                const p1 = playerStatsList.filter((p) => p.id === p1Id)[0];\r\n                const p2 = playerStatsList.filter((p) => p.id === p2Id)[0];\r\n                // const ideal = potentialMatches.filter(\r\n                //     (pair) => pair[0] === p1Id && pair[1] === p2Id\r\n                // )[0][2];\r\n                // Blossom returns a lot of redundant matches. Check that this\r\n                // matchup wasn't already added.\r\n                const matched = acc.map((pair) => pair[0]);\r\n                if (!matched.includes(p1) && !matched.includes(p2)) {\r\n                    return acc.concat([[p1, p2]]);\r\n                }\r\n            }\r\n            return acc;\r\n        },\r\n        []\r\n    );\r\n    // Sort by net score and rating for board placement.\r\n    const sortedResults = sort(\r\n        firstBy((pair1, pair2) => (\r\n            pair2[0].score + pair2[1].score - pair1[0].score - pair1[1].score\r\n        )).thenBy((pair1, pair2) => (\r\n            pair2[0].rating + pair2[1].rating\r\n            - pair1[0].rating - pair1[1].rating\r\n        )),\r\n        reducedResults\r\n    );\r\n    const matches = sortedResults.map(\r\n        function (pair) {\r\n            const player1 = pair[0];\r\n            const player2 = pair[1];\r\n            const match = [player1.id, player2.id];\r\n            if (player1.colorBalance < player2.colorBalance) {\r\n                return reverse(match);\r\n            }\r\n            return match;\r\n        }\r\n    );\r\n    // The bye match always gets added last so the the numbering isn't affected.\r\n    const byePlayer = playerStatsList.filter((p) => p.isDueBye)[0];\r\n    if (byePlayer) {\r\n        return matches.concat([[byePlayer.id, DUMMY_ID]]);\r\n    }\r\n    return matches;\r\n}\r\n","import Alert from \"react-feather/dist/icons/alert-circle\";\r\nimport ArrowDown from \"react-feather/dist/icons/arrow-down\";\r\nimport ArrowUp from \"react-feather/dist/icons/arrow-up\";\r\nimport ArrowUpLeft from \"react-feather/dist/icons/arrow-up-left\";\r\nimport Check from \"react-feather/dist/icons/check\";\r\nimport ChevronLeft from \"react-feather/dist/icons/chevron-left\";\r\nimport ChevronRight from \"react-feather/dist/icons/chevron-right\";\r\nimport Edit from \"react-feather/dist/icons/edit\";\r\nimport Info from \"react-feather/dist/icons/info\";\r\nimport Javascript from \"simple-icons/icons/javascript\";\r\nimport Layers from \"react-feather/dist/icons/layers\";\r\nimport List from \"react-feather/dist/icons/list\";\r\nimport Plus from \"react-feather/dist/icons/plus\";\r\nimport React from \"react\";\r\nimport ReactIcon from \"simple-icons/icons/react\";\r\nimport Repeat from \"react-feather/dist/icons/repeat\";\r\nimport Settings from \"react-feather/dist/icons/settings\";\r\nimport Trash from \"react-feather/dist/icons/trash-2\";\r\nimport UserMinus from \"react-feather/dist/icons/user-minus\";\r\nimport UserPlus from \"react-feather/dist/icons/user-plus\";\r\nimport Users from \"react-feather/dist/icons/users\";\r\nimport X from \"react-feather/dist/icons/x\";\r\n\r\nconst simpleIcon = (icon) => (props) => (\r\n    <span\r\n        dangerouslySetInnerHTML={{__html: icon.svg}}\r\n        aria-label={icon.title}\r\n        role=\"img\"\r\n        style={{fill: \"#\" + icon.hex}}\r\n        {...props}\r\n    />\r\n);\r\n\r\nexport default {\r\n    Alert,\r\n    ArrowDown,\r\n    ArrowUp,\r\n    ArrowUpLeft,\r\n    Check,\r\n    ChevronLeft,\r\n    ChevronRight,\r\n    Edit,\r\n    Info,\r\n    Javascript: simpleIcon(Javascript),\r\n    Layers,\r\n    List,\r\n    Plus,\r\n    React: simpleIcon(ReactIcon),\r\n    Repeat,\r\n    Settings,\r\n    Trash,\r\n    UserMinus,\r\n    UserPlus,\r\n    Users,\r\n    X\r\n};\r\n","import {assoc, dissoc} from \"ramda\";\r\nimport {createPlayer, createTournament} from \"../../data-types\";\r\nimport nanoid from \"nanoid\";\r\nimport t from \"tcomb\";\r\n\r\nconst ActionLoadState = t.interface({\r\n    state: t.Any\r\n});\r\nconst ActionDelItem = t.interface({\r\n    id: t.String\r\n});\r\nconst ActionAddItem = t.interface({\r\n    item: t.Any\r\n});\r\nconst ActionAddTourney = t.interface({\r\n    name: t.String\r\n});\r\nconst AdctionAddPlayer = t.interface({\r\n    firstName: t.String,\r\n    lastName: t.String,\r\n    rating: t.Number\r\n});\r\nconst ActionTypes = t.union([\r\n    ActionLoadState,\r\n    ActionDelItem,\r\n    ActionAddItem,\r\n    AdctionAddPlayer,\r\n    ActionAddTourney\r\n]);\r\nActionTypes.dispatch = function (x) {\r\n    const typeToConstructor = {\r\n        \"ADD_ITEM\": ActionAddItem,\r\n        \"ADD_PLAYER\": AdctionAddPlayer,\r\n        \"ADD_TOURNEY\": ActionAddTourney,\r\n        \"DEL_ITEM\": ActionDelItem,\r\n        \"LOAD_STATE\": ActionLoadState\r\n    };\r\n    return typeToConstructor[x.type];\r\n};\r\n\r\nexport default function genericDbReducer(state, action) {\r\n    ActionTypes(action);\r\n    const nextId = nanoid();\r\n    switch (action.type) {\r\n    case \"ADD_ITEM\":\r\n        console.warn(\"Use a more specific action instead, please.\");\r\n        return assoc(nextId, action.item, state);\r\n    case \"ADD_TOURNEY\":\r\n        return assoc(\r\n            nextId,\r\n            createTournament({id: nextId, name: action.name}),\r\n            state\r\n        );\r\n    case \"ADD_PLAYER\":\r\n        return assoc(\r\n            nextId,\r\n            createPlayer({\r\n                firstName: action.firstName,\r\n                id: nextId,\r\n                lastName: action.lastName,\r\n                rating: action.rating\r\n            }),\r\n            state\r\n        );\r\n    case \"DEL_ITEM\":\r\n        // If using the player DB, be sure to delete avoid-pairs too.\r\n        return dissoc(action.id, state);\r\n    case \"LOAD_STATE\":\r\n        return action.state;\r\n    default:\r\n        throw new Error(\"Unexpected action type\");\r\n    }\r\n}\r\n","import {AvoidPair, Id} from \"../../data-types\";\r\nimport {append, assoc, filter, lensProp, over} from \"ramda\";\r\nimport t from \"tcomb\";\r\n\r\nconst ActionLoadState = t.interface({\r\n    state: t.Any\r\n});\r\nconst ActionSetOption = t.interface({\r\n    option: t.String,\r\n    value: t.union([\r\n        t.Number,\r\n        t.list(AvoidPair)\r\n    ])\r\n});\r\nconst ActionAvoidPair = t.interface({\r\n    pair: AvoidPair\r\n});\r\nconst ActionAvoidSingle = t.interface({\r\n    id: Id\r\n});\r\nconst ActionTypes = t.union([\r\n    ActionLoadState,\r\n    ActionAvoidPair,\r\n    ActionAvoidSingle\r\n]);\r\nActionTypes.dispatch = function (x) {\r\n    const typeToConstructor = {\r\n        \"ADD_AVOID_PAIR\": ActionAvoidPair,\r\n        \"DEL_AVOID_PAIR\": ActionAvoidPair,\r\n        \"DEL_AVOID_SINGLE\": ActionAvoidSingle,\r\n        \"LOAD_STATE\": ActionLoadState,\r\n        \"SET_OPTION\": ActionSetOption\r\n    };\r\n    return typeToConstructor[x.type];\r\n};\r\n\r\nexport default function optionsReducer(state, action) {\r\n    ActionTypes(action);\r\n    switch (action.type) {\r\n    case \"ADD_AVOID_PAIR\":\r\n        return over(\r\n            lensProp(\"avoidPairs\"),\r\n            append(action.pair),\r\n            state\r\n        );\r\n    case \"DEL_AVOID_PAIR\":\r\n        return over(\r\n            lensProp(\"avoidPairs\"),\r\n            filter((pair) => !(\r\n                pair.includes(action.pair[0]) && pair.includes(action.pair[1])\r\n            )),\r\n            state\r\n        );\r\n    case \"DEL_AVOID_SINGLE\":\r\n        // call this when you delete a player ID\r\n        // TODO: make the avoidPairs list smartly auto-clean itself\r\n        return over(\r\n            lensProp(\"avoidPairs\"),\r\n            filter((pair) => !pair.includes(action.id)),\r\n            state\r\n        );\r\n    case \"SET_OPTION\":\r\n        return assoc(\r\n            action.option,\r\n            action.value,\r\n            state\r\n        );\r\n    case \"LOAD_STATE\":\r\n        return action.state;\r\n    default:\r\n        throw new Error(\"Unexpected action type.\");\r\n    }\r\n}\r\n\r\n","import {Id, createPlayer} from \"../../data-types\";\r\nimport {\r\n    assoc,\r\n    dissoc,\r\n    lensPath,\r\n    lensProp,\r\n    mergeLeft,\r\n    over,\r\n    set\r\n} from \"ramda\";\r\nimport nanoid from \"nanoid\";\r\nimport t from \"tcomb\";\r\n\r\nconst ActionSetPlayer = t.interface({\r\n    firstName: t.String,\r\n    id: Id,\r\n    lastName: t.String,\r\n    matchCount: t.Number,\r\n    rating: t.Number\r\n});\r\nconst ActionAddPlayer = t.interface({\r\n    firstName: t.String,\r\n    lastName: t.String,\r\n    rating: t.Number\r\n});\r\nconst ActionDelPlayer = t.interface({\r\n    id: Id\r\n});\r\nconst ActionSetMatchcount = t.interface({\r\n    id: Id,\r\n    matchCount: t.Number\r\n});\r\nconst ActionSetRating = t.interface({\r\n    id: Id,\r\n    rating: t.Number\r\n});\r\nconst ActionLoadState = t.interface({state: t.Any});\r\nconst ActionTypes = t.union([\r\n    ActionSetPlayer,\r\n    ActionAddPlayer,\r\n    ActionDelPlayer,\r\n    ActionSetMatchcount,\r\n    ActionSetRating,\r\n    ActionLoadState\r\n]);\r\nActionTypes.dispatch = function (x) {\r\n    const typeToConstructor = {\r\n        \"ADD_PLAYER\": ActionAddPlayer,\r\n        \"DEL_PLAYER\": ActionDelPlayer,\r\n        \"LOAD_STATE\": ActionLoadState,\r\n        \"SET_PLAYER\": ActionSetPlayer,\r\n        \"SET_PLAYER_MATCHCOUNT\": ActionSetMatchcount,\r\n        \"SET_PLAYER_RATING\": ActionSetRating\r\n    };\r\n    return typeToConstructor[x.type];\r\n};\r\n\r\nexport default function playersReducer(state, action) {\r\n    ActionTypes(action);\r\n    const nextId = nanoid();\r\n    switch (action.type) {\r\n    case \"ADD_PLAYER\":\r\n        return assoc(\r\n            nextId,\r\n            createPlayer({\r\n                firstName: action.firstName,\r\n                id: nextId,\r\n                lastName: action.lastName,\r\n                rating: action.rating\r\n            }),\r\n            state\r\n        );\r\n    case \"SET_PLAYER\":\r\n        return over(\r\n            lensProp(action.id),\r\n            mergeLeft(\r\n                {\r\n                    firstName: action.firstName,\r\n                    lastName: action.lastName,\r\n                    matchCount: action.matchCount,\r\n                    rating: action.rating\r\n                }\r\n            ),\r\n            state\r\n        );\r\n    case \"DEL_PLAYER\":\r\n        // You should delete all avoid-pairs with the id too.\r\n        return dissoc(\r\n            lensPath(action.id),\r\n            state\r\n        );\r\n    case \"SET_PLAYER_MATCHCOUNT\":\r\n        return set(\r\n            lensPath([action.id, \"matchCount\"]),\r\n            action.matchCount,\r\n            state\r\n        );\r\n    case \"SET_PLAYER_RATING\":\r\n        return set(\r\n            lensPath([action.id, \"rating\"]),\r\n            action.rating,\r\n            state\r\n        );\r\n    case \"LOAD_STATE\":\r\n        return action.state;\r\n    default:\r\n        throw new Error(\"Unexpected action type\");\r\n    }\r\n}\r\n","// TODO: this file needs to be replaced with something more organized.\r\nimport {\r\n    AvoidPair,\r\n    BLACK,\r\n    DUMMY_ID,\r\n    Id,\r\n    Player,\r\n    Tournament,\r\n    WHITE,\r\n    createMatch\r\n} from \"../../data-types\";\r\nimport {getPlayerMaybe, pairPlayers} from \"../../pairing-scoring\";\r\nimport {assoc} from \"ramda\";\r\nimport t from \"tcomb\";\r\n\r\nexport function autoPair({\r\n    avoidList,\r\n    byeValue,\r\n    players,\r\n    roundId,\r\n    tourney\r\n}) {\r\n    t.list(AvoidPair)(avoidList);\r\n    t.Number(byeValue);\r\n    Tournament(tourney);\r\n    t.dict(Id, Player)(players);\r\n    t.Number(roundId);\r\n    const roundList = tourney.roundList;\r\n    const pairs = pairPlayers({\r\n        avoidList: avoidList,\r\n        byeQueue: tourney.byeQueue,\r\n        players,\r\n        roundId,\r\n        roundList\r\n    });\r\n    console.log(\"pairs\", pairs);\r\n    console.log(\"players\", players);\r\n    const getPlayer = (id) => getPlayerMaybe(players, id); // curry\r\n    const newMatchList = pairs.map(\r\n        (idsPair) => (\r\n            createMatch({\r\n                newRating: [\r\n                    getPlayer(idsPair[WHITE]).rating,\r\n                    getPlayer(idsPair[BLACK]).rating\r\n                ],\r\n                origRating: [\r\n                    getPlayer(idsPair[WHITE]).rating,\r\n                    getPlayer(idsPair[BLACK]).rating\r\n                ],\r\n                playerIds: [idsPair[WHITE], idsPair[BLACK]]\r\n            })\r\n        )\r\n    );\r\n    return newMatchList.reduce(\r\n        // Set match results for bye matches\r\n        function (acc, match) {\r\n            if (match.playerIds[WHITE] === DUMMY_ID) {\r\n                return acc.concat([assoc(\"result\", [0, byeValue], match)]);\r\n            }\r\n            if (match.playerIds[BLACK] === DUMMY_ID) {\r\n                return acc.concat([assoc(\"result\", [byeValue, 0], match)]);\r\n            }\r\n            return acc.concat([match]);\r\n        },\r\n        []\r\n    );\r\n}\r\n\r\nexport function manualPair(pair, byeValue) {\r\n    t.tuple([Player, Player])(pair);\r\n    const match = createMatch({\r\n        newRating: [pair[WHITE].rating, pair[BLACK].rating],\r\n        origRating: [pair[WHITE].rating, pair[BLACK].rating],\r\n        playerIds: [pair[WHITE].id, pair[BLACK].id]\r\n    });\r\n    if (pair[WHITE].id === DUMMY_ID) {\r\n        return assoc(\"result\", [0, byeValue], match);\r\n    }\r\n    if (pair[BLACK].id === DUMMY_ID) {\r\n        return assoc(\"result\", [byeValue, 0], match);\r\n    }\r\n    return match;\r\n}\r\n","import {AvoidPair, Id, Player} from \"../../data-types\";\r\nimport {\r\n    __,\r\n    append,\r\n    assoc,\r\n    concat,\r\n    filter,\r\n    findIndex,\r\n    lensPath,\r\n    lensProp,\r\n    mergeRight,\r\n    move,\r\n    over,\r\n    pipe,\r\n    propEq,\r\n    remove,\r\n    reverse,\r\n    set\r\n} from \"ramda\";\r\nimport {autoPair, manualPair} from \"./match-functions\";\r\nimport t from \"tcomb\";\r\n\r\nconst ActionAddRound = t.interface({});\r\nconst ActionDelLastRound = t.interface({});\r\nconst ActionAddRemoveTieBreak = t.interface({\r\n    id: t.Number\r\n});\r\nconst ActionMoveTieBreak = t.interface({\r\n    newIndex: t.Number,\r\n    oldIndex: t.Number\r\n});\r\nconst ActionSetTourneyPlayers = t.interface({\r\n    playerIds: t.list(Id)\r\n});\r\nconst ActionSetByeQueue = t.interface({\r\n    byeQueue: t.list(Id)\r\n});\r\nconst ActionAutoPair = t.interface({\r\n    avoidList: t.list(AvoidPair),\r\n    byeValue: t.Number,\r\n    players: t.dict(Id, Player),\r\n    roundId: t.Number\r\n});\r\nconst ActionManualPair = t.interface({\r\n    byeValue: t.Number,\r\n    pair: t.tuple([Player, Player]),\r\n    roundId: t.Number\r\n});\r\nconst ActionSetMatchResult = t.interface({\r\n    matchId: t.String,\r\n    newRating: t.tuple([t.Number, t.Number]),\r\n    result: t.tuple([t.Number, t.Number]),\r\n    roundId: t.Number\r\n});\r\nconst ActionEditMatch = t.interface({\r\n    matchId: t.String,\r\n    roundId: t.Number\r\n});\r\nconst ActionMoveMatch = t.interface({\r\n    newIndex: t.Number,\r\n    oldIndex: t.Number,\r\n    roundId: t.Number\r\n});\r\nconst ActionLoadState = t.interface({\r\n    state: t.Any\r\n});\r\nconst ActionTypes = t.union([\r\n    ActionAddRound,\r\n    ActionDelLastRound,\r\n    ActionAddRemoveTieBreak,\r\n    ActionAddRemoveTieBreak,\r\n    ActionMoveTieBreak,\r\n    ActionSetTourneyPlayers,\r\n    ActionSetByeQueue,\r\n    ActionAutoPair,\r\n    ActionManualPair,\r\n    ActionSetMatchResult,\r\n    ActionEditMatch,\r\n    ActionMoveMatch\r\n]);\r\nActionTypes.dispatch = function (action) {\r\n    const typeToConstructor = {\r\n        \"ADD_ROUND\": ActionAddRound,\r\n        \"ADD_TIEBREAK\": ActionAddRemoveTieBreak,\r\n        \"AUTO_PAIR\": ActionAutoPair,\r\n        \"DEL_LAST_ROUND\": ActionDelLastRound,\r\n        \"DEL_MATCH\": ActionEditMatch,\r\n        \"DEL_TIEBREAK\": ActionAddRemoveTieBreak,\r\n        \"MANUAL_PAIR\": ActionManualPair,\r\n        \"MOVE_MATCH\": ActionMoveMatch,\r\n        \"MOVE_TIEBREAK\": ActionMoveTieBreak,\r\n        \"SET_BYE_QUEUE\": ActionSetByeQueue,\r\n        \"SET_MATCH_RESULT\": ActionSetMatchResult,\r\n        \"SET_STATE\": ActionLoadState,\r\n        \"SET_TOURNEY_PLAYERS\": ActionSetTourneyPlayers,\r\n        \"SWAP_COLORS\": ActionEditMatch\r\n    };\r\n    return typeToConstructor[action.type];\r\n};\r\n\r\nexport default function tournamentReducer(state, action) {\r\n    ActionTypes(action);\r\n    switch (action.type) {\r\n    case \"ADD_ROUND\":\r\n        return over(\r\n            lensProp(\"roundList\"),\r\n            append([]),\r\n            state\r\n        );\r\n    case \"DEL_LAST_ROUND\":\r\n        return over(\r\n            lensProp(\"roundList\"),\r\n            remove(-1, 1),\r\n            state\r\n        );\r\n    case \"ADD_TIEBREAK\":\r\n        return over(\r\n            lensProp(\"tieBreaks\"),\r\n            append(action.id),\r\n            state\r\n        );\r\n    case \"DEL_TIEBREAK\":\r\n        return over(\r\n            lensProp(\"tieBreaks\"),\r\n            filter((id) => id !== action.id),\r\n            state\r\n        );\r\n    case \"MOVE_TIEBREAK\":\r\n        return over(\r\n            lensProp(\"tieBreaks\"),\r\n            move(action.oldIndex, action.newIndex),\r\n            state\r\n        );\r\n    case \"SET_TOURNEY_PLAYERS\":\r\n        return assoc(\r\n            \"playerIds\",\r\n            action.playerIds,\r\n            state\r\n        );\r\n    case \"SET_BYE_QUEUE\":\r\n        return assoc(\r\n            \"byeQueue\",\r\n            action.byeQueue,\r\n            state\r\n        );\r\n    case \"AUTO_PAIR\":\r\n        return over(\r\n            lensPath([\"roundList\", action.roundId]),\r\n            concat(\r\n                __,\r\n                autoPair({\r\n                    avoidList: action.avoidList,\r\n                    byeValue: action.byeValue,\r\n                    players: action.players,\r\n                    roundId: action.roundId,\r\n                    tourney: state\r\n                })\r\n            ),\r\n            state\r\n        );\r\n    case \"MANUAL_PAIR\":\r\n        return over(\r\n            lensPath([\"roundList\", action.roundId]),\r\n            append(manualPair(action.pair, action.byeValue)),\r\n            state\r\n        );\r\n    case \"SET_MATCH_RESULT\":\r\n        return pipe(\r\n            set(\r\n                lensPath([\r\n                    \"roundList\",\r\n                    action.roundId,\r\n                    findIndex(\r\n                        propEq(\"id\", action.matchId),\r\n                        state.roundList[action.roundId]\r\n                    ),\r\n                    \"result\"\r\n                ]),\r\n                action.result\r\n            ),\r\n            set(\r\n                lensPath([\r\n                    \"roundList\",\r\n                    action.roundId,\r\n                    findIndex(\r\n                        propEq(\"id\", action.matchId),\r\n                        state.roundList[action.roundId]\r\n                    ),\r\n                    \"newRating\"\r\n                ]),\r\n                action.newRating,\r\n            ),\r\n        )(state);\r\n    case \"DEL_MATCH\":\r\n        return over(\r\n            lensPath([\"roundList\", action.roundId]),\r\n            filter((match) => match.id !== action.matchId),\r\n            state\r\n        );\r\n    case \"SWAP_COLORS\":\r\n        return over(\r\n            lensPath([\r\n                \"roundList\",\r\n                action.roundId,\r\n                findIndex(\r\n                    propEq(\"id\", action.matchId),\r\n                    state.roundList[action.roundId]\r\n                )\r\n            ]),\r\n            (match) => mergeRight(\r\n                match,\r\n                {\r\n                    newRating: reverse(match.newRating),\r\n                    origRating: reverse(match.origRating),\r\n                    playerIds: reverse(match.playerIds),\r\n                    result: reverse(match.result)\r\n                }\r\n            ),\r\n            state\r\n        );\r\n    case \"MOVE_MATCH\":\r\n        return over(\r\n            lensPath([\"roundList\", action.roundId]),\r\n            move(action.oldIndex, action.newIndex),\r\n            state\r\n        );\r\n    case \"SET_STATE\":\r\n        console.log(\"setting state:\", action.state);\r\n        return action.state;\r\n    default:\r\n        throw new Error(\"Unexpected action type \" + action.type);\r\n    }\r\n}\r\n","import {Id, Player, Tournament} from \"../data-types\";\r\nimport options from \"./options.json\";\r\nimport players from \"./players.json\";\r\nimport t from \"tcomb\";\r\nimport tournaments from \"./tournaments.json\";\r\n\r\nt.dict(t.String, Tournament)(tournaments);\r\nt.dict(Id, Player)(players);\r\n\r\nexport default {\r\n    options,\r\n    players,\r\n    tournaments\r\n};\r\n","import \"localforage-getitems\";\r\nimport {genericDbReducer, optionsReducer} from \"./reducers\";\r\nimport {useEffect, useReducer, useState} from \"react\";\r\nimport demoData from \"../demo-data\";\r\nimport {difference} from \"ramda\";\r\nimport localForage from \"localforage\";\r\nimport {extendPrototype as removeItemsPrototype} from \"localforage-removeitems\";\r\nimport {extendPrototype as setItemsPrototype} from \"localforage-setitems\";\r\n\r\n/*******************************************************************************\r\n * Initialize the databases\r\n ******************************************************************************/\r\nsetItemsPrototype(localForage);\r\nremoveItemsPrototype(localForage);\r\nconst DATABASE_NAME = \"Chessahoochee\";\r\nconst optionsStore = localForage.createInstance({\r\n    name: DATABASE_NAME,\r\n    storeName: \"Options\"\r\n});\r\nconst playerStore = localForage.createInstance({\r\n    name: DATABASE_NAME,\r\n    storeName: \"Players\"\r\n});\r\nconst tourneyStore = localForage.createInstance({\r\n    name: DATABASE_NAME,\r\n    storeName: \"Tournaments\"\r\n});\r\n\r\nexport {optionsStore, playerStore, tourneyStore};\r\n\r\nexport function loadDemoDB() {\r\n    optionsStore.setItems(demoData.options);\r\n    playerStore.setItems(demoData.players);\r\n    tourneyStore.setItems(demoData.tournaments);\r\n    window.alert(\"Demo data loaded!\");\r\n}\r\n\r\n/*******************************************************************************\r\n * Generic database hooks\r\n ******************************************************************************/\r\nfunction useAllItemsFromDb(store) {\r\n    const [items, dispatch] = useReducer(genericDbReducer, {});\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    useEffect(\r\n        function loadItemsFromDb() {\r\n            store.getItems().then(function (results) {\r\n                console.log(\"loaded items from\", store._config.storeName);\r\n                dispatch({state: results, type: \"LOAD_STATE\"});\r\n                setIsLoaded(true);\r\n            });\r\n        },\r\n        [store]\r\n    );\r\n    useEffect(\r\n        function saveChangesToDb() {\r\n            if (!isLoaded) {\r\n                return;\r\n            }\r\n            store.setItems(items).then(function () {\r\n                console.log(\"saved items to\", store._config.storeName);\r\n            });\r\n            store.keys().then(function (keys) {\r\n                const deleted = difference(keys, Object.keys(items));\r\n                if (deleted.length > 0 ) {\r\n                    store.removeItems(deleted).then(function () {\r\n                        console.log(\"Deleted \" + deleted.length + \" items.\");\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        [store, items, isLoaded]\r\n    );\r\n    return [items, dispatch];\r\n}\r\n\r\n/*******************************************************************************\r\n * Player & tournament wrapper hooks\r\n ******************************************************************************/\r\nexport function useAllPlayersDb() {\r\n    return useAllItemsFromDb(playerStore);\r\n}\r\n\r\nexport function useAllTournamentsDb() {\r\n    return useAllItemsFromDb(tourneyStore);\r\n}\r\n\r\n/*******************************************************************************\r\n * Options database hooks\r\n ******************************************************************************/\r\nexport function useOptionsDb() {\r\n    const [options, dispatch] = useReducer(optionsReducer, demoData.options);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    useEffect(\r\n        function initOptionsFromDb() {\r\n            optionsStore.iterate(function (value, key) {\r\n                dispatch({option: key, type: \"SET_OPTION\", value: value});\r\n            }).then(function () {\r\n                setIsLoaded(true);\r\n            });\r\n        },\r\n        []\r\n    );\r\n    useEffect(\r\n        function writeChangesToDb() {\r\n            if (!isLoaded) {\r\n                return;\r\n            }\r\n            optionsStore.setItems(options);\r\n        },\r\n        [options, isLoaded]\r\n    );\r\n    return [options, dispatch];\r\n}\r\n","import React, {\r\n    createContext,\r\n    useContext,\r\n    useEffect,\r\n    useReducer,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    getAllPlayersFromMatches,\r\n    getPlayerMaybe,\r\n    rounds2Matches\r\n} from \"../pairing-scoring\";\r\nimport {playerStore, tourneyStore} from \"./db\";\r\nimport {playersReducer, tournamentReducer} from \"./reducers\";\r\nimport PropTypes from \"prop-types\";\r\nimport {symmetricDifference} from \"ramda\";\r\n\r\nconst TournamentContext = createContext(null);\r\n\r\nexport function useTournament() {\r\n    const state = useContext(TournamentContext);\r\n    return state;\r\n}\r\n\r\nexport function TournamentProvider({children, tourneyId}) {\r\n    const [tourney, tourneyDispatch] = useReducer(tournamentReducer, {});\r\n    const [players, playersDispatch] = useReducer(playersReducer, {});\r\n    const [isTourneyLoaded, setIsTourneyLoaded] = useState(false);\r\n    const [isPlayersLoaded, setIsPlayersLoaded] = useState(false);\r\n    useEffect(\r\n        function initTourneyFromDb() {\r\n            tourneyStore.getItem(tourneyId).then(function (value) {\r\n                console.log(\"loaded:\", tourneyId);\r\n                tourneyDispatch({state: value, type: \"SET_STATE\"});\r\n                setIsTourneyLoaded(true);\r\n            });\r\n        },\r\n        [tourneyId]\r\n    );\r\n    useEffect(\r\n        function hydrateTourneyPlayersFromDb() {\r\n            if (!tourney.roundList || !tourney.playerIds) {\r\n                return; // the tournament hasn't been loaded yet\r\n            }\r\n            // Include players who have played matches but left the tournament,\r\n            // as well as players who are registered but havne't played yet.\r\n            const allTheIds = getAllPlayersFromMatches(\r\n                rounds2Matches(tourney.roundList)\r\n            ).concat(\r\n                tourney.playerIds\r\n            );\r\n            // If there are no ids, update the player state and exit early.\r\n            if (allTheIds.length === 0) {\r\n                // This check prevents an infinite loop & memory leak.\r\n                if (Object.keys(players).length !== 0) {\r\n                    playersDispatch({state: {}, type: \"LOAD_STATE\"});\r\n                }\r\n                setIsPlayersLoaded(true);\r\n                return;\r\n            }\r\n            playerStore.getItems(allTheIds).then(function (values) {\r\n                // This safeguards against trying to fetch dummy IDs or IDs from\r\n                // deleted players. If we updated without this condition, then\r\n                // this `useEffect` would trigger an infinite loop and a memory\r\n                // leak.\r\n                const unChangedPlayers = symmetricDifference(\r\n                    Object.keys(values),\r\n                    Object.keys(players)\r\n                );\r\n                console.log(\"unchanged players:\", unChangedPlayers);\r\n                if (unChangedPlayers.length !== 0) {\r\n                    console.log(\"hydrated player data\");\r\n                    playersDispatch({state: values, type: \"LOAD_STATE\"});\r\n                }\r\n                setIsPlayersLoaded(true);\r\n            }).catch(function (error) {\r\n                console.error(\"Couldn't load ids:\", allTheIds);\r\n                console.error(error);\r\n            });\r\n        },\r\n        [tourney.roundList, players, tourney.playerIds]\r\n    );\r\n    useEffect(\r\n        function saveTourneyToDb() {\r\n            if (!isTourneyLoaded) {\r\n                return;\r\n            }\r\n            tourneyStore.setItem(tourneyId, tourney).catch(function (error) {\r\n                console.log(\"error saving tourney:\", tourneyId, error);\r\n            });\r\n        },\r\n        [tourneyId, tourney, isTourneyLoaded]\r\n    );\r\n    useEffect(\r\n        function savePlayersToDb() {\r\n            if (!isPlayersLoaded) {\r\n                return;\r\n            }\r\n            playerStore.setItems(players).then(function (values) {\r\n                console.log(\"saved player changes to DB:\", values);\r\n            }).catch(function (error) {\r\n                console.log(\"couldn't save players to DB:\", error);\r\n            });\r\n        },\r\n        [players, isPlayersLoaded]\r\n    );\r\n    const getPlayer = (id) => getPlayerMaybe(players, id); // curry\r\n    if (!isTourneyLoaded || !isPlayersLoaded) {\r\n        return <div>Loading...</div>;\r\n    }\r\n    return (\r\n        <TournamentContext.Provider\r\n            value={{\r\n                getPlayer,\r\n                players,\r\n                playersDispatch,\r\n                tourney,\r\n                tourneyDispatch\r\n            }}\r\n        >\r\n            {children}\r\n        </TournamentContext.Provider>\r\n    );\r\n}\r\nTournamentProvider.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    tourneyId: PropTypes.string.isRequired\r\n};\r\n","import {\r\n    TournamentProvider,\r\n    useTournament\r\n} from \"./tournament-provider\";\r\nimport {\r\n    useAllPlayersDb,\r\n    useAllTournamentsDb,\r\n    useOptionsDb\r\n    // usePlayersDb,\r\n    // useTournamentDb\r\n} from \"./db\";\r\nimport {useEffect} from \"react\";\r\n\r\nexport function useDocumentTitle(title) {\r\n    useEffect(\r\n        function () {\r\n            const origTitle = document.title;\r\n            document.title = \"Chessahoochee: \" + title;\r\n            return function () {\r\n                document.title = origTitle;\r\n            };\r\n        },\r\n        [title]\r\n    );\r\n}\r\n\r\nexport {\r\n    useAllPlayersDb,\r\n    useAllTournamentsDb,\r\n    useOptionsDb,\r\n    useTournament,\r\n    TournamentProvider\r\n};\r\n","import {\r\n    createStandingList,\r\n    getPerformanceRatings,\r\n    getResultsByOpponent,\r\n    rounds2Matches\r\n} from \"../../pairing-scoring\";\r\nimport Icons from \"../icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {assoc} from \"ramda\";\r\nimport numeral from \"numeral\";\r\nimport style from \"./scores.module.css\";\r\nimport {useTournament} from \"../../hooks\";\r\n\r\nexport default function Crosstable(props) {\r\n    const {tourney, getPlayer} = useTournament();\r\n    const {tieBreaks, roundList} = tourney;\r\n    const matches = rounds2Matches(roundList);\r\n    const oppResults = (id) => getResultsByOpponent(matches, id); // curry\r\n    const [standings] = createStandingList(tieBreaks, roundList);\r\n    const opponentScores = standings.reduce(\r\n        (acc, {id}) => assoc(id, oppResults(id), acc),\r\n        {}\r\n    );\r\n\r\n    function getXScore(player1Id, player2Id) {\r\n        if (player1Id === player2Id) {\r\n            return <Icons.X/>;\r\n        }\r\n        const result = opponentScores[player1Id][player2Id];\r\n        if (result === undefined) {\r\n            return null;\r\n        }\r\n        return numeral(result).format(\"1/2\");\r\n    }\r\n\r\n    function getRatingChange(playerId) {\r\n        const [\r\n            firstRating,\r\n            lastRating\r\n        ] = getPerformanceRatings(matches, playerId);\r\n        const change = numeral(lastRating - firstRating).format(\"+0\");\r\n        return `${lastRating}\\xA0(${change})`; // \\xA0 = &nsbp;\r\n    }\r\n\r\n    return (\r\n        <table className={style.table}>\r\n            <caption>Crosstable</caption>\r\n            <tbody>\r\n                <tr>\r\n                    <th>Rank</th>\r\n                    <th>Name</th>\r\n                    {/* Display a rank as a shorthand for each player. */}\r\n                    {Object.keys(standings).map((rank) =>\r\n                        <th key={rank}>\r\n                            {Number(rank) + 1}\r\n                        </th>\r\n                    )}\r\n                    <th>Score</th>\r\n                    <th>Rating</th>\r\n                </tr>\r\n                {/* Output a row for each player */}\r\n                {standings.map((standing, index)=>\r\n                    <tr key={index} className={style.row}>\r\n                        <th className={style.rank} scope=\"col\">\r\n                            {index + 1}\r\n                        </th>\r\n                        <th className={style.playerName} scope=\"row\">\r\n                            {getPlayer(standing.id).firstName}&nbsp;\r\n                            {getPlayer(standing.id).lastName}\r\n                        </th>\r\n                        {/* Output a cell for each other player */}\r\n                        {standings.map((opponent, index2) =>\r\n                            <td key={index2} className=\"table__number\">\r\n                                {getXScore(standing.id, opponent.id)}\r\n                            </td>\r\n                        )}\r\n                        {/* Output their score and rating change */}\r\n                        <td className=\"table__number\">\r\n                            {numeral(standing.score).format(\"1/2\")}\r\n                        </td>\r\n                        <td className=\"table__number\">\r\n                            {getRatingChange(standing.id)}\r\n                        </td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\nCrosstable.propTypes = {\r\n    tourneyId: PropTypes.string\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport styles from \"./utility.module.css\";\r\n// import {usePlayers} from \"../state\";\r\n\r\nexport const Button = ({children, action}) => (\r\n    <button onClick={action}>\r\n        {children}\r\n    </button>\r\n);\r\nButton.propTypes = {\r\n    action: PropTypes.func.isRequired,\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\nexport const BackButton = ({action}) => (\r\n    <Button action={action}>&lt; Back</Button>\r\n);\r\nBackButton.propTypes = {\r\n    action: PropTypes.func.isRequired\r\n};\r\n\r\nexport const OpenButton = ({action}) => (\r\n    <Button action={action}>Open &gt;</Button>\r\n);\r\nOpenButton.propTypes = {\r\n    action: PropTypes.func.isRequired\r\n};\r\n\r\nexport function Panel({children, style}) {\r\n    return (\r\n        <div className={styles.panel} style={{...style}}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\nPanel.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport function PanelContainer(props) {\r\n    return (\r\n        <div {...props} className={styles.panels}>\r\n            {props.children}\r\n            {/* {React.Children.map(props.children, (child) => child)} */}\r\n        </div>\r\n    );\r\n}\r\nPanelContainer.propTypes = {\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\n// export function PlayerLink({id, firstName, lastName}) {\r\n//     const {getPlayer} = usePlayers();\r\n//     const player = getPlayer(id);\r\n//     const name = (function () {\r\n//         if (firstName && lastName) {\r\n//             return player.firstName + \" \" + player.lastName;\r\n//         } else if (firstName && !lastName) {\r\n//             return player.firstName;\r\n//         } else if (!firstName && lastName) {\r\n//             return player.lastName;\r\n//         } else {\r\n//             return null;\r\n//         }\r\n//     }());\r\n//     if (id === DUMMY_ID) { // there's no bye player profile\r\n//         return name;\r\n//     }\r\n//     if (!name) {\r\n//         return null;\r\n//     }\r\n//     return (\r\n//         <Link to={\"/players/\" + id}>\r\n//             {firstName && getPlayer(id).firstName}{\" \"}\r\n//             {lastName && getPlayer(id).lastName}\r\n//         </Link>\r\n//     );\r\n// }\r\n// PlayerLink.propTypes = {\r\n//     firstName: PropTypes.bool,\r\n//     id: PropTypes.number.isRequired,\r\n//     lastName: PropTypes.bool\r\n// };\r\n\r\n/*******************************************************************************\r\n * Non-JSX functions\r\n ******************************************************************************/\r\nexport function findById(id, list) {\r\n    return list.filter((x) => x.id === id)[0];\r\n}\r\n\r\nexport function findIndexById(id, list) {\r\n    return list.indexOf(findById(id, list));\r\n}\r\n","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {assoc} from \"ramda\";\r\n\r\nexport default function NewPlayer({dispatch}) {\r\n    const newPlayerDefault = {firstName: \"\", lastName: \"\", rating: 1200};\r\n    const [newPlayerData, setNewPlayerdata] = useState(newPlayerDefault);\r\n\r\n    const handleSubmit = function (event) {\r\n        event.preventDefault();\r\n        const {firstName, lastName, rating} = newPlayerData;\r\n        setNewPlayerdata(newPlayerDefault);\r\n        dispatch({firstName, lastName, rating, type: \"ADD_PLAYER\"});\r\n    };\r\n\r\n    const updateField = function (event) {\r\n        event.preventDefault();\r\n        const {name, value} = event.currentTarget;\r\n        setNewPlayerdata((prevState) => assoc(name, value, prevState));\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <fieldset>\r\n                <legend>Register a new player</legend>\r\n                <p>\r\n                    <label htmlFor=\"firstName\">First name</label>\r\n                    <input\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                        value={newPlayerData.firstName}\r\n                        required\r\n                        onChange={updateField}\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"lastName\">Last name</label>\r\n                    <input\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                        value={newPlayerData.lastName}\r\n                        required\r\n                        onChange={updateField}\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"rating\">Rating</label>\r\n                    <input\r\n                        name=\"rating\"\r\n                        type=\"number\"\r\n                        value={newPlayerData.rating}\r\n                        required\r\n                        onChange={updateField}\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <input type=\"submit\" value=\"Add\"/>\r\n                </p>\r\n            </fieldset>\r\n        </form>\r\n    );\r\n}\r\nNewPlayer.propTypes = {\r\n    dispatch: PropTypes.func.isRequired\r\n};\r\n","import {useAllPlayersDb, useTournament} from \"../../../hooks\";\r\nimport NewPlayer from \"../../new-player\";\r\nimport React from \"react\";\r\n\r\nexport default function Selecting(props) {\r\n    const {tourney, tourneyDispatch} = useTournament();\r\n    const [players, allPlayersDispatch] = useAllPlayersDb();\r\n\r\n    function togglePlayer(event) {\r\n        const id = event.target.value;\r\n        if (event.target.checked) {\r\n            tourneyDispatch({\r\n                playerIds: tourney.playerIds.concat([id]),\r\n                type: \"SET_TOURNEY_PLAYERS\"\r\n            });\r\n        } else {\r\n            tourneyDispatch({\r\n                playerIds: tourney.playerIds.filter((pId) => pId !== id),\r\n                type: \"SET_TOURNEY_PLAYERS\"\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"toolbar\">\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => tourneyDispatch({\r\n                        playerIds: Object.keys(players),\r\n                        type: \"SET_TOURNEY_PLAYERS\"\r\n                    })}\r\n                >\r\n                    Select all\r\n                </button>\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => tourneyDispatch({\r\n                        playerIds: [],\r\n                        type: \"SET_TOURNEY_PLAYERS\"\r\n                    })}\r\n                >\r\n                    Select none\r\n                </button>\r\n            </div>\r\n            <table>\r\n                <caption>Select players</caption>\r\n                <thead>\r\n                    <tr>\r\n                        <th>First name</th>\r\n                        <th>Last name</th>\r\n                        <th>Select</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Object.values(players).map(({id, firstName, lastName}) =>\r\n                        <tr key={id}>\r\n                            <td>{firstName}</td>\r\n                            <td>{lastName}</td>\r\n                            <td>\r\n                                <input\r\n                                    checked={tourney.playerIds.includes(id)}\r\n                                    type=\"checkbox\"\r\n                                    value={id}\r\n                                    onChange={togglePlayer}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n            <NewPlayer dispatch={allPlayersDispatch}/>\r\n        </div>\r\n    );\r\n}\r\nSelecting.propTypes = {};\r\n","import {Panel, PanelContainer} from \"../../utility\";\r\nimport React, {useState} from \"react\";\r\nimport {hasHadBye, rounds2Matches} from \"../../../pairing-scoring\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport Icons from \"../../icons\";\r\nimport Selecting from \"./selecting\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function PlayerSelect(props) {\r\n    const {tourney, tourneyDispatch, players} = useTournament();\r\n    const {playerIds, roundList, byeQueue} = tourney;\r\n    const dispatch = tourneyDispatch;\r\n    const [isSelecting, setIsSelecting] = useState(playerIds.length === 0);\r\n    const matches = rounds2Matches(roundList);\r\n    return (\r\n        <div className=\"content-area\">\r\n            <div className=\"toolbar\">\r\n                <button onClick={() => setIsSelecting(true)}>\r\n                    <Icons.Edit /> Edit player roster\r\n                </button>\r\n            </div>\r\n            <PanelContainer>\r\n                <Panel>\r\n                    <table>\r\n                        <caption>Current roster</caption>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan={2}>Name</th>\r\n                                <th>Options</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {Object.values(players).map((p) => (\r\n                                <tr key={p.id} className={p.type + \" player\"}>\r\n                                    <td>{p.firstName}</td>\r\n                                    <td>{p.lastName}</td>\r\n                                    <td>\r\n                                        <button\r\n                                            className=\"button-micro\"\r\n                                            disabled={byeQueue.includes(p.id)}\r\n                                            onClick={() =>\r\n                                                dispatch({\r\n                                                    byeQueue:\r\n                                                        byeQueue.concat([p.id]),\r\n                                                    type: \"SET_BYE_QUEUE\"\r\n                                                })\r\n                                            }\r\n                                        >\r\n                                            Bye signup\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </Panel>\r\n                <Panel>\r\n                    <h3>Bye queue</h3>\r\n                    {byeQueue.length === 0 &&\r\n                        <p>No players have signed up for a bye round.</p>\r\n                    }\r\n                    <ol>\r\n                        {byeQueue.map((pId) => (\r\n                            <li\r\n                                key={pId}\r\n                                className={\r\n                                    (hasHadBye(pId, matches))\r\n                                    ? \"disabled\"\r\n                                    : \"\"\r\n                                }\r\n                            >\r\n                                {players[pId].firstName}{\" \"}\r\n                                {players[pId].lastName}{\" \"}\r\n                                <button\r\n                                    className=\"button-micro\"\r\n                                    onClick={() =>\r\n                                        dispatch({\r\n                                            byeQueue: byeQueue.filter(\r\n                                                (id) => pId !== id\r\n                                            ),\r\n                                            type: \"SET_BYE_QUEUE\"\r\n                                        })\r\n                                    }\r\n                                >\r\n                                    Remove\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                </Panel>\r\n                <Dialog isOpen={isSelecting}>\r\n                    <button\r\n                        className=\"button-micro button-primary\"\r\n                        onClick={() => setIsSelecting(false)}\r\n                    >\r\n                        Done\r\n                    </button>\r\n                    <Selecting />\r\n                </Dialog>\r\n            </PanelContainer>\r\n        </div>\r\n    );\r\n}\r\nPlayerSelect.propTypes = {};\r\n","// this component should eventually replace player-match-info.jsx\r\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {createPlayerStats} from \"../../../pairing-scoring\";\r\n\r\nexport default function PlayerInfo({playerId, roundId}) {\r\n    const {tourney, players} = useTournament();\r\n    const [options] = useOptionsDb();\r\n    const {\r\n        profile,\r\n        rating,\r\n        score,\r\n        colorBalance,\r\n        hasHadBye,\r\n        opponentHistory,\r\n        avoidList\r\n    } = createPlayerStats({\r\n        avoidList: options.avoidPairs,\r\n        id: playerId,\r\n        players,\r\n        roundId,\r\n        roundList: tourney.roundList\r\n    });\r\n    const prettyBalance = (function () {\r\n        if (colorBalance < 0) {\r\n            return \"White +\" + Math.abs(colorBalance);\r\n        } else if (colorBalance > 0) {\r\n            return \"Black +\" + colorBalance;\r\n        } else {\r\n            return \"Even\";\r\n        }\r\n    }());\r\n    return (\r\n        <dl className=\"player-card\">\r\n            <h3>\r\n                {profile.firstName} {profile.lastName}\r\n            </h3>\r\n            <p>Score: {score}</p>\r\n            <p>Rating: {rating}</p>\r\n            <p>Color balance: {prettyBalance}</p>\r\n            <p>Has had a bye round: {hasHadBye ? \"Yes\" : \"No\"}</p>\r\n            <p>Opponent history:</p>\r\n            <ol>\r\n                {opponentHistory.map((opId) => (\r\n                    <li key={opId}>\r\n                        {players[opId].firstName}{\" \"}\r\n                        {players[opId].lastName}\r\n                    </li>\r\n                ))}\r\n            </ol>\r\n            <p>\r\n                Players to avoid:\r\n            </p>\r\n            <ol>\r\n                {avoidList.map((pId) => (\r\n                    <li key={pId}>\r\n                        {players[pId].firstName} {players[pId].lastName}\r\n                    </li>\r\n                ))}\r\n            </ol>\r\n        </dl>\r\n    );\r\n}\r\nPlayerInfo.propTypes = {\r\n    playerId: PropTypes.string,\r\n    roundId: PropTypes.number\r\n};\r\n","import {BLACK, DUMMY_ID, WHITE, dummyPlayer} from \"../../../data-types\";\r\nimport {assoc, lensIndex, set} from \"ramda\";\r\nimport Hidden from \"@reach/visually-hidden\";\r\nimport Icons from \"../../icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {getUnmatched} from \"../../../pairing-scoring\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function SelectList({roundId, stagedPlayers, setStagedPlayers}) {\r\n    const {tourney, players} = useTournament();\r\n    // only use unmatched players if this is the last round.\r\n    const unmatched = (roundId === tourney.roundList.length - 1)\r\n        ? getUnmatched(tourney, players, roundId)\r\n        : {};\r\n\r\n    function selectPlayer(id) {\r\n        if (stagedPlayers[WHITE] === null) {\r\n            setStagedPlayers(\r\n                (prevState) => set(lensIndex(WHITE), id, prevState)\r\n            );\r\n        } else if (stagedPlayers[BLACK] === null) {\r\n            setStagedPlayers(\r\n                (prevState) => set(lensIndex(BLACK), id, prevState)\r\n            );\r\n        }\r\n        // else... nothing happens\r\n    }\r\n\r\n    const unmatchedCount = Object.keys(unmatched).length;\r\n\r\n    // make a new list so as not to affect auto-pairing\r\n    const unmatchedWithDummy = (\r\n        (unmatchedCount % 2 !== 0)\r\n        ? assoc(DUMMY_ID, dummyPlayer, unmatched)\r\n        : unmatched\r\n    );\r\n    if (unmatchedCount === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {Object.values(unmatchedWithDummy).map(\r\n                    ({id, firstName, lastName}) => (\r\n                        <li key={id}>\r\n                            <button\r\n                                className=\"button-ghost\"\r\n                                disabled={\r\n                                    !stagedPlayers.includes(null)\r\n                                    || stagedPlayers.includes(id)\r\n                                }\r\n                                onClick={() => selectPlayer(id)}\r\n                            >\r\n                                <Icons.UserPlus/>\r\n                                <Hidden>\r\n                                    Select {firstName} {lastName}\r\n                                </Hidden>\r\n                            </button>\r\n                            {\" \"}\r\n                            {firstName} {lastName}\r\n                        </li>\r\n                    )\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nSelectList.propTypes = {\r\n    roundId: PropTypes.number,\r\n    setStagedPlayers: PropTypes.func,\r\n    stagedPlayers: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n","import {BLACK, WHITE} from \"../../../data-types\";\r\nimport React, {Fragment} from \"react\";\r\nimport {lensIndex, set} from \"ramda\";\r\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\r\nimport Icons from \"../../icons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Stage({\r\n    roundId,\r\n    stagedPlayers,\r\n    setStagedPlayers\r\n}) {\r\n    const {tourneyDispatch, players} = useTournament();\r\n    const dispatch = tourneyDispatch;\r\n    const [options] = useOptionsDb();\r\n    const [white, black] = stagedPlayers;\r\n\r\n    function unstage(color) {\r\n        setStagedPlayers((prevState) => set(lensIndex(color), null, prevState));\r\n    }\r\n\r\n    function match() {\r\n        dispatch({\r\n            byeValue: options.byeValue,\r\n            pair: [players[white], players[black]],\r\n            roundId,\r\n            type: \"MANUAL_PAIR\"\r\n        });\r\n        setStagedPlayers([null, null]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Selected for matching:</h2>\r\n            <p>\r\n                White:{\" \"}\r\n                {white !== null &&\r\n                    <Fragment>\r\n                        {players[white].firstName}{\" \"}\r\n                        {players[white].lastName}{\" \"}\r\n                        <button onClick={() => unstage(WHITE)}>\r\n                            <Icons.UserMinus /> Remove\r\n                        </button>\r\n                    </Fragment>\r\n                }\r\n            </p>\r\n            <p>\r\n                Black:{\" \"}\r\n                {black !== null &&\r\n                    <Fragment>\r\n                        {players[black].firstName}{\" \"}\r\n                        {players[black].lastName}{\" \"}\r\n                        <button onClick={() => unstage(BLACK)}>\r\n                            <Icons.UserMinus /> Remove\r\n                        </button>\r\n                    </Fragment>\r\n                }\r\n            </p>\r\n            <button\r\n                disabled={\r\n                    stagedPlayers.every((id) => id === null)\r\n                }\r\n                onClick={() => setStagedPlayers(\r\n                    (prevState) => ([prevState[BLACK], prevState[WHITE]])\r\n                )}\r\n            >\r\n                <Icons.Repeat/> Swap colors\r\n            </button>{\" \"}\r\n            <button\r\n                disabled={stagedPlayers.includes(null)}\r\n                onClick={match}\r\n            >\r\n                <Icons.Check/> Match selected\r\n            </button>{\" \"}\r\n        </div>\r\n    );\r\n}\r\nStage.propTypes = {\r\n    roundId: PropTypes.number,\r\n    setStagedPlayers: PropTypes.func,\r\n    stagedPlayers: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n","import {Panel, PanelContainer} from \"../../utility\";\r\nimport React, {useState} from \"react\";\r\nimport {\r\n    calcPairIdeal,\r\n    createPlayerStats,\r\n    maxPriority,\r\n    setUpperHalves,\r\n    sortPlayersForPairing\r\n} from \"../../../pairing-scoring\";\r\nimport {map, pipe} from \"ramda\";\r\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport PlayerInfo from \"./player-info\";\r\nimport PropTypes from \"prop-types\";\r\nimport SelectList  from \"./select-list\";\r\nimport Selecting from \"../player-select/selecting\";\r\nimport Stage from \"./stage\";\r\nimport {findById} from \"../../utility\";\r\nimport {getUnmatched} from \"../../../pairing-scoring\";\r\nimport numeral from \"numeral\";\r\n\r\nexport default function PairPicker({roundId}) {\r\n    const [stagedPlayers, setStagedPlayers] = useState([null, null]);\r\n    const [options] = useOptionsDb();\r\n    const {tourney, players, tourneyDispatch} = useTournament();\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const statsList = React.useMemo(\r\n        () => (\r\n            pipe(\r\n                Object.values,\r\n                map((player) => (\r\n                    createPlayerStats({\r\n                        avoidList: options.avoidPairs,\r\n                        id: player.id,\r\n                        players,\r\n                        roundId,\r\n                        roundList: tourney.roundList\r\n                    })\r\n                )),\r\n                sortPlayersForPairing,\r\n                setUpperHalves\r\n            )(players)\r\n        ),\r\n        [\r\n            tourney.roundList,\r\n            roundId,\r\n            options.avoidPairs,\r\n            players\r\n        ]\r\n    );\r\n    const matchIdeal = React.useMemo(\r\n        function () {\r\n            if (stagedPlayers.includes(null)) {\r\n                return null;\r\n            }\r\n            const player0stats = findById(stagedPlayers[0], statsList);\r\n            const player1stats = findById(stagedPlayers[1], statsList);\r\n            const ideal = calcPairIdeal(player0stats, player1stats);\r\n            return numeral(ideal / maxPriority).format(\"%\");\r\n        },\r\n        [stagedPlayers, statsList]\r\n    );\r\n    const unmatched = (roundId === tourney.roundList.length - 1)\r\n        ? getUnmatched(tourney, players, roundId)\r\n        : {};\r\n    const unmatchedCount = Object.keys(unmatched).length;\r\n    return (\r\n        <div className=\"content-area\">\r\n            <div className=\"toolbar\">\r\n                <button\r\n                    className=\"button-primary\"\r\n                    disabled={unmatchedCount === 0}\r\n                    onClick={() => tourneyDispatch({\r\n                        avoidList: options.avoidPairs,\r\n                        byeValue: options.byeValue,\r\n                        players: unmatched,\r\n                        roundId,\r\n                        type: \"AUTO_PAIR\"\r\n                    })}\r\n                >\r\n                    Auto-pair unmatched players\r\n                </button>{\" \"}\r\n                <button onClick={() => setIsModalOpen(true)}>\r\n                    Add or remove players from the roster.\r\n                </button>\r\n            </div>\r\n            <PanelContainer>\r\n                <Panel>\r\n                    <SelectList\r\n                        roundId={roundId}\r\n                        setStagedPlayers={setStagedPlayers}\r\n                        stagedPlayers={stagedPlayers}\r\n                    />\r\n                </Panel>\r\n                <Panel>\r\n                    <Stage\r\n                        roundId={roundId}\r\n                        setStagedPlayers={setStagedPlayers}\r\n                        stagedPlayers={stagedPlayers}\r\n                    />\r\n                    <PanelContainer>\r\n                        {stagedPlayers.map((id) =>\r\n                            id !== null && (\r\n                                <Panel key={id}>\r\n                                    <PlayerInfo\r\n                                        playerId={id}\r\n                                        roundId={roundId}\r\n                                    />\r\n                                </Panel>\r\n                            )\r\n                        )}\r\n                    </PanelContainer>\r\n                    Match ideal: {matchIdeal}\r\n                </Panel>\r\n            </PanelContainer>\r\n            <Dialog isOpen={isModalOpen}>\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => setIsModalOpen(false)}\r\n                >\r\n                    Done\r\n                </button>\r\n                <Selecting />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\nPairPicker.propTypes = {\r\n    roundId: PropTypes.number,\r\n    tourneyId: PropTypes.number\r\n};\r\n","import {useOptionsDb, useTournament} from \"../../../hooks\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {createPlayerStats} from \"../../../pairing-scoring\";\r\nimport {findById} from \"../../utility\";\r\nimport numeral from \"numeral\";\r\n\r\nexport default function PlayerMatchInfo({matchId, color, roundId}) {\r\n    const {tourney, players, getPlayer} = useTournament();\r\n    const matchList = tourney.roundList[roundId];\r\n    const [options] = useOptionsDb();\r\n    const match = findById(matchId, matchList);\r\n    const playerData = createPlayerStats({\r\n        avoidList: options.avoidPairs,\r\n        id: match.playerIds[color],\r\n        players,\r\n        roundId,\r\n        roundList: tourney.roundList\r\n    });\r\n    const colorBalance = playerData.colorBalance;\r\n    const prettyBalance = (function () {\r\n        if (colorBalance < 0) {\r\n            return \"White +\" + Math.abs(colorBalance);\r\n        } else if (colorBalance > 0) {\r\n            return \"Black +\" + colorBalance;\r\n        } else {\r\n            return \"Even\";\r\n        }\r\n    }());\r\n    return (\r\n        <dl className=\"player-card\">\r\n            <h3>\r\n                {playerData.profile.firstName} {playerData.profile.lastName}\r\n            </h3>\r\n            <dt>Score</dt>\r\n            <dd>{playerData.score}</dd>\r\n            <dt>Rating</dt>\r\n            <dd data-testid={`rating-${playerData.id}`}>\r\n                {match.origRating[color]} (\r\n                {numeral(\r\n                    match.newRating[color] - match.origRating[color]\r\n                ).format(\"+0\")}\r\n                )\r\n            </dd>\r\n            <dt>Color balance</dt>\r\n            <dd>{prettyBalance}</dd>\r\n            <dt>Has had a bye round</dt>\r\n            <dd>{playerData.hasHadBye ? \"Yes\" : \"No\"}</dd>\r\n            <dt>Opponent history</dt>\r\n            <dd>\r\n                <ol>\r\n                    {playerData.opponentHistory.map((opId) => (\r\n                        <li key={opId}>\r\n                            {getPlayer(opId).firstName}{\" \"}\r\n                            {getPlayer(opId).lastName}\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </dd>\r\n        </dl>\r\n    );\r\n}\r\nPlayerMatchInfo.propTypes = {\r\n    color: PropTypes.number,\r\n    matchId: PropTypes.string,\r\n    roundId: PropTypes.number\r\n};\r\n","import \"@reach/dialog/styles.css\";\r\nimport {BLACK, DUMMY_ID, WHITE} from \"../../../data-types\";\r\nimport {Panel, PanelContainer} from \"../../utility\";\r\nimport React, {useState} from \"react\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport Hidden from \"@reach/visually-hidden\";\r\nimport Icons from \"../../icons\";\r\nimport PlayerMatchInfo from \"./player-match-info\";\r\nimport PropTypes from \"prop-types\";\r\nimport {calcNewRatings} from \"../../../pairing-scoring\";\r\nimport {useTournament} from \"../../../hooks\";\r\nimport {winnerSelect} from \"./round.module.css\";\r\n\r\nexport default function MatchRow({\r\n    pos,\r\n    match,\r\n    roundId,\r\n    selectedMatch,\r\n    setSelectedMatch\r\n}) {\r\n    const {\r\n        tourney,\r\n        tourneyDispatch,\r\n        players,\r\n        getPlayer,\r\n        playersDispatch\r\n    } = useTournament();\r\n    const dispatch = tourneyDispatch;\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const resultCode = (function () {\r\n        if (match.result[0] > match.result[1]) {\r\n            return \"WHITE\";\r\n        } else if (match.result[1] > match.result[0]) {\r\n            return \"BLACK\";\r\n        } else if (match.result.every((x) => x === 0.5)) {\r\n            return \"DRAW\";\r\n        } else {\r\n            return \"NOTSET\";\r\n        }\r\n    }());\r\n    const whitePlayer = getPlayer(match.playerIds[WHITE]);\r\n    const blackPlayer = getPlayer(match.playerIds[BLACK]);\r\n    const whiteName = whitePlayer.firstName + \" \" + whitePlayer.lastName;\r\n    const blackName = blackPlayer.firstName + \" \" + blackPlayer.lastName;\r\n\r\n    function setMatchResult(event) {\r\n        const result = (function () {\r\n            switch (event.target.value) {\r\n            case \"WHITE\":\r\n                return [1, 0];\r\n            case \"BLACK\":\r\n                return [0, 1];\r\n            case \"DRAW\":\r\n                return [0.5, 0.5];\r\n            case \"NOTSET\":\r\n                return [0, 0];\r\n            default:\r\n                throw new Error();\r\n            }\r\n        }());\r\n        const white = players[match.playerIds[WHITE]];\r\n        const black = players[match.playerIds[BLACK]];\r\n        const newRating = (\r\n            (event.currentTarget.value === \"NOTSET\")\r\n            ? match.origRating\r\n            : calcNewRatings(\r\n                match.origRating,\r\n                [white.matchCount, black.matchCount],\r\n                result\r\n            )\r\n        );\r\n        playersDispatch({\r\n            id: white.id,\r\n            rating: newRating[WHITE],\r\n            type: \"SET_PLAYER_RATING\"\r\n        });\r\n        playersDispatch({\r\n            id: black.id,\r\n            rating: newRating[BLACK],\r\n            type: \"SET_PLAYER_RATING\"\r\n        });\r\n        // if the result hasn't been scored yet, increment the matchCount\r\n        if (match.result.reduce((a, b) => a + b) === 0) {\r\n            playersDispatch({\r\n                id: white.id,\r\n                matchCount: white.matchCount + 1,\r\n                type: \"SET_PLAYER_MATCHCOUNT\"\r\n            });\r\n            playersDispatch({\r\n                id: black.id,\r\n                matchCount: black.matchCount + 1,\r\n                type: \"SET_PLAYER_MATCHCOUNT\"\r\n            });\r\n        }\r\n        dispatch({\r\n            matchId: match.id,\r\n            newRating,\r\n            result,\r\n            roundId,\r\n            type: \"SET_MATCH_RESULT\"\r\n        });\r\n    }\r\n\r\n    return (\r\n        <tr className={match.id === selectedMatch ? \"selected\" : \"\"}>\r\n            <th className=\"table__number row__id\" scope=\"row\">{pos + 1}</th>\r\n            <td\r\n                className={\"table__player row__player \" + whitePlayer.type}\r\n                data-testid={`match-${pos}-white`}\r\n            >\r\n                {whiteName}{\" \"}\r\n                {resultCode === \"WHITE\" && (\r\n                    <span role=\"img\" aria-hidden>\r\n                        🏆\r\n                    </span>\r\n                )}\r\n            </td>\r\n            <td\r\n                className={\"table__player row__player \" + blackPlayer.type}\r\n                data-testid={`match-${pos}-black`}\r\n            >\r\n                {blackName}{\" \"}\r\n                {resultCode === \"BLACK\" && (\r\n                    <span role=\"img\" aria-hidden>\r\n                        🏆\r\n                    </span>\r\n                )}\r\n            </td>\r\n            <td className=\"data__input row__controls\">\r\n                <select\r\n                    className={winnerSelect}\r\n                    disabled={match.playerIds.includes(DUMMY_ID)}\r\n                    value={resultCode}\r\n                    onBlur={setMatchResult}\r\n                    onChange={setMatchResult}\r\n                >\r\n                    <option value=\"NOTSET\">\r\n                        Select a winner\r\n                    </option>\r\n                    <option value=\"WHITE\">\r\n                        {whiteName} won\r\n                    </option>\r\n                    <option value=\"BLACK\">\r\n                        {blackName} won\r\n                    </option>\r\n                    <option value=\"DRAW\">\r\n                        Draw\r\n                    </option>\r\n                </select>\r\n            </td>\r\n            <td className=\"data__input row__controls\">\r\n                {(selectedMatch !== match.id)\r\n                ? (\r\n                    <button\r\n                        className=\"button-ghost\"\r\n                        title=\"Edit match\"\r\n                        onClick={() => setSelectedMatch(match.id)}\r\n                    >\r\n                        <Icons.Edit />\r\n                    </button>\r\n                ) : (\r\n                    <button\r\n                        className=\"button-ghost\"\r\n                        title=\"End editing match\"\r\n                        onClick={() => setSelectedMatch(null)}\r\n                    >\r\n                        <Icons.Check />\r\n                    </button>\r\n                )}\r\n                <button\r\n                    className=\"button-ghost\"\r\n                    title=\"Open match information.\"\r\n                    onClick={() => setOpenModal(true)}\r\n                >\r\n                    <Icons.Info />\r\n                    <Hidden>\r\n                        View information for match:{\" \"}\r\n                        {whiteName} versus {blackName}\r\n                    </Hidden>\r\n                </button>\r\n                <Dialog isOpen={openModal}>\r\n                    <button\r\n                        className=\"button-micro button-primary\"\r\n                        onClick={() => setOpenModal(false)}\r\n                    >\r\n                        close\r\n                    </button>\r\n                    <p>{tourney.name}</p>\r\n                    <p>Round {roundId + 1}, match {pos + 1}</p>\r\n                    <PanelContainer>\r\n                        <Panel>\r\n                            <PlayerMatchInfo\r\n                                color={0}\r\n                                matchId={match.id}\r\n                                roundId={roundId}\r\n                            />\r\n                        </Panel>\r\n                        <Panel>\r\n                            <PlayerMatchInfo\r\n                                color={1}\r\n                                matchId={match.id}\r\n                                roundId={roundId}\r\n                            />\r\n                        </Panel>\r\n                    </PanelContainer>\r\n                </Dialog>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\nMatchRow.propTypes = {\r\n    match: PropTypes.object,\r\n    pos: PropTypes.number,\r\n    roundId: PropTypes.number,\r\n    selectedMatch: PropTypes.string,\r\n    setSelectedMatch: PropTypes.func,\r\n    tourneyId: PropTypes.number\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {findById, findIndexById} from \"../../utility\";\r\nimport Icons from \"../../icons\";\r\nimport MatchRow from \"./match-row\";\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"./round.module.css\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function Round({roundId}) {\r\n    const {\r\n        tourney,\r\n        players,\r\n        tourneyDispatch,\r\n        playersDispatch\r\n    } = useTournament();\r\n    const matchList = tourney.roundList[roundId];\r\n    const [selectedMatch, setSelectedMatch] = useState(null);\r\n    if (!matchList) {\r\n        throw new Error(\"Round \" + roundId + \" does not exist.\");\r\n    }\r\n    function unMatch(matchId) {\r\n        const match = findById(matchId, matchList);\r\n        if (match.result.reduce((a, b) => a + b) !== 0) {\r\n            // checks if the match has been scored yet & resets the players'\r\n            // records\r\n            match.playerIds.forEach(function (pId, color) {\r\n                playersDispatch({\r\n                    id: pId,\r\n                    matchCount: players[pId].matchCount - 1,\r\n                    type: \"SET_PLAYER_MATCHCOUNT\"\r\n                });\r\n                playersDispatch({\r\n                    id: pId,\r\n                    rating: match.origRating[color],\r\n                    type: \"SET_PLAYER_RATING\"\r\n                });\r\n            });\r\n        }\r\n        tourneyDispatch({matchId, roundId, type: \"DEL_MATCH\"});\r\n        setSelectedMatch(null);\r\n    }\r\n\r\n    function swapColors(matchId) {\r\n        tourneyDispatch({matchId, roundId, type: \"SWAP_COLORS\"});\r\n    }\r\n\r\n    function moveMatch(matchId, direction) {\r\n        const oldIndex = findIndexById(matchId, matchList);\r\n        const newIndex = (oldIndex + direction >= 0) ? oldIndex + direction : 0;\r\n        tourneyDispatch({newIndex, oldIndex, roundId, type: \"MOVE_MATCH\"});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"toolbar\">\r\n                <button\r\n                    className=\"danger\"\r\n                    disabled={selectedMatch === null}\r\n                    onClick={() => unMatch(selectedMatch)}\r\n                >\r\n                    <Icons.Trash /> Unmatch\r\n                </button>{\" \"}\r\n                <button\r\n                    className=\"\"\r\n                    disabled={selectedMatch === null}\r\n                    onClick={() => swapColors(selectedMatch)}\r\n                >\r\n                    <Icons.Repeat /> Swap colors\r\n                </button>{\" \"}\r\n                <button\r\n                    className=\"\"\r\n                    disabled={selectedMatch === null}\r\n                    onClick={() => moveMatch(selectedMatch, -1)}\r\n                >\r\n                    <Icons.ArrowUp /> Move up\r\n                </button>{\" \"}\r\n                <button\r\n                    className=\"\"\r\n                    disabled={selectedMatch === null}\r\n                    onClick={() => moveMatch(selectedMatch, 1)}\r\n                >\r\n                    <Icons.ArrowDown /> Move down\r\n                </button>\r\n            </div>\r\n            {matchList.length === 0 &&\r\n                <p>No players matched yet.</p>\r\n            }\r\n            <table className={style.table}>\r\n                {matchList.length > 0 &&\r\n                    <caption>Round {roundId + 1} results</caption>\r\n                }\r\n                <tbody>\r\n                    {matchList.length > 0 &&\r\n                        <tr>\r\n                            <th className=\"row__id\" scope=\"col\">\r\n                                #\r\n                            </th>\r\n                            <th className=\"row__player\" scope=\"col\">\r\n                                White\r\n                            </th>\r\n                            <th className=\"row__player\" scope=\"col\">\r\n                                Black\r\n                            </th>\r\n                            <th className=\"row__result\" scope=\"col\">\r\n                                Result\r\n                            </th>\r\n                            <th className=\"row__controls\" scope=\"col\">\r\n                                Controls\r\n                            </th>\r\n                        </tr>\r\n                    }\r\n                    {matchList.map((match, pos) => (\r\n                        <MatchRow\r\n                            key={match.id}\r\n                            match={match}\r\n                            pos={pos}\r\n                            roundId={roundId}\r\n                            selectedMatch={selectedMatch}\r\n                            setSelectedMatch={setSelectedMatch}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\nRound.propTypes = {\r\n    roundId: PropTypes.number,\r\n    tourneyId: PropTypes.number\r\n};\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from \"@reach/tabs\";\r\nimport Icons from \"../../icons\";\r\nimport PairPicker from \"../pair-picker\";\r\nimport PropTypes from \"prop-types\";\r\nimport Round from \"./round\";\r\nimport {getUnmatched} from \"../../../pairing-scoring\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function Index(props) {\r\n    const roundId = Number(props.roundId); // Reach Router passes a string.\r\n    const {tourney, players} = useTournament();\r\n    // only use unmatched players if this is the last round.\r\n    const unmatched = (roundId === tourney.roundList.length - 1)\r\n        ? getUnmatched(tourney, players, roundId)\r\n        : {};\r\n    const unmatchedCount = Object.keys(unmatched).length;\r\n    const [openTab, setOpenTab] = useState(0);\r\n    useEffect(\r\n        function () {\r\n            (unmatchedCount > 0) ? setOpenTab(1) : setOpenTab(0);\r\n        },\r\n        [unmatchedCount]\r\n    );\r\n    return (\r\n        <Tabs index={openTab} onChange={(index) => setOpenTab(index)}>\r\n            <TabList>\r\n                <Tab><Icons.List/> Matches</Tab>\r\n                <Tab disabled={unmatchedCount === 0}>\r\n                    <Icons.Users/> Unmatched players\r\n                </Tab>\r\n            </TabList>\r\n            <TabPanels>\r\n                <TabPanel>\r\n                    <Round roundId={roundId}/>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    <PairPicker roundId={roundId} />\r\n                </TabPanel>\r\n            </TabPanels>\r\n        </Tabs>\r\n    );\r\n}\r\nIndex.propTypes = {\r\n    path: PropTypes.string,\r\n    roundId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from \"@reach/tabs\";\r\nimport {\r\n    createStandingTree,\r\n    tieBreakMethods\r\n} from \"../../pairing-scoring\";\r\nimport Icons from \"../icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport dashify from \"dashify\";\r\nimport {defaultTo} from \"ramda\";\r\nimport numeral from \"numeral\";\r\nimport style from \"./scores.module.css\";\r\nimport {useTournament} from \"../../hooks\";\r\n\r\nfunction ScoreTable(props) {\r\n    const {tourney, getPlayer} = useTournament();\r\n    const {tieBreaks, roundList} = tourney;\r\n    const [standingTree, tbMethods] = createStandingTree(tieBreaks, roundList);\r\n    return (\r\n        <table className={style.table}>\r\n            <caption>Score detail</caption>\r\n            <tbody>\r\n                <tr className={style.topHeader}>\r\n                    <th scope=\"col\">Rank</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Score</th>\r\n                    {tbMethods.map((name, i) => (\r\n                        <th key={i} scope=\"col\">\r\n                            {name}\r\n                        </th>\r\n                    ))}\r\n                </tr>\r\n                {standingTree.map((standingsFlat, rank) =>\r\n                    standingsFlat.map((standing, j, src) => (\r\n                        <tr key={standing.id} className={style.row}>\r\n                            {j === 0 && ( // Only display the rank once\r\n                                <th\r\n                                    className={\"table__number \" + style.rank}\r\n                                    rowSpan={src.length}\r\n                                    scope=\"row\"\r\n                                >\r\n                                    {numeral(rank + 1).format(\"0o\")}\r\n                                </th>\r\n                            )}\r\n                            <th\r\n                                className={style.playerName}\r\n                                data-testid={rank}\r\n                                scope=\"row\"\r\n                            >\r\n                                {getPlayer(standing.id).firstName}&nbsp;\r\n                                {getPlayer(standing.id).lastName}\r\n                            </th>\r\n                            <td\r\n                                className=\"table__number\"\r\n                                data-testid={dashify(\r\n                                    getPlayer(standing.id).firstName\r\n                                    + getPlayer(standing.id).lastName\r\n                                    + \" score\"\r\n                                )}\r\n                            >\r\n                                {numeral(standing.score).format(\"1/2\")}\r\n                            </td>\r\n                            {standing.tieBreaks.map((score, i) => (\r\n                                <td\r\n                                    key={i}\r\n                                    className=\"table__number\"\r\n                                    data-testid={dashify(\r\n                                        getPlayer(standing.id).firstName\r\n                                        + getPlayer(standing.id).lastName\r\n                                        + tbMethods[i]\r\n                                    )}\r\n                                >\r\n                                    {numeral(score).format(\"1/2\")}\r\n                                </td>\r\n                            ))}\r\n                        </tr>\r\n                    ))\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\nScoreTable.propTypes = {};\r\n\r\nfunction SelectTieBreaks(props) {\r\n    const {tourney, tourneyDispatch} = useTournament();\r\n    const dispatch = tourneyDispatch;\r\n    const {tieBreaks} = tourney;\r\n    const [selectedTb, setSelectedTb] = useState(null);\r\n\r\n    function toggleTb(id = null) {\r\n        const defaultId = defaultTo(selectedTb);\r\n        if (tieBreaks.includes(defaultId(id))) {\r\n            dispatch({id: defaultId(id), type: \"DEL_TIEBREAK\"});\r\n            setSelectedTb(null);\r\n        } else {\r\n            dispatch({id: defaultId(id), type: \"ADD_TIEBREAK\"});\r\n        }\r\n    }\r\n\r\n    function moveTb(direction) {\r\n        const index = tieBreaks.indexOf(selectedTb);\r\n        dispatch({\r\n            newIndex: index + direction,\r\n            oldIndex: index,\r\n            type: \"MOVE_TIEBREAK\"\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"toolbar\">\r\n                <button\r\n                    disabled={selectedTb === null}\r\n                    onClick={() => toggleTb()}\r\n                >\r\n                    Toggle\r\n                </button>\r\n                <button\r\n                    disabled={selectedTb === null}\r\n                    onClick={() => moveTb(-1)}\r\n                >\r\n                    <Icons.ArrowUp/> Move up\r\n                </button>\r\n                <button\r\n                    disabled={selectedTb === null}\r\n                    onClick={() => moveTb(1)}\r\n                >\r\n                    <Icons.ArrowDown/> Move down\r\n                </button>\r\n                <button\r\n                    disabled={selectedTb === null}\r\n                    onClick={() => setSelectedTb(null)}\r\n                >\r\n                    Done\r\n                </button>\r\n            </div>\r\n            <table>\r\n                <caption className=\"title-30\">\r\n                    Selected Tiebreak methods\r\n                </caption>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Controls</th>\r\n                </tr>\r\n                {tieBreaks.map((id) => (\r\n                    <tr\r\n                        key={id}\r\n                        className={selectedTb === id ? \"selected\" : \"\"}\r\n                    >\r\n                        <td>\r\n                            {tieBreakMethods[id].name}\r\n                        </td>\r\n                        <td>\r\n                            <button\r\n                                className=\"button-micro\"\r\n                                disabled={\r\n                                    selectedTb !== null && selectedTb !== id\r\n                                }\r\n                                onClick={() =>\r\n                                    selectedTb === id\r\n                                        ? setSelectedTb(null)\r\n                                        : setSelectedTb(id)\r\n                                }\r\n                            >\r\n                                {selectedTb === id ? \"Done\" : \"Edit\"}\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </table>\r\n            <table style={{marginTop: \"16px\"}}>\r\n                <caption className=\"title-30\">\r\n                    Available tiebreak methods\r\n                </caption>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Controls</th>\r\n                </tr>\r\n                {Object.values(tieBreakMethods).map(({name, id}) => (\r\n                    <tr key={id}>\r\n                        <td>\r\n                            <span\r\n                                className={\r\n                                    tieBreaks.includes(id)\r\n                                        ? \"enabled\"\r\n                                        : \"disabled\"\r\n                                }\r\n                            >\r\n                                {name}\r\n                            </span>\r\n                        </td>\r\n                        <td>\r\n                            {!tieBreaks.includes(id) && (\r\n                                <button\r\n                                    className=\"button-micro\"\r\n                                    onClick={() => toggleTb(id)}\r\n                                >\r\n                                    Add\r\n                                </button>\r\n                            )}\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\nSelectTieBreaks.propTypes = {};\r\n\r\nconst Scores = (props) => (\r\n    <Tabs>\r\n        <TabList>\r\n            <Tab><Icons.List /> Scores</Tab>\r\n            <Tab><Icons.Settings /> Edit tiebreak rules</Tab>\r\n        </TabList>\r\n        <TabPanels>\r\n            <TabPanel>\r\n                <ScoreTable />\r\n            </TabPanel>\r\n            <TabPanel>\r\n                <SelectTieBreaks />\r\n            </TabPanel>\r\n        </TabPanels>\r\n    </Tabs>\r\n);\r\nScores.propTypes = {\r\n    path: PropTypes.string\r\n};\r\n\r\nexport default Scores;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {useTournament} from \"../../hooks\";\r\n\r\nexport default function Header(props) {\r\n    const {tourney} = useTournament();\r\n    return (\r\n        <div className={props.className}>\r\n            <h1>{tourney.name}</h1>\r\n        </div>\r\n    );\r\n}\r\nHeader.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n","import {calcNumOfRounds, getUnmatched} from \"../../pairing-scoring\";\r\nimport {useDocumentTitle, useTournament} from \"../../hooks\";\r\nimport {DUMMY_ID} from \"../../data-types\";\r\nimport Icons from \"../icons\";\r\nimport {Link} from \"@reach/router\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Tooltip from \"@reach/tooltip\";\r\nimport last from \"ramda/src/last\";\r\n\r\nexport default function Sidebar(props) {\r\n    const {\r\n        tourney,\r\n        players,\r\n        getPlayer,\r\n        playersDispatch,\r\n        tourneyDispatch\r\n    } = useTournament();\r\n    useDocumentTitle(tourney.name);\r\n    const {roundList} = tourney;\r\n    const unmatched = getUnmatched(tourney, players, roundList.length - 1);\r\n\r\n    const isNewRoundReady = (function () {\r\n        const lastRound = last(roundList);\r\n        if (!lastRound) {\r\n            return true;\r\n        }\r\n        const results = lastRound.map(\r\n            (match) => match.result[0] + match.result[1]\r\n        );\r\n        return Object.keys(unmatched).length === 0 && !results.includes(0);\r\n    }());\r\n    const roundCount = calcNumOfRounds(Object.keys(players).length);\r\n    const isItOver = roundList.length >= roundCount;\r\n    const [tooltipText, tooltipWarn] = (function () {\r\n        if (!isNewRoundReady) {\r\n            return [\r\n                \"You must complete the last round before beginning a new one.\",\r\n                true\r\n            ];\r\n        } else if (isItOver) {\r\n            return [\"All necessary rounds have completed.\", true];\r\n        } else {\r\n            return [\"Ready to begin a new round.\", false];\r\n        }\r\n    }());\r\n\r\n    function newRound() {\r\n        const confirmText = \"All rounds have completed. Are you sure you want \"\r\n            + \"to begin a new one?\";\r\n        if (isItOver) {\r\n            if (!window.confirm(confirmText)) {\r\n                return;\r\n            }\r\n        }\r\n        tourneyDispatch({type: \"ADD_ROUND\"});\r\n    }\r\n\r\n    async function delLastRound() {\r\n        if (window.confirm(\"Are you sure you want to delete the last round?\")) {\r\n            await props.navigate(\".\");\r\n            // If a match has been scored, then reset it.\r\n            // Should this logic be somewhere else?\r\n            last(roundList).forEach(function (match) {\r\n                if (match.result[0] + match.result[1] === 0) {\r\n                    return; // Don't change players who haven't scored.\r\n                }\r\n                match.playerIds.forEach(function (pId, color) {\r\n                    if (pId === DUMMY_ID) {\r\n                        return; // Don't try to set the dummy.\r\n                    }\r\n                    const {matchCount} = getPlayer(pId);\r\n                    playersDispatch({\r\n                        id: pId,\r\n                        matchCount: matchCount - 1,\r\n                        type: \"SET_PLAYER_MATCHCOUNT\"\r\n                    });\r\n                    playersDispatch({\r\n                        id: pId,\r\n                        rating: match.origRating[color],\r\n                        type: \"SET_PLAYER_RATING\"\r\n                    });\r\n                });\r\n            });\r\n            tourneyDispatch({type: \"DEL_LAST_ROUND\"});\r\n            if (tourney.roundList.length === 1) {\r\n                // Automatically remake round 1.\r\n                tourneyDispatch({type: \"ADD_ROUND\"});\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"..\">\r\n                            <Icons.X/>Close\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n                <hr />\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\".\">\r\n                            <Icons.Users /> Players\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"crosstable\">\r\n                            <Icons.Layers /> Crosstable\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"scores\">\r\n                            <Icons.List /> Score detail\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n                <hr />\r\n                <ul>\r\n                    {Object.keys(roundList).map((id) => (\r\n                        <li key={id}>\r\n                            <Link to={`${id}`}>\r\n                            Round {Number(id) + 1}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </nav>\r\n            <hr />\r\n            <ul>\r\n                <li>\r\n                    <button\r\n                        disabled={!isNewRoundReady}\r\n                        onClick={newRound}\r\n                    >\r\n                        <Icons.Plus/> New round\r\n                    </button>{\" \"}\r\n                    <Tooltip label={tooltipText}>\r\n                        <span className=\"helpIcon\">\r\n                            {(tooltipWarn)\r\n                            ? <Icons.Alert className=\"status-alert\" />\r\n                            : <Icons.Check className=\"status-ok\" />\r\n                            }\r\n                        </span>\r\n                    </Tooltip>\r\n                </li>\r\n                <li>\r\n                    <button\r\n                        className={\"danger\"}\r\n                        disabled={roundList.length === 0}\r\n                        onClick={delLastRound}\r\n                    >\r\n                        <Icons.Trash /> Remove last round\r\n                    </button>\r\n                </li>\r\n                <li>\r\n                    Round progress: {roundList.length}/{roundCount}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nSidebar.propTypes = {\r\n    className: PropTypes.string,\r\n    navigate: PropTypes.func.isRequired\r\n};\r\n","import Crosstable from \"./crosstable\";\r\nimport Header from \"./header\";\r\nimport PlayerSelect from \"./player-select\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Round from \"./round\";\r\nimport {Router} from \"@reach/router\";\r\nimport Scores from \"./scores\";\r\nimport Sidebar from \"./sidebar\";\r\nimport {TournamentProvider} from \"../../hooks\";\r\nimport styles from \"./tournament.module.css\";\r\n\r\nexport default function Tournament(props) {\r\n    return (\r\n        <TournamentProvider tourneyId={props.tourneyId}>\r\n            <div className={styles.tournament}>\r\n                <Header className={styles.header} />\r\n                <Sidebar className={styles.sidebar} navigate={props.navigate} />\r\n                <div className={styles.content}>\r\n                    <Router>\r\n                        <PlayerSelect path=\"/\" />\r\n                        <Crosstable path=\"crosstable\" />\r\n                        <Scores path=\"scores\" />\r\n                        <Round path=\":roundId\" />\r\n                    </Router>\r\n                </div>\r\n            </div>\r\n        </TournamentProvider>\r\n    );\r\n}\r\nTournament.propTypes = {\r\n    children: PropTypes.node,\r\n    navigate: PropTypes.func,\r\n    path: PropTypes.string,\r\n    tourneyId: PropTypes.string\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {useAllTournamentsDb, useDocumentTitle} from \"../../hooks\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport Icons from \"../icons\";\r\nimport {Link} from \"@reach/router\";\r\n\r\nexport default function TournamentList(props) {\r\n    const [tourneys, dispatch] = useAllTournamentsDb();\r\n    const [newTourneyName, setNewTourneyName] = useState(\"\");\r\n    const [isFormOpen, setIsFormOpen] = useState(false);\r\n    useDocumentTitle(\"tournament list\");\r\n\r\n    function updateNewName(event) {\r\n        setNewTourneyName(event.target.value);\r\n    }\r\n\r\n    function makeTournament(event) {\r\n        event.preventDefault();\r\n        dispatch({\r\n            name: newTourneyName,\r\n            type: \"ADD_TOURNEY\"\r\n        });\r\n        setNewTourneyName(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"content-area\">\r\n            <div className=\"toolbar toolbar__left\">\r\n                <button\r\n                    onClick={() => setIsFormOpen(true)}\r\n                >\r\n                    <Icons.Plus /> Add tournament\r\n                </button>\r\n            </div>\r\n            {(Object.keys(tourneys).length > 0)\r\n            ?\r\n            <table>\r\n                <caption>Tournament list</caption>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Controls</th>\r\n                    </tr>\r\n                    {Object.values(tourneys).map(({name, id}) =>\r\n                        <tr key={id}>\r\n                            <td>\r\n                                <Link to={id}>\r\n                                    {name}\r\n                                </Link>\r\n                            </td>\r\n                            <td>\r\n                                <button\r\n                                    aria-label={`Delete “${name}”`}\r\n                                    className=\"danger button-ghost\"\r\n                                    title={`Delete “${name}”`}\r\n                                    onClick={\r\n                                        () => dispatch({id, type: \"DEL_ITEM\"})\r\n                                    }\r\n                                >\r\n                                    <Icons.Trash />\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n            : <p>No tournaments added yet.</p>\r\n            }\r\n            <Dialog isOpen={isFormOpen}>\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => setIsFormOpen(false)}\r\n                >\r\n                    Close\r\n                </button>\r\n                <form onSubmit={makeTournament}>\r\n                    <fieldset>\r\n                        <legend>Make a new tournament</legend>\r\n                        <label htmlFor=\"tourney-name\">Name:</label>\r\n                        <input\r\n                            name=\"tourney-name\"\r\n                            placeholder=\"tournament name\"\r\n                            required={true}\r\n                            type=\"text\"\r\n                            value={newTourneyName}\r\n                            onChange={updateNewName}\r\n                        />{\" \"}\r\n                        <input\r\n                            className=\"button-primary\"\r\n                            type=\"submit\"\r\n                            value=\"Create\"\r\n                        />\r\n                    </fieldset>\r\n                </form>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import Crosstable from \"./crosstable\";\r\nimport PlayerSelect from \"./player-select\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Round from \"./round\";\r\nimport Scores from \"./scores\";\r\nimport Tournament from \"./tournament\";\r\nimport TournamentList from \"./tournament-list\";\r\n\r\nconst TournamentIndex = (props) => (\r\n    <div className=\"passthrough\">\r\n        {props.children}\r\n    </div>\r\n);\r\nTournamentIndex.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TournamentIndex;\r\nexport {Crosstable, PlayerSelect, Round, Scores, Tournament, TournamentList};\r\n","import React from \"react\";\r\nimport styles from \"./index.module.css\";\r\n\r\nconst Caution = () => (\r\n    <aside className={styles.caution + \" body-20\"}>\r\n        <p className={styles.caution__text}>\r\n            This is beta software. Want to help make it better? Check out the\r\n            {\" \"}\r\n            <span role=\"img\" aria-hidden>👉</span>\r\n            &nbsp;\r\n            <a\r\n                className={styles.caution__link}\r\n                href=\"https://github.com/johnridesabike/chessahoochee\"\r\n            >\r\n                Git repository\r\n            </a>.\r\n        </p>\r\n    </aside>\r\n);\r\n\r\nexport default Caution;\r\n","import React from \"react\";\r\n\r\nconst NotFound = (props) => (\r\n    <div data-testid=\"404\">\r\n        <p>Page not found.</p>\r\n    </div>\r\n);\r\n\r\nexport default NotFound;\r\n","import React, {useEffect, useMemo, useState} from \"react\";\r\nimport {\r\n    useAllPlayersDb,\r\n    useAllTournamentsDb,\r\n    useDocumentTitle,\r\n    useOptionsDb\r\n} from \"../hooks\";\r\nimport demoData from \"../demo-data\";\r\n\r\nexport default function Options(props) {\r\n    const [tourneys, tourneysDispatch] = useAllTournamentsDb();\r\n    const [players, playersDispatch] = useAllPlayersDb();\r\n    const [text, setText] = useState(\"\");\r\n    const [options, optionsDispatch] = useOptionsDb();\r\n    useDocumentTitle(\"Options\");\r\n    // memoize this so the `useEffect` hook syncs with the correct states\r\n    const exportData = useMemo(\r\n        () => ({options, players, tourneys}),\r\n        [options, tourneys, players]\r\n    );\r\n    useEffect(\r\n        function () {\r\n            setText(JSON.stringify(exportData, null, 4));\r\n        },\r\n        [exportData]\r\n    );\r\n    function loadData(data) {\r\n        tourneysDispatch({state: data.tournaments, type: \"LOAD_STATE\"});\r\n        optionsDispatch({state: data.options, type: \"LOAD_STATE\"});\r\n        playersDispatch({state: data.players, type: \"LOAD_STATE\"});\r\n        window.alert(\"Data loaded!\");\r\n    }\r\n    function handleText(event) {\r\n        event.preventDefault();\r\n        const importData = JSON.parse(text);\r\n        loadData(importData);\r\n    }\r\n    function handleFile(event) {\r\n        event.preventDefault();\r\n        const reader = new FileReader();\r\n        // eslint-disable-next-line fp/no-mutation\r\n        reader.onload = function (ev) {\r\n            const data = ev.target.result;\r\n            const importData = JSON.parse(data);\r\n            loadData(importData);\r\n        };\r\n        reader.readAsText(event.currentTarget.files[0]);\r\n        event.currentTarget.value = \"\"; // so the filename won't linger onscreen\r\n    }\r\n    function reloadDemoData(event) {\r\n        event.preventDefault();\r\n        loadData(demoData);\r\n    }\r\n    return (\r\n        <div className=\"content-area\">\r\n            <h2>Game settings</h2>\r\n            <form>\r\n                <fieldset>\r\n                    <legend>Bye options</legend>\r\n                    Select how many points a bye is worth:\r\n                    <label className=\"monospace\">\r\n                        1{\" \"}\r\n                        <input\r\n                            checked={options.byeValue === 1}\r\n                            type=\"radio\"\r\n                            onChange={() => optionsDispatch({\r\n                                option: \"byeValue\",\r\n                                type: \"SET_OPTION\",\r\n                                value: 1\r\n                            })}\r\n                        />\r\n                    </label>\r\n                    <label className=\"monospace\">\r\n                        ½{\" \"}\r\n                        <input\r\n                            checked={options.byeValue === 0.5}\r\n                            type=\"radio\"\r\n                            onChange={() => optionsDispatch({\r\n                                option: \"byeValue\",\r\n                                type: \"SET_OPTION\",\r\n                                value: 0.5\r\n                            })}\r\n                        />\r\n                    </label>\r\n                </fieldset>\r\n            </form>\r\n            <h2>Data</h2>\r\n            <fieldset>\r\n                <legend>Manage data</legend>\r\n                <p>\r\n                    <a\r\n                        download=\"chessahoochee.json\"\r\n                        href={\r\n                            \"data:application/json,\"\r\n                            + encodeURIComponent(JSON.stringify(exportData))\r\n                        }\r\n                    >\r\n                        Download all data\r\n                    </a>\r\n                </p>\r\n                <label htmlFor=\"file\">Load data file:</label>\r\n                <input\r\n                    id=\"file\"\r\n                    name=\"file\"\r\n                    type=\"file\"\r\n                    onChange={handleFile}\r\n                />\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Reset all changes</legend>\r\n                <button onClick={reloadDemoData}>Reload demo data</button>\r\n            </fieldset>\r\n            <form onSubmit={handleText}>\r\n                <fieldset>\r\n                    <legend>\r\n                        Advanced: manually edit data\r\n                    </legend>\r\n                    <textarea\r\n                        className=\"json\"\r\n                        cols={50}\r\n                        name=\"playerdata\"\r\n                        rows={25}\r\n                        spellCheck={false}\r\n                        value={text}\r\n                        onChange={(event) => setText(event.currentTarget.value)}\r\n                    />\r\n                    <p>\r\n                        <input type=\"submit\" value=\"Load\" />\r\n                    </p>\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useMemo, useState} from \"react\";\r\nimport {getPlayerAvoidList, kFactor} from \"../../pairing-scoring\";\r\nimport Icons from \"../icons\";\r\nimport {Link} from \"@reach/router\";\r\nimport PropTypes from \"prop-types\";\r\nimport numeral from \"numeral\";\r\nimport styles from \"./index.module.css\";\r\nimport {useDocumentTitle} from \"../../hooks\";\r\n\r\nexport default function PlayerInfoBox({\r\n    playerId,\r\n    players,\r\n    playersDispatch,\r\n    options,\r\n    optionsDispatch\r\n}) {\r\n    const player = players[playerId];\r\n    const [singAvoidList, setSingAvoidList] = useState(\r\n        getPlayerAvoidList(playerId, options.avoidPairs)\r\n    );\r\n    const playerName = (player) ? player.firstName + \" \" + player.lastName : \"\";\r\n    useDocumentTitle(\"profile for \" + playerName);\r\n    // Memoize this so useEffect doesn't cause a memory leak.\r\n    const unAvoided = useMemo(\r\n        () => Object.keys(players).filter(\r\n            (id) => !singAvoidList.includes(id) && id !== playerId\r\n        ),\r\n        [players, playerId, singAvoidList]\r\n    );\r\n    const [selectedAvoider, setSelectedAvoider] = useState(unAvoided[0]);\r\n    function avoidAdd(event) {\r\n        event.preventDefault();\r\n        optionsDispatch({\r\n            pair: [playerId, selectedAvoider],\r\n            type: \"ADD_AVOID_PAIR\"\r\n        });\r\n    }\r\n    useEffect(\r\n        function () {\r\n            setSingAvoidList(getPlayerAvoidList(playerId, options.avoidPairs));\r\n        },\r\n        [options.avoidPairs, playerId]\r\n    );\r\n    useEffect(\r\n        function () {\r\n            setSelectedAvoider(unAvoided[0]);\r\n        },\r\n        [setSelectedAvoider, unAvoided]\r\n    );\r\n    function handleChange(event) {\r\n        event.preventDefault();\r\n        const {firstName, lastName, matchCount, rating} = event.currentTarget;\r\n        playersDispatch({\r\n            firstName: firstName.value,\r\n            id: playerId,\r\n            lastName: lastName.value,\r\n            matchCount: Number(matchCount.value),\r\n            rating: Number(rating.value),\r\n            type: \"SET_PLAYER\"\r\n        });\r\n    }\r\n    if (!player) {\r\n        return <div>Loading...</div>;\r\n    }\r\n    return (\r\n        <div className={styles.playerInfo}>\r\n            <Link to=\"..\"><Icons.ChevronLeft /> Back</Link>\r\n            <h2>\r\n                Profile for {player.firstName} {player.lastName}\r\n            </h2>\r\n            <form onChange={handleChange} onSubmit={handleChange}>\r\n                <p>\r\n                    <label htmlFor=\"firstName\">First name</label>\r\n                    <input\r\n                        defaultValue={player.firstName}\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"lastName\">Last name</label>\r\n                    <input\r\n                        defaultValue={player.lastName}\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"matchCount\">Matches played</label>\r\n                    <input\r\n                        defaultValue={String(player.matchCount)}\r\n                        name=\"matchCount\"\r\n                        type=\"number\"\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"rating\">Rating</label>\r\n                    <input\r\n                        defaultValue={String(player.rating)}\r\n                        name=\"rating\"\r\n                        type=\"number\"\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"Kfactor\">K factor</label>\r\n                    <input\r\n                        name=\"kfactor\"\r\n                        type=\"number\"\r\n                        value={numeral(kFactor(player.matchCount)).format(\"00\")}\r\n                        readOnly\r\n                    />\r\n                </p>\r\n            </form>\r\n            <h3>Players to avoid</h3>\r\n            <ul>\r\n                {singAvoidList.map((pId) =>\r\n                    <li key={pId}>\r\n                        {players[pId].firstName} {players[pId].lastName}\r\n                        <button\r\n                            arial-label={`Remove \r\n${players[pId].firstName} ${players[pId].lastName} from avoid list.`}\r\n                            className=\"danger button-ghost\"\r\n                            title={`Remove ${players[pId].firstName} \r\n${players[pId].lastName}`}\r\n                            onClick={() =>\r\n                                optionsDispatch({\r\n                                    pair: [playerId, pId],\r\n                                    type: \"DEL_AVOID_PAIR\"\r\n                                })\r\n                            }\r\n                        >\r\n                            <Icons.Trash />\r\n                        </button>\r\n                    </li>\r\n                )}\r\n                {singAvoidList.length === 0 &&\r\n                    <li>None</li>\r\n                }\r\n            </ul>\r\n            <form onSubmit={avoidAdd}>\r\n                <fieldset>\r\n                    <legend>Add player to avoid</legend>\r\n                    <select\r\n                        onBlur={(event) =>\r\n                            setSelectedAvoider(event.target.value)\r\n                        }\r\n                    >\r\n                        {unAvoided.map((pId) => (\r\n                            <option key={pId} value={pId}>\r\n                                {players[pId].firstName} {players[pId].lastName}\r\n                            </option>\r\n                        ))}\r\n                    </select>{\" \"}\r\n                    <input type=\"submit\" value=\"Add\" />\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nPlayerInfoBox.propTypes = {\r\n    options: PropTypes.object.isRequired,\r\n    optionsDispatch: PropTypes.func.isRequired,\r\n    playerId: PropTypes.string,\r\n    players: PropTypes.object.isRequired,\r\n    playersDispatch: PropTypes.func.isRequired\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport Icons from \"../icons\";\r\nimport {Link} from \"@reach/router\";\r\nimport NewPlayer from \"../new-player\";\r\nimport PropTypes from \"prop-types\";\r\nimport VisuallyHidden from \"@reach/visually-hidden\";\r\nimport styles from \"./index.module.css\";\r\nimport {useDocumentTitle} from \"../../hooks\";\r\n\r\nexport default function PlayerList({\r\n    players,\r\n    playersDispatch,\r\n    optionsDispatch\r\n}) {\r\n    const [isFormOpen, setIsFormOpen] = useState(false);\r\n    useDocumentTitle(\"Players\");\r\n    const delPlayer = function (event, id) {\r\n        event.preventDefault();\r\n        const message = \"Are you sure you want to delete \"\r\n            + players[id].firstName + \" \" + players[id].lastName + \"?\";\r\n        if (window.confirm(message)) {\r\n            playersDispatch({id, type: \"DEL_ITEM\"});\r\n            optionsDispatch({id, type: \"DEL_AVOID_SINGLE\"});\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"content-area\">\r\n            <div className=\"toolbar toolbar__left\">\r\n                <button onClick={() => setIsFormOpen(true)}>\r\n                    <Icons.UserPlus /> Add a new player\r\n                </button>\r\n            </div>\r\n            <table className={styles.table}>\r\n                <caption>Player roster</caption>\r\n                <thead>\r\n                    <tr>\r\n                        <th colSpan={2}>Name</th>\r\n                        <th>Rating</th>\r\n                        <th>Matches</th>\r\n                        <th>Controls</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{Object.values(players).map((player) =>\r\n                    <tr key={player.id}>\r\n                        <td className=\"table__player\">\r\n                            {player.firstName}\r\n                        </td>\r\n                        <td className=\"table__player\">\r\n                            {player.lastName}\r\n                        </td>\r\n                        <td className=\"table__number\">{player.rating}</td>\r\n                        <td className=\"table__number\">{player.matchCount}</td>\r\n                        <td>\r\n                            <button\r\n                                // eslint-disable-next-line max-len\r\n                                aria-label={`Delete ${player.firstName} ${player.lastName}`}\r\n                                className=\"danger button-ghost\"\r\n                                // eslint-disable-next-line max-len\r\n                                title={`Delete ${player.firstName} ${player.lastName}`}\r\n                                onClick={(event) => delPlayer(event, player.id)}\r\n                            >\r\n                                <Icons.Trash />\r\n                            </button>{\" \"}\r\n                            <Link to={String(player.id)}>\r\n                            Open\r\n                                <VisuallyHidden>\r\n                                    {\" \"}{player.firstName} {player.lastName}\r\n                                </VisuallyHidden>{\" \"}\r\n                                <Icons.ChevronRight />\r\n                            </Link>\r\n                        </td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n            <Dialog isOpen={isFormOpen}>\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => setIsFormOpen(false)}\r\n                >\r\n                    Close\r\n                </button>\r\n                <NewPlayer dispatch={playersDispatch} />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\nPlayerList.propTypes = {\r\n    optionsDispatch: PropTypes.func.isRequired,\r\n    players: PropTypes.object.isRequired,\r\n    playersDispatch: PropTypes.func.isRequired\r\n};\r\n","import {useAllPlayersDb, useOptionsDb} from \"../../hooks\";\r\nimport PlayerInfo from \"./info-box\";\r\nimport PlayerList from \"./player-list\";\r\nimport React from \"react\";\r\nimport {Router} from \"@reach/router\";\r\n\r\nexport default function Players(props) {\r\n    const [players, playersDispatch] = useAllPlayersDb();\r\n    const [options, optionsDispatch] = useOptionsDb();\r\n    const childProps = {options, optionsDispatch, players, playersDispatch};\r\n    return (\r\n        <Router basepath=\"players\">\r\n            <PlayerList path=\"/\" {...childProps} />\r\n            <PlayerInfo path=\":playerId\" {...childProps} />\r\n        </Router>\r\n    );\r\n}\r\nPlayers.propTypes = {};\r\n\r\nexport {PlayerInfo, PlayerList};\r\n","import Icons from \"./icons\";\r\nimport React from \"react\";\r\nimport {loadDemoDB} from \"../hooks/db\";\r\nimport styles from \"./splash.module.css\";\r\n\r\nconst Splash = (props) => (\r\n    <div className={styles.splash}>\r\n        <aside className={styles.hint}>\r\n            <ol>\r\n                <li>\r\n                    <button\r\n                        className=\"button-primary\"\r\n                        onClick={() => loadDemoDB()}\r\n                    >\r\n                        Click here to load the demo data\r\n                    </button>{\" \"}\r\n                    (optional)\r\n                </li>\r\n                <li>\r\n                    <Icons.ArrowUpLeft />\r\n                    Select a menu item above.\r\n                </li>\r\n                <li>\r\n                    Start creating your tournaments!\r\n                </li>\r\n            </ol>\r\n        </aside>\r\n        <div className={styles.title}>\r\n            <h1>\r\n                <span aria-hidden>♘</span>{\" \"}\r\n                Chessahoochee\r\n            </h1>\r\n            <p className={styles.subtitle + \" caption-30\"}>\r\n                a chess tournament app\r\n            </p>\r\n        </div>\r\n        <footer className={\"body-20 \" + styles.footer}>\r\n            <p>\r\n                This is an early, proof-of-concept chess tournament app.<br />\r\n                <a href=\"https://github.com/johnridesabike/chessahoochee\">\r\n                    Suggetions, bug reports, and contributions are welcome.\r\n                </a>\r\n            </p>\r\n            <p>\r\n                Built with JavaScript and{\" \"}\r\n                <a href=\"https://reactjs.org/\">React</a>.{\" \"}\r\n                <span style={{fontSize: \"1.125em\"}}>\r\n                    <Icons.Javascript /> <Icons.React />\r\n                </span>\r\n            </p>\r\n        </footer>\r\n    </div>\r\n);\r\nexport default Splash;\r\n","// import \"@reach/tabs/styles.css\";\r\nimport \"@reach/tooltip/styles.css\";\r\nimport \"side-effects\";\r\nimport {\r\n    Link,\r\n    LocationProvider,\r\n    Router,\r\n    createHistory\r\n} from \"@reach/router\";\r\nimport TournamentIndex, {\r\n    Tournament,\r\n    TournamentList\r\n} from \"./components/tournament\";\r\nimport {link, mainMenu} from \"./App.module.css\";\r\nimport Caution from \"./components/caution\";\r\nimport NotFound from \"./components/404\";\r\nimport Options from \"./components/options\";\r\nimport Players from \"./components/players\";\r\nimport React from \"react\";\r\nimport Splash from \"./components/splash\";\r\nimport createHashSource from \"hash-source\";\r\nimport {useDocumentTitle} from \"./hooks\";\r\n// These are just for deploying to GitHub pages.\r\nlet source = createHashSource();\r\nlet history = createHistory(source);\r\n\r\n// const electron = window.require(\"electron\");\r\n\r\nfunction App() {\r\n    useDocumentTitle(\"a chess tournament app\");\r\n    return (\r\n        <div className=\"app\">\r\n            <LocationProvider history={history}>\r\n                <header className=\"header\">\r\n                    <nav className={mainMenu}>\r\n                        <Link className={link} to=\"tourneys\">\r\n                            Tournaments\r\n                        </Link>\r\n                        <Link className={link} to=\"players\">\r\n                            Players\r\n                        </Link>\r\n                        <Link className={link} to=\"options\">\r\n                            Options\r\n                        </Link>\r\n                        <Link className={link} to=\"/\">\r\n                            About\r\n                        </Link>\r\n                    </nav>\r\n                </header>\r\n                <main className=\"content\">\r\n                    <Router>\r\n                        <Splash path=\"/\" />\r\n                        <TournamentIndex path=\"tourneys\">\r\n                            <TournamentList path=\"/\" />\r\n                            <Tournament path=\":tourneyId/*\" />\r\n                        </TournamentIndex>\r\n                        <Players path=\"players/*\" />\r\n                        <Options path=\"options\" />\r\n                        <NotFound default />\r\n                    </Router>\r\n                </main>\r\n            </LocationProvider>\r\n            <footer className=\"footer\">\r\n                <Caution />\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import \"./styles\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport React, {StrictMode} from \"react\";\r\nimport App from \"./App\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(\r\n    <StrictMode><App /></StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"scores_table__2rxnd\",\"topHeader\":\"scores_topHeader__1NdDN\",\"row\":\"scores_row__ecCJQ\",\"playerName\":\"scores_playerName__3zgHS\",\"rank\":\"scores_rank__f-nA5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"App_link__1tXRn\",\"mainMenu\":\"App_mainMenu__2PdU1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"splash\":\"splash_splash__3pTdT\",\"hint\":\"splash_hint__33Csf\",\"footer\":\"splash_footer__28WMG\",\"title\":\"splash_title__1Jrwi\",\"subtitle\":\"splash_subtitle__2ZRHH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tournament\":\"tournament_tournament__3ygmL\",\"header\":\"tournament_header__3QL7-\",\"sidebar\":\"tournament_sidebar__Od_Rn\",\"content\":\"tournament_content__294HZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"winnerSelect\":\"round_winnerSelect__1TUKD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"players_table__1e2Ls\",\"playerInfo\":\"players_playerInfo__1NBYh\",\"controls\":\"players_controls__32kQ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"caution\":\"caution_caution__2rrOM\",\"caution__text\":\"caution_caution__text__LxysE\",\"caution__link\":\"caution_caution__link__3X8Mh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panels\":\"utility_panels__5PR5o\",\"panel\":\"utility_panel__12Wgy\"};"],"sourceRoot":""}