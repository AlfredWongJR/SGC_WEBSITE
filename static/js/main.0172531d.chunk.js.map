{"version":3,"sources":["components/utility.jsx","data/tournament.js","data/constants.js","data/player.js","data/utility.js","data/match.js","pairing-scoring/scoring.js","pairing-scoring/pairing.js","state/match-functions.js","state/global-state.js","components/tournament/round.jsx","components/tournament/player-select.jsx","components/tournament/tabs.jsx","components/tournament/list.jsx","components/players/list.jsx","components/players/info-box.jsx","components/players/index.jsx","components/options.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Button","_ref","children","action","react_default","a","createElement","onClick","BackButton","_ref2","OpenButton","_ref3","Panel","_ref5","style","Object","objectSpread","PanelContainer","_ref6","display","React","Children","map","child","freeze","importObj","name","tieBreaks","byeQueue","players","roundList","BLACK","WHITE","createPlayer","arguments","length","undefined","id","type","firstName","lastName","rating","matchCount","dummyPlayer","getPlayer","playerList","player","filter","p","getPlayerAvoidList","playerId","avoidList","pair","includes","reduce","accumulator","concat","kFactor","calcNewRatings","origRatings","matchCounts","result","whiteElo","EloRank","blackElo","scoreExpected","getExpected","updateRating","calcNumOfRounds","playerCount","roundId","Math","ceil","log2","Number","isFinite","getById","list","x","getIndexById","indexOf","ids","pairs","origRating","newRating","isBye","match","playerMatchColor","matchList","color","m","getMatchesByPlayer","slice","acc","round","hasHadBye","getPlayersByOpponent","opponentId","playerScore","score","scoreList","playerScoreList","b","playerScoreCum","runningScore","cumScores","playerScoreListNoByes","forEach","push","totalScore","playerColorBalance","modifiedMedian","pId","isSolkoff","scores","opponent","sort","pop","shift","finalScore","tieBreakMethods","func","oppScores","calcStandings","methods","standingsFlat","allPlayers","Array","from","Set","getAllPlayers","method","sortFunc","firstBy","standing","ignore","index","thenBy","standingsTree","runningRank","i","orig","standing1","standing2","areEqual","keys","areScoresEqual","dueColor","genPlayerData","data","colorBalance","opponentHistory","upperHalf","avoidMeetingTwicePriority","sameScoresPriority","differentHalfPriority","differentDueColorPriority","calcPairIdeal","player1","player2","scoreDiff","priority","metBefore","mustAvoid","abs","byeMatch","potentialMatches","matches","reducedResults","playerData","byePlayerData","last","playersWithScore","pd","reverse","chunk","playerDatum","src","playerMatches","blossom","p1Id","p2Id","p1","p2","ideal","matched","autoPair","state","tourneyId","unPairedPlayers","tourney","tourneys","nextBye","createMatch","newMatchList","pairPlayers","avoid","join","dummy","options","byeValue","manualPair","swapColors","matchId","defaultData","defaultOptions","defaultPlayers","defaultTourneyList","dataReducer","assign","newPlayer","arrayMove","oldIndex","newIndex","unpairedPlayers","Error","DataContext","createContext","Round","_useContext","useContext","dispatch","_useState","useState","_useState2","slicedToArray","selectedMatch","setSelectedMatch","_useState3","_useState4","selectedPlayers","setSelectedPlayers","selectPlayer","event","target","value","checked","prevState","unMatched","setMatchResult","white","black","moveMatch","direction","mIndex","className","unMatch","disabled","pos","key","onChange","every","PlayerMatchInfo","react","prettyBalance","numeral","format","opId","PlayerSelect","isSelecting","setIsSelecting","selectedTb","setSelectedTb","toggleTb","moveTb","togglePlayer","colSpan","TournamentTabs","backButton","defaultTab","setDefaultTab","_calcStandings","_calcStandings2","standingTree","tbMethods","es","defaultIndex","rank","TournamentList","tourneyList","openTourney","setOpenTourney","newTourneyName","setNewTourneyName","content","onSubmit","preventDefault","createTournament","placeholder","required","PlayerList","setOpenPlayer","newPlayerDefault","newPlayerData","setNewPlayerdata","nextId","setNextId","updateField","update","currentTarget","rosterTable","delPlayer","prevId","PlayerInfoBox","singAvoidList","setSingAvoidList","unAvoided","selectedAvoider","setSelectedAvoider","useEffect","avoidAdd","onBlur","PlayerView","openPlayer","Options","outputData","JSON","stringify","rows","cols","readOnly","Caution","role","aria-label","href","Boolean","window","location","hostname","ReactDOM","render","_useReducer","useReducer","_useReducer2","StrictMode","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0172531d.chunk.js","sourcesContent":["// @ts-check\nimport React from \"react\";\nimport {FaArrowsAltV} from \"react-icons/fa\";\n\n/**\n * @param {Object} props\n * @param {JSX.Element | string} [props.children]\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\n */\nexport function Button({children, action}\n) {\n    return (\n        <nav>\n            <button onClick={action}>\n                {children}\n            </button>\n        </nav>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\n */\nexport function BackButton({action}) {\n    return <Button action={action}>&lt; Back</Button>;\n}\n\n/**\n * @param {Object} props\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\n */\nexport function OpenButton({action}) {\n    return <Button action={action}>Open &gt;</Button>;\n}\n\n/**\n * @param {Object} props\n * @param {boolean} props.isDragged\n */\nexport function DragIcon({isDragged}) {\n    return (\n        <FaArrowsAltV style={{cursor: isDragged ? \"grabbing\" : \"grab\"}}\n        tabIndex={-1}/>\n    );\n\n}\n\n/**\n * @param {*[]} arr\n * @param {number} pos\n * @param {number} dir\n */\nexport function moveArrItem(arr, pos, dir) {\n    const newPos = pos + dir;\n    const newArr = [...arr];\n    const movedMethod = newArr.splice(pos, 1)[0];\n    newArr.splice(newPos, 0, movedMethod);\n    return newArr;\n}\n\n/**\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {React.CSSProperties} [props.style]\n */\nexport function Panel({children, style}) {\n    return (\n        <div style={{...style}}>\n            {children}\n        </div>\n    );\n}\n\n/**\n *\n * @param {object} props\n */\nexport function PanelContainer({children}) {\n    return (\n        <div style={{display: \"flex\"}}>\n            {React.Children.map(children, (child) => child)}\n        </div>\n    );\n}","// @ts-check\n/**\n * @typedef {import(\"./index\").Tournament} Tournament\n */\nfunction createTournament(importObj) {\n    /** @type {Tournament} */\n    const tourney = {\n        name: importObj.name || \"\",\n        tieBreaks: importObj.tieBreaks || [0, 1, 2, 3],\n        byeQueue: importObj.byeQueue || [],\n        players: importObj.players || [],\n        roundList: importObj.roundList || []\n    };\n    return tourney;\n}\nexport default Object.freeze(createTournament);","// @ts-check\nconst BLACK = 1;\nexport {BLACK};\nconst WHITE = 0;\nexport {WHITE};","// @ts-check\nimport EloRank from \"elo-rank\";\nimport {WHITE, BLACK} from \"./constants\";\n/**\n * @typedef {import(\"./index\").Player} Player\n */\n\nfunction createPlayer(importObj = {}) {\n    /** @type {Player} */\n    const player = {\n        id: importObj.id || 0,\n        type: importObj.type || \"person\", // used for CSS styling etc.\n        firstName: importObj.firstName || \"\",\n        lastName: importObj.lastName || \"\",\n        rating: importObj.rating || 0,\n        matchCount: importObj.matchCount || 0\n    };\n    return player;\n}\nObject.freeze(createPlayer);\nexport {createPlayer};\n\nconst dummyPlayer = createPlayer();\ndummyPlayer.id = -1;\ndummyPlayer.firstName = \"Bye\";\ndummyPlayer.lastName = \"Player\";\ndummyPlayer.type = \"dummy\";\nObject.freeze(dummyPlayer);\nexport {dummyPlayer};\n\n\n/**\n * @param {number} id\n * @param {Player[]} playerList\n * @returns {Player}\n */\nfunction getPlayer(id, playerList) {\n    if (id === -1) {\n        return dummyPlayer;\n    }\n    let player = playerList.filter((p) => p.id === id)[0];\n    if (!player) {\n        player = createPlayer({\n            id: id,\n            firstName: \"Anonymous\",\n            type: \"missing\"\n        });\n    }\n    return player;\n}\nObject.freeze(getPlayer);\nexport {getPlayer};\n\n/**\n * @param {number} playerId\n * @param {number[][]} avoidList\n * @returns {number[]}\n */\nfunction getPlayerAvoidList(playerId, avoidList) {\n    return avoidList.filter( // get pairings with the player\n        (pair) => pair.includes(playerId)\n    ).reduce( // Flatten the array\n        (accumulator, pair) => pair.concat(accumulator),\n        []\n    ).filter( // filter out the player's id\n        (id) => id !== playerId\n    );\n}\nObject.freeze(getPlayerAvoidList);\nexport {getPlayerAvoidList};\n\n/**\n * @param {number[][]} avoidList\n * @param {Player[]} playerList\n */\nfunction cleanAvoidList(avoidList, playerList) {\n    const ids = playerList.map((p) => p.id);\n    return avoidList.filter(\n        (pairs) => (ids.includes(pairs[0]) && ids.includes(pairs[1]))\n    );\n}\nObject.freeze(cleanAvoidList);\nexport {cleanAvoidList};\n\n/**\n * @param {number} matchCount\n */\nfunction kFactor(matchCount) {\n    const ne = matchCount || 1;\n    return (800 / ne);\n}\nObject.freeze(kFactor);\nexport {kFactor};\n\n/**\n * @param {[number, number]} origRatings\n * @param {[number, number]} matchCounts\n * @param {[number, number]} result\n */\nfunction calcNewRatings(origRatings, matchCounts, result) {\n    const whiteElo = new EloRank(kFactor(matchCounts[WHITE]));\n    const blackElo = new EloRank(kFactor(matchCounts[BLACK]));\n    const FLOOR = 100;\n    const scoreExpected = [\n        whiteElo.getExpected(origRatings[WHITE], origRatings[BLACK]),\n        blackElo.getExpected(origRatings[BLACK], origRatings[WHITE])\n    ];\n    const newRating = [\n        whiteElo.updateRating(\n            scoreExpected[WHITE],\n            result[WHITE],\n            origRatings[WHITE]\n        ),\n        blackElo.updateRating(\n            scoreExpected[BLACK],\n            result[BLACK],\n            origRatings[BLACK]\n        )\n    ];\n    return newRating.map(\n        (rating) => (\n            (rating < FLOOR)\n            ? FLOOR\n            : rating\n        )\n    );\n}\nObject.freeze(calcNewRatings);\nexport {calcNewRatings};","// @ts-check\n/**\n * @param {number} playerCount\n */\nfunction calcNumOfRounds(playerCount) {\n    let roundId = Math.ceil(Math.log2(playerCount));\n    if (!Number.isFinite(roundId)) {\n        roundId = 0;\n    }\n    return roundId;\n}\nObject.freeze(calcNumOfRounds);\nexport {calcNumOfRounds};\n\n/**\n * @param {Object[]} list\n * @param {number | string} id\n */\nfunction getById(list, id) {\n    return list.filter((x) => x.id === id)[0];\n}\nObject.freeze(getById);\nexport {getById};\n/**\n * @param {Object[]} list\n * @param {number | string} id\n */\nfunction getIndexById(list, id) {\n    return list.indexOf(getById(list, id));\n}\nObject.freeze(getIndexById);\nexport {getIndexById};","// @ts-check\n/**\n * @typedef {import(\"./index\").Match} Match\n */\n/**\n *\n * @param {object} importObj\n */\nfunction createMatch(importObj) {\n    /** @type {Match} */\n    const match = {\n        id: importObj.id,\n        players: importObj.players,\n        result: importObj.result || [0, 0],\n        origRating: importObj.origRating,\n        newRating: importObj.newRating\n    };\n    return match;\n}\nexport default Object.freeze(createMatch);\n","// @ts-check\nimport {firstBy} from \"thenby\";\nimport {\n    dummyPlayer,\n    getPlayer,\n    getPlayerAvoidList\n} from \"../data/player\";\n\n/**\n * @typedef {import(\"./\").ScoreCalculator} ScoreCalculator\n * @typedef {import(\"./\").PlayerData} PlayerData\n * @typedef {import(\"./\").Standing} Standing\n * @typedef {import(\"../data/\").Match} Match\n * @typedef {import(\"../data/\").Player} Player\n */\n\n/**\n *\n * @param {Match} match\n * @returns {boolean}\n */\nfunction isBye(match) {\n    return match.players.includes(dummyPlayer.id);\n}\n\n/**\n * @param {number} playerId\n * @param {object[]} matchList\n * @returns {number?}\n */\nfunction playerMatchColor(playerId, matchList) {\n    /**@type {number} */\n    let color = null;\n    const match = matchList.filter((m) => m.players.includes(playerId))[0];\n    if (match) {\n        color = match.players.indexOf(playerId);\n    }\n    return color;\n}\nObject.freeze(playerMatchColor);\nexport {playerMatchColor};\n\n/**\n * @type {ScoreCalculator}\n * @returns {Match[]}\n */\nfunction getMatchesByPlayer(playerId, roundList, roundId = null) {\n    let rounds;\n    if (roundId === null) {\n        rounds = roundList;\n    } else {\n        rounds = roundList.slice(0, roundId + 1);\n    }\n    return rounds.reduce( // flatten the rounds to just the matches\n        (acc, round) => acc.concat(round),\n        []\n    ).filter(\n        (match) => match.players.includes(playerId)\n    );\n}\n\n/**\n * @type {ScoreCalculator}\n * @returns {boolean}\n */\nfunction hasHadBye(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        playerId,\n        roundList,\n        roundId\n    ).reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    ).includes(dummyPlayer.id);\n}\nObject.freeze(hasHadBye);\nexport {hasHadBye};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number[]}\n */\nfunction getPlayersByOpponent(opponentId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        opponentId,\n        roundList,\n        roundId\n    ).reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    ).filter(\n        (playerId) => playerId !== opponentId\n    );\n}\nObject.freeze(getPlayersByOpponent);\nexport {getPlayersByOpponent};\n\n/**\n * Get a list of all of a player's scores from each match.\n * @type {ScoreCalculator}\n * @returns {number[]} the list of scores\n */\nfunction playerScoreList(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(playerId, roundList, roundId).map(\n        (match) => match.result[match.players.indexOf(playerId)]\n    );\n}\n\n/**\n * TODO: Maybe merge this with the other function?\n */\n/**\n * @type {ScoreCalculator}\n * @returns {number[]}\n */\nfunction playerScoreListNoByes(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        playerId,\n        roundList,\n        roundId\n    ).filter(\n        (match) => !isBye(match)\n    ).map(\n        (match) => match.result[match.players.indexOf(playerId)]\n    );\n}\n\n/**\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerScore(playerId, roundList, roundId = null) {\n    let score = 0;\n    const scoreList = playerScoreList(playerId, roundList, roundId);\n    if (scoreList.length > 0) {\n        score = scoreList.reduce((a, b) => a + b);\n    }\n    return score;\n}\nObject.freeze(playerScore);\nexport {playerScore};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerScoreCum(playerId, roundList, roundId = null) {\n    let runningScore = 0;\n    /** @type {number[]} */\n    let cumScores = [];\n    let scores = playerScoreListNoByes(playerId, roundList, roundId);\n    scores.forEach(function (score) {\n        runningScore += score;\n        cumScores.push(runningScore);\n    });\n    let totalScore = 0;\n    if (cumScores.length !== 0) {\n        totalScore = cumScores.reduce((a, b) => a + b);\n    }\n    return totalScore;\n}\n\n/**\n * Calculate a player's color balance. A negative number means they played as\n * white more. A positive number means they played as black more.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerColorBalance(playerId, roundList, roundId = null) {\n    let color = 0;\n    getMatchesByPlayer(playerId, roundList, roundId).filter(\n        (match) => !isBye(match)\n    ).forEach(\n        function (match) {\n            if (match.players[0] === playerId) {\n                color += -1;\n            } else if (match.players[1] === playerId) {\n                color += 1;\n            }\n        }\n    );\n    return color;\n}\nObject.freeze(playerColorBalance);\nexport {playerColorBalance};\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @type {ScoreCalculator}\n * @param {boolean} [isSolkoff]\n * @returns {number}\n */\nfunction modifiedMedian(pId, roundList, roundId = null, isSolkoff = false) {\n    // get all of the opponent's scores\n    let scores = getPlayersByOpponent(\n        pId,\n        roundList,\n        roundId\n    ).filter(\n        (opponent) => opponent !== dummyPlayer.id\n    ).map(\n        (opponent) => playerScore(opponent, roundList, roundId)\n    );\n    //sort them, then remove the first and last items\n    scores.sort();\n    if (!isSolkoff) {\n        scores.pop();\n        scores.shift();\n    }\n    let finalScore = 0;\n    if (scores.length > 0) {\n        finalScore = scores.reduce((a, b) => a + b);\n    }\n    return finalScore;\n}\n\n/**\n * A shortcut for passing the `isSolkoff` variable to `modifiedMedian`.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction solkoff(playerId, roundList, roundId = null) {\n    return modifiedMedian(playerId, roundList, roundId, true);\n}\n\n/**\n * Get the cumulative scores of a player's opponents.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerOppScoreCum(playerId, roundList, roundId = null) {\n    const opponents = getPlayersByOpponent(\n        playerId,\n        roundList,\n        roundId\n    ).filter(\n        (opponent) => opponent !== dummyPlayer.id\n    );\n    let oppScores = opponents.map((p) => playerScoreCum(p, roundList, roundId));\n    let score = 0;\n    if (oppScores.length !== 0) {\n        score = oppScores.reduce((a, b) => a + b);\n    }\n    return score;\n}\n\nconst tieBreakMethods = [\n    {\n        name: \"Modified median\",\n        func: modifiedMedian\n    },\n    {\n        name: \"Solkoff\",\n        func: solkoff\n    },\n    {\n        name: \"Cumulative score\",\n        func: playerScoreCum\n    },\n    {\n        name: \"Cumulative of opposition\",\n        func: playerOppScoreCum\n    },\n    {\n        name: \"Most black\",\n        func: playerColorBalance\n    }\n];\n\nObject.freeze(tieBreakMethods);\nexport {tieBreakMethods};\n\n/**\n * @param {Standing} standing1\n * @param {Standing} standing2\n * @returns {boolean}\n */\nfunction areScoresEqual(standing1, standing2) {\n    let areEqual = true;\n    // Check if any of them aren't equal\n    if (standing1.score !== standing2.score) {\n        areEqual = false;\n    }\n    Object.keys(standing1.tieBreaks).forEach(function (index) {\n        if (standing1.tieBreaks[index] !== standing2.tieBreaks[index]) {\n            areEqual = false;\n        }\n    });\n    return areEqual;\n}\n\n/**\n * @typedef {import(\"../data/index\").Round} Round\n */\n\n/**\n * @param {Round[]} roundList\n * @returns {number[]}\n */\nfunction getAllPlayers(roundList) {\n    const allPlayers = roundList.reduce( // flatten the rounds\n        (acc, round) => acc.concat(round),\n        []\n    ).reduce( // flaten the players\n        (acc, match) => acc.concat(match.players),\n        []\n    );\n    return Array.from(new Set(allPlayers));\n}\n\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * @param {number[]} methods\n * @param {Round[]} roundList\n * @param {number} [roundId]\n * @returns {[Standing[][], string[]]} The standings and the list of method used\n */\nfunction calcStandings(methods, roundList, roundId = null) {\n    const tieBreaks = methods.map((m) => tieBreakMethods[m]);\n    // Get a flat list of all of the players and their scores.\n    const standingsFlat = getAllPlayers(roundList).map(function (pId) {\n        /** @type {Standing} */\n        const standing = {\n            id: pId,\n            score: playerScore(pId, roundList, roundId),\n            tieBreaks: tieBreaks.map((method) => (\n                method.func(pId, roundList, roundId)\n            ))\n        };\n        return standing;\n    });\n    // Create a function to sort the players\n    let sortFunc = firstBy((standing) => standing.score, -1);\n    // For each tiebreak method, chain another `thenBy` to the function.\n    tieBreaks.forEach(function (ignore, index) {\n        sortFunc = sortFunc.thenBy((standing) => standing.tieBreaks[index], -1);\n    });\n    // Finally, sort the players.\n    standingsFlat.sort(sortFunc);\n    /** @type {Standing[][]} */\n    const standingsTree = [];\n    let runningRank = 0;\n    standingsFlat.forEach(function (standing, i, orig) {\n        if (i !== 0) { // we can't compare the first player with a previous one\n            const prevPlayer = orig[i - 1];\n            if (!areScoresEqual(standing, prevPlayer)) {\n                runningRank += 1;\n            }\n        }\n        if (!standingsTree[runningRank]) {\n            standingsTree[runningRank] = [];\n        }\n        standingsTree[runningRank].push(standing);\n    });\n    return [standingsTree, tieBreaks.map((m) => m.name)];\n}\nObject.freeze(calcStandings);\nexport {calcStandings};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number?} 0 for white, 1 for black, null if no color history\n */\nfunction dueColor(playerId, roundList, roundId = null) {\n    if (!roundList[roundId - 1]) {\n        return null;\n    }\n    let color = 0;\n    let prevColor = playerMatchColor(\n        playerId,\n        roundList[roundId - 1]\n    );\n    if (prevColor === 0) {\n        color = 1;\n    }\n    return color;\n}\n\n/**\n * @param {number} playerId\n * @param {Round[]} roundList\n * @param {number} roundId\n * @param {Player[]} playerList\n * @param {number[][]} avoidList\n * @returns {PlayerData}\n */\nfunction genPlayerData(playerId, playerList, avoidList, roundList, roundId) {\n    const player = getPlayer(playerId, playerList);\n    return {\n        data: player,\n        rating: player.rating,\n        id: playerId,\n        score: playerScore(playerId, roundList, roundId),\n        dueColor: dueColor(playerId, roundList, roundId),\n        colorBalance: playerColorBalance(playerId, roundList, roundId),\n        opponentHistory: getPlayersByOpponent(playerId, roundList, null),\n        upperHalf: false,\n        avoidList: getPlayerAvoidList(playerId, avoidList),\n        hasHadBye: hasHadBye(playerId, roundList, roundId)\n    };\n}\nObject.freeze(genPlayerData);\nexport {genPlayerData};\n","// @ts-check\nimport {firstBy} from \"thenby\";\nimport chunk from \"lodash/chunk\";\nimport last from \"lodash/last\";\nimport blossom from \"edmonds-blossom\";\nimport {dummyPlayer} from \"../data/player\";\nimport {genPlayerData} from \"./scoring\";\n/**\n * @typedef {import(\"./\").PlayerData} PlayerData\n */\n\n/**\n * TODO: These probably need to be tweaked a lot.\n */\n/**\n * @constant avoidMeetingTwicePriority The weight given to avoid players\n * meeting twice. This same weight is given to avoid matching players on each\n * other's \"avoid\" list. This is the highest priority. (USCF § 27A1)\n * @type {number}\n */\nconst avoidMeetingTwicePriority = 20;\n/**\n * @constant sameScoresPriority The weight given to match players with\n * equal scores. This gets muliplied against a ratio taken from the distance\n * between each player's score. For example, if the tournament has players\n * scoring 0, 1, 2, and 3, and if a player scoring 1 gets compared with a\n * player scoring 3, then their `sameScoresPriority` will be reduced by 50%.\n * (`(3 - 1) / 4 = 0.5`) (USCF § 27A2)\n * @type {number}\n */\nconst sameScoresPriority = 16;\n/**\n * @constant differentHalfPriority The weight given to match players in lower\n * versus upper halves. This is only applied to players being matched within\n * the same score group. (USCF § 27A3)\n * @type {number}\n */\nconst differentHalfPriority = 2;\n/**\n * @constant differentDueColorPriority The weight given to match players with\n * opposite due colors. (USCF § 27A4 and § 27A5)\n * @type {number}\n */\nconst differentDueColorPriority = 1;\n// /** @type {number} */\n// const maxPriority = (\n//     avoidMeetingTwicePriority\n//     + sameScoresPriority\n//     + differentHalfPriority\n//     + differentDueColorPriority\n// );\n\n\n/**\n * Create an array of blossom-compatible weighted matchups. This returns\n * an array of each potential match, formatted like so: [idOfPlayer1,\n * idOfPlayer2, priority]. A higher priority means a more likely matchup.\n * @param {PlayerData} player1\n * @param {PlayerData} player2\n * @param {number[]} scoreList\n * @returns {number}\n */\nfunction calcPairIdeal(player1, player2, scoreList) {\n    let priority = 0;\n    let scoreDiff;\n    const metBefore = player1.opponentHistory.includes(player2.id);\n    const mustAvoid = player1.avoidList.includes(player2.id);\n    if (!metBefore && !mustAvoid) {\n        priority += avoidMeetingTwicePriority;\n    }\n    // Calculate the \"distance\" between their scores and multiply that\n    // against the `sameScoresPriority` constant.\n    scoreDiff = Math.abs(\n        scoreList.indexOf(player1.score)\n        - scoreList.indexOf(player2.score)\n    );\n    scoreDiff = (scoreList.length - scoreDiff) / scoreList.length;\n    priority += sameScoresPriority * scoreDiff;\n    // Only include `differentHalfPriority` if they're in the same\n    // score group.\n    if (player1.score === player2.score) {\n        if (player1.upperHalf !== player2.upperHalf) {\n            priority += differentHalfPriority;\n        }\n    }\n    if (player1.dueColor === null) {\n        priority += differentDueColorPriority;\n    } else if (player1.dueColor !== player2.dueColor) {\n        priority += differentDueColorPriority;\n    }\n    return Math.ceil(priority);\n}\nObject.freeze(calcPairIdeal);\nexport {calcPairIdeal};\n\n/**\n * Creates pairings according to the rules specified in USCF § 27, § 28,\n * and § 29. This is a work in progress and does not account for all of the\n * rules yet.\n * @param {object[][]} roundList\n * @param {number} roundId\n * @param {number[]} players\n * @param {object[]} playerList\n * @param {number[][]} avoidList\n */\nfunction pairPlayers(players, roundId, roundList, playerList, avoidList) {\n    /** @type {number[]} */\n    let byeMatch;\n    /** @type {number[][]} */\n    let potentialMatches;\n    /** @type {Number[][]} */\n    let matches;\n    /** @type {number[]} */\n    let blossomResults;\n    /** @type {[PlayerData, PlayerData, number][]} */\n    let reducedResults;\n    /** @type {number[]} */\n    let scoreList;\n    /** @type {PlayerData[]} */\n    let playerData = players.map((playerId) => (\n        genPlayerData(playerId, playerList, avoidList, roundList, roundId)\n    ));\n    scoreList = Array.from(new Set(playerData.map((p) => p.score)));\n    scoreList.sort();\n    // Sort the data so matchups default to order by score and rating.\n    playerData.sort(\n        firstBy((p) => p.score, -1).thenBy((p) => p.rating, -1)\n    );\n    // If there's an odd number of players, time to assign a bye.\n    if (playerData.length % 2 !== 0) {\n        // Assign a bye to the lowest-rated player in the lowest score group.\n        // (USCF § 29L2.)\n        // filter out players who have had a bye already.\n        let byePlayerData = last(playerData.filter((p) => !p.hasHadBye));\n        // In the impossible situation that *everyone* has played a bye round\n        // previously, then just pick the last player.\n        if (!byePlayerData) {\n            byePlayerData = last(playerData);\n        }\n        byeMatch = [byePlayerData.id, dummyPlayer.id];\n        // Remove the bye'd player from the list so they won't be matched again.\n        playerData = playerData.filter((p) => p !== byePlayerData);\n    }\n    // Determine which players are in the upper and lower halves of their score\n    // groups.\n    scoreList.forEach(function (score) {\n        let playersWithScore = playerData.filter((pd) => pd.score === score);\n        playersWithScore.sort((pd) => pd.rating).reverse();\n        if (playersWithScore.length > 1) {\n            // The first chunk is the upper half\n            chunk(\n                playersWithScore,\n                playersWithScore.length / 2\n            )[0].forEach(function (playerDatum) {\n                playerDatum.upperHalf = true;\n            });\n        }\n    });\n    // Turn the data into blossom-compatible input.\n    potentialMatches = playerData.reduce(\n        function (acc, player1, ignore, src) {\n            const playerMatches = src.filter(\n                (player) => player !== player1\n            ).map(\n                (player2) => [\n                    player1.id,\n                    player2.id,\n                    calcPairIdeal(player1, player2, scoreList)\n                ]\n            );\n            return acc.concat(playerMatches);\n        },\n        []\n    );\n    // Feed all of the potential matches to Edmonds-blossom and let the\n    // algorithm work its magic. This returns an array where each index is the\n    // ID of one player and each value is the ID of the matched player.\n    blossomResults = blossom(potentialMatches);\n    // Translate those IDs into actual pairs of players.\n    reducedResults = blossomResults.reduce(\n        function (acc, p1Id, p2Id) {\n            // Filter out unmatched players. Even though we removed the byes\n            // from the list, blossom will automatically include their missing\n            // IDs in its results.\n            if (p1Id !== -1) {\n                const p1 = playerData.filter((p) => p.id === p1Id)[0];\n                const p2 = playerData.filter((p) => p.id === p2Id)[0];\n                const ideal = potentialMatches.filter(\n                    (pair) => pair[0] === p1Id && pair[1] === p2Id\n                )[0][2];\n                const matched = acc.map((pair) => pair[0]);\n                // Blossom returns a lot of redundant matches. Check that this\n                // matchup wasn't already added.\n                if (!matched.includes(p1) && !matched.includes(p2)) {\n                    acc.push([p1, p2, ideal]);\n                }\n            }\n            return acc;\n        },\n        []\n    );\n    // Sort by net score and rating for board placement.\n    reducedResults.sort(\n        firstBy(\n            /** @param {[PlayerData, PlayerData, number]} pair */\n            (pair) => pair[0].score + pair[1].score,\n            -1\n        ).thenBy(\n            /** @param {[PlayerData, PlayerData, number]} pair */\n            (pair) => pair[0].rating + pair[1].rating,\n            -1\n        )\n    );\n    // Turn the results into new match objects.\n    matches = reducedResults.map(\n        function (pair) {\n            const player1 = pair[0];\n            const player2 = pair[1];\n            // const ideal = pair[2];\n            const match = [player1.id, player2.id];\n            if (player1.colorBalance < player2.colorBalance) {\n                match.reverse();\n            }\n            return match;\n        }\n    );\n    // The bye match always gets added last so as not to affect the numbering.\n    if (byeMatch) {\n        matches.push(byeMatch);\n    }\n    return matches;\n}\nexport default Object.freeze(pairPlayers);\n","// @ts-check\nimport {BLACK, WHITE} from \"../data/constants\";\nimport createMatch from \"../data/match\";\nimport {hasHadBye} from \"../pairing-scoring/scoring\";\nimport {dummyPlayer, getPlayer} from \"../data/player\";\nimport pairPlayers from \"../pairing-scoring/pairing\";\nimport {getById} from \"../data/utility\";\n/**\n* @typedef {import(\"./dispatch\").GlobalState} GlobalState\n*/\n\n/**\n * @param {GlobalState} state\n * @param {number} tourneyId\n * @param {number} roundId\n * @param {number[]} unPairedPlayers\n */\nfunction autoPair(state, tourneyId, roundId, unPairedPlayers) {\n    const tourney = state.tourneys[tourneyId];\n    const roundList = tourney.roundList;\n    const nextBye = tourney.byeQueue.filter(\n        (pId) => !hasHadBye(pId, roundList)\n    )[0];\n    let byeMatch = null;\n    if (nextBye >= 0) {\n        byeMatch = createMatch({\n            id: nextBye + \"-\" + dummyPlayer.id,\n            players: [nextBye, dummyPlayer.id],\n            origRating: [\n                getPlayer(nextBye, state.players).rating,\n                dummyPlayer.rating\n            ],\n            newRating: [\n                getPlayer(nextBye, state.players).rating,\n                dummyPlayer.rating\n            ]\n        });\n        unPairedPlayers = unPairedPlayers.filter((pId) => pId !== nextBye);\n    }\n    const pairs = pairPlayers(\n        unPairedPlayers,\n        roundId,\n        roundList,\n        state.players,\n        state.avoid\n    );\n    const newMatchList = pairs.map(\n        (pair) => createMatch({\n            id: pair.join(\"-\"),\n            players: [pair[WHITE], pair[BLACK]],\n            origRating: [\n                getPlayer(pair[WHITE], state.players).rating,\n                getPlayer(pair[BLACK], state.players).rating\n            ],\n            newRating: [\n                getPlayer(pair[WHITE], state.players).rating,\n                getPlayer(pair[BLACK], state.players).rating\n            ]\n        })\n    );\n    if (byeMatch) {\n        newMatchList.push(byeMatch);\n    }\n    // this covers manual bye matches and auto-paired bye matches\n    newMatchList.forEach(function (match) {\n        const dummy = match.players.indexOf(dummyPlayer.id);\n        if (dummy === BLACK) {\n            match.result[WHITE] = state.options.byeValue;\n        }\n        if (dummy === WHITE) {\n            match.result[BLACK] = state.options.byeValue;\n        }\n    });\n    return newMatchList;\n}\nObject.freeze(autoPair);\nexport {autoPair};\n\n/**\n * @param {GlobalState} state\n * @param {number[]} pair\n */\nfunction manualPair(state, pair) {\n    const match = createMatch({\n        id: pair.join(\"-\"),\n        players: [pair[WHITE], pair[BLACK]],\n        origRating: [\n            getPlayer(pair[WHITE], state.players).rating,\n            getPlayer(pair[BLACK], state.players).rating\n        ],\n        newRating: [\n            getPlayer(pair[WHITE], state.players).rating,\n            getPlayer(pair[BLACK], state.players).rating\n        ]\n    });\n    if (pair[WHITE] === dummyPlayer.id) {\n        match.result = [state.options.byeValue, 0];\n    }\n    if (pair[BLACK] === dummyPlayer.id) {\n        match.result = [0, state.options.byeValue];\n    }\n    return match;\n}\nObject.freeze(manualPair);\nexport {manualPair};\n\n/**\n * @param {GlobalState} state\n * @param {number} tourneyId\n * @param {number} roundId\n * @param {number} matchId\n */\nfunction swapColors(state, tourneyId, roundId, matchId) {\n    const round = state.tourneys[tourneyId].roundList[roundId];\n    const match = getById(round, matchId);\n    match.players.reverse();\n    match.origRating.reverse();\n    match.newRating.reverse();\n}\nObject.freeze(swapColors);\nexport {swapColors};\n","// @ts-check\nimport {createContext} from \"react\";\nimport last from \"lodash/last\";\nimport arrayMove from \"array-move\";\nimport {createPlayer, getPlayer} from \"../data/player\";\nimport {getById} from \"../data/utility\";\nimport defaultOptions from \"./demo-options.json\";\nimport defaultPlayers from \"./demo-players.json\";\nimport defaultTourneyList from \"./demo-tourney.json\";\nimport {autoPair, manualPair, swapColors} from \"./match-functions\";\n/**\n * @typedef {import(\"./dispatch\").Action} Action\n * @typedef {import(\"./dispatch\").GlobalState} GlobalState\n */\n\n/**\n * @type {GlobalState}\n */\nconst defaultData = {\n    options: defaultOptions,\n    players: defaultPlayers.playerList.map((p) => createPlayer(p)),\n    avoid: defaultPlayers.avoidList,\n    // @ts-ignore\n    tourneys: defaultTourneyList\n};\nexport {defaultData};\n\n/**\n * @param {GlobalState} state\n * @param {Action} action\n * @returns {GlobalState}\n */\nfunction dataReducer(state, action) {\n    const {avoid, players, options, tourneys} = state;\n    switch (action.type) {\n    // Options\n    case \"SET_BYE_VALUE\":\n        options.byeValue = action.byeValue;\n        return Object.assign({}, state);\n    // Players\n    case \"ADD_PLAYER\":\n        return Object.assign(\n            {},\n            state,\n            {players: players.concat([action.newPlayer])}\n        );\n    case \"DEL_PLAYER\":\n        return Object.assign(\n            {},\n            state,\n            {\n                players: players.filter((p) => p.id !== action.id),\n                avoid: avoid.filter(\n                    (pair) => !pair.includes(action.id)\n                )\n            }\n        );\n    case \"SET_PLAYER_MATCHCOUNT\":\n        Object.assign(\n            players[players.map((p) => p.id).indexOf(action.id)],\n            {matchCount: action.matchCount}\n        );\n        return Object.assign({}, state);\n    case \"SET_PLAYER_RATING\":\n        Object.assign(\n            players[players.map((p) => p.id).indexOf(action.id)],\n            {rating: action.rating}\n        );\n        return Object.assign({}, state);\n    // Avoid\n    case \"ADD_AVOID_PAIR\":\n        return Object.assign(\n            {},\n            state,\n            {avoid: avoid.concat([action.pair])}\n        );\n    case \"DEL_AVOID_PAIR\":\n        return Object.assign(\n            {},\n            state,\n            {avoid: avoid.filter(\n                (pair) => !(\n                    pair.includes(action.pair[0])\n                    && pair.includes(action.pair[1])\n                )\n            )}\n        );\n    // Tournaments\n    case \"ADD_TOURNEY\":\n        return Object.assign(\n            {},\n            state,\n            {tourneys: tourneys.concat([action.tourney])}\n        );\n    case \"DEL_TOURNEY\":\n        return Object.assign(\n            {},\n            state,\n            {tourneys: tourneys.filter((ignore, i) => i !== action.index)}\n        );\n    case \"ADD_ROUND\":\n        tourneys[action.tourneyId].roundList = (\n            tourneys[action.tourneyId].roundList.concat([[]])\n        );\n        return Object.assign({}, state);\n    case \"DEL_LAST_ROUND\":\n        // if a match has been scored, then reset it.\n        last(\n            tourneys[action.tourneyId].roundList\n        ).forEach(function (match) {\n            if (match.result.reduce((a, b) => a + b) !== 0) {\n                match.players.forEach(function (pId, color) {\n                    getPlayer(pId, players).matchCount -= 1;\n                    getPlayer(pId, players).rating = (\n                        match.origRating[color]\n                    );\n                });\n            }\n        });\n        tourneys[action.tourneyId].roundList = (\n            tourneys[action.tourneyId].roundList.slice(\n                0,\n                tourneys[action.tourneyId].roundList.length - 1\n            )\n        );\n        return Object.assign({}, state);\n    case \"ADD_TIEBREAK\":\n        tourneys[action.tourneyId].tieBreaks = (\n            tourneys[action.tourneyId].tieBreaks.concat([action.id])\n        );\n        return Object.assign({}, state);\n    case \"DEL_TIEBREAK\":\n        tourneys[action.tourneyId].tieBreaks = (\n            tourneys[action.tourneyId].tieBreaks.filter(\n                (id) => id !== action.id\n            )\n        );\n        return Object.assign({}, state);\n    case \"MOVE_TIEBREAK\":\n        tourneys[action.tourneyId].tieBreaks = arrayMove(\n            tourneys[action.tourneyId].tieBreaks,\n            action.oldIndex,\n            action.newIndex\n        );\n        return Object.assign({}, state);\n    case \"SET_TOURNEY_PLAYERS\":\n        tourneys[action.tourneyId].players = action.players;\n        return Object.assign({}, state);\n    case \"SET_BYE_QUEUE\":\n        tourneys[action.tourneyId].byeQueue = action.byeQueue;\n        return Object.assign({}, state);\n    case \"AUTO_PAIR\":\n        tourneys[action.tourneyId].roundList[action.roundId] = (\n            tourneys[action.tourneyId].roundList[action.roundId].concat(\n                autoPair(\n                    state,\n                    action.tourneyId,\n                    action.roundId,\n                    action.unpairedPlayers\n                )\n            )\n        );\n        return Object.assign({}, state);\n    case \"MANUAL_PAIR\":\n        tourneys[action.tourneyId].roundList[action.roundId] = (\n            tourneys[action.tourneyId].roundList[action.roundId].concat([\n                manualPair(\n                    state,\n                    action.pair\n                )\n            ])\n        );\n        return Object.assign({}, state);\n    case \"SET_MATCH_RESULT\":\n        getById(\n            tourneys[action.tourneyId].roundList[action.roundId],\n            action.matchId\n        ).result = action.result;\n        getById(\n            tourneys[action.tourneyId].roundList[action.roundId],\n            action.matchId\n        ).newRating = action.newRating;\n        return Object.assign({}, state);\n    case \"DEL_MATCH\":\n        tourneys[action.tourneyId].roundList[action.roundId] = (\n            tourneys[action.tourneyId].roundList[action.roundId].filter(\n                (match) => match.id !== action.matchId\n            )\n        );\n        return Object.assign({}, state);\n    case \"SWAP_COLORS\":\n        swapColors(state, action.tourneyId, action.roundId, action.matchId);\n        return Object.assign({}, state);\n    case \"MOVE_MATCH\":\n        tourneys[action.tourneyId].roundList[action.roundId] = arrayMove(\n            tourneys[action.tourneyId].roundList[action.roundId],\n            action.oldIndex,\n            action.newIndex\n        );\n        return Object.assign({}, state);\n    default:\n        throw new Error(\"Unexpected action type\");\n    }\n}\nObject.freeze(dataReducer);\nexport {dataReducer};\n\nconst DataContext = createContext(null);\nexport {DataContext};","// @ts-check\nimport React, {Fragment, useState, useContext} from \"react\";\nimport numeral from \"numeral\";\nimport {OpenButton, PanelContainer, Panel, BackButton} from \"../utility\";\nimport {\n    getPlayer,\n    calcNewRatings,\n    dummyPlayer\n} from \"../../data/player\";\nimport {genPlayerData} from \"../../pairing-scoring/scoring\";\nimport {BLACK, WHITE} from \"../../data/constants\";\nimport {\n    getById,\n    getIndexById\n} from \"../../data/utility\";\nimport {DataContext} from \"../../state/global-state\";\n\nexport default function Round({roundId, tourneyId,}) {\n    const {data, dispatch} = useContext(DataContext);\n    const playerList = data.players;\n    const tourney = data.tourneys[tourneyId];\n    const matchList = tourney.roundList[roundId];\n    const [selectedMatch, setSelectedMatch] = useState(null);\n    const [selectedPlayers, setSelectedPlayers] = useState([]);\n    function selectPlayer(event) {\n        const pId = Number(event.target.value);\n        if (event.target.checked) {\n            setSelectedPlayers(function (prevState) {\n                // stop React from adding an ID twice in a row\n                if (!prevState.includes(pId)) {\n                    prevState.push(pId);\n                }\n                // ensure that only the last two players stay selected.\n                return prevState.slice(-2);\n            });\n        } else {\n            setSelectedPlayers(selectedPlayers.filter((id) => id !== pId));\n        }\n    }\n    const matched = matchList.reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    );\n    const unMatched = tourney.players.filter(\n        (pId) => !matched.includes(pId)\n    );\n    function autoPair(unpairedPlayers) {\n        dispatch({\n            type: \"AUTO_PAIR\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            unpairedPlayers: unpairedPlayers\n        });\n    }\n    function manualPair(pair) {\n        dispatch({\n            type: \"MANUAL_PAIR\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            unpairedPlayers: pair\n        });\n    }\n    function setMatchResult(matchId, result) {\n        const match = getById(tourney.roundList[roundId], matchId);\n        const white = getPlayer(match.players[WHITE], playerList);\n        const black = getPlayer(match.players[BLACK], playerList);\n        const newRating = calcNewRatings(\n            match.origRating,\n            [white.matchCount, black.matchCount],\n            result\n        );\n        dispatch({\n            type: \"SET_PLAYER_RATING\",\n            id: white.id,\n            rating: newRating[WHITE]\n        });\n        dispatch({\n            type: \"SET_PLAYER_RATING\",\n            id: black.id,\n            rating: newRating[BLACK]\n        });\n        // if the result hasn't been scored yet, increment the matchCount\n        if (match.result.reduce((a, b) => a + b) === 0) {\n            dispatch({\n                type: \"SET_PLAYER_MATCHCOUNT\",\n                id: white.id,\n                matchCount: white.matchCount + 1\n            });\n            dispatch({\n                type: \"SET_PLAYER_MATCHCOUNT\",\n                id: black.id,\n                matchCount: black.matchCount + 1\n            });\n        }\n        // setPlayerList([...playerList]);\n        dispatch({\n            type: \"SET_MATCH_RESULT\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            matchId: matchId,\n            result: result,\n            newRating: newRating\n        });\n    }\n    function unMatch(matchId) {\n        const match = getById(tourney.roundList[roundId], matchId);\n        if (match.result.reduce((a, b) => a + b) !== 0) {\n            // checks if the match has been scored yet & resets the players'\n            // records\n            match.players.forEach(function (pId, color) {\n                dispatch({\n                    type: \"SET_PLAYER_MATCHCOUNT\",\n                    id: pId,\n                    matchCount: getPlayer(pId, playerList).matchCount - 1\n                });\n                dispatch({\n                    type: \"SET_PLAYER_RATING\",\n                    id: pId,\n                    rating: match.origRating[color]\n                });\n            });\n        }\n        dispatch({\n            type: \"DEL_MATCH\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            matchId: matchId\n        });\n        setSelectedMatch(null);\n    }\n    function swapColors(matchId) {\n        dispatch({\n            type: \"SWAP_COLORS\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            matchId: matchId\n        });\n    }\n    function moveMatch(matchId, direction) {\n        const matchesRef = data.tourneys[tourneyId].roundList[roundId];\n        const mIndex = getIndexById(matchesRef, matchId);\n        dispatch({\n            type: \"MOVE_MATCH\",\n            tourneyId: tourneyId,\n            roundId: roundId,\n            matchId: matchId,\n            oldIndex: mIndex,\n            newIndex: mIndex + direction\n        });\n    }\n    return (\n        <PanelContainer>\n            <Panel>\n            <div className=\"toolbar\">\n                <button\n                    onClick={() => unMatch(selectedMatch)}\n                    disabled={selectedMatch === null}>\n                    Unmatch\n                </button>\n                <button\n                    onClick={() => swapColors(selectedMatch)}\n                    disabled={selectedMatch === null}>\n                    Swap colors\n                </button>\n                <button\n                    onClick={() => moveMatch(selectedMatch, -1)}\n                    disabled={selectedMatch === null}>\n                    Move up\n                </button>\n                <button\n                    onClick={() => moveMatch(selectedMatch, 1)}\n                    disabled={selectedMatch === null}>\n                    Move down\n                </button>\n            </div>\n            <table className=\"table__roster\">\n                <caption>Round {roundId + 1} results</caption>\n                <thead>\n                <tr>\n                    <th className=\"row__id\">#</th>\n                    <th className=\"row__player\">White</th>\n                    <th className=\"row__result\">Result</th>\n                    <th className=\"row__player\">Black</th>\n                    <th className=\"row__controls\"></th>\n                </tr>\n                </thead>\n                <tbody>\n                {matchList.map((match, pos) =>\n                    <tr key={match.id}>\n                        <td className=\"table__number row__id\">{pos + 1}</td>\n                        <td className=\"table__player row__player\">\n                            {getPlayer(match.players[0], playerList).firstName}\n                            &nbsp;\n                            {getPlayer(match.players[0], playerList).lastName}\n                        </td>\n                        <td className=\"data__input row__result\">\n                            <input\n                                type=\"radio\"\n                                checked={(match.result[0] > match.result[1])}\n                                onChange={\n                                    () => setMatchResult(match.id, [1, 0])\n                                }\n                                disabled={\n                                    match.players.includes(dummyPlayer.id)\n                                }/>\n                            <input\n                                type=\"radio\"\n                                checked={match.result.every((x) => x === 0.5)}\n                                onChange={\n                                    () => setMatchResult(match.id, [0.5, 0.5])\n                                }\n                                disabled={\n                                    match.players.includes(dummyPlayer.id)\n                                }/>\n                            <input\n                                type=\"radio\"\n                                checked={(match.result[1] > match.result[0])}\n                                onChange={\n                                    () => setMatchResult(match.id, [0, 1])\n                                }\n                                disabled={\n                                    match.players.includes(dummyPlayer.id)\n                                }/>\n                        </td>\n                        <td className=\"table__player row__player\">\n                            {getPlayer(match.players[1], playerList).firstName}\n                            &nbsp;\n                            {getPlayer(match.players[1], playerList).lastName}\n                        </td>\n                        <td className=\"data__input row__controls\">\n                        {(\n                        (selectedMatch !== match.id)\n                        ? <OpenButton\n                            action={() => setSelectedMatch(match.id)} />\n                        : <BackButton action={() => setSelectedMatch(null)} />\n                        )}\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n            </Panel>\n            <Panel>\n            {selectedMatch !== null &&\n                <PanelContainer>\n                    <Panel>\n                        <PlayerMatchInfo\n                            match={getById(matchList, selectedMatch)}\n                            color={0}\n                            tourneyId={tourneyId}\n                            roundId={roundId}/>\n                    </Panel>\n                    <Panel>\n                        <PlayerMatchInfo\n                            match={getById(matchList, selectedMatch)}\n                            color={1}\n                            tourneyId={tourneyId}\n                            roundId={roundId}/>\n                    </Panel>\n                </PanelContainer>\n            }\n            {unMatched.length > 0 && (\n                <Fragment>\n                    <h3>Unmatched players</h3>\n                    <ul>\n                        {unMatched.map((pId) =>\n                            <li key={pId}>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={selectedPlayers.includes(pId)}\n                                    value={pId}\n                                    onChange={selectPlayer}/>\n                                {getPlayer(pId, playerList).firstName}&nbsp;\n                                {getPlayer(pId, playerList).lastName}\n                            </li>\n                        )}\n                        {(unMatched.length % 2 !== 0) &&\n                            <li>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={\n                                        selectedPlayers.includes(dummyPlayer.id)\n                                    }\n                                    value={dummyPlayer.id}\n                                    onChange={selectPlayer}/>\n                                {dummyPlayer.firstName} {dummyPlayer.lastName}\n                            </li>\n                        }\n                    </ul>\n                    <button\n                        onClick={() => manualPair(selectedPlayers)}\n                        disabled={selectedPlayers.length !== 2}>\n                        Pair checked\n                    </button>&nbsp;\n                    <button\n                        onClick={() => autoPair(unMatched)}\n                        disabled={unMatched.length === 0}>\n                        Auto-pair\n                    </button>\n                </Fragment>\n            )}\n            </Panel>\n        </PanelContainer>\n    );\n}\n\nfunction PlayerMatchInfo({match, color, tourneyId, roundId}) {\n    const {data} = useContext(DataContext);\n    const playerList = data.players;\n    const playerData = genPlayerData(\n        match.players[color],\n        playerList,\n        data.avoid,\n        data.tourneys[tourneyId].roundList,\n        roundId\n    );\n    const colorBalance = playerData.colorBalance;\n    let prettyBalance = \"Even\";\n    if (colorBalance < 0) {\n        prettyBalance = \"White +\" + Math.abs(colorBalance);\n    } else if (colorBalance > 0) {\n        prettyBalance = \"Black +\" + colorBalance;\n    }\n    return (\n        <dl className=\"player-card\">\n            <h3>\n                {playerData.data.firstName}&nbsp;\n                {playerData.data.lastName}\n            </h3>\n            <dt>Score</dt>\n            <dd>{playerData.score}</dd>\n            <dt>Rating</dt>\n            <dd>\n                {match.origRating[color]}\n                &nbsp;\n                (\n                {numeral(\n                    match.newRating[color] - match.origRating[color]\n                ).format(\"+0\")}\n                )\n            </dd>\n            <dt>Color balance</dt>\n            <dd>{prettyBalance}</dd>\n            <dt>Has had a bye round</dt>\n            <dd>{(playerData.hasHadBye) ? \"Yes\" : \"No\"}</dd>\n            <dt>Opponent history</dt>\n            <dd>\n                <ol>\n                {playerData.opponentHistory.map((opId) =>\n                    <li key={opId}>\n                    {getPlayer(opId, playerList).firstName}&nbsp;\n                    {getPlayer(opId, playerList).lastName}\n                    </li>\n                )}\n                </ol>\n            </dd>\n            <dt>Players to avoid</dt>\n            <dd>\n                <ol>\n                {playerData.avoidList.map((pId) =>\n                    <li key={pId}>\n                        {getPlayer(pId, playerList).firstName}&nbsp;\n                        {getPlayer(pId, playerList).lastName}\n                    </li>\n                )}\n                </ol>\n            </dd>\n        </dl>\n    );\n}\n","import React, {useContext, useState} from \"react\";\nimport {getPlayer} from \"../../data/player\";\nimport {tieBreakMethods, hasHadBye} from \"../../pairing-scoring/scoring\";\nimport {PanelContainer, Panel} from \"../utility\";\nimport {DataContext} from \"../../state/global-state\";\n\nexport default function PlayerSelect({tourneyId}) {\n    const {data, dispatch} = useContext(DataContext);\n    const playerList = data.players;\n    const players = data.tourneys[tourneyId].players;\n    const tourney = data.tourneys[tourneyId];\n    const [isSelecting, setIsSelecting] = useState((players.length === 0));\n    const [selectedTb, setSelectedTb] = useState(null);\n    function toggleTb(id = null) {\n        if (!id) {\n            id = selectedTb;\n        }\n        const tieBreaks = data.tourneys[tourneyId].tieBreaks;\n        if (tieBreaks.includes(id)) {\n            dispatch({type: \"DEL_TIEBREAK\", id: id, tourneyId: tourneyId});\n        } else {\n            dispatch({type: \"ADD_TIEBREAK\", id: id, tourneyId: tourneyId});\n        }\n    }\n    function moveTb(direction) {\n        const index = data.tourneys[tourneyId].tieBreaks.indexOf(selectedTb);\n        dispatch({\n            type: \"MOVE_TIEBREAK\",\n            tourneyId: tourneyId,\n            oldIndex: index,\n            newIndex: index + direction\n        });\n    }\n    function togglePlayer(event) {\n        const id = Number(event.target.value);\n        if (event.target.checked) {\n            dispatch({\n                type: \"SET_TOURNEY_PLAYERS\",\n                tourneyId: tourneyId,\n                players: players.concat([id])\n            });\n        } else {\n            dispatch({\n                type: \"SET_TOURNEY_PLAYERS\",\n                tourneyId: tourneyId,\n                players: players.filter((pId) => pId !== id)\n            });\n        }\n    }\n    if (isSelecting) {\n        return (\n            <table>\n                <caption>Select players</caption>\n                <thead>\n                    <tr>\n                        <th>First name</th>\n                        <th>Last name</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                {playerList.map((p) =>\n                    <tr key={p.id}>\n                        <td>{p.firstName}</td>\n                        <td>{p.lastName}</td>\n                        <td>\n                            <input\n                                type=\"checkbox\"\n                                value={p.id}\n                                checked={players.includes(p.id)}\n                                onChange={togglePlayer} />\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n                <tfoot>\n                    <tr>\n                        <td colSpan={3}>\n                            <button\n                                onClick={\n                                    () => dispatch({\n                                        type: \"SET_TOURNEY_PLAYERS\",\n                                        players: playerList.map((p) => p.id)\n                                    })\n                                }>\n                                Select all\n                            </button>\n                            <button\n                                onClick={\n                                    () => dispatch({\n                                        type: \"SET_TOURNEY_PLAYERS\",\n                                        players: []\n                                    })\n                                }>\n                                Select none\n                            </button>\n                            <button onClick={() => setIsSelecting(false)}>\n                                Done\n                            </button>\n                        </td>\n                    </tr>\n                </tfoot>\n            </table>\n        );\n    } else {\n        return (\n            <PanelContainer>\n            <Panel>\n            <table>\n                <thead>\n                    <tr>\n                        <th>First name</th>\n                        <th>Last name</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                {players.map((pId) =>\n                    <tr\n                        key={pId}\n                        className={\n                            getPlayer(pId, playerList).type + \" player\"\n                        }>\n                        <td>{getPlayer(pId, playerList).firstName}</td>\n                        <td>{getPlayer(pId, playerList).lastName}</td>\n                        <td>\n                            <button\n                                onClick={\n                                    () => dispatch({\n                                        type: \"SET_BYE_QUEUE\",\n                                        tourneyId: tourneyId,\n                                        byeQueue: tourney.byeQueue.concat([pId])\n                                    })\n                                }\n                                disabled={tourney.byeQueue.includes(pId)}>\n                                Bye signup\n                            </button>\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n            <button onClick={() => setIsSelecting(true)}>\n                Edit player roster\n            </button>\n            <h3>Bye queue</h3>\n            <ol>\n            {tourney.byeQueue.map((pId) =>\n                <li\n                    key={pId}\n                    className={(\n                        (hasHadBye(pId, tourney.roundList))\n                        ? \"disabled\"\n                        : \"\"\n                    )}>\n                    {getPlayer(pId, playerList).firstName}&nbsp;\n                    {getPlayer(pId, playerList).lastName}\n                    <button\n                        onClick={\n                            () => dispatch({\n                                type: \"SET_BYE_QUEUE\",\n                                tourneyId: tourneyId,\n                                byeQueue: tourney.byeQueue.filter(\n                                    (id) => pId !== id\n                                )\n                            })\n                        }>\n                        Remove\n                    </button>\n                </li>\n            )}\n            </ol>\n            </Panel>\n            <Panel>\n                <h3>Selected tiebreak methods</h3>\n                <div className=\"toolbar\">\n                    <button\n                        onClick={() => toggleTb()}\n                        disabled={selectedTb === null}>\n                        Toggle\n                    </button>\n                    <button\n                        onClick={() => moveTb(-1)}\n                        disabled={selectedTb === null}>\n                        Move up\n                    </button>\n                    <button\n                        onClick={() => moveTb(1)}\n                        disabled={selectedTb === null}>\n                        Move down\n                    </button>\n                    <button\n                        onClick={() => setSelectedTb(null)}\n                        disabled={selectedTb === null}>\n                        Done\n                    </button>\n                </div>\n                <ol>\n                {tourney.tieBreaks.map((id) =>\n                    <li key={id}>\n                        {tieBreakMethods[id].name}\n                        <button\n                            onClick={() => (\n                                (selectedTb === id)\n                                ? setSelectedTb(null)\n                                : setSelectedTb(id)\n                            )}\n                            disabled={selectedTb !== null && selectedTb !== id}>\n                            {selectedTb === id ? \"Done\" : \"Edit\"}\n                        </button>\n                    </li>\n                )}\n                </ol>\n                <h3>Available tiebreak methods</h3>\n                <ol>\n                {tieBreakMethods.map((method, i) =>\n                    <li key={i}>\n                        <span\n                            className={(\n                                (tourney.tieBreaks.includes(i))\n                                ? \"enabled\"\n                                : \"disabled\"\n                            )}>\n                            {method.name}\n                        </span>\n                        {(!tourney.tieBreaks.includes(i)) &&\n                            <button onClick={() => toggleTb(i)}>\n                                Add\n                            </button>\n                        }\n                    </li>\n                )}\n                </ol>\n            </Panel>\n            </PanelContainer>\n        );\n    }\n}\n","// @ts-check\nimport React, {useContext, useState} from \"react\";\nimport {Tabs, TabList, Tab, TabPanels, TabPanel} from \"@reach/tabs\";\nimport {getPlayer, dummyPlayer} from \"../../data/player\";\nimport {calcStandings} from \"../../pairing-scoring/scoring\";\nimport {calcNumOfRounds} from \"../../data/utility\";\nimport Round from \"./round\";\nimport PlayerSelect from \"./player-select\";\nimport {DataContext} from \"../../state/global-state\";\n\nexport default function TournamentTabs({tourneyId, backButton}) {\n    const {data, dispatch} = useContext(DataContext);\n    const playerList = data.players;\n    const tourney = data.tourneys[tourneyId];\n    const players = tourney.players;\n    const [defaultTab, setDefaultTab] = useState(0);\n    const [standingTree, tbMethods] = calcStandings(\n        tourney.tieBreaks,\n        tourney.roundList\n    );\n    function newRound() {\n        dispatch({type: \"ADD_ROUND\", tourneyId: tourneyId});\n        setDefaultTab(tourney.roundList.length + 1);\n    }\n    return (\n        <Tabs defaultIndex={defaultTab}>\n            {backButton}\n            <div>\n                <h2>{tourney.name}</h2>\n                Round progress: {tourney.roundList.length}/\n                {calcNumOfRounds(players.length)}\n                <button onClick={() => newRound()}>New Round</button>\n                <button\n                    onClick={\n                        () => dispatch({\n                            type: \"DEL_LAST_ROUND\",\n                            tourneyId: tourneyId\n                        })\n                    }\n                    disabled={tourney.roundList.length === 0}>\n                    Remove last round\n                </button>\n            </div>\n            <TabList>\n                <Tab>Players</Tab>\n                <Tab>Scores</Tab>\n                {Object.keys(tourney.roundList).map((id) =>\n                    <Tab key={id}>Round {Number(id) + 1}</Tab>\n                )}\n            </TabList>\n            <TabPanels>\n            <TabPanel>\n                <PlayerSelect tourneyId={tourneyId} />\n            </TabPanel>\n            <TabPanel>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Name</th>\n                                <th>Score</th>\n                                {tbMethods.map((name, i) =>\n                                    <th key={i}>{name}</th>\n                                )}\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {standingTree.map((standingsFlat, rank) =>\n                            standingsFlat.filter(\n                                (p) => p.id !== dummyPlayer.id\n                            ).map((standing) =>\n                                <tr key={standing.id}>\n                                    <td className=\"table__number\">\n                                        {rank + 1}\n                                    </td>\n                                    <td>\n                                        {getPlayer(\n                                            standing.id,\n                                            playerList\n                                        ).firstName}\n                                    </td>\n                                    <td className=\"table__number\">\n                                        {standing.score}\n                                    </td>\n                                    {standing.tieBreaks.map((score, i) =>\n                                        <td key={i} className=\"table__number\">\n                                            {score}\n                                        </td>\n                                    )}\n                                </tr>\n                            )\n                        )}\n                        </tbody>\n                    </table>\n            </TabPanel>\n            {Object.keys(tourney.roundList).map((id) =>\n                <TabPanel key={id}>\n                    <Round\n                        roundId={Number(id)}\n                        tourneyId={tourneyId} />\n                </TabPanel>\n            )}\n            </TabPanels>\n        </Tabs>\n    );\n}\n","// @ts-check\nimport React, {Fragment, useContext, useState} from \"react\";\nimport {BackButton} from \"../utility\";\nimport createTournament from \"../../data/tournament\";\nimport {DataContext} from \"../../state/global-state\";\nimport TournamentTabs from \"./tabs\";\n\nexport default function TournamentList() {\n    const {data, dispatch} = useContext(DataContext);\n    const tourneyList = data.tourneys;\n    const [openTourney, setOpenTourney] = useState(null);\n    const [newTourneyName, setNewTourneyName] = useState(\"\");\n    function updateNewName(event) {\n        setNewTourneyName(event.target.value);\n    }\n    function makeTournament(event) {\n        event.preventDefault();\n        dispatch({\n            type: \"ADD_TOURNEY\",\n            tourney: createTournament({name: newTourneyName})\n        });\n        setNewTourneyName(\"\");\n    }\n    let content = <Fragment></Fragment>;\n    if (openTourney !== null) {\n        content = (\n            <TournamentTabs\n                tourneyId={openTourney}\n                backButton={<BackButton action={() => setOpenTourney(null)}/>}\n                />\n        );\n    } else {\n        content = (\n            <div>\n            {(\n                (tourneyList.length > 0)\n                ?\n                    <ol>\n                    {tourneyList.map((tourney, i) =>\n                        <li key={i}>\n                            <button\n                                className=\"tourney-select\"\n                                onClick={() => setOpenTourney(i)}>\n                                {tourney.name}\n                            </button>\n                            <button\n                                className=\"danger\"\n                                onClick={\n                                    () => dispatch({\n                                        type: \"DEL_TOURNEY\",\n                                        index: i\n                                    })\n                                }>\n                                delete\n                            </button>\n                        </li>\n                    )}\n                    </ol>\n                :\n                    <p>\n                        No tournaments added yet.\n                    </p>\n            )}\n                <form onSubmit={makeTournament}>\n                    <fieldset>\n                        <legend>Make a new tournament</legend>\n                        <input\n                            type=\"text\"\n                            placeholder=\"tournament name\"\n                            value={newTourneyName}\n                            onChange={updateNewName}\n                            required={true}/>\n                        <input type=\"submit\" value=\"Create\" />\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n    return (\n        <div>\n            {content}\n        </div>\n    );\n}\n","// @ts-check\nimport React, {Fragment, useState, useContext} from \"react\";\nimport {OpenButton} from \"../utility\";\nimport {createPlayer} from \"../../data/player\";\nimport {DataContext} from \"../../state/global-state\";\n\nexport default function PlayerList({setOpenPlayer}) {\n    const {data, dispatch} = useContext(DataContext);\n    const playerList = data.players;\n    const newPlayerDefault = {firstName: \"\", lastName: \"\", rating: 1200};\n    const [newPlayerData, setNewPlayerdata] = useState(newPlayerDefault);\n    const ids = playerList.map((p) => p.id);\n    ids.sort((a, b) => a - b);\n    ids.reverse();\n    const [nextId, setNextId] = useState(ids[0] + 1);\n    const handleSubmit = function (event) {\n        event.preventDefault();\n        const newPlayer = createPlayer(newPlayerData);\n        newPlayer.id = nextId;\n        setNextId((prevId) => prevId + 1);\n        setNewPlayerdata(newPlayerDefault);\n        dispatch({type: \"ADD_PLAYER\", newPlayer: newPlayer});\n    };\n    const updateField = function (event) {\n        event.preventDefault();\n        /** @type {Object<string, string>} */\n        let update = {};\n        update[event.currentTarget.name] = event.currentTarget.value;\n        setNewPlayerdata(Object.assign({}, newPlayerData, update));\n    };\n    const delPlayer = function (event, player) {\n        event.preventDefault();\n        // const index = playerList.indexOf(player);\n        // playerList.splice(index, 1);\n        // setPlayerList([...playerList]);\n        dispatch({type: \"DEL_PLAYER\", player: player});\n    };\n    let rosterTable = <Fragment></Fragment>;\n    if (playerList.length > 0) {\n        rosterTable =\n        <table>\n            <caption>Demo Roster</caption>\n            <thead>\n                <tr>\n                    <th>First name</th>\n                    <th>Last name</th>\n                    <th>Rating</th>\n                    <th></th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n            {playerList.map((player) =>\n                <tr key={player.id}>\n                    <td className=\"table__player\">{player.firstName}</td>\n                    <td className=\"table__player\">{player.lastName}</td>\n                    <td className=\"table__number\">{player.rating}</td>\n                    <td>\n                        <button\n                            className=\"danger\"\n                            onClick={(event) =>\n                                delPlayer(event, player)\n                            }>\n                            delete\n                        </button>\n                    </td>\n                    <td>\n                        <OpenButton action={() => setOpenPlayer(player.id)} />\n                    </td>\n                </tr>\n                )}\n            </tbody>\n        </table>;\n    }\n    return (\n        <div className=\"roster\">\n            {rosterTable}\n            <form onSubmit={handleSubmit}>\n            <fieldset>\n                <legend>Add your own players</legend>\n                <p>\n                    <label>\n                        First name&nbsp;\n                        <input type=\"text\" name=\"firstName\"\n                            onChange={updateField}\n                            value={newPlayerData.firstName} required />\n                    </label>\n                </p>\n                <p>\n                    <label>\n                        Last name&nbsp;\n                        <input type=\"text\" name=\"lastName\"\n                            onChange={updateField}\n                            value={newPlayerData.lastName} required />\n                    </label>\n                </p>\n                <p>\n                    <label>\n                        Rating&nbsp;\n                        <input type=\"number\" name=\"rating\"\n                            onChange={updateField}\n                            value={newPlayerData.rating} required />\n                    </label>\n                </p>\n                <p>\n                    <input type=\"submit\" value=\"Add\"/>\n                </p>\n            </fieldset>\n            </form>\n        </div>\n    );\n}\n","// @ts-check\nimport React, {useState, useEffect, useContext} from \"react\";\nimport numeral from \"numeral\";\nimport {BackButton} from \"../utility\";\nimport {\n    getPlayer,\n    getPlayerAvoidList,\n    kFactor\n} from \"../../data/player\";\nimport {DataContext} from \"../../state/global-state\";\n\nexport default function PlayerInfoBox({playerId, setOpenPlayer}) {\n    const {data, dispatch} = useContext(DataContext);\n    const playerList = data.players;\n    const avoidList = data.avoid;\n    const [singAvoidList, setSingAvoidList] = useState(\n        getPlayerAvoidList(playerId, avoidList)\n    );\n    const unAvoided = () => playerList.map(\n        (player) => player.id\n    ).filter(\n        (pId) => !singAvoidList.includes(pId) && pId !== playerId\n    );\n    const [selectedAvoider, setSelectedAvoider] = useState(unAvoided()[0]);\n    function avoidAdd(event) {\n        event.preventDefault();\n        setSelectedAvoider(unAvoided()[0]);\n        dispatch({\n            type: \"ADD_AVOID_PAIR\",\n            pair: [playerId, Number(selectedAvoider)]}\n        );\n    };\n    useEffect(function () {\n        setSingAvoidList(getPlayerAvoidList(playerId, avoidList));\n    }, [avoidList, playerId]);\n    return (\n        <div>\n            <BackButton action={() => setOpenPlayer(null)}/>\n            <h2>\n                {getPlayer(playerId, playerList).firstName}&nbsp;\n                {getPlayer(playerId, playerList).lastName}\n            </h2>\n            <dl>\n                <dt>Matches played</dt>\n                <dd>{getPlayer(playerId, playerList).matchCount}</dd>\n                <dt>Rating</dt>\n                <dd>{getPlayer(playerId, playerList).rating}</dd>\n                <dt>K factor</dt>\n                <dd>\n                    {numeral(\n                        kFactor(getPlayer(playerId, playerList).matchCount)\n                    ).format(\"00\")}\n                </dd>\n                <dt>Players to avoid</dt>\n                <dd>\n                    <ul>\n                    {singAvoidList.map((pId) =>\n                        <li key={pId}>\n                            {getPlayer(pId, playerList).firstName}&nbsp;\n                            {getPlayer(pId, playerList).lastName}\n                            <button\n                                onClick={\n                                    () => dispatch({\n                                        type: \"DEL_AVOID_PAIR\",\n                                        pair: [playerId, pId]\n                                    })\n                                }>\n                                x\n                            </button>\n                        </li>\n                    )}\n                    {(avoidList.length === 0) &&\n                        <li>None</li>\n                    }\n                    </ul>\n                </dd>\n            </dl>\n            <form onSubmit={(event) => avoidAdd(event)}>\n            <fieldset>\n                <legend>Add player to avoid</legend>\n                <select\n                    onBlur={(event) => setSelectedAvoider(event.target.value)}>\n                {unAvoided().map((pId) =>\n                    <option key={pId} value={pId}>\n                        {getPlayer(pId, playerList).firstName}&nbsp;\n                        {getPlayer(pId, playerList).lastName}\n                    </option>\n                )}\n                </select>\n                <input type=\"submit\" value=\"Add\"/>\n            </fieldset>\n            </form>\n        </div>\n    );\n}\n","// @ts-check\nimport React, {useState} from \"react\";\nimport PlayerList from \"./list\";\nimport PlayerInfoBox from \"./info-box\";\n\nexport default function PlayerView() {\n    /** @type {number} */\n    const defaultOpen = null;\n    const [openPlayer, setOpenPlayer] = useState(defaultOpen);\n    if (openPlayer !== null) {\n        return (\n            <PlayerInfoBox\n                key={openPlayer}\n                playerId={openPlayer}\n                setOpenPlayer={setOpenPlayer} />\n        );\n    } else {\n        return (\n            <PlayerList setOpenPlayer={setOpenPlayer}/>\n        );\n    }\n}","// @ts-check\nimport React, {useContext} from \"react\";\nimport {DataContext} from \"../state/global-state\";\n\nexport function Options() {\n    const {data, dispatch} = useContext(DataContext);\n    const options = data.options;\n    const outputData = JSON.stringify(data, null, 2);\n    return (\n        <div>\n            <form>\n            <fieldset>\n                <legend>Bye options</legend>\n                Select how many points a bye is worth:&nbsp;\n                <label>\n                    1\n                    <input\n                        type=\"radio\"\n                        checked={options.byeValue === 1}\n                        onChange={\n                            () => dispatch({\n                                type: \"SET_BYE_VALUE\",\n                                byeValue: 1\n                            })\n                        } />\n                </label>\n                <label>\n                    0.5\n                    <input\n                        type=\"radio\"\n                        checked={options.byeValue === 0.5}\n                        onChange={\n                            () => dispatch({\n                                type: \"SET_BYE_VALUE\",\n                                byeValue: 0.5\n                            })\n                        } />\n                </label>\n            </fieldset>\n            </form>\n            {/* <form onSubmit={(event) => event.preventDefault()}>\n            <fieldset>\n                <legend>Export tournaments</legend>\n                <textarea\n                    className=\"json\"\n                    rows={25}\n                    cols={50}\n                    value={outputTourney}\n                    readOnly\n                    name=\"tourneyData\"\n                    />\n                <input type=\"submit\" value=\"load\" disabled />\n            </fieldset>\n            </form> */}\n            <form onSubmit={(event) => event.preventDefault()}>\n            <fieldset>\n                <legend>Export data</legend>\n                <textarea\n                    className=\"json\"\n                    rows={25}\n                    cols={50}\n                    value={outputData}\n                    name=\"playerdata\"\n                    readOnly\n                />\n                <input type=\"submit\" value=\"Load\" disabled />\n            </fieldset>\n            </form>\n        </div>\n    );\n}","// @ts-check\nimport React, {useReducer} from \"react\";\nimport \"./App.css\";\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\";\nimport \"@reach/tabs/styles.css\";\nimport TournamentList from \"./components/tournament/list\";\nimport PlayerView from \"./components/players/index\";\nimport {Options} from \"./components/options\";\nimport {defaultData, dataReducer, DataContext} from \"./state/global-state\";\n\nfunction App() {\n    const [data, dispatch] = useReducer(dataReducer, defaultData);\n    return (\n        <React.StrictMode>\n        <DataContext.Provider value={{data, dispatch}}>\n        <Tabs className=\"app\" defaultIndex={1}>\n            <footer className=\"caution footer\">\n                <Caution />\n            </footer>\n            <TabList className=\"header\">\n                <Tab>Players</Tab>\n                <Tab>Tournaments</Tab>\n                <Tab>Options</Tab>\n                <Tab>About</Tab>\n            </TabList>\n            <TabPanels className=\"content\">\n                <TabPanel>\n                    <PlayerView />\n                </TabPanel>\n                <TabPanel>\n                    <TournamentList />\n                </TabPanel>\n                <TabPanel>\n                    <Options />\n                </TabPanel>\n                <TabPanel>\n                    <p>\n                        {/* eslint-disable-next-line max-len*/}\n                        This is an early, proof-of-concept, demo of a chess tournament manager. <a href=\"https://github.com/johnridesabike/chessahoochee\">You can find out more here.</a>\n                    </p>\n                </TabPanel>\n            </TabPanels>\n        </Tabs>\n        </DataContext.Provider>\n        </React.StrictMode>\n    );\n}\n\nexport const RedTab = (props) => <Tab {...props} style={{ color: \"red\" }} />;\n\nfunction Caution() {\n    return (\n        <p>\n            <span role=\"img\" aria-label=\"warning\">⚠️</span>&nbsp;\n            This is an unstable demo build.&nbsp;\n            <span role=\"img\" aria-label=\"warning\">⚠️</span>&nbsp;\n            Want to help make it better? Head to the&nbsp;\n            <span role=\"img\" aria-label=\"finger pointing right\">👉</span>&nbsp;\n            <a href=\"https://github.com/johnridesabike/chessahoochee\">\n                Git repository\n            </a>.\n        </p>\n    );\n}\n\nexport {App, Caution};\n","/*jslint browser*/\n/*global process fetch*/\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}