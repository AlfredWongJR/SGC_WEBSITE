{"version":3,"sources":["serviceWorker.js","side-effects.js","data-types/types.js","data-types/constants.js","data-types/factories.js","data-types/index.js","pairing-scoring/ratings.js","pairing-scoring/helpers.js","pairing-scoring/scoring.js","pairing-scoring/factories.js","pairing-scoring/pairing.js","components/icons.jsx","hooks/reducers/generic-db-reducer.js","hooks/reducers/options-reducer.js","hooks/reducers/players-reducer.js","hooks/reducers/match-functions.js","hooks/reducers/tournament-reducer.js","demo-data/index.js","hooks/db.js","hooks/tournament-provider.jsx","hooks/index.js","components/tournament/crosstable.jsx","components/utility.jsx","components/new-player.jsx","components/tournament/player-select/selecting.jsx","components/tournament/player-select/index.jsx","components/tournament/pair-picker/player-info.jsx","components/tournament/pair-picker/select-list.jsx","components/tournament/pair-picker/stage.jsx","components/tournament/pair-picker/index.jsx","components/tournament/round/player-match-info.jsx","components/tournament/round/match-row.jsx","components/tournament/round/round-table.jsx","components/tournament/round/round.jsx","components/tournament/round/index.jsx","components/tournament/scores.jsx","components/tournament/header.jsx","components/tournament/sidebar.jsx","components/tournament/status.jsx","components/tournament/tournament.jsx","components/tournament/tournament-list.jsx","components/tournament/index.jsx","components/caution/index.jsx","components/404.jsx","components/options.jsx","components/players/info-box.jsx","components/players/player-list.jsx","components/players/index.jsx","components/splash.jsx","App.jsx","index.jsx","components/tournament/scores.module.css","components/tournament/round/round.module.css","App.module.css","components/splash.module.css","components/tournament/tournament.module.css","components/players/index.module.css","components/caution/index.module.css","components/utility.module.css"],"names":["Boolean","window","location","hostname","match","numeral","register","format","value","roundingFunction","whole","Math","floor","remainder","fraction","String","regexps","unformat","Number","Id","t","refinement","id","test","AvoidPair","tuple","Player","interface","firstName","lastName","matchCount","rating","type","PlayerStats","avoidList","list","colorBalance","dueColor","maybe","hasHadBye","isDueBye","opponentHistory","profile","score","upperHalf","Match","newRating","origRating","playerIds","result","RoundList","Tournament","byeQueue","date","Date","name","roundList","tieBreaks","ScoreCalulator","func","Standing","BLACK","WHITE","DUMMY_ID","createMatch","importObj","nanoid","createPlayer","arguments","length","undefined","dummyPlayer","missingPlayer","kFactor","isNotDummy","playerId","getPlayerMaybe","playerDict","dict","player","isNotBye","includes","getMatchesByPlayer","matchList","filter","getMatchesByPlayerNoByes","getMatchDetailsForPlayer","index","indexOf","color","rounds2Matches","roundId","slice","reduce","acc","round","concat","getAllPlayersFromMatches","allPlayers","Array","from","Set","getUnmatched","tourney","players","matchedIds","Object","values","assoc","getPlayerAvoidList","pair","accumulator","getDueColor","lastMatch","last","getPlayersByOpponent","opponentId","getOpponentScores","map","opponent","getPlayerScore","of","scoreList","getPlayerScoreList","sum","getCumulativeScore","getPlayerScoreListNoByes","getCumulativeOfOpponentScore","oppScores","getColorBalanceScore","colorList","tieBreakMethods","0","scores","pipe","sort","a","b","init","tail","1","2","3","4","createStandingList","methods","selectedTiebreakMethods","selectedTieBreaks","i","tieBreakNames","m","standings","_ref","sortFunc","keys","key","thenBy","standing1","standing2","firstBy","createStandingTree","_createStandingList","_createStandingList2","slicedToArray","standingsFlat","standing","orig","prevStanding","append","over","lensIndex","createPlayerStats","_ref2","matches","freeze","priority","condition","avoidMeetingTwice","sameScores","divider","differentHalf","differentDueColor","maxPriority","add","calcPairIdeal","player1","player2","metBefore","mustAvoid","abs","setUpperHalves","playerStatsList","splitInHalf","splitAt","ignore","src","isUpperHalf","view","setByePlayer","hasNotHadBye","p","nextByeSignup","indexOfDueBye","findLastIndex","sortPlayersForPairing","simpleIcon","icon","props","react_default","createElement","assign","dangerouslySetInnerHTML","__html","svg","aria-label","title","role","style","fill","hex","icons","Activity","Alert","ArrowDown","ArrowUp","ArrowUpLeft","Award","Check","CheckCircle","ChevronLeft","ChevronRight","Circle","Download","Edit","Info","Javascript","Layers","List","Minus","Plus","React","ReactIcon","Repeat","Settings","Trash","UserMinus","UserPlus","Users","X","ActionLoadState","state","Any","ActionDelItem","ActionAddItem","item","ActionAddTourney","AdctionAddPlayer","ActionSetPlayer","ActionTypes","union","genericDbReducer","action","nextId","console","warn","dissoc","lensProp","mergeLeft","Error","dispatch","x","ADD_ITEM","ADD_PLAYER","ADD_TOURNEY","DEL_ITEM","LOAD_STATE","SET_PLAYER","ActionSetOption","option","ActionAvoidPair","ActionAvoidSingle","optionsReducer","ADD_AVOID_PAIR","DEL_AVOID_PAIR","DEL_AVOID_SINGLE","SET_OPTION","ActionAddPlayer","ActionDelPlayer","ActionSetMatchcount","ActionSetRating","playersReducer","lensPath","set","DEL_PLAYER","SET_PLAYER_MATCHCOUNT","SET_PLAYER_RATING","autoPair","byeValue","pairs","curry","potentialMatches","playerMatches","reducedResults","blossom","p1Index","p2Index","p1Id","p2Id","p1","p2","matched","pair1","pair2","reverse","byePlayer","pairPlayers","log","getPlayer","idsPair","ActionAddRound","ActionDelLastRound","ActionAddRemoveTieBreak","ActionMoveTieBreak","newIndex","oldIndex","ActionSetTourneyPlayers","ActionSetByeQueue","ActionAutoPair","ActionManualPair","ActionSetMatchResult","matchId","ActionEditMatch","ActionMoveMatch","ActionSetName","ActionSetDate","tournamentReducer","remove","move","__","manualPair","findIndex","propEq","mergeRight","ADD_ROUND","ADD_TIEBREAK","AUTO_PAIR","DEL_LAST_ROUND","DEL_MATCH","DEL_TIEBREAK","MANUAL_PAIR","MOVE_MATCH","MOVE_TIEBREAK","SET_BYE_QUEUE","SET_DATE","SET_MATCH_RESULT","SET_NAME","SET_STATE","SET_TOURNEY_PLAYERS","SWAP_COLORS","demo_data","options","tournaments","fromJSON","setItemsPrototype","localForage","removeItemsPrototype","optionsStore","createInstance","storeName","playerStore","tourneyStore","useAllItemsFromDb","store","_useReducer","useReducer","_useReducer2","items","_useState","useState","_useState2","isLoaded","setIsLoaded","useEffect","document","body","cursor","getItems","then","results","_config","catch","setItems","deleted","difference","removeItems","useAllPlayersDb","useAllTournamentsDb","useOptionsDb","_useReducer3","demoData","_useReducer4","_useState3","_useState4","iterate","TournamentContext","createContext","useTournament","useContext","TournamentProvider","children","tourneyId","tourneyDispatch","playersDispatch","isTourneyLoaded","setIsTourneyLoaded","isPlayersLoaded","setIsPlayersLoaded","getItem","allTheIds","unChangedPlayers","symmetricDifference","error","setItem","Provider","useDocumentTitle","origTitle","Crosstable","_useTournament","oppResults","defaultTo","opponentScores","getRatingChangeTds","_getPerformanceRating","firstMatch","getPerformanceRatings","_getPerformanceRating2","firstRating","lastRating","change","Fragment","className","table","rank","colSpan","row","scope","playerName","index2","player1Id","player2Id","getXScore","Panel","_ref4","styles","panel","objectSpread","PanelContainer","panels","DateFormat","dateFormat","Intl","DateTimeFormat","day","month","year","cleanProps","omit","dateTime","toISOString","Notification","_ref5","success","warning","_ref6","findById","NewPlayer","newPlayerDefault","newPlayerData","setNewPlayerdata","updateField","event","preventDefault","_event$currentTarget","currentTarget","prevState","onSubmit","htmlFor","required","onChange","Selecting","_useAllPlayersDb","_useAllPlayersDb2","allPlayersDispatch","togglePlayer","target","checked","pId","onClick","PlayerSelect","isSelecting","setIsSelecting","flexShrink","disabled","dialog_es","isOpen","PlayerInfo","_useOptionsDb","_createPlayerStats","avoidPairs","prettyBalance","opId","SelectList","stagedPlayers","setStagedPlayers","unmatched","unmatchedCount","unmatchedWithDummy","selectPlayer","visually_hidden_es","Stage","_stagedPlayers","white","black","unstage","react","every","PairPicker","isModalOpen","setIsModalOpen","statsList","useMemo","matchIdeal","ideal","flexGrow","PlayerMatchInfo","playerData","data-testid","MatchRow","compact","pos","selectedMatch","setSelectedMatch","openModal","setOpenModal","resultCode","whitePlayer","blackPlayer","whiteName","blackName","ResultDisplay","setMatchResult","origRatings","matchCounts","whiteElo","EloRank","blackElo","scoreExpected","getExpected","updateRating","calcNewRatings","rowId","playerResult","matchResult","winnerSelect","onBlur","controls","RoundTable","tbody","Round","moveMatch","direction","forEach","unMatch","Index","openTab","setOpenTab","tabs_es","ScoreTable","_createStandingTree","_createStandingTree2","standingTree","tbMethods","topHeader","rowSpan","dashify","j","SelectTieBreaks","_useTournament2","selectedTb","setSelectedTb","toggleTb","defaultId","moveTb","width","marginTop","Scores","PlaceholderButton","aria-hidden","Header","isEditingName","setIsEditingName","isEditingDate","setIsEditingDate","dateInput","getFullYear","getMonth","getDate","header_PlaceholderButton","_event$currentTarget$","split","_event$currentTarget$2","rawYear","rawMonth","rawDay","Sidebar","isNewRoundReady","lastRound","roundCount","playerCount","ceil","log2","isFinite","calcNumOfRounds","isItOver","tooltipText","tooltipWarn","_delLastRound","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","confirm","navigate","stop","apply","this","es","to","borderRadius","marginLeft","marginRight","Status","lastRoundId","textAlign","tournament","header","sidebar","contentFrame","path","tournament_scores","TournamentList","_useAllTournamentsDb","_useAllTournamentsDb2","tourneys","newTourneyName","setNewTourneyName","isFormOpen","setIsFormOpen","message","deleteTournament","placeholder","TournamentIndex","Caution","caution","caution__text","caution__link","href","NotFound","Options","tourneysDispatch","text","setText","_useOptionsDb2","optionsDispatch","exportData","loadData","data","alert","JSON","stringify","download","encodeURIComponent","reader","FileReader","onload","ev","parse","readAsText","files","cols","rows","spellCheck","PlayerInfoBox","singAvoidList","setSingAvoidList","unAvoided","selectedAvoider","setSelectedAvoider","handleChange","playerInfo","defaultValue","readOnly","arial-label","PlayerList","delPlayer","Players","childProps","basepath","Splash","splash","hint","Promise","all","subtitle","footer","fontSize","source","createHashSource","history","createHistory","App","mainMenu","link","tournament_Tournament","_404","default","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.999dbf23.chunk.js","sourcesContent":["/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import numeral from \"numeral\";\r\n\r\n// let's make a custom numeral format. I don't really know how this works.\r\nnumeral.register(\"format\", \"fraction\", {\r\n    // eslint-disable-next-line no-unused-vars\r\n    format: function (value, format, roundingFunction) {\r\n        const whole = Math.floor(value);\r\n        const remainder = value - whole;\r\n        const fraction = (function () {\r\n            switch (remainder) {\r\n            case 0.25:\r\n                return \"¼\";\r\n            case 0.5:\r\n                return \"½\";\r\n            case 0.75:\r\n                return \"¾\";\r\n            default:\r\n                return \"\";\r\n            }\r\n        }());\r\n        const stringedWhole = (\r\n            (whole === 0 && remainder)\r\n            ? \"\"\r\n            : String(whole)\r\n        );\r\n        return stringedWhole + fraction;\r\n    },\r\n    regexps: {\r\n        format: /(1\\/2)/,\r\n        unformat: /(1\\/2)/\r\n    },\r\n    unformat: function (value) {\r\n        // TODO: This doesn't do anything currently\r\n        return Number(value);\r\n    }\r\n});\r\n","import t from \"tcomb\";\r\n\r\nconst Id = t.refinement(\r\n    t.String,\r\n    (id) => /^[A-Za-z0-9_-]{21}$/.test(id),\r\n    \"NanoId\"\r\n);\r\nexport {Id};\r\n\r\nconst AvoidPair = t.tuple([Id, Id], \"AvoidPair\");\r\nexport {AvoidPair};\r\n\r\nconst Player = t.interface(\r\n    {\r\n        firstName: t.String,\r\n        id: Id,\r\n        lastName: t.String,\r\n        matchCount: t.Number,\r\n        rating: t.Number,\r\n        type: t.String // used for CSS styling etc\r\n    },\r\n    \"Player\"\r\n);\r\nexport {Player};\r\n\r\nconst PlayerStats = t.interface(\r\n    {\r\n        avoidList: t.list(Id),\r\n        colorBalance: t.Number,\r\n        dueColor: t.maybe(t.Number),\r\n        hasHadBye: t.Boolean,\r\n        id: Id,\r\n        isDueBye: t.Boolean,\r\n        opponentHistory: t.list(Id),\r\n        profile: Player,\r\n        rating: t.Number,\r\n        score: t.Number,\r\n        upperHalf: t.Boolean\r\n    },\r\n    \"PlayerStats\"\r\n);\r\nexport {PlayerStats};\r\n\r\nconst Match = t.interface(\r\n    {\r\n        id: Id,\r\n        newRating: t.tuple([t.Number, t.Number]),\r\n        origRating: t.tuple([t.Number, t.Number]),\r\n        playerIds: t.tuple([Id, Id]),\r\n        result: t.tuple([t.Number, t.Number])\r\n    },\r\n    \"Match\"\r\n);\r\nexport {Match};\r\n\r\nconst RoundList = t.list(t.list(Match), \"Round list\");\r\nexport {RoundList};\r\n\r\nconst Tournament = t.interface(\r\n    {\r\n        byeQueue: t.list(t.String),\r\n        date: Date,\r\n        id: Id,\r\n        name: t.String,\r\n        playerIds: t.list(t.String),\r\n        roundList: RoundList,\r\n        tieBreaks: t.list(t.Number)\r\n    },\r\n    \"Tournament\"\r\n);\r\nexport {Tournament};\r\n\r\nconst ScoreCalulator = t.func(\r\n    [Id, t.list(Match)],\r\n    t.Number,\r\n    \"ScoreCalulator\"\r\n);\r\nexport {ScoreCalulator};\r\n\r\nconst Standing = t.interface(\r\n    {\r\n        id: Id,\r\n        score: t.Number,\r\n        tieBreaks: t.list(t.Number)\r\n    },\r\n    \"Standing\"\r\n);\r\nexport {Standing};\r\n","const BLACK = 1;\r\nexport {BLACK};\r\nconst WHITE = 0;\r\nexport {WHITE};\r\nconst DUMMY_ID = \"________DUMMY________\";\r\nexport {DUMMY_ID};\r\n","// These factories are mainly useful as a shortcut to provide default values.\r\nimport {Match, Player, Tournament} from \"./types\";\r\nimport nanoid from \"nanoid\";\r\n\r\nexport function createMatch(importObj) {\r\n    return Match({\r\n        id: importObj.id || nanoid(),\r\n        newRating: importObj.newRating,\r\n        origRating: importObj.origRating,\r\n        playerIds: importObj.playerIds,\r\n        result: importObj.result || [0, 0]\r\n    });\r\n}\r\n\r\nexport function createPlayer(importObj = {}) {\r\n    return Player({\r\n        firstName: importObj.firstName || \"\",\r\n        id: importObj.id || nanoid(),\r\n        lastName: importObj.lastName || \"\",\r\n        matchCount: importObj.matchCount || 0,\r\n        rating: importObj.rating || 0,\r\n        type: importObj.type || \"person\" // used for CSS styling etc.\r\n    });\r\n}\r\n\r\nexport function createTournament(importObj) {\r\n    return Tournament({\r\n        byeQueue: importObj.byeQueue || [],\r\n        date: importObj.date || new Date(),\r\n        id: importObj.id || nanoid(),\r\n        name: importObj.name || \"\",\r\n        playerIds: importObj.playerIds || [],\r\n        roundList: importObj.roundList || [],\r\n        tieBreaks: importObj.tieBreaks || [0, 1, 2, 3]\r\n    });\r\n}\r\n","import {\r\n    AvoidPair,\r\n    Id,\r\n    Match,\r\n    Player,\r\n    PlayerStats,\r\n    RoundList,\r\n    ScoreCalulator,\r\n    Standing,\r\n    Tournament\r\n} from \"./types\";\r\nimport {BLACK, DUMMY_ID, WHITE} from \"./constants\";\r\nimport {createMatch, createPlayer, createTournament} from \"./factories\";\r\n\r\nconst dummyPlayer = createPlayer({\r\n    firstName: \"Bye\",\r\n    id: DUMMY_ID,\r\n    lastName: \"Player\",\r\n    type: \"dummy\"\r\n});\r\n\r\nconst missingPlayer = (id) => createPlayer({\r\n    firstName: \"Anonymous\",\r\n    id: id,\r\n    lastName: \"Player\",\r\n    type: \"missing\"\r\n});\r\n\r\nexport {\r\n    AvoidPair,\r\n    BLACK,\r\n    DUMMY_ID,\r\n    Id,\r\n    Match,\r\n    Player,\r\n    PlayerStats,\r\n    RoundList,\r\n    ScoreCalulator,\r\n    Standing,\r\n    Tournament,\r\n    WHITE,\r\n    createMatch,\r\n    createPlayer,\r\n    createTournament,\r\n    dummyPlayer,\r\n    missingPlayer\r\n};\r\n","import {BLACK, WHITE} from \"../data-types\";\r\nimport EloRank from \"elo-rank\";\r\nimport t from \"tcomb\";\r\n\r\nexport function kFactor(matchCount) {\r\n    const ne = t.Number(matchCount) || 1;\r\n    return (800 / ne);\r\n}\r\n\r\nexport function calcNewRatings(origRatings, matchCounts, result) {\r\n    t.tuple([t.Number, t.Number])(origRatings);\r\n    t.tuple([t.Number, t.Number])(matchCounts);\r\n    t.tuple([t.Number, t.Number])(result);\r\n    const whiteElo = new EloRank(kFactor(matchCounts[WHITE]));\r\n    const blackElo = new EloRank(kFactor(matchCounts[BLACK]));\r\n    const FLOOR = 100;\r\n    const scoreExpected = [\r\n        whiteElo.getExpected(origRatings[WHITE], origRatings[BLACK]),\r\n        blackElo.getExpected(origRatings[BLACK], origRatings[WHITE])\r\n    ];\r\n    const newRating = [\r\n        whiteElo.updateRating(\r\n            scoreExpected[WHITE],\r\n            result[WHITE],\r\n            origRatings[WHITE]\r\n        ),\r\n        blackElo.updateRating(\r\n            scoreExpected[BLACK],\r\n            result[BLACK],\r\n            origRatings[BLACK]\r\n        )\r\n    ];\r\n    return newRating.map((rating) => (rating < FLOOR) ? FLOOR : rating);\r\n}\r\n","import {\r\n    AvoidPair,\r\n    DUMMY_ID,\r\n    Id,\r\n    Match,\r\n    Player,\r\n    RoundList,\r\n    Standing,\r\n    Tournament,\r\n    dummyPlayer,\r\n    missingPlayer\r\n} from \"../data-types\";\r\nimport {assoc} from \"ramda\";\r\nimport t from \"tcomb\";\r\n/*******************************************************************************\r\n * Player functions\r\n ******************************************************************************/\r\nconst isNotDummy = (playerId) => playerId !== DUMMY_ID;\r\nexport {isNotDummy};\r\n\r\nexport function areScoresEqual(standing1, standing2) {\r\n    Standing(standing1);\r\n    Standing(standing2);\r\n    // Check if any of them aren't equal\r\n    if (standing1.score !== standing2.score) {\r\n        return false;\r\n    }\r\n    // Check if any tie-break values are not equal\r\n    return !(\r\n        standing1.tieBreaks.reduce(\r\n            (acc, value, i) => acc.concat(value !== standing2.tieBreaks[i]),\r\n            []\r\n        ).includes(true)\r\n    );\r\n}\r\n\r\n/**\r\n * Retrive a specific player from a list or object.\r\n * @param playerList This can either be typed as `[Player1, Player1]` or\r\n * `{\"1\": Player, \"2\": Player}`, where `Player1.id` equals its dict key.\r\n * @param id the `id` property of the desired `Player` object.\r\n * @returns The desired Player object.\r\n */\r\nexport function getPlayerById(playerList, id) {\r\n    t.union([\r\n        t.list(Player),\r\n        t.dict(Id, Player)\r\n    ])(playerList);\r\n    if (id === DUMMY_ID) {\r\n        return dummyPlayer;\r\n    }\r\n    const player = (playerList.filter)\r\n        ? playerList.filter((p) => p.id === id)[0]\r\n        : playerList[id];\r\n    return (player) ? player : missingPlayer(id);\r\n}\r\n\r\n/**\r\n * A replacement for `getPlayerById`, with an emphasis on the indented feature\r\n * of *maybe* getting a player, *maybe* getting a `dummyPlayer`, or *maybe*\r\n * getting a missing (deleted) player.\r\n */\r\nexport function getPlayerMaybe(playerDict, id) {\r\n    t.dict(Id, Player)(playerDict);\r\n    Id(id);\r\n    if (id === DUMMY_ID) {\r\n        return dummyPlayer;\r\n    }\r\n    const player = playerDict[id];\r\n    return (player) ? player : missingPlayer(id);\r\n}\r\n\r\n/*******************************************************************************\r\n * Match functions\r\n ******************************************************************************/\r\nconst isNotBye = (match) => !match.playerIds.includes(DUMMY_ID);\r\nexport {isNotBye};\r\n\r\nexport function getMatchesByPlayer(playerId, matchList) {\r\n    t.list(Match)(matchList);\r\n    return matchList.filter((match) => match.playerIds.includes(playerId));\r\n}\r\n\r\nexport function getMatchesByPlayerNoByes(playerId, matchList) {\r\n    t.list(Match)(matchList);\r\n    return matchList.filter(\r\n        (match) => match.playerIds.includes(playerId) && isNotBye(match)\r\n    );\r\n}\r\n\r\nexport function getMatchDetailsForPlayer(playerId, match) {\r\n    Id(playerId);\r\n    Match(match);\r\n    const index = match.playerIds.indexOf(playerId);\r\n    return {\r\n        color: index,\r\n        newRating: match.newRating[index],\r\n        origRating: match.origRating[index],\r\n        result: match.result[index]\r\n    };\r\n}\r\n\r\n/**\r\n * Flatten a list of rounds to a list of matches.\r\n */\r\nexport function rounds2Matches(roundList, roundId = null) {\r\n    RoundList(roundList);\r\n    t.maybe(t.Number)(roundId);\r\n    const rounds = (\r\n        (roundId === null)\r\n        ? roundList\r\n        : roundList.slice(0, roundId + 1)\r\n    );\r\n    return rounds.reduce((acc, round) => acc.concat(round), []);\r\n}\r\n\r\nexport function getAllPlayersFromMatches(matchList) {\r\n    t.list(Match)(matchList);\r\n    const allPlayers = matchList.reduce(\r\n        (acc, match) => acc.concat(match.playerIds),\r\n        []\r\n    );\r\n    return Array.from(new Set(allPlayers));\r\n}\r\n\r\n/**\r\n * Get a list of all of a player's scores from each match.\r\n */\r\nexport function getPlayerScoreList(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    return getMatchesByPlayer(\r\n        playerId,\r\n        matchList,\r\n    ).map(\r\n        (match) => getMatchDetailsForPlayer(playerId, match).result\r\n    );\r\n}\r\n\r\nexport function getPlayerScoreListNoByes(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    return getMatchesByPlayerNoByes(\r\n        playerId,\r\n        matchList\r\n    ).map(\r\n        (match) => getMatchDetailsForPlayer(playerId, match).result\r\n    );\r\n}\r\n\r\n/**\r\n * This creates a filtered version of `players` with only the players that are\r\n * not matched for the specified round.\r\n */\r\nexport function getUnmatched(tourney, players, roundId) {\r\n    Tournament(tourney);\r\n    t.dict(Id, Player)(players);\r\n    t.Number(roundId);\r\n    const matchList = tourney.roundList[roundId] || [];\r\n    const matchedIds = matchList.reduce(\r\n        (acc, match) => acc.concat(match.playerIds),\r\n        []\r\n    );\r\n    const unmatched = Object.values(players).reduce(\r\n        (acc, player) => (\r\n            (matchedIds.includes(player.id))\r\n            ? acc\r\n            : assoc(player.id, player, acc)\r\n        ),\r\n        {}\r\n    );\r\n    return unmatched;\r\n}\r\n\r\n/*******************************************************************************\r\n * Round functions\r\n ******************************************************************************/\r\nexport function calcNumOfRounds(playerCount) {\r\n    const roundCount = Math.ceil(Math.log2(playerCount));\r\n    return (Number.isFinite(roundCount)) ? roundCount : 0;\r\n}\r\n\r\n/*******************************************************************************\r\n * Avoid list functions\r\n ******************************************************************************/\r\nexport function getPlayerAvoidList(playerId, avoidList) {\r\n    t.list(AvoidPair)(avoidList);\r\n    Id(playerId);\r\n    return avoidList.filter( // get pairings with the player\r\n        (pair) => pair.includes(playerId)\r\n    ).reduce( // Flatten the array\r\n        (accumulator, pair) => pair.concat(accumulator),\r\n        []\r\n    ).filter( // filter out the player's id\r\n        (id) => id !== playerId\r\n    );\r\n}\r\n\r\n// TODO: This isn't currently in use, but it probably should be.\r\nexport function cleanAvoidList(avoidList, playerList) {\r\n    t.list(AvoidPair)(avoidList);\r\n    t.list(Player)(playerList);\r\n    const ids = playerList.map((p) => p.id);\r\n    return avoidList.filter(\r\n        (pairs) => (ids.includes(pairs[0]) && ids.includes(pairs[1]))\r\n    );\r\n}\r\n","import {\r\n    BLACK,\r\n    DUMMY_ID,\r\n    Id,\r\n    Match,\r\n    ScoreCalulator,\r\n    WHITE\r\n} from \"../data-types\";\r\nimport {\r\n    getMatchDetailsForPlayer,\r\n    getMatchesByPlayer,\r\n    getMatchesByPlayerNoByes,\r\n    getPlayerScoreList,\r\n    getPlayerScoreListNoByes,\r\n    isNotDummy\r\n} from \"./helpers\";\r\nimport {\r\n    init,\r\n    last,\r\n    pipe,\r\n    sort,\r\n    sum,\r\n    tail\r\n} from \"ramda\";\r\nimport {firstBy} from \"thenby\";\r\nimport t from \"tcomb\";\r\n\r\nexport function getDueColor(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    const lastMatch = last(getMatchesByPlayer(playerId, matchList));\r\n    if (!lastMatch) {\r\n        return null;\r\n    }\r\n    const {color} = getMatchDetailsForPlayer(playerId, lastMatch);\r\n    return (color === WHITE) ? BLACK : WHITE;\r\n}\r\n\r\nexport function hasHadBye(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    return getMatchesByPlayer(\r\n        playerId,\r\n        matchList\r\n    ).reduce(\r\n        (acc, match) => acc.concat(match.playerIds),\r\n        []\r\n    ).includes(DUMMY_ID);\r\n}\r\n\r\nexport function getPlayersByOpponent(opponentId, matchList) {\r\n    Id(opponentId);\r\n    t.list(Match)(matchList);\r\n    return getMatchesByPlayer(\r\n        opponentId,\r\n        matchList\r\n    ).reduce(\r\n        (acc, match) => acc.concat(match.playerIds),\r\n        []\r\n    ).filter(\r\n        (playerId) => playerId !== opponentId\r\n    );\r\n}\r\n\r\n/**\r\n * Used for `modifiedMedian` and `solkoff`.\r\n */\r\nfunction getOpponentScores(playerId, matchList) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    const scores = getPlayersByOpponent(\r\n        playerId,\r\n        matchList\r\n    ).filter(\r\n        isNotDummy\r\n    ).map(\r\n        (opponent) => getPlayerScore(opponent, matchList)\r\n    );\r\n    return scores;\r\n}\r\n\r\n/*******************************************************************************\r\n * The main scoring methods\r\n ******************************************************************************/\r\nconst getPlayerScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getPlayerScore(playerId, matchList) {\r\n        const scoreList = getPlayerScoreList(playerId, matchList);\r\n        return sum(scoreList);\r\n    }\r\n);\r\nexport {getPlayerScore};\r\n\r\n/**\r\n * The player's cumulative score.\r\n */\r\nconst getCumulativeScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getCumulativeScore(playerId, matchList) {\r\n        const scoreList = getPlayerScoreListNoByes(\r\n            playerId,\r\n            matchList\r\n        ).reduce( // turn the regular score list into a \"running\" score list\r\n            (acc, score) => acc.concat([last(acc) + score]),\r\n            [0]\r\n        );\r\n        return sum(scoreList);\r\n    }\r\n);\r\n\r\n/**\r\n * Get the cumulative scores of a player's opponents.\r\n */\r\nconst getCumulativeOfOpponentScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getCumulativeOfOpponentScore(playerId, matchList) {\r\n        const oppScores = getPlayersByOpponent(\r\n            playerId,\r\n            matchList\r\n        ).filter(\r\n            isNotDummy\r\n        ).map(\r\n            (id) => getCumulativeScore(id, matchList)\r\n        );\r\n        return sum(oppScores);\r\n    }\r\n);\r\n\r\n/**\r\n * Calculate a player's color balance. A negative number means they played as\r\n * white more. A positive number means they played as black more.\r\n */\r\nconst getColorBalanceScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getColorBalanceScore(playerId, matchList) {\r\n        const colorList = getMatchesByPlayerNoByes(\r\n            playerId,\r\n            matchList\r\n        ).reduce(\r\n            (acc, match) => (\r\n                (match.playerIds[WHITE] === playerId)\r\n                ? acc.concat(-1) // White = -1\r\n                : acc.concat(1) // Black = +1\r\n            ),\r\n            [0]\r\n        );\r\n        return sum(colorList);\r\n    }\r\n);\r\nexport {getColorBalanceScore};\r\n\r\n/**\r\n * Gets the modified median factor defined in USCF § 34E1\r\n */\r\nconst getModifiedMedianScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getModifiedMedianScore(playerId, matchList) {\r\n        const scores = getOpponentScores(playerId, matchList);\r\n        return pipe(\r\n            sort((a, b) => a - b),\r\n            init,\r\n            tail,\r\n            sum\r\n        )(scores);\r\n    }\r\n);\r\n\r\nconst getSolkoffScore = ScoreCalulator.of(\r\n    // named functions are better for debugging\r\n    function _getSolkoffScore(playerId, matchList) {\r\n        const scoreList = getOpponentScores(playerId, matchList);\r\n        return sum(scoreList);\r\n    }\r\n);\r\n\r\nconst tieBreakMethods = {\r\n    0: {\r\n        func: getModifiedMedianScore,\r\n        id: 0,\r\n        name: \"Modified median\"\r\n    },\r\n    1: {\r\n        func: getSolkoffScore,\r\n        id: 1,\r\n        name: \"Solkoff\"\r\n    },\r\n    2: {\r\n        func: getCumulativeScore,\r\n        id: 2,\r\n        name: \"Cumulative score\"\r\n    },\r\n    3: {\r\n        func: getCumulativeOfOpponentScore,\r\n        id: 3,\r\n        name: \"Cumulative of opposition\"\r\n    },\r\n    4: {\r\n        func: getColorBalanceScore,\r\n        id: 4,\r\n        name: \"Most black\"\r\n    }\r\n};\r\nObject.freeze(tieBreakMethods);\r\nexport {tieBreakMethods};\r\n\r\n/**\r\n * Create a function to sort the standings. This dynamically creates a `thenBy`\r\n * function based on the list of desired tiebreak sort methods.\r\n * @returns A function to be used with a list of standings and `sort()`.\r\n */\r\nexport function createTieBreakSorter(selectedTiebreakMethods) {\r\n    return Object.keys(selectedTiebreakMethods).reduce(\r\n        (acc, key) => (\r\n            acc.thenBy(\r\n                (standing1, standing2) => (\r\n                    standing2.tieBreaks[key] - standing1.tieBreaks[key]\r\n                )\r\n            )\r\n        ),\r\n        firstBy((standing1, standing2) => standing2.score - standing1.score)\r\n    );\r\n}\r\n","import {\r\n    AvoidPair,\r\n    Id,\r\n    Match,\r\n    Player,\r\n    PlayerStats,\r\n    RoundList,\r\n    Standing\r\n} from \"../data-types\";\r\nimport {\r\n    add,\r\n    append,\r\n    defaultTo,\r\n    last,\r\n    lensIndex,\r\n    lensProp,\r\n    over,\r\n    pipe,\r\n    sort\r\n} from \"ramda\";\r\nimport {\r\n    areScoresEqual,\r\n    getAllPlayersFromMatches,\r\n    getMatchDetailsForPlayer,\r\n    getMatchesByPlayer,\r\n    getPlayerAvoidList,\r\n    isNotDummy,\r\n    rounds2Matches\r\n} from \"./helpers\";\r\nimport {\r\n    createTieBreakSorter,\r\n    getColorBalanceScore,\r\n    getDueColor,\r\n    getPlayerScore,\r\n    getPlayersByOpponent,\r\n    hasHadBye,\r\n    tieBreakMethods\r\n} from \"./scoring\";\r\nimport t from \"tcomb\";\r\n/**\r\n * Sort the standings by score, see USCF tie-break rules from § 34.\r\n * @returns {[Standing[], string[]]} The standings and the list of method used\r\n */\r\nexport function createStandingList(methods, roundList, roundId) {\r\n    t.list(t.Number)(methods);\r\n    t.list(t.Array)(roundList);\r\n    t.maybe(t.Number)(roundId);\r\n    const matchList = rounds2Matches(roundList, roundId);\r\n    const selectedTieBreaks = methods.map((i) => tieBreakMethods[i]);\r\n    const tieBreakNames = selectedTieBreaks.map((m) => m.name);\r\n    // Get a flat list of all of the players and their scores.\r\n    const standings = getAllPlayersFromMatches(\r\n        matchList\r\n    ).map(\r\n        (id) => Standing({\r\n            id,\r\n            score: getPlayerScore(id, matchList),\r\n            tieBreaks: selectedTieBreaks.map(({func}) => func(id, matchList))\r\n        })\r\n    );\r\n    const sortFunc = createTieBreakSorter(selectedTieBreaks);\r\n    const standingsSorted = sort(sortFunc, standings);\r\n    return [standingsSorted, tieBreakNames];\r\n}\r\n\r\n/**\r\n * Sort the standings by score, see USCF tie-break rules from § 34.\r\n * example: `[[Dale, Audrey], [Pete], [Bob]]`\r\n * Dale and Audrey are tied for first, Pete is 2nd, Bob is 3rd.\r\n * @returns {[Standing[][], string[]]} The standings and the list of method used\r\n */\r\nexport function createStandingTree(methods, roundList, roundId = null) {\r\n    t.list(t.Number)(methods);\r\n    RoundList(roundList);\r\n    t.maybe(t.Number)(roundId);\r\n    const [\r\n        standingsFlat,\r\n        tieBreakNames\r\n    ] = createStandingList(methods, roundList, roundId);\r\n    const standingsFlatNoByes = standingsFlat.filter(isNotDummy);\r\n    const standingsTree = standingsFlatNoByes.reduce(\r\n        /** @param {Standing[][]} acc*/\r\n        function assignStandingsToTree(acc, standing, i, orig) {\r\n            const prevStanding = orig[i - 1];\r\n            const isNewRank = (\r\n                // Always make a new rank for the first player\r\n                (i === 0) ? true : !areScoresEqual(standing, prevStanding)\r\n            );\r\n            if (isNewRank) {\r\n                return append([standing], acc);\r\n            }\r\n            // If this player has the same score as the last, list them together\r\n            return over(lensIndex(acc.length - 1), append(standing), acc);\r\n        },\r\n        []\r\n    );\r\n    return [standingsTree, tieBreakNames];\r\n}\r\n\r\n/**\r\n * @returns {PlayerStats}\r\n */\r\nexport function createPlayerStats({\r\n    avoidList,\r\n    id,\r\n    players,\r\n    roundList,\r\n    roundId\r\n}) {\r\n    Id(id);\r\n    t.Number(roundId);\r\n    t.dict(Id, Player)(players);\r\n    t.list(AvoidPair)(avoidList);\r\n    RoundList(roundList);\r\n    const matches = rounds2Matches(roundList, roundId);\r\n    return PlayerStats({\r\n        avoidList: getPlayerAvoidList(id, avoidList),\r\n        colorBalance: getColorBalanceScore(id, matches),\r\n        dueColor: getDueColor(id, matches),\r\n        hasHadBye: hasHadBye(id, matches),\r\n        id: id, // is this shortcut necessary?\r\n        isDueBye: false,\r\n        opponentHistory: getPlayersByOpponent(id, matches),\r\n        profile: players[id],\r\n        rating: players[id].rating, // is this shortcut necessary?\r\n        score: getPlayerScore(id, matches),\r\n        upperHalf: false\r\n    });\r\n}\r\n\r\n/**\r\n * NOTE: these params are flipped. Should others be flipped too?\r\n * @returns {Object.<string, number>} {opponentId: result}\r\n */\r\nfunction getResultsByOpponent(matchList, playerId) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    const matches = getMatchesByPlayer(playerId, matchList);\r\n    return matches.reduce(\r\n        function (acc, match) {\r\n            const opponent = match.playerIds.filter(\r\n                (id) => id !== playerId\r\n            )[0];\r\n            const {result} = getMatchDetailsForPlayer(playerId, match);\r\n            // This sets a default result of 0 and then adds the existing\r\n            // result. Most of the time, this would be the same as using\r\n            // `set()` with the result, but if two players play each other\r\n            // multiple times then the total results will be displayed.\r\n            return over(\r\n                lensProp(opponent),\r\n                pipe(defaultTo(0), add(result)),\r\n                acc\r\n            );\r\n        },\r\n        {}\r\n    );\r\n}\r\nexport {getResultsByOpponent};\r\n\r\n/**\r\n * NOTE: these params are flipped. Should others be flipped too?\r\n */\r\nfunction getPerformanceRatings(matchList, playerId) {\r\n    Id(playerId);\r\n    t.list(Match)(matchList);\r\n    const matches = getMatchesByPlayer(playerId, matchList);\r\n    const firstMatch = matches[0];\r\n    const lastMatch = last(matches);\r\n    return [\r\n        getMatchDetailsForPlayer(playerId, firstMatch).origRating,\r\n        getMatchDetailsForPlayer(playerId, lastMatch).newRating\r\n    ];\r\n}\r\nexport {getPerformanceRatings};\r\n","// This file is a work in progress. The weighting for the ratings needs to be\r\n// tweaked a lot, and the pairing function itself needs to be cleaned up and\r\n// made more reusable.\r\nimport {\r\n    AvoidPair,\r\n    DUMMY_ID,\r\n    Id,\r\n    Player,\r\n    PlayerStats,\r\n    RoundList\r\n} from \"../data-types\";\r\nimport {\r\n    add,\r\n    assoc,\r\n    curry,\r\n    filter,\r\n    findLastIndex,\r\n    lensIndex,\r\n    map,\r\n    over,\r\n    pipe,\r\n    reverse,\r\n    sort,\r\n    splitAt,\r\n    view\r\n} from \"ramda\";\r\nimport blossom from \"edmonds-blossom\";\r\nimport {createPlayerStats} from \"./factories\";\r\nimport {firstBy} from \"thenby\";\r\nimport t from \"tcomb\";\r\n\r\nconst priority = (value) => (condition) => condition ? value : 0;\r\nconst divisiblePriority = (value) => (divider) => value / divider;\r\n\r\n// TODO: These probably need to be tweaked a lot.\r\n/**\r\n * @constant avoidMeetingTwicePriority The weight given to avoid players\r\n * meeting twice. This same weight is given to avoid matching players on each\r\n * other's \"avoid\" list. This is the highest priority. (USCF § 27A1)\r\n */\r\nconst avoidMeetingTwice = priority(20);\r\n/**\r\n * @constant sameScoresPriority The weight given to match players with\r\n * equal scores. This gets divided against the difference between each players'\r\n * scores, plus one. For example, players with scores `1` and `3` would have\r\n * this priority divided by `3`. Players with scores `0` and `3` would have this\r\n * priority divided by `4`. Players with equal scores would divide it by `1`,\r\n * leaving it unchanged. (USCF § 27A2)\r\n */\r\nconst sameScores = divisiblePriority(16);\r\n\r\n/**\r\n * @constant differentHalfPriority The weight given to match players in lower\r\n * versus upper halves. This is only applied to players being matched within\r\n * the same score group. (USCF § 27A3)\r\n */\r\nconst differentHalf = priority(2);\r\n/**\r\n * @constant differentDueColorPriority The weight given to match players with\r\n * opposite due colors. (USCF § 27A4 and § 27A5)\r\n */\r\nconst differentDueColor = priority(1);\r\n\r\nconst maxPriority = pipe(\r\n    add(differentHalf(true)),\r\n    add(differentDueColor(true)),\r\n    add(sameScores(1)),\r\n    add(avoidMeetingTwice(true))\r\n)(0);\r\nexport {maxPriority};\r\n\r\n/**\r\n * @returns {number}\r\n */\r\nexport function calcPairIdeal(player1, player2) {\r\n    PlayerStats(player1);\r\n    PlayerStats(player2);\r\n    if (player1.id === player2.id) {\r\n        return 0;\r\n    }\r\n    const metBefore = player1.opponentHistory.includes(player2.id);\r\n    const mustAvoid = player1.avoidList.includes(player2.id);\r\n    return pipe(\r\n        add(differentHalf(\r\n            player1.upperHalf !== player2.upperHalf\r\n            && player1.score === player2.score\r\n        )),\r\n        add(differentDueColor(\r\n            player1.dueColor === null\r\n            || player1.dueColor !== player2.dueColor\r\n        )),\r\n        add(sameScores(Math.abs(player1.score - player2.score) + 1)),\r\n        add(avoidMeetingTwice(!metBefore && !mustAvoid))\r\n    )(0);\r\n}\r\n\r\n/**\r\n * Determine which players are in the upper and lower halves of their score\r\n * groups.\r\n * This function does not sort the list. The list should be sorted first.\r\n */\r\nexport function setUpperHalves(playerStatsList) {\r\n    t.list(PlayerStats)(playerStatsList);\r\n    const splitInHalf = (list) => splitAt(list.length / 2, list);\r\n    return playerStatsList.reduce(\r\n        function (acc, player, ignore, src) {\r\n            const upperHalfIds = pipe(\r\n                filter((a) => a.score === player.score),\r\n                splitInHalf,\r\n                view(lensIndex(0)),\r\n                map((a) => a.id)\r\n            )(src);\r\n            const isUpperHalf = upperHalfIds.includes(player.id);\r\n            return acc.concat([assoc(\"upperHalf\", isUpperHalf, player)]);\r\n        },\r\n        []\r\n    );\r\n}\r\n\r\nfunction setByePlayer(byeQueue, playerStatsList) {\r\n    t.list(t.Number)(byeQueue);\r\n    t.list(PlayerStats)(playerStatsList);\r\n    // if the list is even, just return it.\r\n    if (playerStatsList.length % 2 === 0) {\r\n        return playerStatsList;\r\n    }\r\n    const hasNotHadBye = playerStatsList.filter(\r\n        (p) => !p.hasHadBye\r\n    ).map((p) => p.id);\r\n    const nextByeSignup = byeQueue.filter((id) => hasNotHadBye.includes(id))[0];\r\n    const indexOfDueBye = (\r\n        (nextByeSignup)\r\n        // Assign the bye to the next person who signed up.\r\n        ? findLastIndex((p) => p.id === nextByeSignup, playerStatsList)\r\n        // Assign a bye to the lowest-rated player in the lowest score group.\r\n        // Because the list is sorted, the last player is the lowest.\r\n        // (USCF § 29L2.)\r\n        : findLastIndex((p) => !p.hasHadBye, playerStatsList)\r\n    );\r\n    // In the impossible situation that *everyone* has played a bye round\r\n    // previously, then just pick the last player.\r\n    const index = (\r\n        (indexOfDueBye === -1)\r\n        ? playerStatsList.length - 1\r\n        : indexOfDueBye\r\n    );\r\n    return over(\r\n        lensIndex(index),\r\n        assoc(\"isDueBye\", true),\r\n        playerStatsList\r\n    );\r\n}\r\n\r\n/**\r\n * Sort the data so matchups default to order by score and rating.\r\n */\r\nexport function sortPlayersForPairing(playerStatsList) {\r\n    t.list(PlayerStats)(playerStatsList);\r\n    return sort(\r\n        firstBy(\r\n            (a, b) => b.score - a.score\r\n        ).thenBy(\r\n            (a, b) => b.rating - a.rating\r\n        ),\r\n        playerStatsList\r\n    );\r\n}\r\n\r\n/**\r\n * Creates pairings according to the rules specified in USCF § 27, § 28,\r\n * and § 29. This is a work in progress and does not account for all of the\r\n * rules yet.\r\n */\r\nexport default function pairPlayers({\r\n    players,\r\n    roundId,\r\n    roundList,\r\n    avoidList,\r\n    byeQueue\r\n}) {\r\n    t.Number(roundId);\r\n    t.dict(Id, Player)(players);\r\n    t.list(t.Number)(byeQueue);\r\n    RoundList(roundList);\r\n    t.list(AvoidPair)(avoidList);\r\n    const playerIds = Object.keys(players);\r\n    const playerStatsList = pipe(\r\n        map((id) => (\r\n            createPlayerStats({\r\n                avoidList,\r\n                id,\r\n                players,\r\n                roundId,\r\n                roundList\r\n            })\r\n        )),\r\n        sortPlayersForPairing,\r\n        setUpperHalves,\r\n        curry(setByePlayer)(byeQueue)\r\n    )(playerIds);\r\n    // Turn the data into blossom-compatible input.\r\n    const potentialMatches = playerStatsList.filter(\r\n        (p) => !p.isDueBye\r\n    ).reduce(\r\n        function (acc, player1, ignore, src) {\r\n            const playerMatches = src.map(\r\n                (player2) => [\r\n                    playerIds.indexOf(player1.id),\r\n                    playerIds.indexOf(player2.id),\r\n                    calcPairIdeal(player1, player2)\r\n                ]\r\n            );\r\n            return acc.concat(playerMatches);\r\n        },\r\n        []\r\n    );\r\n    // Feed all of the potential matches to Edmonds-blossom and let the\r\n    // algorithm work its magic. This returns an array where each index is the\r\n    // ID of one player and each value is the ID of the matched player.\r\n    const blossomResults = blossom(potentialMatches);\r\n    // Translate those IDs into actual pairs of player Ids.\r\n    const reducedResults = blossomResults.reduce(\r\n        function (acc, p1Index, p2Index) {\r\n            // Filter out unmatched players. Blossom will automatically include\r\n            // their missing IDs in its results.\r\n            if (p1Index !== -1) {\r\n                // const p1 = playerStatsList.filter((p) => p.id === p1Id)[0];\r\n                // const p2 = playerStatsList.filter((p) => p.id === p2Id)[0];\r\n                // Translate the indices into ID strings\r\n                const p1Id = playerIds[p1Index];\r\n                const p2Id = playerIds[p2Index];\r\n                const p1 = playerStatsList.filter((p) => p.id === p1Id)[0];\r\n                const p2 = playerStatsList.filter((p) => p.id === p2Id)[0];\r\n                // const ideal = potentialMatches.filter(\r\n                //     (pair) => pair[0] === p1Id && pair[1] === p2Id\r\n                // )[0][2];\r\n                // Blossom returns a lot of redundant matches. Check that this\r\n                // matchup wasn't already added.\r\n                const matched = acc.map((pair) => pair[0]);\r\n                if (!matched.includes(p1) && !matched.includes(p2)) {\r\n                    return acc.concat([[p1, p2]]);\r\n                }\r\n            }\r\n            return acc;\r\n        },\r\n        []\r\n    );\r\n    // Sort by net score and rating for board placement.\r\n    const sortedResults = sort(\r\n        firstBy((pair1, pair2) => (\r\n            pair2[0].score + pair2[1].score - pair1[0].score - pair1[1].score\r\n        )).thenBy((pair1, pair2) => (\r\n            pair2[0].rating + pair2[1].rating\r\n            - pair1[0].rating - pair1[1].rating\r\n        )),\r\n        reducedResults\r\n    );\r\n    const matches = sortedResults.map(\r\n        function (pair) {\r\n            const player1 = pair[0];\r\n            const player2 = pair[1];\r\n            const match = [player1.id, player2.id];\r\n            if (player1.colorBalance < player2.colorBalance) {\r\n                return reverse(match);\r\n            }\r\n            return match;\r\n        }\r\n    );\r\n    // The bye match always gets added last so the the numbering isn't affected.\r\n    const byePlayer = playerStatsList.filter((p) => p.isDueBye)[0];\r\n    if (byePlayer) {\r\n        return matches.concat([[byePlayer.id, DUMMY_ID]]);\r\n    }\r\n    return matches;\r\n}\r\n","import Activity from \"react-feather/dist/icons/activity\";\r\nimport Alert from \"react-feather/dist/icons/alert-triangle\";\r\nimport ArrowDown from \"react-feather/dist/icons/arrow-down\";\r\nimport ArrowUp from \"react-feather/dist/icons/arrow-up\";\r\nimport ArrowUpLeft from \"react-feather/dist/icons/arrow-up-left\";\r\nimport Award from \"react-feather/dist/icons/award\";\r\nimport Check from \"react-feather/dist/icons/check\";\r\nimport CheckCircle from \"react-feather/dist/icons/check-circle\";\r\nimport ChevronLeft from \"react-feather/dist/icons/chevron-left\";\r\nimport ChevronRight from \"react-feather/dist/icons/chevron-right\";\r\nimport Circle from \"react-feather/dist/icons/circle\";\r\nimport Download from \"react-feather/dist/icons/download\";\r\nimport Edit from \"react-feather/dist/icons/edit\";\r\nimport Info from \"react-feather/dist/icons/info\";\r\nimport Javascript from \"simple-icons/icons/javascript\";\r\nimport Layers from \"react-feather/dist/icons/layers\";\r\nimport List from \"react-feather/dist/icons/list\";\r\nimport Minus from \"react-feather/dist/icons/minus\";\r\nimport Plus from \"react-feather/dist/icons/plus\";\r\nimport React from \"react\";\r\nimport ReactIcon from \"simple-icons/icons/react\";\r\nimport Repeat from \"react-feather/dist/icons/repeat\";\r\nimport Settings from \"react-feather/dist/icons/settings\";\r\nimport Trash from \"react-feather/dist/icons/trash-2\";\r\nimport UserMinus from \"react-feather/dist/icons/user-minus\";\r\nimport UserPlus from \"react-feather/dist/icons/user-plus\";\r\nimport Users from \"react-feather/dist/icons/users\";\r\nimport X from \"react-feather/dist/icons/x\";\r\n\r\nconst simpleIcon = (icon) => (props) => (\r\n    <span\r\n        dangerouslySetInnerHTML={{__html: icon.svg}}\r\n        aria-label={icon.title}\r\n        role=\"img\"\r\n        style={{fill: \"#\" + icon.hex}}\r\n        {...props}\r\n    />\r\n);\r\n\r\nexport default {\r\n    Activity,\r\n    Alert,\r\n    ArrowDown,\r\n    ArrowUp,\r\n    ArrowUpLeft,\r\n    Award,\r\n    Check,\r\n    CheckCircle,\r\n    ChevronLeft,\r\n    ChevronRight,\r\n    Circle,\r\n    Download,\r\n    Edit,\r\n    Info,\r\n    Javascript: simpleIcon(Javascript),\r\n    Layers,\r\n    List,\r\n    Minus,\r\n    Plus,\r\n    React: simpleIcon(ReactIcon),\r\n    Repeat,\r\n    Settings,\r\n    Trash,\r\n    UserMinus,\r\n    UserPlus,\r\n    Users,\r\n    X\r\n};\r\n","import {Id, createPlayer, createTournament} from \"../../data-types\";\r\nimport {\r\n    assoc,\r\n    dissoc,\r\n    lensProp,\r\n    mergeLeft,\r\n    over\r\n} from \"ramda\";\r\nimport nanoid from \"nanoid\";\r\nimport t from \"tcomb\";\r\n\r\nconst ActionLoadState = t.interface({\r\n    state: t.Any\r\n});\r\nconst ActionDelItem = t.interface({\r\n    id: t.String\r\n});\r\nconst ActionAddItem = t.interface({\r\n    item: t.Any\r\n});\r\nconst ActionAddTourney = t.interface({\r\n    name: t.String\r\n});\r\nconst AdctionAddPlayer = t.interface({\r\n    firstName: t.String,\r\n    lastName: t.String,\r\n    rating: t.Number\r\n});\r\n// This is copied from players-reducer.js since the profile editor uses it\r\n// TODO: unify those\r\nconst ActionSetPlayer = t.interface({\r\n    firstName: t.String,\r\n    id: Id,\r\n    lastName: t.String,\r\n    matchCount: t.Number,\r\n    rating: t.Number\r\n});\r\nconst ActionTypes = t.union([\r\n    ActionLoadState,\r\n    ActionDelItem,\r\n    ActionAddItem,\r\n    AdctionAddPlayer,\r\n    ActionAddTourney,\r\n    ActionSetPlayer\r\n]);\r\nActionTypes.dispatch = function (x) {\r\n    const typeToConstructor = {\r\n        \"ADD_ITEM\": ActionAddItem,\r\n        \"ADD_PLAYER\": AdctionAddPlayer,\r\n        \"ADD_TOURNEY\": ActionAddTourney,\r\n        \"DEL_ITEM\": ActionDelItem,\r\n        \"LOAD_STATE\": ActionLoadState,\r\n        \"SET_PLAYER\": ActionSetPlayer\r\n    };\r\n    return typeToConstructor[x.type];\r\n};\r\n\r\nexport default function genericDbReducer(state, action) {\r\n    ActionTypes(action);\r\n    const nextId = nanoid();\r\n    switch (action.type) {\r\n    case \"ADD_ITEM\":\r\n        console.warn(\"Use a more specific action instead, please.\");\r\n        return assoc(nextId, action.item, state);\r\n    case \"ADD_TOURNEY\":\r\n        return assoc(\r\n            nextId,\r\n            createTournament({id: nextId, name: action.name}),\r\n            state\r\n        );\r\n    case \"ADD_PLAYER\":\r\n        return assoc(\r\n            nextId,\r\n            createPlayer({\r\n                firstName: action.firstName,\r\n                id: nextId,\r\n                lastName: action.lastName,\r\n                rating: action.rating\r\n            }),\r\n            state\r\n        );\r\n    case \"DEL_ITEM\":\r\n        // If using the player DB, be sure to delete avoid-pairs too.\r\n        return dissoc(action.id, state);\r\n    case \"SET_PLAYER\":\r\n        // This is copied from players-reducer since the profile editor uses it\r\n        return over(\r\n            lensProp(action.id),\r\n            mergeLeft(\r\n                {\r\n                    firstName: action.firstName,\r\n                    lastName: action.lastName,\r\n                    matchCount: action.matchCount,\r\n                    rating: action.rating\r\n                }\r\n            ),\r\n            state\r\n        );\r\n    case \"LOAD_STATE\":\r\n        return action.state;\r\n    default:\r\n        throw new Error(\"Unexpected action type\");\r\n    }\r\n}\r\n","import {AvoidPair, Id} from \"../../data-types\";\r\nimport {append, assoc, filter, lensProp, over} from \"ramda\";\r\nimport t from \"tcomb\";\r\n\r\nconst ActionLoadState = t.interface({\r\n    state: t.Any\r\n});\r\nconst ActionSetOption = t.interface({\r\n    option: t.String,\r\n    value: t.union([\r\n        t.Number,\r\n        t.list(AvoidPair)\r\n    ])\r\n});\r\nconst ActionAvoidPair = t.interface({\r\n    pair: AvoidPair\r\n});\r\nconst ActionAvoidSingle = t.interface({\r\n    id: Id\r\n});\r\nconst ActionTypes = t.union([\r\n    ActionLoadState,\r\n    ActionAvoidPair,\r\n    ActionAvoidSingle\r\n]);\r\nActionTypes.dispatch = function (x) {\r\n    const typeToConstructor = {\r\n        \"ADD_AVOID_PAIR\": ActionAvoidPair,\r\n        \"DEL_AVOID_PAIR\": ActionAvoidPair,\r\n        \"DEL_AVOID_SINGLE\": ActionAvoidSingle,\r\n        \"LOAD_STATE\": ActionLoadState,\r\n        \"SET_OPTION\": ActionSetOption\r\n    };\r\n    return typeToConstructor[x.type];\r\n};\r\n\r\nexport default function optionsReducer(state, action) {\r\n    ActionTypes(action);\r\n    switch (action.type) {\r\n    case \"ADD_AVOID_PAIR\":\r\n        return over(\r\n            lensProp(\"avoidPairs\"),\r\n            append(action.pair),\r\n            state\r\n        );\r\n    case \"DEL_AVOID_PAIR\":\r\n        return over(\r\n            lensProp(\"avoidPairs\"),\r\n            filter((pair) => !(\r\n                pair.includes(action.pair[0]) && pair.includes(action.pair[1])\r\n            )),\r\n            state\r\n        );\r\n    case \"DEL_AVOID_SINGLE\":\r\n        // call this when you delete a player ID\r\n        // TODO: make the avoidPairs list smartly auto-clean itself\r\n        return over(\r\n            lensProp(\"avoidPairs\"),\r\n            filter((pair) => !pair.includes(action.id)),\r\n            state\r\n        );\r\n    case \"SET_OPTION\":\r\n        return assoc(\r\n            action.option,\r\n            action.value,\r\n            state\r\n        );\r\n    case \"LOAD_STATE\":\r\n        return action.state;\r\n    default:\r\n        throw new Error(\"Unexpected action type.\");\r\n    }\r\n}\r\n\r\n","import {Id, createPlayer} from \"../../data-types\";\r\nimport {\r\n    assoc,\r\n    dissoc,\r\n    lensPath,\r\n    lensProp,\r\n    mergeLeft,\r\n    over,\r\n    set\r\n} from \"ramda\";\r\nimport nanoid from \"nanoid\";\r\nimport t from \"tcomb\";\r\n\r\nconst ActionSetPlayer = t.interface({\r\n    firstName: t.String,\r\n    id: Id,\r\n    lastName: t.String,\r\n    matchCount: t.Number,\r\n    rating: t.Number\r\n});\r\nconst ActionAddPlayer = t.interface({\r\n    firstName: t.String,\r\n    lastName: t.String,\r\n    rating: t.Number\r\n});\r\nconst ActionDelPlayer = t.interface({\r\n    id: Id\r\n});\r\nconst ActionSetMatchcount = t.interface({\r\n    id: Id,\r\n    matchCount: t.Number\r\n});\r\nconst ActionSetRating = t.interface({\r\n    id: Id,\r\n    rating: t.Number\r\n});\r\nconst ActionLoadState = t.interface({state: t.Any});\r\nconst ActionTypes = t.union([\r\n    ActionSetPlayer,\r\n    ActionAddPlayer,\r\n    ActionDelPlayer,\r\n    ActionSetMatchcount,\r\n    ActionSetRating,\r\n    ActionLoadState\r\n]);\r\nActionTypes.dispatch = function (x) {\r\n    const typeToConstructor = {\r\n        \"ADD_PLAYER\": ActionAddPlayer,\r\n        \"DEL_PLAYER\": ActionDelPlayer,\r\n        \"LOAD_STATE\": ActionLoadState,\r\n        \"SET_PLAYER\": ActionSetPlayer,\r\n        \"SET_PLAYER_MATCHCOUNT\": ActionSetMatchcount,\r\n        \"SET_PLAYER_RATING\": ActionSetRating\r\n    };\r\n    return typeToConstructor[x.type];\r\n};\r\n\r\nexport default function playersReducer(state, action) {\r\n    ActionTypes(action);\r\n    const nextId = nanoid();\r\n    switch (action.type) {\r\n    case \"ADD_PLAYER\":\r\n        return assoc(\r\n            nextId,\r\n            createPlayer({\r\n                firstName: action.firstName,\r\n                id: nextId,\r\n                lastName: action.lastName,\r\n                rating: action.rating\r\n            }),\r\n            state\r\n        );\r\n    case \"SET_PLAYER\":\r\n        return over(\r\n            lensProp(action.id),\r\n            mergeLeft(\r\n                {\r\n                    firstName: action.firstName,\r\n                    lastName: action.lastName,\r\n                    matchCount: action.matchCount,\r\n                    rating: action.rating\r\n                }\r\n            ),\r\n            state\r\n        );\r\n    case \"DEL_PLAYER\":\r\n        // You should delete all avoid-pairs with the id too.\r\n        return dissoc(\r\n            lensPath(action.id),\r\n            state\r\n        );\r\n    case \"SET_PLAYER_MATCHCOUNT\":\r\n        return set(\r\n            lensPath([action.id, \"matchCount\"]),\r\n            action.matchCount,\r\n            state\r\n        );\r\n    case \"SET_PLAYER_RATING\":\r\n        return set(\r\n            lensPath([action.id, \"rating\"]),\r\n            action.rating,\r\n            state\r\n        );\r\n    case \"LOAD_STATE\":\r\n        return action.state;\r\n    default:\r\n        throw new Error(\"Unexpected action type\");\r\n    }\r\n}\r\n","// TODO: this file needs to be replaced with something more organized.\r\nimport {\r\n    AvoidPair,\r\n    BLACK,\r\n    DUMMY_ID,\r\n    Id,\r\n    Player,\r\n    Tournament,\r\n    WHITE,\r\n    createMatch\r\n} from \"../../data-types\";\r\nimport {getPlayerMaybe, pairPlayers} from \"../../pairing-scoring\";\r\nimport {assoc} from \"ramda\";\r\nimport t from \"tcomb\";\r\n\r\nexport function autoPair({\r\n    avoidList,\r\n    byeValue,\r\n    players,\r\n    roundId,\r\n    tourney\r\n}) {\r\n    t.list(AvoidPair)(avoidList);\r\n    t.Number(byeValue);\r\n    Tournament(tourney);\r\n    t.dict(Id, Player)(players);\r\n    t.Number(roundId);\r\n    const roundList = tourney.roundList;\r\n    const pairs = pairPlayers({\r\n        avoidList: avoidList,\r\n        byeQueue: tourney.byeQueue,\r\n        players,\r\n        roundId,\r\n        roundList\r\n    });\r\n    console.log(\"pairs\", pairs);\r\n    console.log(\"players\", players);\r\n    const getPlayer = (id) => getPlayerMaybe(players, id); // curry\r\n    const newMatchList = pairs.map(\r\n        (idsPair) => (\r\n            createMatch({\r\n                newRating: [\r\n                    getPlayer(idsPair[WHITE]).rating,\r\n                    getPlayer(idsPair[BLACK]).rating\r\n                ],\r\n                origRating: [\r\n                    getPlayer(idsPair[WHITE]).rating,\r\n                    getPlayer(idsPair[BLACK]).rating\r\n                ],\r\n                playerIds: [idsPair[WHITE], idsPair[BLACK]]\r\n            })\r\n        )\r\n    );\r\n    return newMatchList.reduce(\r\n        // Set match results for bye matches\r\n        function (acc, match) {\r\n            if (match.playerIds[WHITE] === DUMMY_ID) {\r\n                return acc.concat([assoc(\"result\", [0, byeValue], match)]);\r\n            }\r\n            if (match.playerIds[BLACK] === DUMMY_ID) {\r\n                return acc.concat([assoc(\"result\", [byeValue, 0], match)]);\r\n            }\r\n            return acc.concat([match]);\r\n        },\r\n        []\r\n    );\r\n}\r\n\r\nexport function manualPair(pair, byeValue) {\r\n    t.tuple([Player, Player])(pair);\r\n    const match = createMatch({\r\n        newRating: [pair[WHITE].rating, pair[BLACK].rating],\r\n        origRating: [pair[WHITE].rating, pair[BLACK].rating],\r\n        playerIds: [pair[WHITE].id, pair[BLACK].id]\r\n    });\r\n    if (pair[WHITE].id === DUMMY_ID) {\r\n        return assoc(\"result\", [0, byeValue], match);\r\n    }\r\n    if (pair[BLACK].id === DUMMY_ID) {\r\n        return assoc(\"result\", [byeValue, 0], match);\r\n    }\r\n    return match;\r\n}\r\n","import {AvoidPair, Id, Player} from \"../../data-types\";\r\nimport {\r\n    __,\r\n    append,\r\n    assoc,\r\n    concat,\r\n    filter,\r\n    findIndex,\r\n    lensPath,\r\n    lensProp,\r\n    mergeRight,\r\n    move,\r\n    over,\r\n    pipe,\r\n    propEq,\r\n    remove,\r\n    reverse,\r\n    set\r\n} from \"ramda\";\r\nimport {autoPair, manualPair} from \"./match-functions\";\r\nimport t from \"tcomb\";\r\n\r\nconst ActionAddRound = t.interface({});\r\nconst ActionDelLastRound = t.interface({});\r\nconst ActionAddRemoveTieBreak = t.interface({\r\n    id: t.Number\r\n});\r\nconst ActionMoveTieBreak = t.interface({\r\n    newIndex: t.Number,\r\n    oldIndex: t.Number\r\n});\r\nconst ActionSetTourneyPlayers = t.interface({\r\n    playerIds: t.list(Id)\r\n});\r\nconst ActionSetByeQueue = t.interface({\r\n    byeQueue: t.list(Id)\r\n});\r\nconst ActionAutoPair = t.interface({\r\n    avoidList: t.list(AvoidPair),\r\n    byeValue: t.Number,\r\n    players: t.dict(Id, Player),\r\n    roundId: t.Number\r\n});\r\nconst ActionManualPair = t.interface({\r\n    byeValue: t.Number,\r\n    pair: t.tuple([Player, Player]),\r\n    roundId: t.Number\r\n});\r\nconst ActionSetMatchResult = t.interface({\r\n    matchId: t.String,\r\n    newRating: t.tuple([t.Number, t.Number]),\r\n    result: t.tuple([t.Number, t.Number]),\r\n    roundId: t.Number\r\n});\r\nconst ActionEditMatch = t.interface({\r\n    matchId: t.String,\r\n    roundId: t.Number\r\n});\r\nconst ActionMoveMatch = t.interface({\r\n    newIndex: t.Number,\r\n    oldIndex: t.Number,\r\n    roundId: t.Number\r\n});\r\nconst ActionSetName = t.interface({\r\n    name: t.String\r\n});\r\nconst ActionSetDate = t.interface({\r\n    date: Date\r\n});\r\nconst ActionLoadState = t.interface({\r\n    state: t.Any\r\n});\r\nconst ActionTypes = t.union([\r\n    ActionAddRound,\r\n    ActionDelLastRound,\r\n    ActionAddRemoveTieBreak,\r\n    ActionAddRemoveTieBreak,\r\n    ActionMoveTieBreak,\r\n    ActionSetName,\r\n    ActionSetTourneyPlayers,\r\n    ActionSetByeQueue,\r\n    ActionSetDate,\r\n    ActionAutoPair,\r\n    ActionManualPair,\r\n    ActionSetMatchResult,\r\n    ActionEditMatch,\r\n    ActionMoveMatch\r\n]);\r\nActionTypes.dispatch = function (action) {\r\n    const typeToConstructor = {\r\n        \"ADD_ROUND\": ActionAddRound,\r\n        \"ADD_TIEBREAK\": ActionAddRemoveTieBreak,\r\n        \"AUTO_PAIR\": ActionAutoPair,\r\n        \"DEL_LAST_ROUND\": ActionDelLastRound,\r\n        \"DEL_MATCH\": ActionEditMatch,\r\n        \"DEL_TIEBREAK\": ActionAddRemoveTieBreak,\r\n        \"MANUAL_PAIR\": ActionManualPair,\r\n        \"MOVE_MATCH\": ActionMoveMatch,\r\n        \"MOVE_TIEBREAK\": ActionMoveTieBreak,\r\n        \"SET_BYE_QUEUE\": ActionSetByeQueue,\r\n        \"SET_DATE\": ActionSetDate,\r\n        \"SET_MATCH_RESULT\": ActionSetMatchResult,\r\n        \"SET_NAME\": ActionSetName,\r\n        \"SET_STATE\": ActionLoadState,\r\n        \"SET_TOURNEY_PLAYERS\": ActionSetTourneyPlayers,\r\n        \"SWAP_COLORS\": ActionEditMatch\r\n    };\r\n    return typeToConstructor[action.type];\r\n};\r\n\r\nexport default function tournamentReducer(state, action) {\r\n    ActionTypes(action);\r\n    switch (action.type) {\r\n    case \"ADD_ROUND\":\r\n        return over(\r\n            lensProp(\"roundList\"),\r\n            append([]),\r\n            state\r\n        );\r\n    case \"DEL_LAST_ROUND\":\r\n        return over(\r\n            lensProp(\"roundList\"),\r\n            remove(-1, 1),\r\n            state\r\n        );\r\n    case \"ADD_TIEBREAK\":\r\n        return over(\r\n            lensProp(\"tieBreaks\"),\r\n            append(action.id),\r\n            state\r\n        );\r\n    case \"DEL_TIEBREAK\":\r\n        return over(\r\n            lensProp(\"tieBreaks\"),\r\n            filter((id) => id !== action.id),\r\n            state\r\n        );\r\n    case \"MOVE_TIEBREAK\":\r\n        return over(\r\n            lensProp(\"tieBreaks\"),\r\n            move(action.oldIndex, action.newIndex),\r\n            state\r\n        );\r\n    case \"SET_TOURNEY_PLAYERS\":\r\n        return assoc(\r\n            \"playerIds\",\r\n            action.playerIds,\r\n            state\r\n        );\r\n    case \"SET_BYE_QUEUE\":\r\n        return assoc(\r\n            \"byeQueue\",\r\n            action.byeQueue,\r\n            state\r\n        );\r\n    case \"SET_NAME\":\r\n        return assoc(\r\n            \"name\",\r\n            action.name,\r\n            state\r\n        );\r\n    case \"AUTO_PAIR\":\r\n        return over(\r\n            lensPath([\"roundList\", action.roundId]),\r\n            concat(\r\n                __,\r\n                autoPair({\r\n                    avoidList: action.avoidList,\r\n                    byeValue: action.byeValue,\r\n                    players: action.players,\r\n                    roundId: action.roundId,\r\n                    tourney: state\r\n                })\r\n            ),\r\n            state\r\n        );\r\n    case \"MANUAL_PAIR\":\r\n        return over(\r\n            lensPath([\"roundList\", action.roundId]),\r\n            append(manualPair(action.pair, action.byeValue)),\r\n            state\r\n        );\r\n    case \"SET_DATE\":\r\n        return assoc(\r\n            \"date\",\r\n            action.date,\r\n            state\r\n        );\r\n    case \"SET_MATCH_RESULT\":\r\n        return pipe(\r\n            set(\r\n                lensPath([\r\n                    \"roundList\",\r\n                    action.roundId,\r\n                    findIndex(\r\n                        propEq(\"id\", action.matchId),\r\n                        state.roundList[action.roundId]\r\n                    ),\r\n                    \"result\"\r\n                ]),\r\n                action.result\r\n            ),\r\n            set(\r\n                lensPath([\r\n                    \"roundList\",\r\n                    action.roundId,\r\n                    findIndex(\r\n                        propEq(\"id\", action.matchId),\r\n                        state.roundList[action.roundId]\r\n                    ),\r\n                    \"newRating\"\r\n                ]),\r\n                action.newRating,\r\n            ),\r\n        )(state);\r\n    case \"DEL_MATCH\":\r\n        return over(\r\n            lensPath([\"roundList\", action.roundId]),\r\n            filter((match) => match.id !== action.matchId),\r\n            state\r\n        );\r\n    case \"SWAP_COLORS\":\r\n        return over(\r\n            lensPath([\r\n                \"roundList\",\r\n                action.roundId,\r\n                findIndex(\r\n                    propEq(\"id\", action.matchId),\r\n                    state.roundList[action.roundId]\r\n                )\r\n            ]),\r\n            (match) => mergeRight(\r\n                match,\r\n                {\r\n                    newRating: reverse(match.newRating),\r\n                    origRating: reverse(match.origRating),\r\n                    playerIds: reverse(match.playerIds),\r\n                    result: reverse(match.result)\r\n                }\r\n            ),\r\n            state\r\n        );\r\n    case \"MOVE_MATCH\":\r\n        return over(\r\n            lensPath([\"roundList\", action.roundId]),\r\n            move(action.oldIndex, action.newIndex),\r\n            state\r\n        );\r\n    case \"SET_STATE\":\r\n        console.log(\"setting state:\", action.state);\r\n        return action.state;\r\n    default:\r\n        throw new Error(\"Unexpected action type \" + action.type);\r\n    }\r\n}\r\n","import {Id, Player, Tournament} from \"../data-types\";\r\nimport fromJSON from \"tcomb/lib/fromJSON\";\r\nimport options from \"./options.json\";\r\nimport players from \"./players.json\";\r\nimport t from \"tcomb\";\r\nimport tournaments from \"./tournaments.json\";\r\n\r\nexport default {\r\n    options,\r\n    players: t.dict(Id, Player)(players),\r\n    tournaments: fromJSON(tournaments, t.dict(t.String, Tournament))\r\n};\r\n","import \"localforage-getitems\";\r\nimport {genericDbReducer, optionsReducer} from \"./reducers\";\r\nimport {useEffect, useReducer, useState} from \"react\";\r\nimport demoData from \"../demo-data\";\r\nimport {difference} from \"ramda\";\r\nimport localForage from \"localforage\";\r\nimport {extendPrototype as removeItemsPrototype} from \"localforage-removeitems\";\r\nimport {extendPrototype as setItemsPrototype} from \"localforage-setitems\";\r\n\r\n/*******************************************************************************\r\n * Initialize the databases\r\n ******************************************************************************/\r\nsetItemsPrototype(localForage);\r\nremoveItemsPrototype(localForage);\r\nconst DATABASE_NAME = \"Chessahoochee\";\r\nconst optionsStore = localForage.createInstance({\r\n    name: DATABASE_NAME,\r\n    storeName: \"Options\"\r\n});\r\nconst playerStore = localForage.createInstance({\r\n    name: DATABASE_NAME,\r\n    storeName: \"Players\"\r\n});\r\nconst tourneyStore = localForage.createInstance({\r\n    name: DATABASE_NAME,\r\n    storeName: \"Tournaments\"\r\n});\r\n\r\nexport {optionsStore, playerStore, tourneyStore};\r\n\r\nexport function loadDemoDB() {\r\n    document.body.style.cursor = \"wait\";\r\n    Promise.all([\r\n        optionsStore.setItems(demoData.options),\r\n        playerStore.setItems(demoData.players),\r\n        tourneyStore.setItems(demoData.tournaments)\r\n    ]).then(function () {\r\n        window.alert(\"Demo data loaded!\");\r\n        document.body.style.cursor = \"auto\";\r\n    });\r\n}\r\n\r\n/*******************************************************************************\r\n * Generic database hooks\r\n ******************************************************************************/\r\nfunction useAllItemsFromDb(store) {\r\n    const [items, dispatch] = useReducer(genericDbReducer, {});\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    useEffect(\r\n        function loadItemsFromDb() {\r\n            document.body.style.cursor = \"wait\";\r\n            store.getItems().then(function (results) {\r\n                console.log(\"loaded items from\", store._config.storeName);\r\n                dispatch({state: results, type: \"LOAD_STATE\"});\r\n                setIsLoaded(true);\r\n                document.body.style.cursor = \"auto\";\r\n            }).catch(function () {\r\n                document.body.style.cursor = \"auto\";\r\n            });\r\n        },\r\n        [store]\r\n    );\r\n    useEffect(\r\n        function saveChangesToDb() {\r\n            if (!isLoaded) {\r\n                return;\r\n            }\r\n            store.setItems(items).then(function () {\r\n                console.log(\"saved items to\", store._config.storeName);\r\n            });\r\n            store.keys().then(function (keys) {\r\n                const deleted = difference(keys, Object.keys(items));\r\n                if (deleted.length > 0 ) {\r\n                    store.removeItems(deleted).then(function () {\r\n                        console.log(\"Deleted \" + deleted.length + \" items.\");\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        [store, items, isLoaded]\r\n    );\r\n    return [items, dispatch];\r\n}\r\n\r\n/*******************************************************************************\r\n * Player & tournament wrapper hooks\r\n ******************************************************************************/\r\nexport function useAllPlayersDb() {\r\n    return useAllItemsFromDb(playerStore);\r\n}\r\n\r\nexport function useAllTournamentsDb() {\r\n    return useAllItemsFromDb(tourneyStore);\r\n}\r\n\r\n/*******************************************************************************\r\n * Options database hooks\r\n ******************************************************************************/\r\nexport function useOptionsDb() {\r\n    const [options, dispatch] = useReducer(optionsReducer, demoData.options);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    useEffect(\r\n        function initOptionsFromDb() {\r\n            document.body.style.cursor = \"wait\";\r\n            optionsStore.iterate(function (value, key) {\r\n                dispatch({option: key, type: \"SET_OPTION\", value: value});\r\n            }).then(function () {\r\n                setIsLoaded(true);\r\n                document.body.style.cursor = \"auto\";\r\n            }).catch(function () {\r\n                document.body.style.cursor = \"auto\";\r\n            });\r\n        },\r\n        []\r\n    );\r\n    useEffect(\r\n        function writeChangesToDb() {\r\n            if (!isLoaded) {\r\n                return;\r\n            }\r\n            optionsStore.setItems(options);\r\n        },\r\n        [options, isLoaded]\r\n    );\r\n    return [options, dispatch];\r\n}\r\n","import React, {\r\n    createContext,\r\n    useContext,\r\n    useEffect,\r\n    useReducer,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    getAllPlayersFromMatches,\r\n    getPlayerMaybe,\r\n    rounds2Matches\r\n} from \"../pairing-scoring\";\r\nimport {playerStore, tourneyStore} from \"./db\";\r\nimport {playersReducer, tournamentReducer} from \"./reducers\";\r\nimport PropTypes from \"prop-types\";\r\nimport {symmetricDifference} from \"ramda\";\r\n\r\nconst TournamentContext = createContext(null);\r\n\r\nexport function useTournament() {\r\n    const state = useContext(TournamentContext);\r\n    return state;\r\n}\r\n\r\nexport function TournamentProvider({children, tourneyId}) {\r\n    const [tourney, tourneyDispatch] = useReducer(tournamentReducer, {});\r\n    const [players, playersDispatch] = useReducer(playersReducer, {});\r\n    const [isTourneyLoaded, setIsTourneyLoaded] = useState(false);\r\n    const [isPlayersLoaded, setIsPlayersLoaded] = useState(false);\r\n    useEffect(\r\n        function initTourneyFromDb() {\r\n            document.body.style.cursor = \"wait\";\r\n            tourneyStore.getItem(tourneyId).then(function (value) {\r\n                console.log(\"loaded:\", tourneyId);\r\n                tourneyDispatch({state: value, type: \"SET_STATE\"});\r\n                setIsTourneyLoaded(true);\r\n                document.body.style.cursor = \"auto\";\r\n            }).catch(function () {\r\n                document.body.style.cursor = \"auto\";\r\n            });\r\n        },\r\n        [tourneyId]\r\n    );\r\n    useEffect(\r\n        function hydrateTourneyPlayersFromDb() {\r\n            if (!tourney.roundList || !tourney.playerIds) {\r\n                return; // the tournament hasn't been loaded yet\r\n            }\r\n            // Include players who have played matches but left the tournament,\r\n            // as well as players who are registered but havne't played yet.\r\n            const allTheIds = getAllPlayersFromMatches(\r\n                rounds2Matches(tourney.roundList)\r\n            ).concat(\r\n                tourney.playerIds\r\n            );\r\n            // If there are no ids, update the player state and exit early.\r\n            if (allTheIds.length === 0) {\r\n                // This check prevents an infinite loop & memory leak.\r\n                if (Object.keys(players).length !== 0) {\r\n                    playersDispatch({state: {}, type: \"LOAD_STATE\"});\r\n                }\r\n                setIsPlayersLoaded(true);\r\n                return;\r\n            }\r\n            document.body.style.cursor = \"wait\";\r\n            playerStore.getItems(allTheIds).then(function (values) {\r\n                // This safeguards against trying to fetch dummy IDs or IDs from\r\n                // deleted players. If we updated without this condition, then\r\n                // this `useEffect` would trigger an infinite loop and a memory\r\n                // leak.\r\n                const unChangedPlayers = symmetricDifference(\r\n                    Object.keys(values),\r\n                    Object.keys(players)\r\n                );\r\n                console.log(\"unchanged players:\", unChangedPlayers);\r\n                if (unChangedPlayers.length !== 0) {\r\n                    console.log(\"hydrated player data\");\r\n                    playersDispatch({state: values, type: \"LOAD_STATE\"});\r\n                }\r\n                setIsPlayersLoaded(true);\r\n                document.body.style.cursor = \"auto\";\r\n            }).catch(function (error) {\r\n                console.error(\"Couldn't load ids:\", allTheIds);\r\n                console.error(error);\r\n                document.body.style.cursor = \"auto\";\r\n            });\r\n        },\r\n        [tourney.roundList, players, tourney.playerIds]\r\n    );\r\n    useEffect(\r\n        function saveTourneyToDb() {\r\n            if (!isTourneyLoaded) {\r\n                return;\r\n            }\r\n            tourneyStore.setItem(tourneyId, tourney).catch(function (error) {\r\n                console.log(\"error saving tourney:\", tourneyId, error);\r\n            });\r\n        },\r\n        [tourneyId, tourney, isTourneyLoaded]\r\n    );\r\n    useEffect(\r\n        function savePlayersToDb() {\r\n            if (!isPlayersLoaded) {\r\n                return;\r\n            }\r\n            playerStore.setItems(players).then(function (values) {\r\n                console.log(\"saved player changes to DB:\", values);\r\n            }).catch(function (error) {\r\n                console.log(\"couldn't save players to DB:\", error);\r\n            });\r\n        },\r\n        [players, isPlayersLoaded]\r\n    );\r\n    const getPlayer = (id) => getPlayerMaybe(players, id); // curry\r\n    if (!isTourneyLoaded || !isPlayersLoaded) {\r\n        return <div>Loading...</div>;\r\n    }\r\n    return (\r\n        <TournamentContext.Provider\r\n            value={{\r\n                getPlayer,\r\n                players,\r\n                playersDispatch,\r\n                tourney,\r\n                tourneyDispatch\r\n            }}\r\n        >\r\n            {children}\r\n        </TournamentContext.Provider>\r\n    );\r\n}\r\nTournamentProvider.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    tourneyId: PropTypes.string.isRequired\r\n};\r\n","import {\r\n    TournamentProvider,\r\n    useTournament\r\n} from \"./tournament-provider\";\r\nimport {\r\n    useAllPlayersDb,\r\n    useAllTournamentsDb,\r\n    useOptionsDb\r\n    // usePlayersDb,\r\n    // useTournamentDb\r\n} from \"./db\";\r\nimport {useEffect} from \"react\";\r\n\r\nexport function useDocumentTitle(title) {\r\n    useEffect(\r\n        function () {\r\n            const origTitle = document.title;\r\n            document.title = \"Chessahoochee: \" + title;\r\n            return function () {\r\n                document.title = origTitle;\r\n            };\r\n        },\r\n        [title]\r\n    );\r\n}\r\n\r\nexport {\r\n    useAllPlayersDb,\r\n    useAllTournamentsDb,\r\n    useOptionsDb,\r\n    useTournament,\r\n    TournamentProvider\r\n};\r\n","import {\r\n    createStandingList,\r\n    getPerformanceRatings,\r\n    getResultsByOpponent,\r\n    rounds2Matches\r\n} from \"../../pairing-scoring\";\r\nimport Icons from \"../icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {assoc} from \"ramda\";\r\nimport numeral from \"numeral\";\r\nimport style from \"./scores.module.css\";\r\nimport {useTournament} from \"../../hooks\";\r\n\r\nexport default function Crosstable(props) {\r\n    const {tourney, getPlayer} = useTournament();\r\n    const {tieBreaks, roundList} = tourney;\r\n    const matches = rounds2Matches(roundList);\r\n    const oppResults = (id) => getResultsByOpponent(matches, id); // curry\r\n    const [standings] = createStandingList(tieBreaks, roundList);\r\n    const opponentScores = standings.reduce(\r\n        (acc, {id}) => assoc(id, oppResults(id), acc),\r\n        {}\r\n    );\r\n\r\n    function getXScore(player1Id, player2Id) {\r\n        if (player1Id === player2Id) {\r\n            return <Icons.X className=\"disabled\" />;\r\n        }\r\n        const result = opponentScores[player1Id][player2Id];\r\n        if (result === undefined) {\r\n            return null;\r\n        }\r\n        return numeral(result).format(\"1/2\");\r\n    }\r\n\r\n    function getRatingChangeTds(playerId) {\r\n        const [\r\n            firstRating,\r\n            lastRating\r\n        ] = getPerformanceRatings(matches, playerId);\r\n        const change = numeral(lastRating - firstRating).format(\"+0\");\r\n        return (\r\n            <>\r\n            <td className=\"table__number\">\r\n                {lastRating}\r\n            </td>\r\n            <td className=\"table__number body-10\">\r\n                ({change})\r\n            </td>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <table className={style.table}>\r\n            <caption>Crosstable</caption>\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Name</th>\r\n                    {/* Display a rank as a shorthand for each player. */}\r\n                    {Object.keys(standings).map((rank) =>\r\n                        <th key={rank}>\r\n                            {Number(rank) + 1}\r\n                        </th>\r\n                    )}\r\n                    <th>Score</th>\r\n                    <th colSpan={2}>Rating</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {/* Output a row for each player */}\r\n                {standings.map((standing, index)=>\r\n                    <tr key={index} className={style.row}>\r\n                        <th className={style.rank} scope=\"col\">\r\n                            {index + 1}\r\n                        </th>\r\n                        <th className={style.playerName} scope=\"row\">\r\n                            {getPlayer(standing.id).firstName}&nbsp;\r\n                            {getPlayer(standing.id).lastName}\r\n                        </th>\r\n                        {/* Output a cell for each other player */}\r\n                        {standings.map((opponent, index2) =>\r\n                            <td\r\n                                key={index2}\r\n                                className=\"table__number\"\r\n                            >\r\n                                {getXScore(standing.id, opponent.id)}\r\n                            </td>\r\n                        )}\r\n                        {/* Output their score and rating change */}\r\n                        <td className=\"table__number\">\r\n                            {numeral(standing.score).format(\"1/2\")}\r\n                        </td>\r\n                        {getRatingChangeTds(standing.id)}\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\nCrosstable.propTypes = {\r\n    tourneyId: PropTypes.string\r\n};\r\n","import Icons from \"./icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {omit} from \"ramda\";\r\nimport styles from \"./utility.module.css\";\r\n// import {usePlayers} from \"../state\";\r\n\r\nexport const Button = ({children, action}) => (\r\n    <button onClick={action}>\r\n        {children}\r\n    </button>\r\n);\r\nButton.propTypes = {\r\n    action: PropTypes.func.isRequired,\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\nexport const BackButton = ({action}) => (\r\n    <Button action={action}>&lt; Back</Button>\r\n);\r\nBackButton.propTypes = {\r\n    action: PropTypes.func.isRequired\r\n};\r\n\r\nexport const OpenButton = ({action}) => (\r\n    <Button action={action}>Open &gt;</Button>\r\n);\r\nOpenButton.propTypes = {\r\n    action: PropTypes.func.isRequired\r\n};\r\n\r\nexport function Panel({children, style}) {\r\n    return (\r\n        <div className={styles.panel} style={{...style}}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\nPanel.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport function PanelContainer(props) {\r\n    return (\r\n        <div {...props} className={styles.panels + \" \" + props.className}>\r\n            {props.children}\r\n            {/* {React.Children.map(props.children, (child) => child)} */}\r\n        </div>\r\n    );\r\n}\r\nPanelContainer.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport function DateFormat(props) {\r\n    const dateFormat = new Intl.DateTimeFormat(\r\n        \"en-US\",\r\n        {\r\n            day: \"2-digit\",\r\n            month: \"short\",\r\n            year: \"numeric\"\r\n        }\r\n    );\r\n    const cleanProps = omit([\"date\"], props);\r\n    return (\r\n        <time dateTime={props.date.toISOString()} {...cleanProps}>\r\n            {dateFormat.format(props.date)}\r\n        </time>\r\n    );\r\n}\r\nDateFormat.propTypes = {\r\n    date: PropTypes.instanceOf(Date)\r\n};\r\n\r\nexport function Notification(props) {\r\n    const [icon, className] = (function () {\r\n        if (props.success) {\r\n            return [<Icons.Check />, \"notification__success\"];\r\n        } else if (props.warning) {\r\n            return [<Icons.Alert />, \"notification__warning\"];\r\n        } else if (props.error) {\r\n            return [<Icons.X />, \"notification__error\"];\r\n        } else {\r\n            return [<Icons.Info />, \"notification__generic\"];\r\n        }\r\n    }());\r\n    const cleanProps = omit([\"warning\", \"error\", \"success\"], props);\r\n    return (\r\n        <div {...cleanProps} className={\"notification \" + className}>\r\n            <div className=\"notification__icon\">\r\n                {icon}\r\n            </div>\r\n            <div className=\"notification__text\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nNotification.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    error: PropTypes.bool,\r\n    success: PropTypes.bool,\r\n    warning: PropTypes.bool\r\n};\r\n\r\n/*******************************************************************************\r\n * Non-JSX functions\r\n ******************************************************************************/\r\nexport function findById(id, list) {\r\n    return list.filter((x) => x.id === id)[0];\r\n}\r\n\r\nexport function findIndexById(id, list) {\r\n    return list.indexOf(findById(id, list));\r\n}\r\n","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {assoc} from \"ramda\";\r\n\r\nexport default function NewPlayer({dispatch}) {\r\n    const newPlayerDefault = {firstName: \"\", lastName: \"\", rating: 1200};\r\n    const [newPlayerData, setNewPlayerdata] = useState(newPlayerDefault);\r\n\r\n    const handleSubmit = function (event) {\r\n        event.preventDefault();\r\n        const {firstName, lastName, rating} = newPlayerData;\r\n        setNewPlayerdata(newPlayerDefault);\r\n        dispatch({firstName, lastName, rating, type: \"ADD_PLAYER\"});\r\n    };\r\n\r\n    const updateField = function (event) {\r\n        event.preventDefault();\r\n        const {name, value} = event.currentTarget;\r\n        setNewPlayerdata((prevState) => assoc(name, value, prevState));\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <fieldset>\r\n                <legend>Register a new player</legend>\r\n                <p>\r\n                    <label htmlFor=\"firstName\">First name</label>\r\n                    <input\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                        value={newPlayerData.firstName}\r\n                        required\r\n                        onChange={updateField}\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"lastName\">Last name</label>\r\n                    <input\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                        value={newPlayerData.lastName}\r\n                        required\r\n                        onChange={updateField}\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"rating\">Rating</label>\r\n                    <input\r\n                        name=\"rating\"\r\n                        type=\"number\"\r\n                        value={newPlayerData.rating}\r\n                        required\r\n                        onChange={updateField}\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <input type=\"submit\" value=\"Add\"/>\r\n                </p>\r\n            </fieldset>\r\n        </form>\r\n    );\r\n}\r\nNewPlayer.propTypes = {\r\n    dispatch: PropTypes.func.isRequired\r\n};\r\n","import {useAllPlayersDb, useTournament} from \"../../../hooks\";\r\nimport NewPlayer from \"../../new-player\";\r\nimport React from \"react\";\r\n\r\nexport default function Selecting(props) {\r\n    const {tourney, tourneyDispatch} = useTournament();\r\n    const [players, allPlayersDispatch] = useAllPlayersDb();\r\n\r\n    function togglePlayer(event) {\r\n        const id = event.target.value;\r\n        if (event.target.checked) {\r\n            tourneyDispatch({\r\n                playerIds: tourney.playerIds.concat([id]),\r\n                type: \"SET_TOURNEY_PLAYERS\"\r\n            });\r\n        } else {\r\n            tourneyDispatch({\r\n                playerIds: tourney.playerIds.filter((pId) => pId !== id),\r\n                type: \"SET_TOURNEY_PLAYERS\"\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"toolbar\">\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => tourneyDispatch({\r\n                        playerIds: Object.keys(players),\r\n                        type: \"SET_TOURNEY_PLAYERS\"\r\n                    })}\r\n                >\r\n                    Select all\r\n                </button>\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => tourneyDispatch({\r\n                        playerIds: [],\r\n                        type: \"SET_TOURNEY_PLAYERS\"\r\n                    })}\r\n                >\r\n                    Select none\r\n                </button>\r\n            </div>\r\n            <table>\r\n                <caption>Select players</caption>\r\n                <thead>\r\n                    <tr>\r\n                        <th>First name</th>\r\n                        <th>Last name</th>\r\n                        <th>Select</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Object.values(players).map(({id, firstName, lastName}) =>\r\n                        <tr key={id}>\r\n                            <td>{firstName}</td>\r\n                            <td>{lastName}</td>\r\n                            <td>\r\n                                <input\r\n                                    checked={tourney.playerIds.includes(id)}\r\n                                    type=\"checkbox\"\r\n                                    value={id}\r\n                                    onChange={togglePlayer}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n            <NewPlayer dispatch={allPlayersDispatch}/>\r\n        </div>\r\n    );\r\n}\r\nSelecting.propTypes = {};\r\n","import {Panel, PanelContainer} from \"../../utility\";\r\nimport React, {useState} from \"react\";\r\nimport {hasHadBye, rounds2Matches} from \"../../../pairing-scoring\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport Icons from \"../../icons\";\r\nimport Selecting from \"./selecting\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function PlayerSelect(props) {\r\n    const {tourney, tourneyDispatch, players} = useTournament();\r\n    const {playerIds, roundList, byeQueue} = tourney;\r\n    const dispatch = tourneyDispatch;\r\n    const [isSelecting, setIsSelecting] = useState(playerIds.length === 0);\r\n    const matches = rounds2Matches(roundList);\r\n    return (\r\n        <div className=\"content-area\">\r\n            <div className=\"toolbar\">\r\n                <button onClick={() => setIsSelecting(true)}>\r\n                    <Icons.Edit /> Edit player roster\r\n                </button>\r\n            </div>\r\n            <PanelContainer>\r\n                <Panel style={{flexShrink: \"0\"}}>\r\n                    <table>\r\n                        <caption>Current roster</caption>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan={2}>Name</th>\r\n                                <th>Options</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"content\">\r\n                            {Object.values(players).map((p) => (\r\n                                <tr key={p.id} className={p.type + \" player\"}>\r\n                                    <td>{p.firstName}</td>\r\n                                    <td>{p.lastName}</td>\r\n                                    <td>\r\n                                        <button\r\n                                            className=\"button-micro\"\r\n                                            disabled={byeQueue.includes(p.id)}\r\n                                            onClick={() =>\r\n                                                dispatch({\r\n                                                    byeQueue:\r\n                                                        byeQueue.concat([p.id]),\r\n                                                    type: \"SET_BYE_QUEUE\"\r\n                                                })\r\n                                            }\r\n                                        >\r\n                                            Bye signup\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </Panel>\r\n                <Panel>\r\n                    <h3>Bye queue</h3>\r\n                    {byeQueue.length === 0 &&\r\n                        <p>No players have signed up for a bye round.</p>\r\n                    }\r\n                    <ol>\r\n                        {byeQueue.map((pId) => (\r\n                            <li\r\n                                key={pId}\r\n                                className={\r\n                                    (hasHadBye(pId, matches))\r\n                                    ? \"disabled buttons-on-hover\"\r\n                                    : \"buttons-on-hover\"\r\n                                }\r\n                            >\r\n                                {players[pId].firstName}{\" \"}\r\n                                {players[pId].lastName}{\" \"}\r\n                                <button\r\n                                    className=\"button-micro\"\r\n                                    onClick={() =>\r\n                                        dispatch({\r\n                                            byeQueue: byeQueue.filter(\r\n                                                (id) => pId !== id\r\n                                            ),\r\n                                            type: \"SET_BYE_QUEUE\"\r\n                                        })\r\n                                    }\r\n                                >\r\n                                    Remove\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                </Panel>\r\n                <Dialog isOpen={isSelecting}>\r\n                    <button\r\n                        className=\"button-micro button-primary\"\r\n                        onClick={() => setIsSelecting(false)}\r\n                    >\r\n                        Done\r\n                    </button>\r\n                    <Selecting />\r\n                </Dialog>\r\n            </PanelContainer>\r\n        </div>\r\n    );\r\n}\r\nPlayerSelect.propTypes = {};\r\n","// this component should eventually replace player-match-info.jsx\r\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {createPlayerStats} from \"../../../pairing-scoring\";\r\n\r\nexport default function PlayerInfo({playerId, roundId}) {\r\n    const {tourney, players} = useTournament();\r\n    const [options] = useOptionsDb();\r\n    const {\r\n        profile,\r\n        rating,\r\n        score,\r\n        colorBalance,\r\n        hasHadBye,\r\n        opponentHistory,\r\n        avoidList\r\n    } = createPlayerStats({\r\n        avoidList: options.avoidPairs,\r\n        id: playerId,\r\n        players,\r\n        roundId,\r\n        roundList: tourney.roundList\r\n    });\r\n    const prettyBalance = (function () {\r\n        if (colorBalance < 0) {\r\n            return \"White +\" + Math.abs(colorBalance);\r\n        } else if (colorBalance > 0) {\r\n            return \"Black +\" + colorBalance;\r\n        } else {\r\n            return \"Even\";\r\n        }\r\n    }());\r\n    return (\r\n        <dl className=\"player-card\">\r\n            <h3>\r\n                {profile.firstName} {profile.lastName}\r\n            </h3>\r\n            <p>Score: {score}</p>\r\n            <p>Rating: {rating}</p>\r\n            <p>Color balance: {prettyBalance}</p>\r\n            <p>Has had a bye round: {hasHadBye ? \"Yes\" : \"No\"}</p>\r\n            <p>Opponent history:</p>\r\n            <ol>\r\n                {opponentHistory.map((opId) => (\r\n                    <li key={opId}>\r\n                        {players[opId].firstName}{\" \"}\r\n                        {players[opId].lastName}\r\n                    </li>\r\n                ))}\r\n            </ol>\r\n            <p>\r\n                Players to avoid:\r\n            </p>\r\n            <ol>\r\n                {avoidList.map((pId) => (\r\n                    <li key={pId}>\r\n                        {players[pId].firstName} {players[pId].lastName}\r\n                    </li>\r\n                ))}\r\n            </ol>\r\n        </dl>\r\n    );\r\n}\r\nPlayerInfo.propTypes = {\r\n    playerId: PropTypes.string,\r\n    roundId: PropTypes.number\r\n};\r\n","import {BLACK, DUMMY_ID, WHITE, dummyPlayer} from \"../../../data-types\";\r\nimport {assoc, lensIndex, set} from \"ramda\";\r\nimport Hidden from \"@reach/visually-hidden\";\r\nimport Icons from \"../../icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {getUnmatched} from \"../../../pairing-scoring\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function SelectList({roundId, stagedPlayers, setStagedPlayers}) {\r\n    const {tourney, players} = useTournament();\r\n    // only use unmatched players if this is the last round.\r\n    const unmatched = (roundId === tourney.roundList.length - 1)\r\n        ? getUnmatched(tourney, players, roundId)\r\n        : {};\r\n\r\n    function selectPlayer(id) {\r\n        if (stagedPlayers[WHITE] === null) {\r\n            setStagedPlayers(\r\n                (prevState) => set(lensIndex(WHITE), id, prevState)\r\n            );\r\n        } else if (stagedPlayers[BLACK] === null) {\r\n            setStagedPlayers(\r\n                (prevState) => set(lensIndex(BLACK), id, prevState)\r\n            );\r\n        }\r\n        // else... nothing happens\r\n    }\r\n\r\n    const unmatchedCount = Object.keys(unmatched).length;\r\n\r\n    // make a new list so as not to affect auto-pairing\r\n    const unmatchedWithDummy = (\r\n        (unmatchedCount % 2 !== 0)\r\n        ? assoc(DUMMY_ID, dummyPlayer, unmatched)\r\n        : unmatched\r\n    );\r\n    if (unmatchedCount === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            <ul className=\"content plain-list\">\r\n                {Object.values(unmatchedWithDummy).map(\r\n                    ({id, firstName, lastName}) => (\r\n                        <li key={id}>\r\n                            <button\r\n                                className=\"button-ghost\"\r\n                                disabled={\r\n                                    !stagedPlayers.includes(null)\r\n                                    || stagedPlayers.includes(id)\r\n                                }\r\n                                onClick={() => selectPlayer(id)}\r\n                            >\r\n                                <Icons.UserPlus/>\r\n                                <Hidden>\r\n                                    Select {firstName} {lastName}\r\n                                </Hidden>\r\n                            </button>\r\n                            {\" \"}\r\n                            {firstName} {lastName}\r\n                        </li>\r\n                    )\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nSelectList.propTypes = {\r\n    roundId: PropTypes.number,\r\n    setStagedPlayers: PropTypes.func,\r\n    stagedPlayers: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n","import {BLACK, WHITE} from \"../../../data-types\";\r\nimport React, {Fragment} from \"react\";\r\nimport {lensIndex, set} from \"ramda\";\r\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\r\nimport Icons from \"../../icons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Stage({\r\n    roundId,\r\n    stagedPlayers,\r\n    setStagedPlayers\r\n}) {\r\n    const {tourneyDispatch, players} = useTournament();\r\n    const dispatch = tourneyDispatch;\r\n    const [options] = useOptionsDb();\r\n    const [white, black] = stagedPlayers;\r\n\r\n    function unstage(color) {\r\n        setStagedPlayers((prevState) => set(lensIndex(color), null, prevState));\r\n    }\r\n\r\n    function match() {\r\n        dispatch({\r\n            byeValue: options.byeValue,\r\n            pair: [players[white], players[black]],\r\n            roundId,\r\n            type: \"MANUAL_PAIR\"\r\n        });\r\n        setStagedPlayers([null, null]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Selected for matching:</h2>\r\n            <div className=\"content\">\r\n                <p>\r\n                    White:{\" \"}\r\n                    {white !== null &&\r\n                        <Fragment>\r\n                            {players[white].firstName}{\" \"}\r\n                            {players[white].lastName}{\" \"}\r\n                            <button\r\n                                className=\"button-micro\"\r\n                                onClick={() => unstage(WHITE)}\r\n                            >\r\n                                <Icons.UserMinus /> Remove\r\n                            </button>\r\n                        </Fragment>\r\n                    }\r\n                </p>\r\n                <p>\r\n                    Black:{\" \"}\r\n                    {black !== null &&\r\n                        <Fragment>\r\n                            {players[black].firstName}{\" \"}\r\n                            {players[black].lastName}{\" \"}\r\n                            <button\r\n                                className=\"button-micro\"\r\n                                onClick={() => unstage(BLACK)}\r\n                            >\r\n                                <Icons.UserMinus /> Remove\r\n                            </button>\r\n                        </Fragment>\r\n                    }\r\n                </p>\r\n            </div>\r\n            <div className=\"toolbar\">\r\n                <button\r\n                    disabled={\r\n                        stagedPlayers.every((id) => id === null)\r\n                    }\r\n                    onClick={() => setStagedPlayers(\r\n                        (prevState) => ([prevState[BLACK], prevState[WHITE]])\r\n                    )}\r\n                >\r\n                    <Icons.Repeat/> Swap colors\r\n                </button>{\" \"}\r\n                <button\r\n                    className=\"button-primary\"\r\n                    disabled={stagedPlayers.includes(null)}\r\n                    onClick={match}\r\n                >\r\n                    <Icons.Check/> Match selected\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nStage.propTypes = {\r\n    roundId: PropTypes.number,\r\n    setStagedPlayers: PropTypes.func,\r\n    stagedPlayers: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n","import {Panel, PanelContainer} from \"../../utility\";\r\nimport React, {useState} from \"react\";\r\nimport {\r\n    calcPairIdeal,\r\n    createPlayerStats,\r\n    maxPriority,\r\n    setUpperHalves,\r\n    sortPlayersForPairing\r\n} from \"../../../pairing-scoring\";\r\nimport {map, pipe} from \"ramda\";\r\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport PlayerInfo from \"./player-info\";\r\nimport PropTypes from \"prop-types\";\r\nimport SelectList  from \"./select-list\";\r\nimport Selecting from \"../player-select/selecting\";\r\nimport Stage from \"./stage\";\r\nimport {findById} from \"../../utility\";\r\nimport {getUnmatched} from \"../../../pairing-scoring\";\r\nimport numeral from \"numeral\";\r\n\r\nexport default function PairPicker({roundId}) {\r\n    const [stagedPlayers, setStagedPlayers] = useState([null, null]);\r\n    const [options] = useOptionsDb();\r\n    const {tourney, players, tourneyDispatch} = useTournament();\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const statsList = React.useMemo(\r\n        () => (\r\n            pipe(\r\n                Object.values,\r\n                map((player) => (\r\n                    createPlayerStats({\r\n                        avoidList: options.avoidPairs,\r\n                        id: player.id,\r\n                        players,\r\n                        roundId,\r\n                        roundList: tourney.roundList\r\n                    })\r\n                )),\r\n                sortPlayersForPairing,\r\n                setUpperHalves\r\n            )(players)\r\n        ),\r\n        [\r\n            tourney.roundList,\r\n            roundId,\r\n            options.avoidPairs,\r\n            players\r\n        ]\r\n    );\r\n    const matchIdeal = React.useMemo(\r\n        function () {\r\n            if (stagedPlayers.includes(null)) {\r\n                return null;\r\n            }\r\n            const player0stats = findById(stagedPlayers[0], statsList);\r\n            const player1stats = findById(stagedPlayers[1], statsList);\r\n            const ideal = calcPairIdeal(player0stats, player1stats);\r\n            return numeral(ideal / maxPriority).format(\"%\");\r\n        },\r\n        [stagedPlayers, statsList]\r\n    );\r\n    const unmatched = (roundId === tourney.roundList.length - 1)\r\n        ? getUnmatched(tourney, players, roundId)\r\n        : {};\r\n    const unmatchedCount = Object.keys(unmatched).length;\r\n    return (\r\n        <div className=\"content-area\">\r\n            <div className=\"toolbar\">\r\n                <button\r\n                    className=\"button-primary\"\r\n                    disabled={unmatchedCount === 0}\r\n                    onClick={() => tourneyDispatch({\r\n                        avoidList: options.avoidPairs,\r\n                        byeValue: options.byeValue,\r\n                        players: unmatched,\r\n                        roundId,\r\n                        type: \"AUTO_PAIR\"\r\n                    })}\r\n                >\r\n                    Auto-pair unmatched players\r\n                </button>{\" \"}\r\n                <button onClick={() => setIsModalOpen(true)}>\r\n                    Add or remove players from the roster.\r\n                </button>\r\n            </div>\r\n            <PanelContainer>\r\n                <Panel>\r\n                    <SelectList\r\n                        roundId={roundId}\r\n                        setStagedPlayers={setStagedPlayers}\r\n                        stagedPlayers={stagedPlayers}\r\n                    />\r\n                </Panel>\r\n                <Panel style={{flexGrow: \"1\"}}>\r\n                    <Stage\r\n                        roundId={roundId}\r\n                        setStagedPlayers={setStagedPlayers}\r\n                        stagedPlayers={stagedPlayers}\r\n                    />\r\n                    <PanelContainer>\r\n                        {stagedPlayers.map((id) =>\r\n                            id !== null && (\r\n                                <Panel key={id}>\r\n                                    <PlayerInfo\r\n                                        playerId={id}\r\n                                        roundId={roundId}\r\n                                    />\r\n                                </Panel>\r\n                            )\r\n                        )}\r\n                    </PanelContainer>\r\n                    {!stagedPlayers.includes(null) &&\r\n                        <span>Match ideal: {matchIdeal}</span>\r\n                    }\r\n                </Panel>\r\n            </PanelContainer>\r\n            <Dialog isOpen={isModalOpen}>\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => setIsModalOpen(false)}\r\n                >\r\n                    Done\r\n                </button>\r\n                <Selecting />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\nPairPicker.propTypes = {\r\n    roundId: PropTypes.number,\r\n    tourneyId: PropTypes.number\r\n};\r\n","import {useOptionsDb, useTournament} from \"../../../hooks\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {createPlayerStats} from \"../../../pairing-scoring\";\r\nimport {findById} from \"../../utility\";\r\nimport numeral from \"numeral\";\r\n\r\nexport default function PlayerMatchInfo({matchId, color, roundId}) {\r\n    const {tourney, players, getPlayer} = useTournament();\r\n    const matchList = tourney.roundList[roundId];\r\n    const [options] = useOptionsDb();\r\n    const match = findById(matchId, matchList);\r\n    const playerData = createPlayerStats({\r\n        avoidList: options.avoidPairs,\r\n        id: match.playerIds[color],\r\n        players,\r\n        roundId,\r\n        roundList: tourney.roundList\r\n    });\r\n    const colorBalance = playerData.colorBalance;\r\n    const prettyBalance = (function () {\r\n        if (colorBalance < 0) {\r\n            return \"White +\" + Math.abs(colorBalance);\r\n        } else if (colorBalance > 0) {\r\n            return \"Black +\" + colorBalance;\r\n        } else {\r\n            return \"Even\";\r\n        }\r\n    }());\r\n    return (\r\n        <dl className=\"player-card\">\r\n            <h3>\r\n                {playerData.profile.firstName} {playerData.profile.lastName}\r\n            </h3>\r\n            <dt>Score</dt>\r\n            <dd>{playerData.score}</dd>\r\n            <dt>Rating</dt>\r\n            <dd data-testid={`rating-${playerData.id}`}>\r\n                {match.origRating[color]} (\r\n                {numeral(\r\n                    match.newRating[color] - match.origRating[color]\r\n                ).format(\"+0\")}\r\n                )\r\n            </dd>\r\n            <dt>Color balance</dt>\r\n            <dd>{prettyBalance}</dd>\r\n            <dt>Has had a bye round</dt>\r\n            <dd>{playerData.hasHadBye ? \"Yes\" : \"No\"}</dd>\r\n            <dt>Opponent history</dt>\r\n            <dd>\r\n                <ol>\r\n                    {playerData.opponentHistory.map((opId) => (\r\n                        <li key={opId}>\r\n                            {getPlayer(opId).firstName}{\" \"}\r\n                            {getPlayer(opId).lastName}\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </dd>\r\n        </dl>\r\n    );\r\n}\r\nPlayerMatchInfo.propTypes = {\r\n    color: PropTypes.number,\r\n    matchId: PropTypes.string,\r\n    roundId: PropTypes.number\r\n};\r\n","import \"@reach/dialog/styles.css\";\r\nimport {BLACK, DUMMY_ID, WHITE} from \"../../../data-types\";\r\nimport {Panel, PanelContainer} from \"../../utility\";\r\nimport React, {useState} from \"react\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport Hidden from \"@reach/visually-hidden\";\r\nimport Icons from \"../../icons\";\r\nimport PlayerMatchInfo from \"./player-match-info\";\r\nimport PropTypes from \"prop-types\";\r\nimport VisuallyHidden from \"@reach/visually-hidden\";\r\nimport {calcNewRatings} from \"../../../pairing-scoring\";\r\nimport styles from \"./round.module.css\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function MatchRow({\r\n    compact,\r\n    pos,\r\n    match,\r\n    roundId,\r\n    selectedMatch,\r\n    setSelectedMatch\r\n}) {\r\n    const {\r\n        tourney,\r\n        tourneyDispatch,\r\n        players,\r\n        getPlayer,\r\n        playersDispatch\r\n    } = useTournament();\r\n    const dispatch = tourneyDispatch;\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const resultCode = (function () {\r\n        if (match.result[0] > match.result[1]) {\r\n            return \"WHITE\";\r\n        } else if (match.result[1] > match.result[0]) {\r\n            return \"BLACK\";\r\n        } else if (match.result.every((x) => x === 0.5)) {\r\n            return \"DRAW\";\r\n        } else {\r\n            return \"NOTSET\";\r\n        }\r\n    }());\r\n    const whitePlayer = getPlayer(match.playerIds[WHITE]);\r\n    const blackPlayer = getPlayer(match.playerIds[BLACK]);\r\n    const whiteName = whitePlayer.firstName + \" \" + whitePlayer.lastName;\r\n    const blackName = blackPlayer.firstName + \" \" + blackPlayer.lastName;\r\n\r\n\r\n    function ResultDisplay(color) {\r\n        if (resultCode === \"NOTSET\") {\r\n            return <VisuallyHidden>Not set</VisuallyHidden>;\r\n        } else if (resultCode === \"DRAW\") {\r\n            return <Icons.Minus aria-label=\"Draw\" />;\r\n        } else if (resultCode === color) {\r\n            return <Icons.Award  aria-label=\"Won\" />;\r\n        } else {\r\n            return <VisuallyHidden>Lost</VisuallyHidden>;\r\n        }\r\n    }\r\n\r\n    function setMatchResult(event) {\r\n        const result = (function () {\r\n            switch (event.target.value) {\r\n            case \"WHITE\":\r\n                return [1, 0];\r\n            case \"BLACK\":\r\n                return [0, 1];\r\n            case \"DRAW\":\r\n                return [0.5, 0.5];\r\n            case \"NOTSET\":\r\n                return [0, 0];\r\n            default:\r\n                throw new Error();\r\n            }\r\n        }());\r\n        const white = players[match.playerIds[WHITE]];\r\n        const black = players[match.playerIds[BLACK]];\r\n        const newRating = (\r\n            (event.currentTarget.value === \"NOTSET\")\r\n            ? match.origRating\r\n            : calcNewRatings(\r\n                match.origRating,\r\n                [white.matchCount, black.matchCount],\r\n                result\r\n            )\r\n        );\r\n        playersDispatch({\r\n            id: white.id,\r\n            rating: newRating[WHITE],\r\n            type: \"SET_PLAYER_RATING\"\r\n        });\r\n        playersDispatch({\r\n            id: black.id,\r\n            rating: newRating[BLACK],\r\n            type: \"SET_PLAYER_RATING\"\r\n        });\r\n        // if the result hasn't been scored yet, increment the matchCount\r\n        if (match.result.reduce((a, b) => a + b) === 0) {\r\n            playersDispatch({\r\n                id: white.id,\r\n                matchCount: white.matchCount + 1,\r\n                type: \"SET_PLAYER_MATCHCOUNT\"\r\n            });\r\n            playersDispatch({\r\n                id: black.id,\r\n                matchCount: black.matchCount + 1,\r\n                type: \"SET_PLAYER_MATCHCOUNT\"\r\n            });\r\n        }\r\n        dispatch({\r\n            matchId: match.id,\r\n            newRating,\r\n            result,\r\n            roundId,\r\n            type: \"SET_MATCH_RESULT\"\r\n        });\r\n    }\r\n\r\n    return (\r\n        <tr\r\n            className={\r\n                (match.id === selectedMatch)\r\n                ? \"selected\"\r\n                : \"buttons-on-hover\"\r\n            }\r\n        >\r\n            <th className={\"table__number \" + styles.rowId} scope=\"row\">\r\n                {pos + 1}\r\n            </th>\r\n            <td className={styles.playerResult}>\r\n                {ResultDisplay(\"WHITE\")}\r\n            </td>\r\n            <td\r\n                className={\"table__player row__player \" + whitePlayer.type}\r\n                data-testid={`match-${pos}-white`}\r\n            >\r\n                {whiteName}\r\n            </td>\r\n            <td className={styles.playerResult}>\r\n                {ResultDisplay(\"BLACK\")}\r\n            </td>\r\n            <td\r\n                className={\"table__player row__player \" + blackPlayer.type}\r\n                data-testid={`match-${pos}-black`}\r\n            >\r\n                {blackName}\r\n            </td>\r\n            <td className={styles.matchResult + \" data__input row__controls\"}>\r\n                <select\r\n                    className={styles.winnerSelect}\r\n                    disabled={match.playerIds.includes(DUMMY_ID)}\r\n                    value={resultCode}\r\n                    onBlur={setMatchResult}\r\n                    onChange={setMatchResult}\r\n                >\r\n                    <option value=\"NOTSET\">\r\n                        Select winner\r\n                    </option>\r\n                    <option value=\"WHITE\">\r\n                        White won\r\n                    </option>\r\n                    <option value=\"BLACK\">\r\n                        Black won\r\n                    </option>\r\n                    <option value=\"DRAW\">\r\n                        Draw\r\n                    </option>\r\n                </select>\r\n            </td>\r\n            {!compact &&\r\n                <td className={styles.controls + \" data__input\"}>\r\n                    {(selectedMatch !== match.id)\r\n                    ? (\r\n                        <button\r\n                            className=\"button-ghost\"\r\n                            title=\"Edit match\"\r\n                            onClick={() => setSelectedMatch(match.id)}\r\n                        >\r\n                            <Icons.Circle />\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            className=\"button-ghost button-pressed\"\r\n                            title=\"End editing match\"\r\n                            onClick={() => setSelectedMatch(null)}\r\n                        >\r\n                            <Icons.CheckCircle />\r\n                        </button>\r\n                    )}\r\n                    <button\r\n                        className=\"button-ghost\"\r\n                        title=\"Open match information.\"\r\n                        onClick={() => setOpenModal(true)}\r\n                    >\r\n                        <Icons.Info />\r\n                        <Hidden>\r\n                            View information for match:{\" \"}\r\n                            {whiteName} versus {blackName}\r\n                        </Hidden>\r\n                    </button>\r\n                    <Dialog isOpen={openModal}>\r\n                        <button\r\n                            className=\"button-micro button-primary\"\r\n                            onClick={() => setOpenModal(false)}\r\n                        >\r\n                            close\r\n                        </button>\r\n                        <p>{tourney.name}</p>\r\n                        <p>Round {roundId + 1}, match {pos + 1}</p>\r\n                        <PanelContainer>\r\n                            <Panel>\r\n                                <PlayerMatchInfo\r\n                                    color={0}\r\n                                    matchId={match.id}\r\n                                    roundId={roundId}\r\n                                />\r\n                            </Panel>\r\n                            <Panel>\r\n                                <PlayerMatchInfo\r\n                                    color={1}\r\n                                    matchId={match.id}\r\n                                    roundId={roundId}\r\n                                />\r\n                            </Panel>\r\n                        </PanelContainer>\r\n                    </Dialog>\r\n                </td>\r\n            }\r\n        </tr>\r\n    );\r\n}\r\nMatchRow.propTypes = {\r\n    compact: PropTypes.bool,\r\n    match: PropTypes.object,\r\n    pos: PropTypes.number,\r\n    roundId: PropTypes.number,\r\n    selectedMatch: PropTypes.string,\r\n    setSelectedMatch: PropTypes.func\r\n};\r\n","import MatchRow from \"./match-row\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport VisuallyHidden from \"@reach/visually-hidden\";\r\nimport style from \"./round.module.css\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function RoundTable({\r\n    compact,\r\n    roundId,\r\n    selectedMatch,\r\n    setSelectedMatch\r\n}) {\r\n    const {tourney} = useTournament();\r\n    const matchList = tourney.roundList[roundId];\r\n    return (\r\n        <table className={style.table}>\r\n            {matchList.length > 0 &&\r\n                <>\r\n                <caption\r\n                    className={(compact) ? \"title-30\" : \"title-40\"}\r\n                >\r\n                    Round {roundId + 1} matches\r\n                </caption>\r\n                <thead>\r\n                    <tr>\r\n                        <th className={style.rowId} scope=\"col\">\r\n                            #\r\n                        </th>\r\n                        <th scope=\"col\">\r\n                            <VisuallyHidden>White result</VisuallyHidden>\r\n                        </th>\r\n                        <th className=\"row__player\" scope=\"col\">\r\n                            White\r\n                        </th>\r\n                        <th scope=\"col\">\r\n                            <VisuallyHidden>Black result</VisuallyHidden>\r\n                        </th>\r\n                        <th className=\"row__player\" scope=\"col\">\r\n                            Black\r\n                        </th>\r\n                        <th className=\"row__result\" scope=\"col\">\r\n                            Match result\r\n                        </th>\r\n                        {!compact &&\r\n                            <th className=\"row__controls\" scope=\"col\">\r\n                                <VisuallyHidden>Controls</VisuallyHidden>\r\n                            </th>\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                </>\r\n            }\r\n            <tbody className={style.tbody + \" content\"}>\r\n                {matchList.map((match, pos) => (\r\n                    <MatchRow\r\n                        key={match.id}\r\n                        compact={compact}\r\n                        match={match}\r\n                        pos={pos}\r\n                        roundId={roundId}\r\n                        selectedMatch={selectedMatch}\r\n                        setSelectedMatch={setSelectedMatch}\r\n                    />\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\nRoundTable.propTypes = {\r\n    compact: PropTypes.bool,\r\n    roundId: PropTypes.number,\r\n    selectedMatch: PropTypes.string,\r\n    setSelectedMatch: PropTypes.func\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {findById, findIndexById} from \"../../utility\";\r\nimport Icons from \"../../icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport RoundTable from \"./round-table\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function Round({roundId}) {\r\n    const {\r\n        tourney,\r\n        players,\r\n        tourneyDispatch,\r\n        playersDispatch\r\n    } = useTournament();\r\n    const matchList = tourney.roundList[roundId];\r\n    const [selectedMatch, setSelectedMatch] = useState(null);\r\n    if (!matchList) {\r\n        throw new Error(\"Round \" + roundId + \" does not exist.\");\r\n    }\r\n    function unMatch(matchId) {\r\n        const match = findById(matchId, matchList);\r\n        if (match.result.reduce((a, b) => a + b) !== 0) {\r\n            // checks if the match has been scored yet & resets the players'\r\n            // records\r\n            match.playerIds.forEach(function (pId, color) {\r\n                playersDispatch({\r\n                    id: pId,\r\n                    matchCount: players[pId].matchCount - 1,\r\n                    type: \"SET_PLAYER_MATCHCOUNT\"\r\n                });\r\n                playersDispatch({\r\n                    id: pId,\r\n                    rating: match.origRating[color],\r\n                    type: \"SET_PLAYER_RATING\"\r\n                });\r\n            });\r\n        }\r\n        tourneyDispatch({matchId, roundId, type: \"DEL_MATCH\"});\r\n        setSelectedMatch(null);\r\n    }\r\n\r\n    function swapColors(matchId) {\r\n        tourneyDispatch({matchId, roundId, type: \"SWAP_COLORS\"});\r\n    }\r\n\r\n    function moveMatch(matchId, direction) {\r\n        const oldIndex = findIndexById(matchId, matchList);\r\n        const newIndex = (oldIndex + direction >= 0) ? oldIndex + direction : 0;\r\n        tourneyDispatch({newIndex, oldIndex, roundId, type: \"MOVE_MATCH\"});\r\n    }\r\n\r\n    return (\r\n        <div className=\"content-area\">\r\n            <div className=\"toolbar\">\r\n                <button\r\n                    className=\"button-micro\"\r\n                    disabled={selectedMatch === null}\r\n                    onClick={() => unMatch(selectedMatch)}\r\n                >\r\n                    <Icons.Trash /> Unmatch\r\n                </button>{\" \"}\r\n                <button\r\n                    className=\"button-micro\"\r\n                    disabled={selectedMatch === null}\r\n                    onClick={() => swapColors(selectedMatch)}\r\n                >\r\n                    <Icons.Repeat /> Swap colors\r\n                </button>{\" \"}\r\n                <button\r\n                    className=\"button-micro\"\r\n                    disabled={selectedMatch === null}\r\n                    onClick={() => moveMatch(selectedMatch, -1)}\r\n                >\r\n                    <Icons.ArrowUp /> Move up\r\n                </button>{\" \"}\r\n                <button\r\n                    className=\"button-micro\"\r\n                    disabled={selectedMatch === null}\r\n                    onClick={() => moveMatch(selectedMatch, 1)}\r\n                >\r\n                    <Icons.ArrowDown /> Move down\r\n                </button>\r\n            </div>\r\n            {matchList.length === 0 &&\r\n                <p>No players matched yet.</p>\r\n            }\r\n            <RoundTable\r\n                roundId={roundId}\r\n                selectedMatch={selectedMatch}\r\n                setSelectedMatch={setSelectedMatch}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nRound.propTypes = {\r\n    roundId: PropTypes.number,\r\n    tourneyId: PropTypes.number\r\n};\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from \"@reach/tabs\";\r\nimport Icons from \"../../icons\";\r\nimport PairPicker from \"../pair-picker\";\r\nimport PropTypes from \"prop-types\";\r\nimport Round from \"./round\";\r\nimport {getUnmatched} from \"../../../pairing-scoring\";\r\nimport {useTournament} from \"../../../hooks\";\r\n\r\nexport default function Index(props) {\r\n    const roundId = Number(props.roundId); // Reach Router passes a string.\r\n    const {tourney, players} = useTournament();\r\n    // only use unmatched players if this is the last round.\r\n    const unmatched = (roundId === tourney.roundList.length - 1)\r\n        ? getUnmatched(tourney, players, roundId)\r\n        : {};\r\n    const unmatchedCount = Object.keys(unmatched).length;\r\n    const [openTab, setOpenTab] = useState(0);\r\n    useEffect(\r\n        function () {\r\n            (unmatchedCount > 0) ? setOpenTab(1) : setOpenTab(0);\r\n        },\r\n        [unmatchedCount]\r\n    );\r\n    return (\r\n        <Tabs\r\n            index={openTab}\r\n            onChange={(index) => setOpenTab(index)}\r\n        >\r\n            <TabList>\r\n                <Tab><Icons.List/> Matches</Tab>\r\n                <Tab disabled={unmatchedCount === 0}>\r\n                    <Icons.Users/> Unmatched players\r\n                </Tab>\r\n            </TabList>\r\n            <TabPanels>\r\n                <TabPanel>\r\n                    <Round roundId={roundId}/>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    <PairPicker roundId={roundId} />\r\n                </TabPanel>\r\n            </TabPanels>\r\n        </Tabs>\r\n    );\r\n}\r\nIndex.propTypes = {\r\n    path: PropTypes.string,\r\n    roundId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n};\r\n","import {Panel, PanelContainer} from \"../utility\";\r\nimport React, {useState} from \"react\";\r\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from \"@reach/tabs\";\r\nimport {\r\n    createStandingTree,\r\n    tieBreakMethods\r\n} from \"../../pairing-scoring\";\r\nimport Icons from \"../icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport VisuallyHidden from \"@reach/visually-hidden\";\r\nimport dashify from \"dashify\";\r\nimport {defaultTo} from \"ramda\";\r\nimport numeral from \"numeral\";\r\nimport style from \"./scores.module.css\";\r\nimport {useTournament} from \"../../hooks\";\r\n\r\nexport function ScoreTable({compact, title}) {\r\n    const {tourney, getPlayer} = useTournament();\r\n    const {tieBreaks, roundList} = tourney;\r\n    const [standingTree, tbMethods] = createStandingTree(tieBreaks, roundList);\r\n    return (\r\n        <table className={style.table}>\r\n            <caption\r\n                className={(compact) ? \"title-30\" : \"title-40\"}\r\n            >\r\n                {title}\r\n            </caption>\r\n            <thead>\r\n                <tr className={style.topHeader}>\r\n                    <th className=\"title-10\" scope=\"col\">Rank</th>\r\n                    <th className=\"title-10\" scope=\"col\">Name</th>\r\n                    <th className=\"title-10\" scope=\"col\">Score</th>\r\n                    {!compact && tbMethods.map((name, i) => (\r\n                        <th key={i} className=\"title-10\" scope=\"col\">\r\n                            {name}\r\n                        </th>\r\n                    ))}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {standingTree.map((standingsFlat, rank) =>\r\n                    standingsFlat.map((standing, i, src) => (\r\n                        <tr key={standing.id} className={style.row}>\r\n                            {i === 0 && ( // Only display the rank once\r\n                                <th\r\n                                    className={\"table__number \" + style.rank}\r\n                                    rowSpan={src.length}\r\n                                    scope=\"row\"\r\n                                >\r\n                                    {numeral(rank + 1).format(\"0o\")}\r\n                                </th>\r\n                            )}\r\n                            {(compact) // use <td> if it's compact.\r\n                            ? (\r\n                                <td className={style.playerName}>\r\n                                    {getPlayer(standing.id).firstName}&nbsp;\r\n                                    {getPlayer(standing.id).lastName}\r\n                                </td>\r\n                            ) : ( // Use the name as a header if not compact.\r\n                                <th\r\n                                    className={style.playerName}\r\n                                    data-testid={rank}\r\n                                    scope=\"row\"\r\n                                >\r\n                                    {getPlayer(standing.id).firstName}&nbsp;\r\n                                    {getPlayer(standing.id).lastName}\r\n                                </th>\r\n                            )}\r\n                            <td\r\n                                className=\"table__number\"\r\n                                data-testid={dashify(\r\n                                    getPlayer(standing.id).firstName\r\n                                    + getPlayer(standing.id).lastName\r\n                                    + \" score\"\r\n                                )}\r\n                            >\r\n                                {numeral(standing.score).format(\"1/2\")}\r\n                            </td>\r\n                            {!compact && standing.tieBreaks.map((score, j) => (\r\n                                <td\r\n                                    key={j}\r\n                                    className=\"table__number\"\r\n                                    data-testid={dashify(\r\n                                        getPlayer(standing.id).firstName\r\n                                        + getPlayer(standing.id).lastName\r\n                                        + tbMethods[j]\r\n                                    )}\r\n                                >\r\n                                    {numeral(score).format(\"1/2\")}\r\n                                </td>\r\n                            ))}\r\n                        </tr>\r\n                    ))\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\nScoreTable.propTypes = {\r\n    compact: PropTypes.bool,\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nfunction SelectTieBreaks(props) {\r\n    const {tourney, tourneyDispatch} = useTournament();\r\n    const dispatch = tourneyDispatch;\r\n    const {tieBreaks} = tourney;\r\n    const [selectedTb, setSelectedTb] = useState(null);\r\n\r\n    function toggleTb(id = null) {\r\n        const defaultId = defaultTo(selectedTb);\r\n        if (tieBreaks.includes(defaultId(id))) {\r\n            dispatch({id: defaultId(id), type: \"DEL_TIEBREAK\"});\r\n            setSelectedTb(null);\r\n        } else {\r\n            dispatch({id: defaultId(id), type: \"ADD_TIEBREAK\"});\r\n        }\r\n    }\r\n\r\n    function moveTb(direction) {\r\n        const index = tieBreaks.indexOf(selectedTb);\r\n        dispatch({\r\n            newIndex: index + direction,\r\n            oldIndex: index,\r\n            type: \"MOVE_TIEBREAK\"\r\n        });\r\n    }\r\n\r\n    return (\r\n        <PanelContainer className=\"content-area\">\r\n            <Panel>\r\n                <div className=\"toolbar\">\r\n                    <button\r\n                        className=\"button-micro\"\r\n                        disabled={selectedTb === null}\r\n                        onClick={() => toggleTb()}\r\n                    >\r\n                        Toggle\r\n                    </button>\r\n                    <button\r\n                        className=\"button-micro\"\r\n                        disabled={selectedTb === null}\r\n                        onClick={() => moveTb(-1)}\r\n                    >\r\n                        <Icons.ArrowUp/> Move up\r\n                    </button>\r\n                    <button\r\n                        className=\"button-micro\"\r\n                        disabled={selectedTb === null}\r\n                        onClick={() => moveTb(1)}\r\n                    >\r\n                        <Icons.ArrowDown/> Move down\r\n                    </button>\r\n                    <button\r\n                        className={\r\n                            (selectedTb !== null)\r\n                            ? \"button-micro button-primary\"\r\n                            : \"button-micro\"\r\n                        }\r\n                        disabled={selectedTb === null}\r\n                        onClick={() => setSelectedTb(null)}\r\n                    >\r\n                        Done\r\n                    </button>\r\n                </div>\r\n                <table>\r\n                    <caption className=\"title-30\">\r\n                        Selected Tiebreak methods\r\n                    </caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th><VisuallyHidden>Controls</VisuallyHidden></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"content\">\r\n                        {tieBreaks.map((id) => (\r\n                            <tr\r\n                                key={id}\r\n                                className={selectedTb === id ? \"selected\" : \"\"}\r\n                            >\r\n                                <td>\r\n                                    {tieBreakMethods[id].name}\r\n                                </td>\r\n                                <td style={{width: \"48px\"}}>\r\n                                    <button\r\n                                        className=\"button-micro\"\r\n                                        disabled={\r\n                                            selectedTb !== null\r\n                                            && selectedTb !== id\r\n                                        }\r\n                                        onClick={() =>\r\n                                            selectedTb === id\r\n                                                ? setSelectedTb(null)\r\n                                                : setSelectedTb(id)\r\n                                        }\r\n                                    >\r\n                                        {selectedTb === id ? \"Done\" : \"Edit\"}\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </Panel>\r\n            <Panel>\r\n                <div className=\"toolbar\">&nbsp;</div>\r\n                <table style={{marginTop: \"16px\"}}>\r\n                    <caption className=\"title-30\">\r\n                        Available tiebreak methods\r\n                    </caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th><VisuallyHidden>Controls</VisuallyHidden></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"content\">\r\n                        {Object.values(tieBreakMethods).map(({name, id}) => (\r\n                            <tr key={id}>\r\n                                <td>\r\n                                    <span\r\n                                        className={\r\n                                            tieBreaks.includes(id)\r\n                                                ? \"disabled\"\r\n                                                : \"enabled\"\r\n                                        }\r\n                                    >\r\n                                        {name}\r\n                                    </span>\r\n                                </td>\r\n                                <td>\r\n                                    {!tieBreaks.includes(id) && (\r\n                                        <button\r\n                                            className=\"button-micro\"\r\n                                            onClick={() => toggleTb(id)}\r\n                                        >\r\n                                            Add\r\n                                        </button>\r\n                                    )}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </Panel>\r\n        </PanelContainer>\r\n    );\r\n}\r\nSelectTieBreaks.propTypes = {};\r\n\r\nconst Scores = (props) => (\r\n    <Tabs>\r\n        <TabList>\r\n            <Tab><Icons.List /> Scores</Tab>\r\n            <Tab><Icons.Settings /> Edit tiebreak rules</Tab>\r\n        </TabList>\r\n        <TabPanels>\r\n            <TabPanel>\r\n                <ScoreTable title=\"Score detail\" />\r\n            </TabPanel>\r\n            <TabPanel>\r\n                <SelectTieBreaks />\r\n            </TabPanel>\r\n        </TabPanels>\r\n    </Tabs>\r\n);\r\nScores.propTypes = {\r\n    path: PropTypes.string\r\n};\r\n\r\nexport default Scores;\r\n","import React, {useState} from \"react\";\r\nimport {DateFormat} from \"../utility\";\r\nimport Icons from \"../icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport {useTournament} from \"../../hooks\";\r\n\r\nconst PlaceholderButton = () => (\r\n    <button\r\n        className=\"button-ghost placeholder\"\r\n        aria-hidden\r\n        disabled\r\n    />\r\n);\r\n\r\nexport default function Header(props) {\r\n    const {tourney, tourneyDispatch} = useTournament();\r\n    const [isEditingName, setIsEditingName] = useState(false);\r\n    const [isEditingDate, setIsEditingDate] = useState(false);\r\n    const dateInput = (function () {\r\n        const year = tourney.date.getFullYear();\r\n        const month = (tourney.date.getMonth() < 9)\r\n            ? \"0\" + (tourney.date.getMonth() + 1)\r\n            : tourney.date.getMonth() + 1;\r\n        const day = (tourney.date.getDate() < 10)\r\n            ? \"0\" + tourney.date.getDate()\r\n            : tourney.date.getDate();\r\n        return year + \"-\" + month + \"-\" + day;\r\n    }());\r\n\r\n    function updateDate(event) {\r\n        const [\r\n            rawYear,\r\n            rawMonth,\r\n            rawDay\r\n        ] = event.currentTarget.value.split(\"-\");\r\n        const year = Number(rawYear);\r\n        const month = Number(rawMonth) - 1;\r\n        const day = Number(rawDay);\r\n        tourneyDispatch({\r\n            date: new Date(year, month, day),\r\n            type: \"SET_DATE\"\r\n        });\r\n    }\r\n    // TODO: Audit accesibility of these edit controls. (Keyboard focus etc.)\r\n    return (\r\n        <div className={props.className}>\r\n            {(isEditingName)\r\n            ? (\r\n                <p className=\"display-20\">\r\n                    <PlaceholderButton />{\" \"}\r\n                    <input\r\n                        className=\"display-20\"\r\n                        type=\"text\"\r\n                        value={tourney.name}\r\n                        onChange={(event) => tourneyDispatch({\r\n                            name: event.currentTarget.value,\r\n                            type: \"SET_NAME\"\r\n                        })}\r\n                    />{\" \"}\r\n                    <button\r\n                        className=\"button-ghost\"\r\n                        onClick={() => setIsEditingName(false)}\r\n                    >\r\n                        <Icons.Check />\r\n                    </button>\r\n                </p>\r\n            ) : (\r\n                <h1 className=\"buttons-on-hover\">\r\n                    <PlaceholderButton />{\" \"}\r\n                    <span className=\"inputPlaceholder\">\r\n                        {tourney.name}\r\n                    </span>{\" \"}\r\n                    <button\r\n                        className=\"button-ghost\"\r\n                        onClick={() => setIsEditingName(true)}\r\n                    >\r\n                        <Icons.Edit />\r\n                    </button>\r\n                </h1>\r\n            )}\r\n            {(isEditingDate)\r\n            ? (\r\n                <p className=\"caption-30\">\r\n                    <PlaceholderButton />{\" \"}\r\n                    <input\r\n                        className=\"caption-30\"\r\n                        type=\"date\"\r\n                        value={dateInput}\r\n                        onChange={updateDate}\r\n                    />{\" \"}\r\n                    <button\r\n                        className=\"button-ghost\"\r\n                        onClick={() => setIsEditingDate(false)}\r\n                    >\r\n                        <Icons.Check />\r\n                    </button>\r\n                </p>\r\n            )\r\n            : (\r\n                <p className=\"caption-30 buttons-on-hover\">\r\n                    <PlaceholderButton />{\" \"}\r\n                    <DateFormat date={tourney.date} />{\" \"}\r\n                    <button\r\n                        className=\"button-ghost\"\r\n                        onClick={() => setIsEditingDate(true)}\r\n                    >\r\n                        <Icons.Edit />\r\n                    </button>\r\n                </p>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n}\r\nHeader.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n","import {calcNumOfRounds, getUnmatched} from \"../../pairing-scoring\";\r\nimport {useDocumentTitle, useTournament} from \"../../hooks\";\r\nimport {DUMMY_ID} from \"../../data-types\";\r\nimport Icons from \"../icons\";\r\nimport {Link} from \"@reach/router\";\r\nimport {Notification} from \"../utility\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport last from \"ramda/src/last\";\r\n\r\nexport default function Sidebar(props) {\r\n    const {\r\n        tourney,\r\n        players,\r\n        getPlayer,\r\n        playersDispatch,\r\n        tourneyDispatch\r\n    } = useTournament();\r\n    useDocumentTitle(tourney.name);\r\n    const {roundList} = tourney;\r\n    const unmatched = getUnmatched(tourney, players, roundList.length - 1);\r\n\r\n    const isNewRoundReady = (function () {\r\n        const lastRound = last(roundList);\r\n        if (!lastRound) {\r\n            return true;\r\n        }\r\n        const results = lastRound.map(\r\n            (match) => match.result[0] + match.result[1]\r\n        );\r\n        return Object.keys(unmatched).length === 0 && !results.includes(0);\r\n    }());\r\n    const roundCount = calcNumOfRounds(Object.keys(players).length);\r\n    const isItOver = roundList.length >= roundCount;\r\n    const [tooltipText, tooltipWarn] = (function () {\r\n        if (!isNewRoundReady) {\r\n            return [\r\n                \"Complete the last round before beginning a new one.\",\r\n                true\r\n            ];\r\n        } else if (isItOver) {\r\n            return [\"All rounds have completed.\", true];\r\n        } else {\r\n            return [\"Ready to begin a new round.\", false];\r\n        }\r\n    }());\r\n\r\n    function newRound() {\r\n        const confirmText = \"All rounds have completed. Are you sure you want \"\r\n            + \"to begin a new one?\";\r\n        if (isItOver) {\r\n            if (!window.confirm(confirmText)) {\r\n                return;\r\n            }\r\n        }\r\n        tourneyDispatch({type: \"ADD_ROUND\"});\r\n    }\r\n\r\n    async function delLastRound() {\r\n        if (window.confirm(\"Are you sure you want to delete the last round?\")) {\r\n            await props.navigate(\".\");\r\n            // If a match has been scored, then reset it.\r\n            // Should this logic be somewhere else?\r\n            last(roundList).forEach(function (match) {\r\n                if (match.result[0] + match.result[1] === 0) {\r\n                    return; // Don't change players who haven't scored.\r\n                }\r\n                match.playerIds.forEach(function (pId, color) {\r\n                    if (pId === DUMMY_ID) {\r\n                        return; // Don't try to set the dummy.\r\n                    }\r\n                    const {matchCount} = getPlayer(pId);\r\n                    playersDispatch({\r\n                        id: pId,\r\n                        matchCount: matchCount - 1,\r\n                        type: \"SET_PLAYER_MATCHCOUNT\"\r\n                    });\r\n                    playersDispatch({\r\n                        id: pId,\r\n                        rating: match.origRating[color],\r\n                        type: \"SET_PLAYER_RATING\"\r\n                    });\r\n                });\r\n            });\r\n            tourneyDispatch({type: \"DEL_LAST_ROUND\"});\r\n            if (tourney.roundList.length === 1) {\r\n                // Automatically remake round 1.\r\n                tourneyDispatch({type: \"ADD_ROUND\"});\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"..\">\r\n                            <Icons.X/>Close\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n                <hr />\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\".\">\r\n                            <Icons.Users /> Players\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"status\">\r\n                            <Icons.Activity /> Status\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"crosstable\">\r\n                            <Icons.Layers /> Crosstable\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"scores\">\r\n                            <Icons.List /> Score detail\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n                <hr />\r\n                <ul>\r\n                    {Object.keys(roundList).map((id) => (\r\n                        <li key={id}>\r\n                            <Link to={`${id}`}>\r\n                            Round {Number(id) + 1}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </nav>\r\n            <hr />\r\n            <ul>\r\n                <li className=\"caption-30\">\r\n                    Round progress: {roundList.length}/{roundCount}\r\n                </li>\r\n                <li>\r\n                    <button\r\n                        className={(tooltipWarn ? \"\" : \"button-primary\")}\r\n                        disabled={!isNewRoundReady}\r\n                        onClick={newRound}\r\n                    >\r\n                        <Icons.Plus/> New round\r\n                    </button>\r\n                    <Notification\r\n                        style={{\r\n                            borderRadius: \"0\",\r\n                            marginLeft: \"-8px\",\r\n                            marginRight: \"-8px\"\r\n                        }}\r\n                        success={!tooltipWarn}\r\n                    >\r\n                        {tooltipText}\r\n                    </Notification>\r\n                </li>\r\n                <li>\r\n                    <button\r\n                        className=\"button-micro\"\r\n                        disabled={roundList.length === 0}\r\n                        onClick={delLastRound}\r\n                    >\r\n                        <Icons.Trash /> Remove last round\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nSidebar.propTypes = {\r\n    className: PropTypes.string,\r\n    navigate: PropTypes.func.isRequired\r\n};\r\n","import {Panel, PanelContainer} from \"../utility\";\r\nimport React from \"react\";\r\nimport RoundTable from \"./round/round-table\";\r\nimport {ScoreTable} from \"./scores\";\r\nimport {useTournament} from \"../../hooks\";\r\n\r\nexport default function Status() {\r\n    const {tourney} = useTournament();\r\n    const lastRound = (function () {\r\n        if (tourney.roundList.length === 0) {\r\n            return <p>No rounds played yet.</p>;\r\n        }\r\n        const lastRoundId = tourney.roundList.length - 1;\r\n        if (tourney.roundList[lastRoundId].length === 0) {\r\n            return <p>Matched players will be shown here.</p>;\r\n        }\r\n        return (\r\n            <RoundTable\r\n                roundId={lastRoundId}\r\n                compact\r\n            />\r\n        );\r\n    }());\r\n    return (\r\n        <div className=\"content-area\" style={{width: \"712px\"}}>\r\n            <h2 style={{textAlign: \"center\"}}>Tournament status</h2>\r\n            <PanelContainer>\r\n                <Panel>\r\n                    <ScoreTable title=\"Rankings\" compact />\r\n                </Panel>\r\n                <Panel>\r\n                    {lastRound}\r\n                </Panel>\r\n            </PanelContainer>\r\n        </div>\r\n    );\r\n}\r\n","import Crosstable from \"./crosstable\";\r\nimport Header from \"./header\";\r\nimport PlayerSelect from \"./player-select\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Round from \"./round\";\r\nimport {Router} from \"@reach/router\";\r\nimport Scores from \"./scores\";\r\nimport Sidebar from \"./sidebar\";\r\nimport Status from \"./status\";\r\nimport {TournamentProvider} from \"../../hooks\";\r\nimport styles from \"./tournament.module.css\";\r\n\r\nexport default function Tournament(props) {\r\n    return (\r\n        <TournamentProvider tourneyId={props.tourneyId}>\r\n            <div className={styles.tournament}>\r\n                <Header className={styles.header} />\r\n                <Sidebar className={styles.sidebar} navigate={props.navigate} />\r\n                <div className={styles.contentFrame}>\r\n                    <Router>\r\n                        <PlayerSelect path=\"/\" />\r\n                        <Status path=\"status\" />\r\n                        <Crosstable path=\"crosstable\" />\r\n                        <Scores path=\"scores\" />\r\n                        <Round path=\":roundId\" />\r\n                    </Router>\r\n                </div>\r\n            </div>\r\n        </TournamentProvider>\r\n    );\r\n}\r\nTournament.propTypes = {\r\n    children: PropTypes.node,\r\n    navigate: PropTypes.func,\r\n    path: PropTypes.string,\r\n    tourneyId: PropTypes.string\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {useAllTournamentsDb, useDocumentTitle} from \"../../hooks\";\r\nimport {DateFormat} from \"../utility\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport Icons from \"../icons\";\r\nimport {Link} from \"@reach/router\";\r\nimport VisuallyHidden from \"@reach/visually-hidden\";\r\n\r\nexport default function TournamentList(props) {\r\n    const [tourneys, dispatch] = useAllTournamentsDb();\r\n    const [newTourneyName, setNewTourneyName] = useState(\"\");\r\n    const [isFormOpen, setIsFormOpen] = useState(false);\r\n    useDocumentTitle(\"tournament list\");\r\n\r\n    function updateNewName(event) {\r\n        setNewTourneyName(event.target.value);\r\n    }\r\n\r\n    function makeTournament(event) {\r\n        event.preventDefault();\r\n        dispatch({\r\n            name: newTourneyName,\r\n            type: \"ADD_TOURNEY\"\r\n        });\r\n        setNewTourneyName(\"\");\r\n        setIsFormOpen(false);\r\n    }\r\n\r\n    function deleteTournament(id, name) {\r\n        const message = \"Are you sure you want to delete “\" + name + \"”?\";\r\n        if (window.confirm(message)) {\r\n            dispatch({id, type: \"DEL_ITEM\"});\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"content-area\">\r\n            <div className=\"toolbar toolbar__left\">\r\n                <button\r\n                    onClick={() => setIsFormOpen(true)}\r\n                >\r\n                    <Icons.Plus /> Add tournament\r\n                </button>\r\n            </div>\r\n            {(Object.keys(tourneys).length > 0)\r\n            ?\r\n            <table>\r\n                <caption>Tournament list</caption>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Date</th>\r\n                        <th><VisuallyHidden>Controls</VisuallyHidden></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"content\">\r\n                    {Object.values(tourneys).map(({date, id, name}) =>\r\n                        <tr key={id} className=\"buttons-on-hover\">\r\n                            <td>\r\n                                <Link to={id}>\r\n                                    {name}\r\n                                </Link>\r\n                            </td>\r\n                            <td>\r\n                                <DateFormat date={date} />\r\n                            </td>\r\n                            <td>\r\n                                <button\r\n                                    aria-label={`Delete “${name}”`}\r\n                                    className=\"danger button-ghost\"\r\n                                    title={`Delete “${name}”`}\r\n                                    onClick={() => deleteTournament(id, name)}\r\n                                >\r\n                                    <Icons.Trash />\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n            : <p>No tournaments added yet.</p>\r\n            }\r\n            <Dialog isOpen={isFormOpen}>\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => setIsFormOpen(false)}\r\n                >\r\n                    Close\r\n                </button>\r\n                <form onSubmit={makeTournament}>\r\n                    <fieldset>\r\n                        <legend>Make a new tournament</legend>\r\n                        <label htmlFor=\"tourney-name\">Name:</label>\r\n                        <input\r\n                            name=\"tourney-name\"\r\n                            placeholder=\"tournament name\"\r\n                            required={true}\r\n                            type=\"text\"\r\n                            value={newTourneyName}\r\n                            onChange={updateNewName}\r\n                        />{\" \"}\r\n                        <input\r\n                            className=\"button-primary\"\r\n                            type=\"submit\"\r\n                            value=\"Create\"\r\n                        />\r\n                    </fieldset>\r\n                </form>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import Crosstable from \"./crosstable\";\r\nimport PlayerSelect from \"./player-select\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Round from \"./round\";\r\nimport Scores from \"./scores\";\r\nimport Tournament from \"./tournament\";\r\nimport TournamentList from \"./tournament-list\";\r\n\r\nconst TournamentIndex = (props) => (\r\n    <div className=\"passthrough\">\r\n        {props.children}\r\n    </div>\r\n);\r\nTournamentIndex.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TournamentIndex;\r\nexport {Crosstable, PlayerSelect, Round, Scores, Tournament, TournamentList};\r\n","import React from \"react\";\r\nimport styles from \"./index.module.css\";\r\n\r\nconst Caution = () => (\r\n    <aside className={styles.caution + \" body-20\"}>\r\n        <p className={styles.caution__text}>\r\n            This is beta software. Want to help make it better? Check out the\r\n            {\" \"}\r\n            <span role=\"img\" aria-hidden>👉</span>\r\n            &nbsp;\r\n            <a\r\n                className={styles.caution__link}\r\n                href=\"https://github.com/johnridesabike/chessahoochee\"\r\n            >\r\n                Git repository\r\n            </a>.\r\n        </p>\r\n    </aside>\r\n);\r\n\r\nexport default Caution;\r\n","import React from \"react\";\r\n\r\nconst NotFound = (props) => (\r\n    <div data-testid=\"404\">\r\n        <p>Page not found.</p>\r\n    </div>\r\n);\r\n\r\nexport default NotFound;\r\n","import React, {useEffect, useMemo, useState} from \"react\";\r\nimport {\r\n    useAllPlayersDb,\r\n    useAllTournamentsDb,\r\n    useDocumentTitle,\r\n    useOptionsDb\r\n} from \"../hooks\";\r\nimport Icons from \"./icons\";\r\nimport demoData from \"../demo-data\";\r\n\r\nexport default function Options(props) {\r\n    const [tourneys, tourneysDispatch] = useAllTournamentsDb();\r\n    const [players, playersDispatch] = useAllPlayersDb();\r\n    const [text, setText] = useState(\"\");\r\n    const [options, optionsDispatch] = useOptionsDb();\r\n    useDocumentTitle(\"Options\");\r\n    // memoize this so the `useEffect` hook syncs with the correct states\r\n    const exportData = useMemo(\r\n        () => ({options, players, tourneys}),\r\n        [options, tourneys, players]\r\n    );\r\n    useEffect(\r\n        function () {\r\n            setText(JSON.stringify(exportData, null, 4));\r\n        },\r\n        [exportData]\r\n    );\r\n    function loadData(data) {\r\n        tourneysDispatch({state: data.tournaments, type: \"LOAD_STATE\"});\r\n        optionsDispatch({state: data.options, type: \"LOAD_STATE\"});\r\n        playersDispatch({state: data.players, type: \"LOAD_STATE\"});\r\n        window.alert(\"Data loaded!\");\r\n    }\r\n    function handleText(event) {\r\n        event.preventDefault();\r\n        const importData = JSON.parse(text);\r\n        loadData(importData);\r\n    }\r\n    function handleFile(event) {\r\n        event.preventDefault();\r\n        const reader = new FileReader();\r\n        // eslint-disable-next-line fp/no-mutation\r\n        reader.onload = function (ev) {\r\n            const data = ev.target.result;\r\n            const importData = JSON.parse(data);\r\n            loadData(importData);\r\n        };\r\n        reader.readAsText(event.currentTarget.files[0]);\r\n        event.currentTarget.value = \"\"; // so the filename won't linger onscreen\r\n    }\r\n    function reloadDemoData(event) {\r\n        event.preventDefault();\r\n        loadData(demoData);\r\n    }\r\n    return (\r\n        <div className=\"content-area\">\r\n            <h2>Game settings</h2>\r\n            <form>\r\n                <fieldset>\r\n                    <legend>Bye options</legend>\r\n                    Select how many points a bye is worth:\r\n                    <label className=\"monospace\">\r\n                        1{\" \"}\r\n                        <input\r\n                            checked={options.byeValue === 1}\r\n                            type=\"radio\"\r\n                            onChange={() => optionsDispatch({\r\n                                option: \"byeValue\",\r\n                                type: \"SET_OPTION\",\r\n                                value: 1\r\n                            })}\r\n                        />\r\n                    </label>\r\n                    <label className=\"monospace\">\r\n                        ½{\" \"}\r\n                        <input\r\n                            checked={options.byeValue === 0.5}\r\n                            type=\"radio\"\r\n                            onChange={() => optionsDispatch({\r\n                                option: \"byeValue\",\r\n                                type: \"SET_OPTION\",\r\n                                value: 0.5\r\n                            })}\r\n                        />\r\n                    </label>\r\n                </fieldset>\r\n            </form>\r\n            <h2>Data</h2>\r\n            <fieldset>\r\n                <legend>Manage data</legend>\r\n                <p>\r\n                    <a\r\n                        download=\"chessahoochee.json\"\r\n                        href={\r\n                            \"data:application/json,\"\r\n                            + encodeURIComponent(JSON.stringify(exportData))\r\n                        }\r\n                    >\r\n                        <Icons.Download /> Export all data\r\n                    </a>\r\n                </p>\r\n                <label htmlFor=\"file\">Load data file:</label>\r\n                <input\r\n                    id=\"file\"\r\n                    name=\"file\"\r\n                    type=\"file\"\r\n                    onChange={handleFile}\r\n                />\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Reset all changes</legend>\r\n                <button onClick={reloadDemoData}>Reload demo data</button>\r\n            </fieldset>\r\n            <form onSubmit={handleText}>\r\n                <fieldset>\r\n                    <legend>\r\n                        Advanced: manually edit data\r\n                    </legend>\r\n                    <textarea\r\n                        className=\"json\"\r\n                        cols={50}\r\n                        name=\"playerdata\"\r\n                        rows={25}\r\n                        spellCheck={false}\r\n                        value={text}\r\n                        onChange={(event) => setText(event.currentTarget.value)}\r\n                    />\r\n                    <p>\r\n                        <input type=\"submit\" value=\"Load\" />\r\n                    </p>\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useMemo, useState} from \"react\";\r\nimport {getPlayerAvoidList, kFactor} from \"../../pairing-scoring\";\r\nimport Icons from \"../icons\";\r\nimport {Link} from \"@reach/router\";\r\nimport PropTypes from \"prop-types\";\r\nimport numeral from \"numeral\";\r\nimport styles from \"./index.module.css\";\r\nimport {useDocumentTitle} from \"../../hooks\";\r\n\r\nexport default function PlayerInfoBox({\r\n    playerId,\r\n    players,\r\n    playersDispatch,\r\n    options,\r\n    optionsDispatch\r\n}) {\r\n    const player = players[playerId];\r\n    const [singAvoidList, setSingAvoidList] = useState(\r\n        getPlayerAvoidList(playerId, options.avoidPairs)\r\n    );\r\n    const playerName = (player) ? player.firstName + \" \" + player.lastName : \"\";\r\n    useDocumentTitle(\"profile for \" + playerName);\r\n    // Memoize this so useEffect doesn't cause a memory leak.\r\n    const unAvoided = useMemo(\r\n        () => Object.keys(players).filter(\r\n            (id) => !singAvoidList.includes(id) && id !== playerId\r\n        ),\r\n        [players, playerId, singAvoidList]\r\n    );\r\n    const [selectedAvoider, setSelectedAvoider] = useState(unAvoided[0]);\r\n    function avoidAdd(event) {\r\n        event.preventDefault();\r\n        optionsDispatch({\r\n            pair: [playerId, selectedAvoider],\r\n            type: \"ADD_AVOID_PAIR\"\r\n        });\r\n    }\r\n    useEffect(\r\n        function () {\r\n            setSingAvoidList(getPlayerAvoidList(playerId, options.avoidPairs));\r\n        },\r\n        [options.avoidPairs, playerId]\r\n    );\r\n    useEffect(\r\n        function () {\r\n            setSelectedAvoider(unAvoided[0]);\r\n        },\r\n        [setSelectedAvoider, unAvoided]\r\n    );\r\n    function handleChange(event) {\r\n        event.preventDefault();\r\n        const {firstName, lastName, matchCount, rating} = event.currentTarget;\r\n        playersDispatch({\r\n            firstName: firstName.value,\r\n            id: playerId,\r\n            lastName: lastName.value,\r\n            matchCount: Number(matchCount.value),\r\n            rating: Number(rating.value),\r\n            type: \"SET_PLAYER\"\r\n        });\r\n    }\r\n    if (!player) {\r\n        return <div>Loading...</div>;\r\n    }\r\n    return (\r\n        <div className={styles.playerInfo + \" content-area\"}>\r\n            <Link to=\"..\"><Icons.ChevronLeft /> Back</Link>\r\n            <h2>\r\n                Profile for {player.firstName} {player.lastName}\r\n            </h2>\r\n            <form onChange={handleChange} onSubmit={handleChange}>\r\n                <p>\r\n                    <label htmlFor=\"firstName\">First name</label>\r\n                    <input\r\n                        defaultValue={player.firstName}\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"lastName\">Last name</label>\r\n                    <input\r\n                        defaultValue={player.lastName}\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"matchCount\">Matches played</label>\r\n                    <input\r\n                        defaultValue={String(player.matchCount)}\r\n                        name=\"matchCount\"\r\n                        type=\"number\"\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"rating\">Rating</label>\r\n                    <input\r\n                        defaultValue={String(player.rating)}\r\n                        name=\"rating\"\r\n                        type=\"number\"\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"Kfactor\">K factor</label>\r\n                    <input\r\n                        name=\"kfactor\"\r\n                        type=\"number\"\r\n                        value={numeral(kFactor(player.matchCount)).format(\"00\")}\r\n                        readOnly\r\n                    />\r\n                </p>\r\n            </form>\r\n            <h3>Players to avoid</h3>\r\n            <ul>\r\n                {singAvoidList.map((pId) =>\r\n                    <li key={pId}>\r\n                        {players[pId].firstName} {players[pId].lastName}\r\n                        <button\r\n                            arial-label={`Remove \r\n${players[pId].firstName} ${players[pId].lastName} from avoid list.`}\r\n                            className=\"danger button-ghost\"\r\n                            title={`Remove ${players[pId].firstName} \r\n${players[pId].lastName}`}\r\n                            onClick={() =>\r\n                                optionsDispatch({\r\n                                    pair: [playerId, pId],\r\n                                    type: \"DEL_AVOID_PAIR\"\r\n                                })\r\n                            }\r\n                        >\r\n                            <Icons.Trash />\r\n                        </button>\r\n                    </li>\r\n                )}\r\n                {singAvoidList.length === 0 &&\r\n                    <li>None</li>\r\n                }\r\n            </ul>\r\n            <form onSubmit={avoidAdd}>\r\n                <fieldset>\r\n                    <legend>Add player to avoid</legend>\r\n                    <select\r\n                        onBlur={(event) =>\r\n                            setSelectedAvoider(event.target.value)\r\n                        }\r\n                    >\r\n                        {unAvoided.map((pId) => (\r\n                            <option key={pId} value={pId}>\r\n                                {players[pId].firstName} {players[pId].lastName}\r\n                            </option>\r\n                        ))}\r\n                    </select>{\" \"}\r\n                    <input type=\"submit\" value=\"Add\" />\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nPlayerInfoBox.propTypes = {\r\n    options: PropTypes.object.isRequired,\r\n    optionsDispatch: PropTypes.func.isRequired,\r\n    playerId: PropTypes.string,\r\n    players: PropTypes.object.isRequired,\r\n    playersDispatch: PropTypes.func.isRequired\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {Dialog} from \"@reach/dialog\";\r\nimport Icons from \"../icons\";\r\nimport {Link} from \"@reach/router\";\r\nimport NewPlayer from \"../new-player\";\r\nimport PropTypes from \"prop-types\";\r\nimport VisuallyHidden from \"@reach/visually-hidden\";\r\nimport styles from \"./index.module.css\";\r\nimport {useDocumentTitle} from \"../../hooks\";\r\n\r\nexport default function PlayerList({\r\n    players,\r\n    playersDispatch,\r\n    optionsDispatch\r\n}) {\r\n    const [isFormOpen, setIsFormOpen] = useState(false);\r\n    useDocumentTitle(\"Players\");\r\n    const delPlayer = function (event, id) {\r\n        event.preventDefault();\r\n        const message = \"Are you sure you want to delete \"\r\n            + players[id].firstName + \" \" + players[id].lastName + \"?\";\r\n        if (window.confirm(message)) {\r\n            playersDispatch({id, type: \"DEL_ITEM\"});\r\n            optionsDispatch({id, type: \"DEL_AVOID_SINGLE\"});\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"content-area\">\r\n            <div className=\"toolbar toolbar__left\">\r\n                <button onClick={() => setIsFormOpen(true)}>\r\n                    <Icons.UserPlus /> Add a new player\r\n                </button>\r\n            </div>\r\n            <table className={styles.table}>\r\n                <caption>Player roster</caption>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Rating</th>\r\n                        <th>Matches</th>\r\n                        <th><VisuallyHidden>Controls</VisuallyHidden></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"content\">\r\n                    {Object.values(players).map((player) =>\r\n                        <tr key={player.id}  className=\"buttons-on-hover\">\r\n                            <td className=\"table__player\">\r\n                                <Link to={player.id}>\r\n                                    {player.firstName} {player.lastName}\r\n                                </Link>\r\n                            </td>\r\n                            <td className=\"table__number\">\r\n                                {player.rating}\r\n                            </td>\r\n                            <td className=\"table__number\">\r\n                                {player.matchCount}\r\n                            </td>\r\n                            <td>\r\n                                <button\r\n                                    className=\"danger button-ghost\"\r\n                                    onClick={\r\n                                        (event) => delPlayer(event, player.id)\r\n                                    }\r\n                                >\r\n                                    <Icons.Trash />\r\n                                    <VisuallyHidden>\r\n                                    Delete {player.firstName} {player.lastName}\r\n                                    </VisuallyHidden>\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n            <Dialog isOpen={isFormOpen}>\r\n                <button\r\n                    className=\"button-micro\"\r\n                    onClick={() => setIsFormOpen(false)}\r\n                >\r\n                    Close\r\n                </button>\r\n                <NewPlayer dispatch={playersDispatch} />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\nPlayerList.propTypes = {\r\n    optionsDispatch: PropTypes.func.isRequired,\r\n    players: PropTypes.object.isRequired,\r\n    playersDispatch: PropTypes.func.isRequired\r\n};\r\n","import {useAllPlayersDb, useOptionsDb} from \"../../hooks\";\r\nimport PlayerInfo from \"./info-box\";\r\nimport PlayerList from \"./player-list\";\r\nimport React from \"react\";\r\nimport {Router} from \"@reach/router\";\r\n\r\nexport default function Players(props) {\r\n    const [players, playersDispatch] = useAllPlayersDb();\r\n    const [options, optionsDispatch] = useOptionsDb();\r\n    const childProps = {options, optionsDispatch, players, playersDispatch};\r\n    return (\r\n        <Router basepath=\"players\">\r\n            <PlayerList path=\"/\" {...childProps} />\r\n            <PlayerInfo path=\":playerId\" {...childProps} />\r\n        </Router>\r\n    );\r\n}\r\nPlayers.propTypes = {};\r\n\r\nexport {PlayerInfo, PlayerList};\r\n","import Icons from \"./icons\";\r\nimport {Notification} from \"./utility\";\r\nimport React from \"react\";\r\nimport {loadDemoDB} from \"../hooks/db\";\r\nimport styles from \"./splash.module.css\";\r\n\r\nconst Splash = (props) => (\r\n    <div className={styles.splash}>\r\n        <aside className={styles.hint}>\r\n            <ol>\r\n                <li>\r\n                    <button\r\n                        className=\"button-primary\"\r\n                        onClick={() => loadDemoDB()}\r\n                    >\r\n                        Click here to load the demo data\r\n                    </button>{\" \"}\r\n                    (optional)\r\n                </li>\r\n                <li>\r\n                    <Icons.ArrowUpLeft />\r\n                    Select a menu item above.\r\n                </li>\r\n                <li>\r\n                    Start creating your tournaments!\r\n                </li>\r\n            </ol>\r\n            <Notification warning>\r\n                If you experience any glitches or crashes,<br />\r\n                clear your browser cache and try again.\r\n            </Notification>\r\n        </aside>\r\n        <div className={styles.title}>\r\n            <h1>\r\n                <span aria-hidden>♘</span>{\" \"}\r\n                Chessahoochee\r\n            </h1>\r\n            <p className={styles.subtitle + \" caption-30\"}>\r\n                a chess tournament app\r\n            </p>\r\n        </div>\r\n        <footer className={\"body-20 \" + styles.footer}>\r\n            <p>\r\n                This is an early, proof-of-concept chess tournament app.<br />\r\n                <a href=\"https://github.com/johnridesabike/chessahoochee\">\r\n                    Suggetions, bug reports, and contributions are welcome.\r\n                </a>\r\n            </p>\r\n            <p>\r\n                Built with JavaScript and{\" \"}\r\n                <a href=\"https://reactjs.org/\">React</a>.{\" \"}\r\n                <span style={{fontSize: \"16px\"}}>\r\n                    <Icons.Javascript /> <Icons.React />\r\n                </span>\r\n            </p>\r\n        </footer>\r\n    </div>\r\n);\r\nexport default Splash;\r\n","import \"side-effects\";\r\nimport {\r\n    Link,\r\n    LocationProvider,\r\n    Router,\r\n    createHistory\r\n} from \"@reach/router\";\r\nimport TournamentIndex, {\r\n    Tournament,\r\n    TournamentList\r\n} from \"./components/tournament\";\r\nimport {link, mainMenu} from \"./App.module.css\";\r\nimport Caution from \"./components/caution\";\r\nimport NotFound from \"./components/404\";\r\nimport Options from \"./components/options\";\r\nimport Players from \"./components/players\";\r\nimport React from \"react\";\r\nimport Splash from \"./components/splash\";\r\nimport createHashSource from \"hash-source\";\r\nimport {useDocumentTitle} from \"./hooks\";\r\n// These are just for deploying to GitHub pages.\r\nlet source = createHashSource();\r\nlet history = createHistory(source);\r\n\r\n// const electron = window.require(\"electron\");\r\n\r\nfunction App() {\r\n    useDocumentTitle(\"a chess tournament app\");\r\n    return (\r\n        <div className=\"app\">\r\n            <LocationProvider history={history}>\r\n                <header className=\"header\">\r\n                    <nav className={mainMenu}>\r\n                        <Link className={link} to=\"tourneys\">\r\n                            Tournaments\r\n                        </Link>\r\n                        <Link className={link} to=\"players\">\r\n                            Players\r\n                        </Link>\r\n                        <Link className={link} to=\"options\">\r\n                            Options\r\n                        </Link>\r\n                        <Link className={link} to=\"/\">\r\n                            About\r\n                        </Link>\r\n                    </nav>\r\n                </header>\r\n                <main className=\"main\">\r\n                    <Router>\r\n                        <Splash path=\"/\" />\r\n                        <TournamentIndex path=\"tourneys\">\r\n                            <TournamentList path=\"/\" />\r\n                            <Tournament path=\":tourneyId/*\" />\r\n                        </TournamentIndex>\r\n                        <Players path=\"players/*\" />\r\n                        <Options path=\"options\" />\r\n                        <NotFound default />\r\n                    </Router>\r\n                </main>\r\n            </LocationProvider>\r\n            <footer className=\"footer\">\r\n                <Caution />\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import \"./styles\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport React, {StrictMode} from \"react\";\r\nimport App from \"./App\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(\r\n    <StrictMode><App /></StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"scores_table__2rxnd\",\"topHeader\":\"scores_topHeader__1NdDN\",\"row\":\"scores_row__ecCJQ\",\"playerName\":\"scores_playerName__3zgHS\",\"rank\":\"scores_rank__f-nA5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"winnerSelect\":\"round_winnerSelect__1TUKD\",\"table\":\"round_table__3_NXr\",\"tbody\":\"round_tbody__25oku\",\"rowId\":\"round_rowId__PUS4S\",\"controls\":\"round_controls__DB1DG\",\"matchResult\":\"round_matchResult__egcjF\",\"playerResult\":\"round_playerResult__x41IK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"App_link__1tXRn\",\"mainMenu\":\"App_mainMenu__2PdU1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"splash\":\"splash_splash__3pTdT\",\"hint\":\"splash_hint__33Csf\",\"footer\":\"splash_footer__28WMG\",\"title\":\"splash_title__1Jrwi\",\"subtitle\":\"splash_subtitle__2ZRHH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tournament\":\"tournament_tournament__3ygmL\",\"header\":\"tournament_header__3QL7-\",\"sidebar\":\"tournament_sidebar__Od_Rn\",\"contentFrame\":\"tournament_contentFrame__1g-x6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"players_table__1e2Ls\",\"playerInfo\":\"players_playerInfo__1NBYh\",\"controls\":\"players_controls__32kQ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"caution\":\"caution_caution__2rrOM\",\"caution__text\":\"caution_caution__text__LxysE\",\"caution__link\":\"caution_caution__link__3X8Mh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panels\":\"utility_panels__5PR5o\",\"panel\":\"utility_panel__12Wgy\"};"],"sourceRoot":""}