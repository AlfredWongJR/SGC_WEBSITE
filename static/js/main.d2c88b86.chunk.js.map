{"version":3,"sources":["serviceWorker.js","side-effects.js","data-types/types.js","data-types/constants.js","data-types/factories.js","data-types/index.js","pairing-scoring/ratings.js","pairing-scoring/helpers.js","pairing-scoring/scoring.js","pairing-scoring/factories.js","pairing-scoring/pairing.js","components/icons.jsx","hooks/reducers/generic-db-reducer.js","hooks/reducers/options-reducer.js","hooks/reducers/players-reducer.js","hooks/reducers/match-functions.js","hooks/reducers/tournament-reducer.js","demo-data/index.js","hooks/db.js","hooks/tournament-provider.jsx","hooks/index.js","components/tournament/crosstable.jsx","components/utility.jsx","components/new-player.jsx","components/tournament/player-select/selecting.jsx","components/tournament/player-select/index.jsx","components/tournament/pair-picker/player-info.jsx","components/tournament/pair-picker/select-list.jsx","components/tournament/pair-picker/stage.jsx","components/tournament/pair-picker/index.jsx","components/tournament/round/player-match-info.jsx","components/tournament/round/match-row.jsx","components/tournament/round/round.jsx","components/tournament/round/index.jsx","components/tournament/scores.jsx","components/tournament/header.jsx","components/tournament/sidebar.jsx","components/tournament/tournament.jsx","components/tournament/tournament-list.jsx","components/tournament/index.jsx","components/caution/index.jsx","components/404.jsx","components/options.jsx","components/players/info-box.jsx","components/players/player-list.jsx","components/players/index.jsx","components/splash.jsx","App.jsx","index.jsx","components/tournament/scores.module.css","App.module.css","components/splash.module.css","components/tournament/tournament.module.css","components/tournament/round/round.module.css","components/players/index.module.css","components/caution/index.module.css","components/utility.module.css"],"names":["Boolean","window","location","hostname","match","numeral","register","format","value","roundingFunction","whole","Math","floor","remainder","fraction","String","regexps","unformat","Number","Id","t","refinement","id","test","AvoidPair","tuple","Player","interface","firstName","lastName","matchCount","rating","type","PlayerStats","avoidList","list","colorBalance","dueColor","maybe","hasHadBye","isDueBye","opponentHistory","profile","score","upperHalf","Match","newRating","origRating","playerIds","result","RoundList","Tournament","byeQueue","date","Date","name","roundList","tieBreaks","ScoreCalulator","func","Standing","BLACK","WHITE","DUMMY_ID","createMatch","importObj","nanoid","createPlayer","arguments","length","undefined","dummyPlayer","missingPlayer","kFactor","isNotDummy","playerId","getPlayerMaybe","playerDict","dict","player","isNotBye","includes","getMatchesByPlayer","matchList","filter","getMatchesByPlayerNoByes","getMatchDetailsForPlayer","index","indexOf","color","rounds2Matches","roundId","slice","reduce","acc","round","concat","getAllPlayersFromMatches","allPlayers","Array","from","Set","getUnmatched","tourney","players","matchedIds","Object","values","assoc","getPlayerAvoidList","pair","accumulator","getDueColor","lastMatch","last","getPlayersByOpponent","opponentId","getOpponentScores","map","opponent","getPlayerScore","of","scoreList","getPlayerScoreList","sum","getCumulativeScore","getPlayerScoreListNoByes","getCumulativeOfOpponentScore","oppScores","getColorBalanceScore","colorList","tieBreakMethods","0","scores","pipe","sort","a","b","init","tail","1","2","3","4","createStandingList","methods","selectedTiebreakMethods","selectedTieBreaks","i","tieBreakNames","m","standings","_ref","sortFunc","keys","key","thenBy","standing1","standing2","firstBy","createStandingTree","_createStandingList","_createStandingList2","slicedToArray","standingsFlat","standing","orig","prevStanding","append","over","lensIndex","createPlayerStats","_ref2","matches","freeze","priority","condition","avoidMeetingTwice","sameScores","divider","differentHalf","differentDueColor","maxPriority","add","calcPairIdeal","player1","player2","metBefore","mustAvoid","abs","setUpperHalves","playerStatsList","splitInHalf","splitAt","ignore","src","isUpperHalf","view","setByePlayer","hasNotHadBye","p","nextByeSignup","indexOfDueBye","findLastIndex","sortPlayersForPairing","simpleIcon","icon","props","react_default","createElement","assign","dangerouslySetInnerHTML","__html","svg","aria-label","title","role","style","fill","hex","icons","Alert","ArrowDown","ArrowUp","ArrowUpLeft","Check","ChevronLeft","ChevronRight","Edit","Info","Javascript","Layers","List","Plus","React","ReactIcon","Repeat","Settings","Trash","UserMinus","UserPlus","Users","X","ActionLoadState","state","Any","ActionDelItem","ActionAddItem","item","ActionAddTourney","AdctionAddPlayer","ActionTypes","union","genericDbReducer","action","nextId","console","warn","dissoc","Error","dispatch","x","ADD_ITEM","ADD_PLAYER","ADD_TOURNEY","DEL_ITEM","LOAD_STATE","ActionSetOption","option","ActionAvoidPair","ActionAvoidSingle","optionsReducer","lensProp","ADD_AVOID_PAIR","DEL_AVOID_PAIR","DEL_AVOID_SINGLE","SET_OPTION","ActionSetPlayer","ActionAddPlayer","ActionDelPlayer","ActionSetMatchcount","ActionSetRating","playersReducer","mergeLeft","lensPath","set","DEL_PLAYER","SET_PLAYER","SET_PLAYER_MATCHCOUNT","SET_PLAYER_RATING","autoPair","byeValue","pairs","curry","potentialMatches","playerMatches","reducedResults","blossom","p1Index","p2Index","p1Id","p2Id","p1","p2","matched","pair1","pair2","reverse","byePlayer","pairPlayers","log","getPlayer","idsPair","ActionAddRound","ActionDelLastRound","ActionAddRemoveTieBreak","ActionMoveTieBreak","newIndex","oldIndex","ActionSetTourneyPlayers","ActionSetByeQueue","ActionAutoPair","ActionManualPair","ActionSetMatchResult","matchId","ActionEditMatch","ActionMoveMatch","ActionSetName","ActionSetDate","tournamentReducer","remove","move","__","manualPair","findIndex","propEq","mergeRight","ADD_ROUND","ADD_TIEBREAK","AUTO_PAIR","DEL_LAST_ROUND","DEL_MATCH","DEL_TIEBREAK","MANUAL_PAIR","MOVE_MATCH","MOVE_TIEBREAK","SET_BYE_QUEUE","SET_DATE","SET_MATCH_RESULT","SET_NAME","SET_STATE","SET_TOURNEY_PLAYERS","SWAP_COLORS","demo_data","options","tournaments","fromJSON","setItemsPrototype","localForage","removeItemsPrototype","optionsStore","createInstance","storeName","playerStore","tourneyStore","useAllItemsFromDb","store","_useReducer","useReducer","_useReducer2","items","_useState","useState","_useState2","isLoaded","setIsLoaded","useEffect","getItems","then","results","_config","setItems","deleted","difference","removeItems","useAllPlayersDb","useAllTournamentsDb","useOptionsDb","_useReducer3","demoData","_useReducer4","_useState3","_useState4","iterate","TournamentContext","createContext","useTournament","useContext","TournamentProvider","children","tourneyId","tourneyDispatch","playersDispatch","isTourneyLoaded","setIsTourneyLoaded","isPlayersLoaded","setIsPlayersLoaded","getItem","allTheIds","unChangedPlayers","symmetricDifference","catch","error","setItem","Provider","useDocumentTitle","origTitle","document","Crosstable","_useTournament","oppResults","defaultTo","opponentScores","getRatingChange","_getPerformanceRating","firstMatch","getPerformanceRatings","_getPerformanceRating2","firstRating","lastRating","change","className","table","rank","row","scope","playerName","index2","player1Id","player2Id","getXScore","Panel","_ref4","styles","panel","objectSpread","PanelContainer","panels","DateFormat","dateFormat","Intl","DateTimeFormat","day","month","year","cleanProps","omit","dateTime","toISOString","Notification","_ref5","success","warning","_ref6","findById","NewPlayer","newPlayerDefault","newPlayerData","setNewPlayerdata","updateField","event","preventDefault","_event$currentTarget","currentTarget","prevState","onSubmit","htmlFor","required","onChange","Selecting","_useAllPlayersDb","_useAllPlayersDb2","allPlayersDispatch","togglePlayer","target","checked","pId","onClick","PlayerSelect","isSelecting","setIsSelecting","flexShrink","colSpan","disabled","dialog_es","isOpen","PlayerInfo","_useOptionsDb","_createPlayerStats","avoidPairs","prettyBalance","opId","SelectList","stagedPlayers","setStagedPlayers","unmatched","unmatchedCount","unmatchedWithDummy","selectPlayer","visually_hidden_es","Stage","_stagedPlayers","white","black","unstage","react","every","PairPicker","isModalOpen","setIsModalOpen","statsList","useMemo","matchIdeal","ideal","PlayerMatchInfo","playerData","data-testid","MatchRow","pos","selectedMatch","setSelectedMatch","openModal","setOpenModal","resultCode","whitePlayer","blackPlayer","whiteName","blackName","setMatchResult","origRatings","matchCounts","whiteElo","EloRank","blackElo","scoreExpected","getExpected","updateRating","calcNewRatings","aria-hidden","winnerSelect","onBlur","Round","moveMatch","direction","forEach","unMatch","Index","openTab","setOpenTab","tabs_es","ScoreTable","_createStandingTree","_createStandingTree2","standingTree","tbMethods","topHeader","j","rowSpan","dashify","SelectTieBreaks","_useTournament2","selectedTb","setSelectedTb","toggleTb","defaultId","moveTb","marginTop","Scores","PlaceholderButton","Header","isEditingName","setIsEditingName","isEditingDate","setIsEditingDate","dateInput","getFullYear","getMonth","getDate","header_PlaceholderButton","_event$currentTarget$","split","_event$currentTarget$2","rawYear","rawMonth","rawDay","Sidebar","isNewRoundReady","lastRound","roundCount","playerCount","ceil","log2","isFinite","calcNumOfRounds","isItOver","tooltipText","tooltipWarn","_delLastRound","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","confirm","navigate","stop","apply","this","es","to","marginLeft","marginRight","tournament","header","sidebar","content","path","tournament_scores","TournamentList","_useAllTournamentsDb","_useAllTournamentsDb2","tourneys","newTourneyName","setNewTourneyName","isFormOpen","setIsFormOpen","placeholder","TournamentIndex","Caution","caution","caution__text","caution__link","href","NotFound","Options","tourneysDispatch","text","setText","_useOptionsDb2","optionsDispatch","exportData","loadData","data","alert","JSON","stringify","download","encodeURIComponent","reader","FileReader","onload","ev","parse","readAsText","files","cols","rows","spellCheck","PlayerInfoBox","singAvoidList","setSingAvoidList","unAvoided","selectedAvoider","setSelectedAvoider","handleChange","playerInfo","defaultValue","readOnly","arial-label","PlayerList","message","delPlayer","Players","childProps","basepath","Splash","splash","hint","subtitle","footer","fontSize","source","createHashSource","history","createHistory","App","mainMenu","link","tournament_Tournament","_404","default","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","controls"],"mappings":"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","file":"static/js/main.d2c88b86.chunk.js","sourcesContent":["/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import numeral from \"numeral\";\n\n// let's make a custom numeral format. I don't really know how this works.\nnumeral.register(\"format\", \"fraction\", {\n    // eslint-disable-next-line no-unused-vars\n    format: function (value, format, roundingFunction) {\n        const whole = Math.floor(value);\n        const remainder = value - whole;\n        const fraction = (function () {\n            switch (remainder) {\n            case 0.25:\n                return \"¼\";\n            case 0.5:\n                return \"½\";\n            case 0.75:\n                return \"¾\";\n            default:\n                return \"\";\n            }\n        }());\n        const stringedWhole = (\n            (whole === 0 && remainder)\n            ? \"\"\n            : String(whole)\n        );\n        return stringedWhole + fraction;\n    },\n    regexps: {\n        format: /(1\\/2)/,\n        unformat: /(1\\/2)/\n    },\n    unformat: function (value) {\n        // TODO: This doesn't do anything currently\n        return Number(value);\n    }\n});\n","import t from \"tcomb\";\n\nconst Id = t.refinement(\n    t.String,\n    (id) => /^[A-Za-z0-9_-]{21}$/.test(id),\n    \"NanoId\"\n);\nexport {Id};\n\nconst AvoidPair = t.tuple([Id, Id], \"AvoidPair\");\nexport {AvoidPair};\n\nconst Player = t.interface(\n    {\n        firstName: t.String,\n        id: Id,\n        lastName: t.String,\n        matchCount: t.Number,\n        rating: t.Number,\n        type: t.String // used for CSS styling etc\n    },\n    \"Player\"\n);\nexport {Player};\n\nconst PlayerStats = t.interface(\n    {\n        avoidList: t.list(Id),\n        colorBalance: t.Number,\n        dueColor: t.maybe(t.Number),\n        hasHadBye: t.Boolean,\n        id: Id,\n        isDueBye: t.Boolean,\n        opponentHistory: t.list(Id),\n        profile: Player,\n        rating: t.Number,\n        score: t.Number,\n        upperHalf: t.Boolean\n    },\n    \"PlayerStats\"\n);\nexport {PlayerStats};\n\nconst Match = t.interface(\n    {\n        id: Id,\n        newRating: t.tuple([t.Number, t.Number]),\n        origRating: t.tuple([t.Number, t.Number]),\n        playerIds: t.tuple([Id, Id]),\n        result: t.tuple([t.Number, t.Number])\n    },\n    \"Match\"\n);\nexport {Match};\n\nconst RoundList = t.list(t.list(Match), \"Round list\");\nexport {RoundList};\n\nconst Tournament = t.interface(\n    {\n        byeQueue: t.list(t.String),\n        date: Date,\n        id: Id,\n        name: t.String,\n        playerIds: t.list(t.String),\n        roundList: RoundList,\n        tieBreaks: t.list(t.Number)\n    },\n    \"Tournament\"\n);\nexport {Tournament};\n\nconst ScoreCalulator = t.func(\n    [Id, t.list(Match)],\n    t.Number,\n    \"ScoreCalulator\"\n);\nexport {ScoreCalulator};\n\nconst Standing = t.interface(\n    {\n        id: Id,\n        score: t.Number,\n        tieBreaks: t.list(t.Number)\n    },\n    \"Standing\"\n);\nexport {Standing};\n","const BLACK = 1;\nexport {BLACK};\nconst WHITE = 0;\nexport {WHITE};\nconst DUMMY_ID = \"________DUMMY________\";\nexport {DUMMY_ID};\n","// These factories are mainly useful as a shortcut to provide default values.\nimport {Match, Player, Tournament} from \"./types\";\nimport nanoid from \"nanoid\";\n\nexport function createMatch(importObj) {\n    return Match({\n        id: importObj.id || nanoid(),\n        newRating: importObj.newRating,\n        origRating: importObj.origRating,\n        playerIds: importObj.playerIds,\n        result: importObj.result || [0, 0]\n    });\n}\n\nexport function createPlayer(importObj = {}) {\n    return Player({\n        firstName: importObj.firstName || \"\",\n        id: importObj.id || nanoid(),\n        lastName: importObj.lastName || \"\",\n        matchCount: importObj.matchCount || 0,\n        rating: importObj.rating || 0,\n        type: importObj.type || \"person\" // used for CSS styling etc.\n    });\n}\n\nexport function createTournament(importObj) {\n    return Tournament({\n        byeQueue: importObj.byeQueue || [],\n        date: importObj.date || new Date(),\n        id: importObj.id || nanoid(),\n        name: importObj.name || \"\",\n        playerIds: importObj.playerIds || [],\n        roundList: importObj.roundList || [],\n        tieBreaks: importObj.tieBreaks || [0, 1, 2, 3]\n    });\n}\n","import {\n    AvoidPair,\n    Id,\n    Match,\n    Player,\n    PlayerStats,\n    RoundList,\n    ScoreCalulator,\n    Standing,\n    Tournament\n} from \"./types\";\nimport {BLACK, DUMMY_ID, WHITE} from \"./constants\";\nimport {createMatch, createPlayer, createTournament} from \"./factories\";\n\nconst dummyPlayer = createPlayer({\n    firstName: \"Bye\",\n    id: DUMMY_ID,\n    lastName: \"Player\",\n    type: \"dummy\"\n});\n\nconst missingPlayer = (id) => createPlayer({\n    firstName: \"Anonymous\",\n    id: id,\n    lastName: \"Player\",\n    type: \"missing\"\n});\n\nexport {\n    AvoidPair,\n    BLACK,\n    DUMMY_ID,\n    Id,\n    Match,\n    Player,\n    PlayerStats,\n    RoundList,\n    ScoreCalulator,\n    Standing,\n    Tournament,\n    WHITE,\n    createMatch,\n    createPlayer,\n    createTournament,\n    dummyPlayer,\n    missingPlayer\n};\n","import {BLACK, WHITE} from \"../data-types\";\nimport EloRank from \"elo-rank\";\nimport t from \"tcomb\";\n\nexport function kFactor(matchCount) {\n    const ne = t.Number(matchCount) || 1;\n    return (800 / ne);\n}\n\nexport function calcNewRatings(origRatings, matchCounts, result) {\n    t.tuple([t.Number, t.Number])(origRatings);\n    t.tuple([t.Number, t.Number])(matchCounts);\n    t.tuple([t.Number, t.Number])(result);\n    const whiteElo = new EloRank(kFactor(matchCounts[WHITE]));\n    const blackElo = new EloRank(kFactor(matchCounts[BLACK]));\n    const FLOOR = 100;\n    const scoreExpected = [\n        whiteElo.getExpected(origRatings[WHITE], origRatings[BLACK]),\n        blackElo.getExpected(origRatings[BLACK], origRatings[WHITE])\n    ];\n    const newRating = [\n        whiteElo.updateRating(\n            scoreExpected[WHITE],\n            result[WHITE],\n            origRatings[WHITE]\n        ),\n        blackElo.updateRating(\n            scoreExpected[BLACK],\n            result[BLACK],\n            origRatings[BLACK]\n        )\n    ];\n    return newRating.map((rating) => (rating < FLOOR) ? FLOOR : rating);\n}\n","import {\n    AvoidPair,\n    DUMMY_ID,\n    Id,\n    Match,\n    Player,\n    RoundList,\n    Standing,\n    Tournament,\n    dummyPlayer,\n    missingPlayer\n} from \"../data-types\";\nimport {assoc} from \"ramda\";\nimport t from \"tcomb\";\n/*******************************************************************************\n * Player functions\n ******************************************************************************/\nconst isNotDummy = (playerId) => playerId !== DUMMY_ID;\nexport {isNotDummy};\n\nexport function areScoresEqual(standing1, standing2) {\n    Standing(standing1);\n    Standing(standing2);\n    // Check if any of them aren't equal\n    if (standing1.score !== standing2.score) {\n        return false;\n    }\n    // Check if any tie-break values are not equal\n    return !(\n        standing1.tieBreaks.reduce(\n            (acc, value, i) => acc.concat(value !== standing2.tieBreaks[i]),\n            []\n        ).includes(true)\n    );\n}\n\n/**\n * Retrive a specific player from a list or object.\n * @param playerList This can either be typed as `[Player1, Player1]` or\n * `{\"1\": Player, \"2\": Player}`, where `Player1.id` equals its dict key.\n * @param id the `id` property of the desired `Player` object.\n * @returns The desired Player object.\n */\nexport function getPlayerById(playerList, id) {\n    t.union([\n        t.list(Player),\n        t.dict(Id, Player)\n    ])(playerList);\n    if (id === DUMMY_ID) {\n        return dummyPlayer;\n    }\n    const player = (playerList.filter)\n        ? playerList.filter((p) => p.id === id)[0]\n        : playerList[id];\n    return (player) ? player : missingPlayer(id);\n}\n\n/**\n * A replacement for `getPlayerById`, with an emphasis on the indented feature\n * of *maybe* getting a player, *maybe* getting a `dummyPlayer`, or *maybe*\n * getting a missing (deleted) player.\n */\nexport function getPlayerMaybe(playerDict, id) {\n    t.dict(Id, Player)(playerDict);\n    Id(id);\n    if (id === DUMMY_ID) {\n        return dummyPlayer;\n    }\n    const player = playerDict[id];\n    return (player) ? player : missingPlayer(id);\n}\n\n/*******************************************************************************\n * Match functions\n ******************************************************************************/\nconst isNotBye = (match) => !match.playerIds.includes(DUMMY_ID);\nexport {isNotBye};\n\nexport function getMatchesByPlayer(playerId, matchList) {\n    t.list(Match)(matchList);\n    return matchList.filter((match) => match.playerIds.includes(playerId));\n}\n\nexport function getMatchesByPlayerNoByes(playerId, matchList) {\n    t.list(Match)(matchList);\n    return matchList.filter(\n        (match) => match.playerIds.includes(playerId) && isNotBye(match)\n    );\n}\n\nexport function getMatchDetailsForPlayer(playerId, match) {\n    Id(playerId);\n    Match(match);\n    const index = match.playerIds.indexOf(playerId);\n    return {\n        color: index,\n        newRating: match.newRating[index],\n        origRating: match.origRating[index],\n        result: match.result[index]\n    };\n}\n\n/**\n * Flatten a list of rounds to a list of matches.\n */\nexport function rounds2Matches(roundList, roundId = null) {\n    RoundList(roundList);\n    t.maybe(t.Number)(roundId);\n    const rounds = (\n        (roundId === null)\n        ? roundList\n        : roundList.slice(0, roundId + 1)\n    );\n    return rounds.reduce((acc, round) => acc.concat(round), []);\n}\n\nexport function getAllPlayersFromMatches(matchList) {\n    t.list(Match)(matchList);\n    const allPlayers = matchList.reduce(\n        (acc, match) => acc.concat(match.playerIds),\n        []\n    );\n    return Array.from(new Set(allPlayers));\n}\n\n/**\n * Get a list of all of a player's scores from each match.\n */\nexport function getPlayerScoreList(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    return getMatchesByPlayer(\n        playerId,\n        matchList,\n    ).map(\n        (match) => getMatchDetailsForPlayer(playerId, match).result\n    );\n}\n\nexport function getPlayerScoreListNoByes(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    return getMatchesByPlayerNoByes(\n        playerId,\n        matchList\n    ).map(\n        (match) => getMatchDetailsForPlayer(playerId, match).result\n    );\n}\n\n/**\n * This creates a filtered version of `players` with only the players that are\n * not matched for the specified round.\n */\nexport function getUnmatched(tourney, players, roundId) {\n    Tournament(tourney);\n    t.dict(Id, Player)(players);\n    t.Number(roundId);\n    const matchList = tourney.roundList[roundId] || [];\n    const matchedIds = matchList.reduce(\n        (acc, match) => acc.concat(match.playerIds),\n        []\n    );\n    const unmatched = Object.values(players).reduce(\n        (acc, player) => (\n            (matchedIds.includes(player.id))\n            ? acc\n            : assoc(player.id, player, acc)\n        ),\n        {}\n    );\n    return unmatched;\n}\n\n/*******************************************************************************\n * Round functions\n ******************************************************************************/\nexport function calcNumOfRounds(playerCount) {\n    const roundCount = Math.ceil(Math.log2(playerCount));\n    return (Number.isFinite(roundCount)) ? roundCount : 0;\n}\n\n/*******************************************************************************\n * Avoid list functions\n ******************************************************************************/\nexport function getPlayerAvoidList(playerId, avoidList) {\n    t.list(AvoidPair)(avoidList);\n    Id(playerId);\n    return avoidList.filter( // get pairings with the player\n        (pair) => pair.includes(playerId)\n    ).reduce( // Flatten the array\n        (accumulator, pair) => pair.concat(accumulator),\n        []\n    ).filter( // filter out the player's id\n        (id) => id !== playerId\n    );\n}\n\n// TODO: This isn't currently in use, but it probably should be.\nexport function cleanAvoidList(avoidList, playerList) {\n    t.list(AvoidPair)(avoidList);\n    t.list(Player)(playerList);\n    const ids = playerList.map((p) => p.id);\n    return avoidList.filter(\n        (pairs) => (ids.includes(pairs[0]) && ids.includes(pairs[1]))\n    );\n}\n","import {\n    BLACK,\n    DUMMY_ID,\n    Id,\n    Match,\n    ScoreCalulator,\n    WHITE\n} from \"../data-types\";\nimport {\n    getMatchDetailsForPlayer,\n    getMatchesByPlayer,\n    getMatchesByPlayerNoByes,\n    getPlayerScoreList,\n    getPlayerScoreListNoByes,\n    isNotDummy\n} from \"./helpers\";\nimport {\n    init,\n    last,\n    pipe,\n    sort,\n    sum,\n    tail\n} from \"ramda\";\nimport {firstBy} from \"thenby\";\nimport t from \"tcomb\";\n\nexport function getDueColor(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    const lastMatch = last(getMatchesByPlayer(playerId, matchList));\n    if (!lastMatch) {\n        return null;\n    }\n    const {color} = getMatchDetailsForPlayer(playerId, lastMatch);\n    return (color === WHITE) ? BLACK : WHITE;\n}\n\nexport function hasHadBye(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    return getMatchesByPlayer(\n        playerId,\n        matchList\n    ).reduce(\n        (acc, match) => acc.concat(match.playerIds),\n        []\n    ).includes(DUMMY_ID);\n}\n\nexport function getPlayersByOpponent(opponentId, matchList) {\n    Id(opponentId);\n    t.list(Match)(matchList);\n    return getMatchesByPlayer(\n        opponentId,\n        matchList\n    ).reduce(\n        (acc, match) => acc.concat(match.playerIds),\n        []\n    ).filter(\n        (playerId) => playerId !== opponentId\n    );\n}\n\n/**\n * Used for `modifiedMedian` and `solkoff`.\n */\nfunction getOpponentScores(playerId, matchList) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    const scores = getPlayersByOpponent(\n        playerId,\n        matchList\n    ).filter(\n        isNotDummy\n    ).map(\n        (opponent) => getPlayerScore(opponent, matchList)\n    );\n    return scores;\n}\n\n/*******************************************************************************\n * The main scoring methods\n ******************************************************************************/\nconst getPlayerScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getPlayerScore(playerId, matchList) {\n        const scoreList = getPlayerScoreList(playerId, matchList);\n        return sum(scoreList);\n    }\n);\nexport {getPlayerScore};\n\n/**\n * The player's cumulative score.\n */\nconst getCumulativeScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getCumulativeScore(playerId, matchList) {\n        const scoreList = getPlayerScoreListNoByes(\n            playerId,\n            matchList\n        ).reduce( // turn the regular score list into a \"running\" score list\n            (acc, score) => acc.concat([last(acc) + score]),\n            [0]\n        );\n        return sum(scoreList);\n    }\n);\n\n/**\n * Get the cumulative scores of a player's opponents.\n */\nconst getCumulativeOfOpponentScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getCumulativeOfOpponentScore(playerId, matchList) {\n        const oppScores = getPlayersByOpponent(\n            playerId,\n            matchList\n        ).filter(\n            isNotDummy\n        ).map(\n            (id) => getCumulativeScore(id, matchList)\n        );\n        return sum(oppScores);\n    }\n);\n\n/**\n * Calculate a player's color balance. A negative number means they played as\n * white more. A positive number means they played as black more.\n */\nconst getColorBalanceScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getColorBalanceScore(playerId, matchList) {\n        const colorList = getMatchesByPlayerNoByes(\n            playerId,\n            matchList\n        ).reduce(\n            (acc, match) => (\n                (match.playerIds[WHITE] === playerId)\n                ? acc.concat(-1) // White = -1\n                : acc.concat(1) // Black = +1\n            ),\n            [0]\n        );\n        return sum(colorList);\n    }\n);\nexport {getColorBalanceScore};\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n */\nconst getModifiedMedianScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getModifiedMedianScore(playerId, matchList) {\n        const scores = getOpponentScores(playerId, matchList);\n        return pipe(\n            sort((a, b) => a - b),\n            init,\n            tail,\n            sum\n        )(scores);\n    }\n);\n\nconst getSolkoffScore = ScoreCalulator.of(\n    // named functions are better for debugging\n    function _getSolkoffScore(playerId, matchList) {\n        const scoreList = getOpponentScores(playerId, matchList);\n        return sum(scoreList);\n    }\n);\n\nconst tieBreakMethods = {\n    0: {\n        func: getModifiedMedianScore,\n        id: 0,\n        name: \"Modified median\"\n    },\n    1: {\n        func: getSolkoffScore,\n        id: 1,\n        name: \"Solkoff\"\n    },\n    2: {\n        func: getCumulativeScore,\n        id: 2,\n        name: \"Cumulative score\"\n    },\n    3: {\n        func: getCumulativeOfOpponentScore,\n        id: 3,\n        name: \"Cumulative of opposition\"\n    },\n    4: {\n        func: getColorBalanceScore,\n        id: 4,\n        name: \"Most black\"\n    }\n};\nObject.freeze(tieBreakMethods);\nexport {tieBreakMethods};\n\n/**\n * Create a function to sort the standings. This dynamically creates a `thenBy`\n * function based on the list of desired tiebreak sort methods.\n * @returns A function to be used with a list of standings and `sort()`.\n */\nexport function createTieBreakSorter(selectedTiebreakMethods) {\n    return Object.keys(selectedTiebreakMethods).reduce(\n        (acc, key) => (\n            acc.thenBy(\n                (standing1, standing2) => (\n                    standing2.tieBreaks[key] - standing1.tieBreaks[key]\n                )\n            )\n        ),\n        firstBy((standing1, standing2) => standing2.score - standing1.score)\n    );\n}\n","import {\n    AvoidPair,\n    Id,\n    Match,\n    Player,\n    PlayerStats,\n    RoundList,\n    Standing\n} from \"../data-types\";\nimport {\n    add,\n    append,\n    defaultTo,\n    last,\n    lensIndex,\n    lensProp,\n    over,\n    pipe,\n    sort\n} from \"ramda\";\nimport {\n    areScoresEqual,\n    getAllPlayersFromMatches,\n    getMatchDetailsForPlayer,\n    getMatchesByPlayer,\n    getPlayerAvoidList,\n    isNotDummy,\n    rounds2Matches\n} from \"./helpers\";\nimport {\n    createTieBreakSorter,\n    getColorBalanceScore,\n    getDueColor,\n    getPlayerScore,\n    getPlayersByOpponent,\n    hasHadBye,\n    tieBreakMethods\n} from \"./scoring\";\nimport t from \"tcomb\";\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * @returns {[Standing[], string[]]} The standings and the list of method used\n */\nexport function createStandingList(methods, roundList, roundId) {\n    t.list(t.Number)(methods);\n    t.list(t.Array)(roundList);\n    t.maybe(t.Number)(roundId);\n    const matchList = rounds2Matches(roundList, roundId);\n    const selectedTieBreaks = methods.map((i) => tieBreakMethods[i]);\n    const tieBreakNames = selectedTieBreaks.map((m) => m.name);\n    // Get a flat list of all of the players and their scores.\n    const standings = getAllPlayersFromMatches(\n        matchList\n    ).map(\n        (id) => Standing({\n            id,\n            score: getPlayerScore(id, matchList),\n            tieBreaks: selectedTieBreaks.map(({func}) => func(id, matchList))\n        })\n    );\n    const sortFunc = createTieBreakSorter(selectedTieBreaks);\n    const standingsSorted = sort(sortFunc, standings);\n    return [standingsSorted, tieBreakNames];\n}\n\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * example: `[[Dale, Audrey], [Pete], [Bob]]`\n * Dale and Audrey are tied for first, Pete is 2nd, Bob is 3rd.\n * @returns {[Standing[][], string[]]} The standings and the list of method used\n */\nexport function createStandingTree(methods, roundList, roundId = null) {\n    t.list(t.Number)(methods);\n    RoundList(roundList);\n    t.maybe(t.Number)(roundId);\n    const [\n        standingsFlat,\n        tieBreakNames\n    ] = createStandingList(methods, roundList, roundId);\n    const standingsFlatNoByes = standingsFlat.filter(isNotDummy);\n    const standingsTree = standingsFlatNoByes.reduce(\n        /** @param {Standing[][]} acc*/\n        function assignStandingsToTree(acc, standing, i, orig) {\n            const prevStanding = orig[i - 1];\n            const isNewRank = (\n                // Always make a new rank for the first player\n                (i === 0) ? true : !areScoresEqual(standing, prevStanding)\n            );\n            if (isNewRank) {\n                return append([standing], acc);\n            }\n            // If this player has the same score as the last, list them together\n            return over(lensIndex(acc.length - 1), append(standing), acc);\n        },\n        []\n    );\n    return [standingsTree, tieBreakNames];\n}\n\n/**\n * @returns {PlayerStats}\n */\nexport function createPlayerStats({\n    avoidList,\n    id,\n    players,\n    roundList,\n    roundId\n}) {\n    Id(id);\n    t.Number(roundId);\n    t.dict(Id, Player)(players);\n    t.list(AvoidPair)(avoidList);\n    RoundList(roundList);\n    const matches = rounds2Matches(roundList, roundId);\n    return PlayerStats({\n        avoidList: getPlayerAvoidList(id, avoidList),\n        colorBalance: getColorBalanceScore(id, matches),\n        dueColor: getDueColor(id, matches),\n        hasHadBye: hasHadBye(id, matches),\n        id: id, // is this shortcut necessary?\n        isDueBye: false,\n        opponentHistory: getPlayersByOpponent(id, matches),\n        profile: players[id],\n        rating: players[id].rating, // is this shortcut necessary?\n        score: getPlayerScore(id, matches),\n        upperHalf: false\n    });\n}\n\n/**\n * NOTE: these params are flipped. Should others be flipped too?\n * @returns {Object.<string, number>} {opponentId: result}\n */\nfunction getResultsByOpponent(matchList, playerId) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    const matches = getMatchesByPlayer(playerId, matchList);\n    return matches.reduce(\n        function (acc, match) {\n            const opponent = match.playerIds.filter(\n                (id) => id !== playerId\n            )[0];\n            const {result} = getMatchDetailsForPlayer(playerId, match);\n            // This sets a default result of 0 and then adds the existing\n            // result. Most of the time, this would be the same as using\n            // `set()` with the result, but if two players play each other\n            // multiple times then the total results will be displayed.\n            return over(\n                lensProp(opponent),\n                pipe(defaultTo(0), add(result)),\n                acc\n            );\n        },\n        {}\n    );\n}\nexport {getResultsByOpponent};\n\n/**\n * NOTE: these params are flipped. Should others be flipped too?\n */\nfunction getPerformanceRatings(matchList, playerId) {\n    Id(playerId);\n    t.list(Match)(matchList);\n    const matches = getMatchesByPlayer(playerId, matchList);\n    const firstMatch = matches[0];\n    const lastMatch = last(matches);\n    return [\n        getMatchDetailsForPlayer(playerId, firstMatch).origRating,\n        getMatchDetailsForPlayer(playerId, lastMatch).newRating\n    ];\n}\nexport {getPerformanceRatings};\n","// This file is a work in progress. The weighting for the ratings needs to be\n// tweaked a lot, and the pairing function itself needs to be cleaned up and\n// made more reusable.\nimport {\n    AvoidPair,\n    DUMMY_ID,\n    Id,\n    Player,\n    PlayerStats,\n    RoundList\n} from \"../data-types\";\nimport {\n    add,\n    assoc,\n    curry,\n    filter,\n    findLastIndex,\n    lensIndex,\n    map,\n    over,\n    pipe,\n    reverse,\n    sort,\n    splitAt,\n    view\n} from \"ramda\";\nimport blossom from \"edmonds-blossom\";\nimport {createPlayerStats} from \"./factories\";\nimport {firstBy} from \"thenby\";\nimport t from \"tcomb\";\n\nconst priority = (value) => (condition) => condition ? value : 0;\nconst divisiblePriority = (value) => (divider) => value / divider;\n\n// TODO: These probably need to be tweaked a lot.\n/**\n * @constant avoidMeetingTwicePriority The weight given to avoid players\n * meeting twice. This same weight is given to avoid matching players on each\n * other's \"avoid\" list. This is the highest priority. (USCF § 27A1)\n */\nconst avoidMeetingTwice = priority(20);\n/**\n * @constant sameScoresPriority The weight given to match players with\n * equal scores. This gets divided against the difference between each players'\n * scores, plus one. For example, players with scores `1` and `3` would have\n * this priority divided by `3`. Players with scores `0` and `3` would have this\n * priority divided by `4`. Players with equal scores would divide it by `1`,\n * leaving it unchanged. (USCF § 27A2)\n */\nconst sameScores = divisiblePriority(16);\n\n/**\n * @constant differentHalfPriority The weight given to match players in lower\n * versus upper halves. This is only applied to players being matched within\n * the same score group. (USCF § 27A3)\n */\nconst differentHalf = priority(2);\n/**\n * @constant differentDueColorPriority The weight given to match players with\n * opposite due colors. (USCF § 27A4 and § 27A5)\n */\nconst differentDueColor = priority(1);\n\nconst maxPriority = pipe(\n    add(differentHalf(true)),\n    add(differentDueColor(true)),\n    add(sameScores(1)),\n    add(avoidMeetingTwice(true))\n)(0);\nexport {maxPriority};\n\n/**\n * @returns {number}\n */\nexport function calcPairIdeal(player1, player2) {\n    PlayerStats(player1);\n    PlayerStats(player2);\n    if (player1.id === player2.id) {\n        return 0;\n    }\n    const metBefore = player1.opponentHistory.includes(player2.id);\n    const mustAvoid = player1.avoidList.includes(player2.id);\n    return pipe(\n        add(differentHalf(\n            player1.upperHalf !== player2.upperHalf\n            && player1.score === player2.score\n        )),\n        add(differentDueColor(\n            player1.dueColor === null\n            || player1.dueColor !== player2.dueColor\n        )),\n        add(sameScores(Math.abs(player1.score - player2.score) + 1)),\n        add(avoidMeetingTwice(!metBefore && !mustAvoid))\n    )(0);\n}\n\n/**\n * Determine which players are in the upper and lower halves of their score\n * groups.\n * This function does not sort the list. The list should be sorted first.\n */\nexport function setUpperHalves(playerStatsList) {\n    t.list(PlayerStats)(playerStatsList);\n    const splitInHalf = (list) => splitAt(list.length / 2, list);\n    return playerStatsList.reduce(\n        function (acc, player, ignore, src) {\n            const upperHalfIds = pipe(\n                filter((a) => a.score === player.score),\n                splitInHalf,\n                view(lensIndex(0)),\n                map((a) => a.id)\n            )(src);\n            const isUpperHalf = upperHalfIds.includes(player.id);\n            return acc.concat([assoc(\"upperHalf\", isUpperHalf, player)]);\n        },\n        []\n    );\n}\n\nfunction setByePlayer(byeQueue, playerStatsList) {\n    t.list(t.Number)(byeQueue);\n    t.list(PlayerStats)(playerStatsList);\n    // if the list is even, just return it.\n    if (playerStatsList.length % 2 === 0) {\n        return playerStatsList;\n    }\n    const hasNotHadBye = playerStatsList.filter(\n        (p) => !p.hasHadBye\n    ).map((p) => p.id);\n    const nextByeSignup = byeQueue.filter((id) => hasNotHadBye.includes(id))[0];\n    const indexOfDueBye = (\n        (nextByeSignup)\n        // Assign the bye to the next person who signed up.\n        ? findLastIndex((p) => p.id === nextByeSignup, playerStatsList)\n        // Assign a bye to the lowest-rated player in the lowest score group.\n        // Because the list is sorted, the last player is the lowest.\n        // (USCF § 29L2.)\n        : findLastIndex((p) => !p.hasHadBye, playerStatsList)\n    );\n    // In the impossible situation that *everyone* has played a bye round\n    // previously, then just pick the last player.\n    const index = (\n        (indexOfDueBye === -1)\n        ? playerStatsList.length - 1\n        : indexOfDueBye\n    );\n    return over(\n        lensIndex(index),\n        assoc(\"isDueBye\", true),\n        playerStatsList\n    );\n}\n\n/**\n * Sort the data so matchups default to order by score and rating.\n */\nexport function sortPlayersForPairing(playerStatsList) {\n    t.list(PlayerStats)(playerStatsList);\n    return sort(\n        firstBy(\n            (a, b) => b.score - a.score\n        ).thenBy(\n            (a, b) => b.rating - a.rating\n        ),\n        playerStatsList\n    );\n}\n\n/**\n * Creates pairings according to the rules specified in USCF § 27, § 28,\n * and § 29. This is a work in progress and does not account for all of the\n * rules yet.\n */\nexport default function pairPlayers({\n    players,\n    roundId,\n    roundList,\n    avoidList,\n    byeQueue\n}) {\n    t.Number(roundId);\n    t.dict(Id, Player)(players);\n    t.list(t.Number)(byeQueue);\n    RoundList(roundList);\n    t.list(AvoidPair)(avoidList);\n    const playerIds = Object.keys(players);\n    const playerStatsList = pipe(\n        map((id) => (\n            createPlayerStats({\n                avoidList,\n                id,\n                players,\n                roundId,\n                roundList\n            })\n        )),\n        sortPlayersForPairing,\n        setUpperHalves,\n        curry(setByePlayer)(byeQueue)\n    )(playerIds);\n    // Turn the data into blossom-compatible input.\n    const potentialMatches = playerStatsList.filter(\n        (p) => !p.isDueBye\n    ).reduce(\n        function (acc, player1, ignore, src) {\n            const playerMatches = src.map(\n                (player2) => [\n                    playerIds.indexOf(player1.id),\n                    playerIds.indexOf(player2.id),\n                    calcPairIdeal(player1, player2)\n                ]\n            );\n            return acc.concat(playerMatches);\n        },\n        []\n    );\n    // Feed all of the potential matches to Edmonds-blossom and let the\n    // algorithm work its magic. This returns an array where each index is the\n    // ID of one player and each value is the ID of the matched player.\n    const blossomResults = blossom(potentialMatches);\n    // Translate those IDs into actual pairs of player Ids.\n    const reducedResults = blossomResults.reduce(\n        function (acc, p1Index, p2Index) {\n            // Filter out unmatched players. Blossom will automatically include\n            // their missing IDs in its results.\n            if (p1Index !== -1) {\n                // const p1 = playerStatsList.filter((p) => p.id === p1Id)[0];\n                // const p2 = playerStatsList.filter((p) => p.id === p2Id)[0];\n                // Translate the indices into ID strings\n                const p1Id = playerIds[p1Index];\n                const p2Id = playerIds[p2Index];\n                const p1 = playerStatsList.filter((p) => p.id === p1Id)[0];\n                const p2 = playerStatsList.filter((p) => p.id === p2Id)[0];\n                // const ideal = potentialMatches.filter(\n                //     (pair) => pair[0] === p1Id && pair[1] === p2Id\n                // )[0][2];\n                // Blossom returns a lot of redundant matches. Check that this\n                // matchup wasn't already added.\n                const matched = acc.map((pair) => pair[0]);\n                if (!matched.includes(p1) && !matched.includes(p2)) {\n                    return acc.concat([[p1, p2]]);\n                }\n            }\n            return acc;\n        },\n        []\n    );\n    // Sort by net score and rating for board placement.\n    const sortedResults = sort(\n        firstBy((pair1, pair2) => (\n            pair2[0].score + pair2[1].score - pair1[0].score - pair1[1].score\n        )).thenBy((pair1, pair2) => (\n            pair2[0].rating + pair2[1].rating\n            - pair1[0].rating - pair1[1].rating\n        )),\n        reducedResults\n    );\n    const matches = sortedResults.map(\n        function (pair) {\n            const player1 = pair[0];\n            const player2 = pair[1];\n            const match = [player1.id, player2.id];\n            if (player1.colorBalance < player2.colorBalance) {\n                return reverse(match);\n            }\n            return match;\n        }\n    );\n    // The bye match always gets added last so the the numbering isn't affected.\n    const byePlayer = playerStatsList.filter((p) => p.isDueBye)[0];\n    if (byePlayer) {\n        return matches.concat([[byePlayer.id, DUMMY_ID]]);\n    }\n    return matches;\n}\n","import Alert from \"react-feather/dist/icons/alert-triangle\";\nimport ArrowDown from \"react-feather/dist/icons/arrow-down\";\nimport ArrowUp from \"react-feather/dist/icons/arrow-up\";\nimport ArrowUpLeft from \"react-feather/dist/icons/arrow-up-left\";\nimport Check from \"react-feather/dist/icons/check\";\nimport ChevronLeft from \"react-feather/dist/icons/chevron-left\";\nimport ChevronRight from \"react-feather/dist/icons/chevron-right\";\nimport Edit from \"react-feather/dist/icons/edit\";\nimport Info from \"react-feather/dist/icons/info\";\nimport Javascript from \"simple-icons/icons/javascript\";\nimport Layers from \"react-feather/dist/icons/layers\";\nimport List from \"react-feather/dist/icons/list\";\nimport Plus from \"react-feather/dist/icons/plus\";\nimport React from \"react\";\nimport ReactIcon from \"simple-icons/icons/react\";\nimport Repeat from \"react-feather/dist/icons/repeat\";\nimport Settings from \"react-feather/dist/icons/settings\";\nimport Trash from \"react-feather/dist/icons/trash-2\";\nimport UserMinus from \"react-feather/dist/icons/user-minus\";\nimport UserPlus from \"react-feather/dist/icons/user-plus\";\nimport Users from \"react-feather/dist/icons/users\";\nimport X from \"react-feather/dist/icons/x\";\n\nconst simpleIcon = (icon) => (props) => (\n    <span\n        dangerouslySetInnerHTML={{__html: icon.svg}}\n        aria-label={icon.title}\n        role=\"img\"\n        style={{fill: \"#\" + icon.hex}}\n        {...props}\n    />\n);\n\nexport default {\n    Alert,\n    ArrowDown,\n    ArrowUp,\n    ArrowUpLeft,\n    Check,\n    ChevronLeft,\n    ChevronRight,\n    Edit,\n    Info,\n    Javascript: simpleIcon(Javascript),\n    Layers,\n    List,\n    Plus,\n    React: simpleIcon(ReactIcon),\n    Repeat,\n    Settings,\n    Trash,\n    UserMinus,\n    UserPlus,\n    Users,\n    X\n};\n","import {assoc, dissoc} from \"ramda\";\nimport {createPlayer, createTournament} from \"../../data-types\";\nimport nanoid from \"nanoid\";\nimport t from \"tcomb\";\n\nconst ActionLoadState = t.interface({\n    state: t.Any\n});\nconst ActionDelItem = t.interface({\n    id: t.String\n});\nconst ActionAddItem = t.interface({\n    item: t.Any\n});\nconst ActionAddTourney = t.interface({\n    name: t.String\n});\nconst AdctionAddPlayer = t.interface({\n    firstName: t.String,\n    lastName: t.String,\n    rating: t.Number\n});\nconst ActionTypes = t.union([\n    ActionLoadState,\n    ActionDelItem,\n    ActionAddItem,\n    AdctionAddPlayer,\n    ActionAddTourney\n]);\nActionTypes.dispatch = function (x) {\n    const typeToConstructor = {\n        \"ADD_ITEM\": ActionAddItem,\n        \"ADD_PLAYER\": AdctionAddPlayer,\n        \"ADD_TOURNEY\": ActionAddTourney,\n        \"DEL_ITEM\": ActionDelItem,\n        \"LOAD_STATE\": ActionLoadState\n    };\n    return typeToConstructor[x.type];\n};\n\nexport default function genericDbReducer(state, action) {\n    ActionTypes(action);\n    const nextId = nanoid();\n    switch (action.type) {\n    case \"ADD_ITEM\":\n        console.warn(\"Use a more specific action instead, please.\");\n        return assoc(nextId, action.item, state);\n    case \"ADD_TOURNEY\":\n        return assoc(\n            nextId,\n            createTournament({id: nextId, name: action.name}),\n            state\n        );\n    case \"ADD_PLAYER\":\n        return assoc(\n            nextId,\n            createPlayer({\n                firstName: action.firstName,\n                id: nextId,\n                lastName: action.lastName,\n                rating: action.rating\n            }),\n            state\n        );\n    case \"DEL_ITEM\":\n        // If using the player DB, be sure to delete avoid-pairs too.\n        return dissoc(action.id, state);\n    case \"LOAD_STATE\":\n        return action.state;\n    default:\n        throw new Error(\"Unexpected action type\");\n    }\n}\n","import {AvoidPair, Id} from \"../../data-types\";\nimport {append, assoc, filter, lensProp, over} from \"ramda\";\nimport t from \"tcomb\";\n\nconst ActionLoadState = t.interface({\n    state: t.Any\n});\nconst ActionSetOption = t.interface({\n    option: t.String,\n    value: t.union([\n        t.Number,\n        t.list(AvoidPair)\n    ])\n});\nconst ActionAvoidPair = t.interface({\n    pair: AvoidPair\n});\nconst ActionAvoidSingle = t.interface({\n    id: Id\n});\nconst ActionTypes = t.union([\n    ActionLoadState,\n    ActionAvoidPair,\n    ActionAvoidSingle\n]);\nActionTypes.dispatch = function (x) {\n    const typeToConstructor = {\n        \"ADD_AVOID_PAIR\": ActionAvoidPair,\n        \"DEL_AVOID_PAIR\": ActionAvoidPair,\n        \"DEL_AVOID_SINGLE\": ActionAvoidSingle,\n        \"LOAD_STATE\": ActionLoadState,\n        \"SET_OPTION\": ActionSetOption\n    };\n    return typeToConstructor[x.type];\n};\n\nexport default function optionsReducer(state, action) {\n    ActionTypes(action);\n    switch (action.type) {\n    case \"ADD_AVOID_PAIR\":\n        return over(\n            lensProp(\"avoidPairs\"),\n            append(action.pair),\n            state\n        );\n    case \"DEL_AVOID_PAIR\":\n        return over(\n            lensProp(\"avoidPairs\"),\n            filter((pair) => !(\n                pair.includes(action.pair[0]) && pair.includes(action.pair[1])\n            )),\n            state\n        );\n    case \"DEL_AVOID_SINGLE\":\n        // call this when you delete a player ID\n        // TODO: make the avoidPairs list smartly auto-clean itself\n        return over(\n            lensProp(\"avoidPairs\"),\n            filter((pair) => !pair.includes(action.id)),\n            state\n        );\n    case \"SET_OPTION\":\n        return assoc(\n            action.option,\n            action.value,\n            state\n        );\n    case \"LOAD_STATE\":\n        return action.state;\n    default:\n        throw new Error(\"Unexpected action type.\");\n    }\n}\n\n","import {Id, createPlayer} from \"../../data-types\";\nimport {\n    assoc,\n    dissoc,\n    lensPath,\n    lensProp,\n    mergeLeft,\n    over,\n    set\n} from \"ramda\";\nimport nanoid from \"nanoid\";\nimport t from \"tcomb\";\n\nconst ActionSetPlayer = t.interface({\n    firstName: t.String,\n    id: Id,\n    lastName: t.String,\n    matchCount: t.Number,\n    rating: t.Number\n});\nconst ActionAddPlayer = t.interface({\n    firstName: t.String,\n    lastName: t.String,\n    rating: t.Number\n});\nconst ActionDelPlayer = t.interface({\n    id: Id\n});\nconst ActionSetMatchcount = t.interface({\n    id: Id,\n    matchCount: t.Number\n});\nconst ActionSetRating = t.interface({\n    id: Id,\n    rating: t.Number\n});\nconst ActionLoadState = t.interface({state: t.Any});\nconst ActionTypes = t.union([\n    ActionSetPlayer,\n    ActionAddPlayer,\n    ActionDelPlayer,\n    ActionSetMatchcount,\n    ActionSetRating,\n    ActionLoadState\n]);\nActionTypes.dispatch = function (x) {\n    const typeToConstructor = {\n        \"ADD_PLAYER\": ActionAddPlayer,\n        \"DEL_PLAYER\": ActionDelPlayer,\n        \"LOAD_STATE\": ActionLoadState,\n        \"SET_PLAYER\": ActionSetPlayer,\n        \"SET_PLAYER_MATCHCOUNT\": ActionSetMatchcount,\n        \"SET_PLAYER_RATING\": ActionSetRating\n    };\n    return typeToConstructor[x.type];\n};\n\nexport default function playersReducer(state, action) {\n    ActionTypes(action);\n    const nextId = nanoid();\n    switch (action.type) {\n    case \"ADD_PLAYER\":\n        return assoc(\n            nextId,\n            createPlayer({\n                firstName: action.firstName,\n                id: nextId,\n                lastName: action.lastName,\n                rating: action.rating\n            }),\n            state\n        );\n    case \"SET_PLAYER\":\n        return over(\n            lensProp(action.id),\n            mergeLeft(\n                {\n                    firstName: action.firstName,\n                    lastName: action.lastName,\n                    matchCount: action.matchCount,\n                    rating: action.rating\n                }\n            ),\n            state\n        );\n    case \"DEL_PLAYER\":\n        // You should delete all avoid-pairs with the id too.\n        return dissoc(\n            lensPath(action.id),\n            state\n        );\n    case \"SET_PLAYER_MATCHCOUNT\":\n        return set(\n            lensPath([action.id, \"matchCount\"]),\n            action.matchCount,\n            state\n        );\n    case \"SET_PLAYER_RATING\":\n        return set(\n            lensPath([action.id, \"rating\"]),\n            action.rating,\n            state\n        );\n    case \"LOAD_STATE\":\n        return action.state;\n    default:\n        throw new Error(\"Unexpected action type\");\n    }\n}\n","// TODO: this file needs to be replaced with something more organized.\nimport {\n    AvoidPair,\n    BLACK,\n    DUMMY_ID,\n    Id,\n    Player,\n    Tournament,\n    WHITE,\n    createMatch\n} from \"../../data-types\";\nimport {getPlayerMaybe, pairPlayers} from \"../../pairing-scoring\";\nimport {assoc} from \"ramda\";\nimport t from \"tcomb\";\n\nexport function autoPair({\n    avoidList,\n    byeValue,\n    players,\n    roundId,\n    tourney\n}) {\n    t.list(AvoidPair)(avoidList);\n    t.Number(byeValue);\n    Tournament(tourney);\n    t.dict(Id, Player)(players);\n    t.Number(roundId);\n    const roundList = tourney.roundList;\n    const pairs = pairPlayers({\n        avoidList: avoidList,\n        byeQueue: tourney.byeQueue,\n        players,\n        roundId,\n        roundList\n    });\n    console.log(\"pairs\", pairs);\n    console.log(\"players\", players);\n    const getPlayer = (id) => getPlayerMaybe(players, id); // curry\n    const newMatchList = pairs.map(\n        (idsPair) => (\n            createMatch({\n                newRating: [\n                    getPlayer(idsPair[WHITE]).rating,\n                    getPlayer(idsPair[BLACK]).rating\n                ],\n                origRating: [\n                    getPlayer(idsPair[WHITE]).rating,\n                    getPlayer(idsPair[BLACK]).rating\n                ],\n                playerIds: [idsPair[WHITE], idsPair[BLACK]]\n            })\n        )\n    );\n    return newMatchList.reduce(\n        // Set match results for bye matches\n        function (acc, match) {\n            if (match.playerIds[WHITE] === DUMMY_ID) {\n                return acc.concat([assoc(\"result\", [0, byeValue], match)]);\n            }\n            if (match.playerIds[BLACK] === DUMMY_ID) {\n                return acc.concat([assoc(\"result\", [byeValue, 0], match)]);\n            }\n            return acc.concat([match]);\n        },\n        []\n    );\n}\n\nexport function manualPair(pair, byeValue) {\n    t.tuple([Player, Player])(pair);\n    const match = createMatch({\n        newRating: [pair[WHITE].rating, pair[BLACK].rating],\n        origRating: [pair[WHITE].rating, pair[BLACK].rating],\n        playerIds: [pair[WHITE].id, pair[BLACK].id]\n    });\n    if (pair[WHITE].id === DUMMY_ID) {\n        return assoc(\"result\", [0, byeValue], match);\n    }\n    if (pair[BLACK].id === DUMMY_ID) {\n        return assoc(\"result\", [byeValue, 0], match);\n    }\n    return match;\n}\n","import {AvoidPair, Id, Player} from \"../../data-types\";\nimport {\n    __,\n    append,\n    assoc,\n    concat,\n    filter,\n    findIndex,\n    lensPath,\n    lensProp,\n    mergeRight,\n    move,\n    over,\n    pipe,\n    propEq,\n    remove,\n    reverse,\n    set\n} from \"ramda\";\nimport {autoPair, manualPair} from \"./match-functions\";\nimport t from \"tcomb\";\n\nconst ActionAddRound = t.interface({});\nconst ActionDelLastRound = t.interface({});\nconst ActionAddRemoveTieBreak = t.interface({\n    id: t.Number\n});\nconst ActionMoveTieBreak = t.interface({\n    newIndex: t.Number,\n    oldIndex: t.Number\n});\nconst ActionSetTourneyPlayers = t.interface({\n    playerIds: t.list(Id)\n});\nconst ActionSetByeQueue = t.interface({\n    byeQueue: t.list(Id)\n});\nconst ActionAutoPair = t.interface({\n    avoidList: t.list(AvoidPair),\n    byeValue: t.Number,\n    players: t.dict(Id, Player),\n    roundId: t.Number\n});\nconst ActionManualPair = t.interface({\n    byeValue: t.Number,\n    pair: t.tuple([Player, Player]),\n    roundId: t.Number\n});\nconst ActionSetMatchResult = t.interface({\n    matchId: t.String,\n    newRating: t.tuple([t.Number, t.Number]),\n    result: t.tuple([t.Number, t.Number]),\n    roundId: t.Number\n});\nconst ActionEditMatch = t.interface({\n    matchId: t.String,\n    roundId: t.Number\n});\nconst ActionMoveMatch = t.interface({\n    newIndex: t.Number,\n    oldIndex: t.Number,\n    roundId: t.Number\n});\nconst ActionSetName = t.interface({\n    name: t.String\n});\nconst ActionSetDate = t.interface({\n    date: Date\n});\nconst ActionLoadState = t.interface({\n    state: t.Any\n});\nconst ActionTypes = t.union([\n    ActionAddRound,\n    ActionDelLastRound,\n    ActionAddRemoveTieBreak,\n    ActionAddRemoveTieBreak,\n    ActionMoveTieBreak,\n    ActionSetName,\n    ActionSetTourneyPlayers,\n    ActionSetByeQueue,\n    ActionSetDate,\n    ActionAutoPair,\n    ActionManualPair,\n    ActionSetMatchResult,\n    ActionEditMatch,\n    ActionMoveMatch\n]);\nActionTypes.dispatch = function (action) {\n    const typeToConstructor = {\n        \"ADD_ROUND\": ActionAddRound,\n        \"ADD_TIEBREAK\": ActionAddRemoveTieBreak,\n        \"AUTO_PAIR\": ActionAutoPair,\n        \"DEL_LAST_ROUND\": ActionDelLastRound,\n        \"DEL_MATCH\": ActionEditMatch,\n        \"DEL_TIEBREAK\": ActionAddRemoveTieBreak,\n        \"MANUAL_PAIR\": ActionManualPair,\n        \"MOVE_MATCH\": ActionMoveMatch,\n        \"MOVE_TIEBREAK\": ActionMoveTieBreak,\n        \"SET_BYE_QUEUE\": ActionSetByeQueue,\n        \"SET_DATE\": ActionSetDate,\n        \"SET_MATCH_RESULT\": ActionSetMatchResult,\n        \"SET_NAME\": ActionSetName,\n        \"SET_STATE\": ActionLoadState,\n        \"SET_TOURNEY_PLAYERS\": ActionSetTourneyPlayers,\n        \"SWAP_COLORS\": ActionEditMatch\n    };\n    return typeToConstructor[action.type];\n};\n\nexport default function tournamentReducer(state, action) {\n    ActionTypes(action);\n    switch (action.type) {\n    case \"ADD_ROUND\":\n        return over(\n            lensProp(\"roundList\"),\n            append([]),\n            state\n        );\n    case \"DEL_LAST_ROUND\":\n        return over(\n            lensProp(\"roundList\"),\n            remove(-1, 1),\n            state\n        );\n    case \"ADD_TIEBREAK\":\n        return over(\n            lensProp(\"tieBreaks\"),\n            append(action.id),\n            state\n        );\n    case \"DEL_TIEBREAK\":\n        return over(\n            lensProp(\"tieBreaks\"),\n            filter((id) => id !== action.id),\n            state\n        );\n    case \"MOVE_TIEBREAK\":\n        return over(\n            lensProp(\"tieBreaks\"),\n            move(action.oldIndex, action.newIndex),\n            state\n        );\n    case \"SET_TOURNEY_PLAYERS\":\n        return assoc(\n            \"playerIds\",\n            action.playerIds,\n            state\n        );\n    case \"SET_BYE_QUEUE\":\n        return assoc(\n            \"byeQueue\",\n            action.byeQueue,\n            state\n        );\n    case \"SET_NAME\":\n        return assoc(\n            \"name\",\n            action.name,\n            state\n        );\n    case \"AUTO_PAIR\":\n        return over(\n            lensPath([\"roundList\", action.roundId]),\n            concat(\n                __,\n                autoPair({\n                    avoidList: action.avoidList,\n                    byeValue: action.byeValue,\n                    players: action.players,\n                    roundId: action.roundId,\n                    tourney: state\n                })\n            ),\n            state\n        );\n    case \"MANUAL_PAIR\":\n        return over(\n            lensPath([\"roundList\", action.roundId]),\n            append(manualPair(action.pair, action.byeValue)),\n            state\n        );\n    case \"SET_DATE\":\n        return assoc(\n            \"date\",\n            action.date,\n            state\n        );\n    case \"SET_MATCH_RESULT\":\n        return pipe(\n            set(\n                lensPath([\n                    \"roundList\",\n                    action.roundId,\n                    findIndex(\n                        propEq(\"id\", action.matchId),\n                        state.roundList[action.roundId]\n                    ),\n                    \"result\"\n                ]),\n                action.result\n            ),\n            set(\n                lensPath([\n                    \"roundList\",\n                    action.roundId,\n                    findIndex(\n                        propEq(\"id\", action.matchId),\n                        state.roundList[action.roundId]\n                    ),\n                    \"newRating\"\n                ]),\n                action.newRating,\n            ),\n        )(state);\n    case \"DEL_MATCH\":\n        return over(\n            lensPath([\"roundList\", action.roundId]),\n            filter((match) => match.id !== action.matchId),\n            state\n        );\n    case \"SWAP_COLORS\":\n        return over(\n            lensPath([\n                \"roundList\",\n                action.roundId,\n                findIndex(\n                    propEq(\"id\", action.matchId),\n                    state.roundList[action.roundId]\n                )\n            ]),\n            (match) => mergeRight(\n                match,\n                {\n                    newRating: reverse(match.newRating),\n                    origRating: reverse(match.origRating),\n                    playerIds: reverse(match.playerIds),\n                    result: reverse(match.result)\n                }\n            ),\n            state\n        );\n    case \"MOVE_MATCH\":\n        return over(\n            lensPath([\"roundList\", action.roundId]),\n            move(action.oldIndex, action.newIndex),\n            state\n        );\n    case \"SET_STATE\":\n        console.log(\"setting state:\", action.state);\n        return action.state;\n    default:\n        throw new Error(\"Unexpected action type \" + action.type);\n    }\n}\n","import {Id, Player, Tournament} from \"../data-types\";\nimport fromJSON from \"tcomb/lib/fromJSON\";\nimport options from \"./options.json\";\nimport players from \"./players.json\";\nimport t from \"tcomb\";\nimport tournaments from \"./tournaments.json\";\n\nexport default {\n    options,\n    players: t.dict(Id, Player)(players),\n    tournaments: fromJSON(tournaments, t.dict(t.String, Tournament))\n};\n","import \"localforage-getitems\";\nimport {genericDbReducer, optionsReducer} from \"./reducers\";\nimport {useEffect, useReducer, useState} from \"react\";\nimport demoData from \"../demo-data\";\nimport {difference} from \"ramda\";\nimport localForage from \"localforage\";\nimport {extendPrototype as removeItemsPrototype} from \"localforage-removeitems\";\nimport {extendPrototype as setItemsPrototype} from \"localforage-setitems\";\n\n/*******************************************************************************\n * Initialize the databases\n ******************************************************************************/\nsetItemsPrototype(localForage);\nremoveItemsPrototype(localForage);\nconst DATABASE_NAME = \"Chessahoochee\";\nconst optionsStore = localForage.createInstance({\n    name: DATABASE_NAME,\n    storeName: \"Options\"\n});\nconst playerStore = localForage.createInstance({\n    name: DATABASE_NAME,\n    storeName: \"Players\"\n});\nconst tourneyStore = localForage.createInstance({\n    name: DATABASE_NAME,\n    storeName: \"Tournaments\"\n});\n\nexport {optionsStore, playerStore, tourneyStore};\n\nexport function loadDemoDB() {\n    optionsStore.setItems(demoData.options);\n    playerStore.setItems(demoData.players);\n    tourneyStore.setItems(demoData.tournaments);\n    window.alert(\"Demo data loaded!\");\n}\n\n/*******************************************************************************\n * Generic database hooks\n ******************************************************************************/\nfunction useAllItemsFromDb(store) {\n    const [items, dispatch] = useReducer(genericDbReducer, {});\n    const [isLoaded, setIsLoaded] = useState(false);\n    useEffect(\n        function loadItemsFromDb() {\n            store.getItems().then(function (results) {\n                console.log(\"loaded items from\", store._config.storeName);\n                dispatch({state: results, type: \"LOAD_STATE\"});\n                setIsLoaded(true);\n            });\n        },\n        [store]\n    );\n    useEffect(\n        function saveChangesToDb() {\n            if (!isLoaded) {\n                return;\n            }\n            store.setItems(items).then(function () {\n                console.log(\"saved items to\", store._config.storeName);\n            });\n            store.keys().then(function (keys) {\n                const deleted = difference(keys, Object.keys(items));\n                if (deleted.length > 0 ) {\n                    store.removeItems(deleted).then(function () {\n                        console.log(\"Deleted \" + deleted.length + \" items.\");\n                    });\n                }\n            });\n        },\n        [store, items, isLoaded]\n    );\n    return [items, dispatch];\n}\n\n/*******************************************************************************\n * Player & tournament wrapper hooks\n ******************************************************************************/\nexport function useAllPlayersDb() {\n    return useAllItemsFromDb(playerStore);\n}\n\nexport function useAllTournamentsDb() {\n    return useAllItemsFromDb(tourneyStore);\n}\n\n/*******************************************************************************\n * Options database hooks\n ******************************************************************************/\nexport function useOptionsDb() {\n    const [options, dispatch] = useReducer(optionsReducer, demoData.options);\n    const [isLoaded, setIsLoaded] = useState(false);\n    useEffect(\n        function initOptionsFromDb() {\n            optionsStore.iterate(function (value, key) {\n                dispatch({option: key, type: \"SET_OPTION\", value: value});\n            }).then(function () {\n                setIsLoaded(true);\n            });\n        },\n        []\n    );\n    useEffect(\n        function writeChangesToDb() {\n            if (!isLoaded) {\n                return;\n            }\n            optionsStore.setItems(options);\n        },\n        [options, isLoaded]\n    );\n    return [options, dispatch];\n}\n","import React, {\n    createContext,\n    useContext,\n    useEffect,\n    useReducer,\n    useState\n} from \"react\";\nimport {\n    getAllPlayersFromMatches,\n    getPlayerMaybe,\n    rounds2Matches\n} from \"../pairing-scoring\";\nimport {playerStore, tourneyStore} from \"./db\";\nimport {playersReducer, tournamentReducer} from \"./reducers\";\nimport PropTypes from \"prop-types\";\nimport {symmetricDifference} from \"ramda\";\n\nconst TournamentContext = createContext(null);\n\nexport function useTournament() {\n    const state = useContext(TournamentContext);\n    return state;\n}\n\nexport function TournamentProvider({children, tourneyId}) {\n    const [tourney, tourneyDispatch] = useReducer(tournamentReducer, {});\n    const [players, playersDispatch] = useReducer(playersReducer, {});\n    const [isTourneyLoaded, setIsTourneyLoaded] = useState(false);\n    const [isPlayersLoaded, setIsPlayersLoaded] = useState(false);\n    useEffect(\n        function initTourneyFromDb() {\n            tourneyStore.getItem(tourneyId).then(function (value) {\n                console.log(\"loaded:\", tourneyId);\n                tourneyDispatch({state: value, type: \"SET_STATE\"});\n                setIsTourneyLoaded(true);\n            });\n        },\n        [tourneyId]\n    );\n    useEffect(\n        function hydrateTourneyPlayersFromDb() {\n            if (!tourney.roundList || !tourney.playerIds) {\n                return; // the tournament hasn't been loaded yet\n            }\n            // Include players who have played matches but left the tournament,\n            // as well as players who are registered but havne't played yet.\n            const allTheIds = getAllPlayersFromMatches(\n                rounds2Matches(tourney.roundList)\n            ).concat(\n                tourney.playerIds\n            );\n            // If there are no ids, update the player state and exit early.\n            if (allTheIds.length === 0) {\n                // This check prevents an infinite loop & memory leak.\n                if (Object.keys(players).length !== 0) {\n                    playersDispatch({state: {}, type: \"LOAD_STATE\"});\n                }\n                setIsPlayersLoaded(true);\n                return;\n            }\n            playerStore.getItems(allTheIds).then(function (values) {\n                // This safeguards against trying to fetch dummy IDs or IDs from\n                // deleted players. If we updated without this condition, then\n                // this `useEffect` would trigger an infinite loop and a memory\n                // leak.\n                const unChangedPlayers = symmetricDifference(\n                    Object.keys(values),\n                    Object.keys(players)\n                );\n                console.log(\"unchanged players:\", unChangedPlayers);\n                if (unChangedPlayers.length !== 0) {\n                    console.log(\"hydrated player data\");\n                    playersDispatch({state: values, type: \"LOAD_STATE\"});\n                }\n                setIsPlayersLoaded(true);\n            }).catch(function (error) {\n                console.error(\"Couldn't load ids:\", allTheIds);\n                console.error(error);\n            });\n        },\n        [tourney.roundList, players, tourney.playerIds]\n    );\n    useEffect(\n        function saveTourneyToDb() {\n            if (!isTourneyLoaded) {\n                return;\n            }\n            tourneyStore.setItem(tourneyId, tourney).catch(function (error) {\n                console.log(\"error saving tourney:\", tourneyId, error);\n            });\n        },\n        [tourneyId, tourney, isTourneyLoaded]\n    );\n    useEffect(\n        function savePlayersToDb() {\n            if (!isPlayersLoaded) {\n                return;\n            }\n            playerStore.setItems(players).then(function (values) {\n                console.log(\"saved player changes to DB:\", values);\n            }).catch(function (error) {\n                console.log(\"couldn't save players to DB:\", error);\n            });\n        },\n        [players, isPlayersLoaded]\n    );\n    const getPlayer = (id) => getPlayerMaybe(players, id); // curry\n    if (!isTourneyLoaded || !isPlayersLoaded) {\n        return <div>Loading...</div>;\n    }\n    return (\n        <TournamentContext.Provider\n            value={{\n                getPlayer,\n                players,\n                playersDispatch,\n                tourney,\n                tourneyDispatch\n            }}\n        >\n            {children}\n        </TournamentContext.Provider>\n    );\n}\nTournamentProvider.propTypes = {\n    children: PropTypes.node.isRequired,\n    tourneyId: PropTypes.string.isRequired\n};\n","import {\n    TournamentProvider,\n    useTournament\n} from \"./tournament-provider\";\nimport {\n    useAllPlayersDb,\n    useAllTournamentsDb,\n    useOptionsDb\n    // usePlayersDb,\n    // useTournamentDb\n} from \"./db\";\nimport {useEffect} from \"react\";\n\nexport function useDocumentTitle(title) {\n    useEffect(\n        function () {\n            const origTitle = document.title;\n            document.title = \"Chessahoochee: \" + title;\n            return function () {\n                document.title = origTitle;\n            };\n        },\n        [title]\n    );\n}\n\nexport {\n    useAllPlayersDb,\n    useAllTournamentsDb,\n    useOptionsDb,\n    useTournament,\n    TournamentProvider\n};\n","import {\n    createStandingList,\n    getPerformanceRatings,\n    getResultsByOpponent,\n    rounds2Matches\n} from \"../../pairing-scoring\";\nimport Icons from \"../icons\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {assoc} from \"ramda\";\nimport numeral from \"numeral\";\nimport style from \"./scores.module.css\";\nimport {useTournament} from \"../../hooks\";\n\nexport default function Crosstable(props) {\n    const {tourney, getPlayer} = useTournament();\n    const {tieBreaks, roundList} = tourney;\n    const matches = rounds2Matches(roundList);\n    const oppResults = (id) => getResultsByOpponent(matches, id); // curry\n    const [standings] = createStandingList(tieBreaks, roundList);\n    const opponentScores = standings.reduce(\n        (acc, {id}) => assoc(id, oppResults(id), acc),\n        {}\n    );\n\n    function getXScore(player1Id, player2Id) {\n        if (player1Id === player2Id) {\n            return <Icons.X/>;\n        }\n        const result = opponentScores[player1Id][player2Id];\n        if (result === undefined) {\n            return null;\n        }\n        return numeral(result).format(\"1/2\");\n    }\n\n    function getRatingChange(playerId) {\n        const [\n            firstRating,\n            lastRating\n        ] = getPerformanceRatings(matches, playerId);\n        const change = numeral(lastRating - firstRating).format(\"+0\");\n        return `${lastRating}\\xA0(${change})`; // \\xA0 = &nsbp;\n    }\n\n    return (\n        <table className={style.table}>\n            <caption>Crosstable</caption>\n            <tbody>\n                <tr>\n                    <th>Rank</th>\n                    <th>Name</th>\n                    {/* Display a rank as a shorthand for each player. */}\n                    {Object.keys(standings).map((rank) =>\n                        <th key={rank}>\n                            {Number(rank) + 1}\n                        </th>\n                    )}\n                    <th>Score</th>\n                    <th>Rating</th>\n                </tr>\n                {/* Output a row for each player */}\n                {standings.map((standing, index)=>\n                    <tr key={index} className={style.row}>\n                        <th className={style.rank} scope=\"col\">\n                            {index + 1}\n                        </th>\n                        <th className={style.playerName} scope=\"row\">\n                            {getPlayer(standing.id).firstName}&nbsp;\n                            {getPlayer(standing.id).lastName}\n                        </th>\n                        {/* Output a cell for each other player */}\n                        {standings.map((opponent, index2) =>\n                            <td key={index2} className=\"table__number\">\n                                {getXScore(standing.id, opponent.id)}\n                            </td>\n                        )}\n                        {/* Output their score and rating change */}\n                        <td className=\"table__number\">\n                            {numeral(standing.score).format(\"1/2\")}\n                        </td>\n                        <td className=\"table__number\">\n                            {getRatingChange(standing.id)}\n                        </td>\n                    </tr>\n                )}\n            </tbody>\n        </table>\n    );\n}\nCrosstable.propTypes = {\n    tourneyId: PropTypes.string\n};\n","import Icons from \"./icons\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {omit} from \"ramda\";\nimport styles from \"./utility.module.css\";\n// import {usePlayers} from \"../state\";\n\nexport const Button = ({children, action}) => (\n    <button onClick={action}>\n        {children}\n    </button>\n);\nButton.propTypes = {\n    action: PropTypes.func.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport const BackButton = ({action}) => (\n    <Button action={action}>&lt; Back</Button>\n);\nBackButton.propTypes = {\n    action: PropTypes.func.isRequired\n};\n\nexport const OpenButton = ({action}) => (\n    <Button action={action}>Open &gt;</Button>\n);\nOpenButton.propTypes = {\n    action: PropTypes.func.isRequired\n};\n\nexport function Panel({children, style}) {\n    return (\n        <div className={styles.panel} style={{...style}}>\n            {children}\n        </div>\n    );\n}\nPanel.propTypes = {\n    children: PropTypes.node.isRequired,\n    style: PropTypes.object\n};\n\nexport function PanelContainer(props) {\n    return (\n        <div {...props} className={styles.panels}>\n            {props.children}\n            {/* {React.Children.map(props.children, (child) => child)} */}\n        </div>\n    );\n}\nPanelContainer.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport function DateFormat(props) {\n    const dateFormat = new Intl.DateTimeFormat(\n        \"en-US\",\n        {\n            day: \"2-digit\",\n            month: \"short\",\n            year: \"numeric\"\n        }\n    );\n    const cleanProps = omit([\"date\"], props);\n    return (\n        <time dateTime={props.date.toISOString()} {...cleanProps}>\n            {dateFormat.format(props.date)}\n        </time>\n    );\n}\nDateFormat.propTypes = {\n    date: PropTypes.instanceOf(Date)\n};\n\nexport function Notification(props) {\n    const [icon, className] = (function () {\n        if (props.success) {\n            return [<Icons.Check />, \"notification__success\"];\n        } else if (props.warning) {\n            return [<Icons.Alert />, \"notification__warning\"];\n        } else if (props.error) {\n            return [<Icons.X />, \"notification__error\"];\n        } else {\n            return [<Icons.Info />, \"notification__generic\"];\n        }\n    }());\n    const cleanProps = omit([\"warning\", \"error\", \"success\"], props);\n    return (\n        <div {...cleanProps} className={\"notification \" + className}>\n            <div className=\"notification__icon\">\n                {icon}\n            </div>\n            <div className=\"notification__text\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\nNotification.propTypes = {\n    children: PropTypes.node.isRequired,\n    error: PropTypes.bool,\n    success: PropTypes.bool,\n    warning: PropTypes.bool\n};\n\n/*******************************************************************************\n * Non-JSX functions\n ******************************************************************************/\nexport function findById(id, list) {\n    return list.filter((x) => x.id === id)[0];\n}\n\nexport function findIndexById(id, list) {\n    return list.indexOf(findById(id, list));\n}\n","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {assoc} from \"ramda\";\n\nexport default function NewPlayer({dispatch}) {\n    const newPlayerDefault = {firstName: \"\", lastName: \"\", rating: 1200};\n    const [newPlayerData, setNewPlayerdata] = useState(newPlayerDefault);\n\n    const handleSubmit = function (event) {\n        event.preventDefault();\n        const {firstName, lastName, rating} = newPlayerData;\n        setNewPlayerdata(newPlayerDefault);\n        dispatch({firstName, lastName, rating, type: \"ADD_PLAYER\"});\n    };\n\n    const updateField = function (event) {\n        event.preventDefault();\n        const {name, value} = event.currentTarget;\n        setNewPlayerdata((prevState) => assoc(name, value, prevState));\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <fieldset>\n                <legend>Register a new player</legend>\n                <p>\n                    <label htmlFor=\"firstName\">First name</label>\n                    <input\n                        name=\"firstName\"\n                        type=\"text\"\n                        value={newPlayerData.firstName}\n                        required\n                        onChange={updateField}\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"lastName\">Last name</label>\n                    <input\n                        name=\"lastName\"\n                        type=\"text\"\n                        value={newPlayerData.lastName}\n                        required\n                        onChange={updateField}\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"rating\">Rating</label>\n                    <input\n                        name=\"rating\"\n                        type=\"number\"\n                        value={newPlayerData.rating}\n                        required\n                        onChange={updateField}\n                    />\n                </p>\n                <p>\n                    <input type=\"submit\" value=\"Add\"/>\n                </p>\n            </fieldset>\n        </form>\n    );\n}\nNewPlayer.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n","import {useAllPlayersDb, useTournament} from \"../../../hooks\";\nimport NewPlayer from \"../../new-player\";\nimport React from \"react\";\n\nexport default function Selecting(props) {\n    const {tourney, tourneyDispatch} = useTournament();\n    const [players, allPlayersDispatch] = useAllPlayersDb();\n\n    function togglePlayer(event) {\n        const id = event.target.value;\n        if (event.target.checked) {\n            tourneyDispatch({\n                playerIds: tourney.playerIds.concat([id]),\n                type: \"SET_TOURNEY_PLAYERS\"\n            });\n        } else {\n            tourneyDispatch({\n                playerIds: tourney.playerIds.filter((pId) => pId !== id),\n                type: \"SET_TOURNEY_PLAYERS\"\n            });\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"toolbar\">\n                <button\n                    className=\"button-micro\"\n                    onClick={() => tourneyDispatch({\n                        playerIds: Object.keys(players),\n                        type: \"SET_TOURNEY_PLAYERS\"\n                    })}\n                >\n                    Select all\n                </button>\n                <button\n                    className=\"button-micro\"\n                    onClick={() => tourneyDispatch({\n                        playerIds: [],\n                        type: \"SET_TOURNEY_PLAYERS\"\n                    })}\n                >\n                    Select none\n                </button>\n            </div>\n            <table>\n                <caption>Select players</caption>\n                <thead>\n                    <tr>\n                        <th>First name</th>\n                        <th>Last name</th>\n                        <th>Select</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.values(players).map(({id, firstName, lastName}) =>\n                        <tr key={id}>\n                            <td>{firstName}</td>\n                            <td>{lastName}</td>\n                            <td>\n                                <input\n                                    checked={tourney.playerIds.includes(id)}\n                                    type=\"checkbox\"\n                                    value={id}\n                                    onChange={togglePlayer}\n                                />\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            <NewPlayer dispatch={allPlayersDispatch}/>\n        </div>\n    );\n}\nSelecting.propTypes = {};\n","import {Panel, PanelContainer} from \"../../utility\";\nimport React, {useState} from \"react\";\nimport {hasHadBye, rounds2Matches} from \"../../../pairing-scoring\";\nimport {Dialog} from \"@reach/dialog\";\nimport Icons from \"../../icons\";\nimport Selecting from \"./selecting\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function PlayerSelect(props) {\n    const {tourney, tourneyDispatch, players} = useTournament();\n    const {playerIds, roundList, byeQueue} = tourney;\n    const dispatch = tourneyDispatch;\n    const [isSelecting, setIsSelecting] = useState(playerIds.length === 0);\n    const matches = rounds2Matches(roundList);\n    return (\n        <div className=\"content-area\">\n            <div className=\"toolbar\">\n                <button onClick={() => setIsSelecting(true)}>\n                    <Icons.Edit /> Edit player roster\n                </button>\n            </div>\n            <PanelContainer>\n                <Panel style={{flexShrink: \"0\"}}>\n                    <table>\n                        <caption>Current roster</caption>\n                        <thead>\n                            <tr>\n                                <th colSpan={2}>Name</th>\n                                <th>Options</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.values(players).map((p) => (\n                                <tr key={p.id} className={p.type + \" player\"}>\n                                    <td>{p.firstName}</td>\n                                    <td>{p.lastName}</td>\n                                    <td>\n                                        <button\n                                            className=\"button-micro\"\n                                            disabled={byeQueue.includes(p.id)}\n                                            onClick={() =>\n                                                dispatch({\n                                                    byeQueue:\n                                                        byeQueue.concat([p.id]),\n                                                    type: \"SET_BYE_QUEUE\"\n                                                })\n                                            }\n                                        >\n                                            Bye signup\n                                        </button>\n                                    </td>\n                                </tr>\n                            )\n                            )}\n                        </tbody>\n                    </table>\n                </Panel>\n                <Panel>\n                    <h3>Bye queue</h3>\n                    {byeQueue.length === 0 &&\n                        <p>No players have signed up for a bye round.</p>\n                    }\n                    <ol>\n                        {byeQueue.map((pId) => (\n                            <li\n                                key={pId}\n                                className={\n                                    (hasHadBye(pId, matches))\n                                    ? \"disabled buttons-on-hover\"\n                                    : \"buttons-on-hover\"\n                                }\n                            >\n                                {players[pId].firstName}{\" \"}\n                                {players[pId].lastName}{\" \"}\n                                <button\n                                    className=\"button-micro\"\n                                    onClick={() =>\n                                        dispatch({\n                                            byeQueue: byeQueue.filter(\n                                                (id) => pId !== id\n                                            ),\n                                            type: \"SET_BYE_QUEUE\"\n                                        })\n                                    }\n                                >\n                                    Remove\n                                </button>\n                            </li>\n                        ))}\n                    </ol>\n                </Panel>\n                <Dialog isOpen={isSelecting}>\n                    <button\n                        className=\"button-micro button-primary\"\n                        onClick={() => setIsSelecting(false)}\n                    >\n                        Done\n                    </button>\n                    <Selecting />\n                </Dialog>\n            </PanelContainer>\n        </div>\n    );\n}\nPlayerSelect.propTypes = {};\n","// this component should eventually replace player-match-info.jsx\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {createPlayerStats} from \"../../../pairing-scoring\";\n\nexport default function PlayerInfo({playerId, roundId}) {\n    const {tourney, players} = useTournament();\n    const [options] = useOptionsDb();\n    const {\n        profile,\n        rating,\n        score,\n        colorBalance,\n        hasHadBye,\n        opponentHistory,\n        avoidList\n    } = createPlayerStats({\n        avoidList: options.avoidPairs,\n        id: playerId,\n        players,\n        roundId,\n        roundList: tourney.roundList\n    });\n    const prettyBalance = (function () {\n        if (colorBalance < 0) {\n            return \"White +\" + Math.abs(colorBalance);\n        } else if (colorBalance > 0) {\n            return \"Black +\" + colorBalance;\n        } else {\n            return \"Even\";\n        }\n    }());\n    return (\n        <dl className=\"player-card\">\n            <h3>\n                {profile.firstName} {profile.lastName}\n            </h3>\n            <p>Score: {score}</p>\n            <p>Rating: {rating}</p>\n            <p>Color balance: {prettyBalance}</p>\n            <p>Has had a bye round: {hasHadBye ? \"Yes\" : \"No\"}</p>\n            <p>Opponent history:</p>\n            <ol>\n                {opponentHistory.map((opId) => (\n                    <li key={opId}>\n                        {players[opId].firstName}{\" \"}\n                        {players[opId].lastName}\n                    </li>\n                ))}\n            </ol>\n            <p>\n                Players to avoid:\n            </p>\n            <ol>\n                {avoidList.map((pId) => (\n                    <li key={pId}>\n                        {players[pId].firstName} {players[pId].lastName}\n                    </li>\n                ))}\n            </ol>\n        </dl>\n    );\n}\nPlayerInfo.propTypes = {\n    playerId: PropTypes.string,\n    roundId: PropTypes.number\n};\n","import {BLACK, DUMMY_ID, WHITE, dummyPlayer} from \"../../../data-types\";\nimport {assoc, lensIndex, set} from \"ramda\";\nimport Hidden from \"@reach/visually-hidden\";\nimport Icons from \"../../icons\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {getUnmatched} from \"../../../pairing-scoring\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function SelectList({roundId, stagedPlayers, setStagedPlayers}) {\n    const {tourney, players} = useTournament();\n    // only use unmatched players if this is the last round.\n    const unmatched = (roundId === tourney.roundList.length - 1)\n        ? getUnmatched(tourney, players, roundId)\n        : {};\n\n    function selectPlayer(id) {\n        if (stagedPlayers[WHITE] === null) {\n            setStagedPlayers(\n                (prevState) => set(lensIndex(WHITE), id, prevState)\n            );\n        } else if (stagedPlayers[BLACK] === null) {\n            setStagedPlayers(\n                (prevState) => set(lensIndex(BLACK), id, prevState)\n            );\n        }\n        // else... nothing happens\n    }\n\n    const unmatchedCount = Object.keys(unmatched).length;\n\n    // make a new list so as not to affect auto-pairing\n    const unmatchedWithDummy = (\n        (unmatchedCount % 2 !== 0)\n        ? assoc(DUMMY_ID, dummyPlayer, unmatched)\n        : unmatched\n    );\n    if (unmatchedCount === 0) {\n        return null;\n    }\n    return (\n        <div>\n            <ul>\n                {Object.values(unmatchedWithDummy).map(\n                    ({id, firstName, lastName}) => (\n                        <li key={id}>\n                            <button\n                                className=\"button-ghost\"\n                                disabled={\n                                    !stagedPlayers.includes(null)\n                                    || stagedPlayers.includes(id)\n                                }\n                                onClick={() => selectPlayer(id)}\n                            >\n                                <Icons.UserPlus/>\n                                <Hidden>\n                                    Select {firstName} {lastName}\n                                </Hidden>\n                            </button>\n                            {\" \"}\n                            {firstName} {lastName}\n                        </li>\n                    )\n                )}\n            </ul>\n        </div>\n    );\n}\nSelectList.propTypes = {\n    roundId: PropTypes.number,\n    setStagedPlayers: PropTypes.func,\n    stagedPlayers: PropTypes.arrayOf(PropTypes.string)\n};\n","import {BLACK, WHITE} from \"../../../data-types\";\nimport React, {Fragment} from \"react\";\nimport {lensIndex, set} from \"ramda\";\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\nimport Icons from \"../../icons\";\nimport PropTypes from \"prop-types\";\n\nexport default function Stage({\n    roundId,\n    stagedPlayers,\n    setStagedPlayers\n}) {\n    const {tourneyDispatch, players} = useTournament();\n    const dispatch = tourneyDispatch;\n    const [options] = useOptionsDb();\n    const [white, black] = stagedPlayers;\n\n    function unstage(color) {\n        setStagedPlayers((prevState) => set(lensIndex(color), null, prevState));\n    }\n\n    function match() {\n        dispatch({\n            byeValue: options.byeValue,\n            pair: [players[white], players[black]],\n            roundId,\n            type: \"MANUAL_PAIR\"\n        });\n        setStagedPlayers([null, null]);\n    }\n\n    return (\n        <div>\n            <h2>Selected for matching:</h2>\n            <p>\n                White:{\" \"}\n                {white !== null &&\n                    <Fragment>\n                        {players[white].firstName}{\" \"}\n                        {players[white].lastName}{\" \"}\n                        <button onClick={() => unstage(WHITE)}>\n                            <Icons.UserMinus /> Remove\n                        </button>\n                    </Fragment>\n                }\n            </p>\n            <p>\n                Black:{\" \"}\n                {black !== null &&\n                    <Fragment>\n                        {players[black].firstName}{\" \"}\n                        {players[black].lastName}{\" \"}\n                        <button onClick={() => unstage(BLACK)}>\n                            <Icons.UserMinus /> Remove\n                        </button>\n                    </Fragment>\n                }\n            </p>\n            <button\n                disabled={\n                    stagedPlayers.every((id) => id === null)\n                }\n                onClick={() => setStagedPlayers(\n                    (prevState) => ([prevState[BLACK], prevState[WHITE]])\n                )}\n            >\n                <Icons.Repeat/> Swap colors\n            </button>{\" \"}\n            <button\n                disabled={stagedPlayers.includes(null)}\n                onClick={match}\n            >\n                <Icons.Check/> Match selected\n            </button>{\" \"}\n        </div>\n    );\n}\nStage.propTypes = {\n    roundId: PropTypes.number,\n    setStagedPlayers: PropTypes.func,\n    stagedPlayers: PropTypes.arrayOf(PropTypes.string)\n};\n","import {Panel, PanelContainer} from \"../../utility\";\nimport React, {useState} from \"react\";\nimport {\n    calcPairIdeal,\n    createPlayerStats,\n    maxPriority,\n    setUpperHalves,\n    sortPlayersForPairing\n} from \"../../../pairing-scoring\";\nimport {map, pipe} from \"ramda\";\nimport {useOptionsDb, useTournament} from \"../../../hooks\";\nimport {Dialog} from \"@reach/dialog\";\nimport PlayerInfo from \"./player-info\";\nimport PropTypes from \"prop-types\";\nimport SelectList  from \"./select-list\";\nimport Selecting from \"../player-select/selecting\";\nimport Stage from \"./stage\";\nimport {findById} from \"../../utility\";\nimport {getUnmatched} from \"../../../pairing-scoring\";\nimport numeral from \"numeral\";\n\nexport default function PairPicker({roundId}) {\n    const [stagedPlayers, setStagedPlayers] = useState([null, null]);\n    const [options] = useOptionsDb();\n    const {tourney, players, tourneyDispatch} = useTournament();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const statsList = React.useMemo(\n        () => (\n            pipe(\n                Object.values,\n                map((player) => (\n                    createPlayerStats({\n                        avoidList: options.avoidPairs,\n                        id: player.id,\n                        players,\n                        roundId,\n                        roundList: tourney.roundList\n                    })\n                )),\n                sortPlayersForPairing,\n                setUpperHalves\n            )(players)\n        ),\n        [\n            tourney.roundList,\n            roundId,\n            options.avoidPairs,\n            players\n        ]\n    );\n    const matchIdeal = React.useMemo(\n        function () {\n            if (stagedPlayers.includes(null)) {\n                return null;\n            }\n            const player0stats = findById(stagedPlayers[0], statsList);\n            const player1stats = findById(stagedPlayers[1], statsList);\n            const ideal = calcPairIdeal(player0stats, player1stats);\n            return numeral(ideal / maxPriority).format(\"%\");\n        },\n        [stagedPlayers, statsList]\n    );\n    const unmatched = (roundId === tourney.roundList.length - 1)\n        ? getUnmatched(tourney, players, roundId)\n        : {};\n    const unmatchedCount = Object.keys(unmatched).length;\n    return (\n        <div className=\"content-area\">\n            <div className=\"toolbar\">\n                <button\n                    className=\"button-primary\"\n                    disabled={unmatchedCount === 0}\n                    onClick={() => tourneyDispatch({\n                        avoidList: options.avoidPairs,\n                        byeValue: options.byeValue,\n                        players: unmatched,\n                        roundId,\n                        type: \"AUTO_PAIR\"\n                    })}\n                >\n                    Auto-pair unmatched players\n                </button>{\" \"}\n                <button onClick={() => setIsModalOpen(true)}>\n                    Add or remove players from the roster.\n                </button>\n            </div>\n            <PanelContainer>\n                <Panel>\n                    <SelectList\n                        roundId={roundId}\n                        setStagedPlayers={setStagedPlayers}\n                        stagedPlayers={stagedPlayers}\n                    />\n                </Panel>\n                <Panel>\n                    <Stage\n                        roundId={roundId}\n                        setStagedPlayers={setStagedPlayers}\n                        stagedPlayers={stagedPlayers}\n                    />\n                    <PanelContainer>\n                        {stagedPlayers.map((id) =>\n                            id !== null && (\n                                <Panel key={id}>\n                                    <PlayerInfo\n                                        playerId={id}\n                                        roundId={roundId}\n                                    />\n                                </Panel>\n                            )\n                        )}\n                    </PanelContainer>\n                    Match ideal: {matchIdeal}\n                </Panel>\n            </PanelContainer>\n            <Dialog isOpen={isModalOpen}>\n                <button\n                    className=\"button-micro\"\n                    onClick={() => setIsModalOpen(false)}\n                >\n                    Done\n                </button>\n                <Selecting />\n            </Dialog>\n        </div>\n    );\n}\nPairPicker.propTypes = {\n    roundId: PropTypes.number,\n    tourneyId: PropTypes.number\n};\n","import {useOptionsDb, useTournament} from \"../../../hooks\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {createPlayerStats} from \"../../../pairing-scoring\";\nimport {findById} from \"../../utility\";\nimport numeral from \"numeral\";\n\nexport default function PlayerMatchInfo({matchId, color, roundId}) {\n    const {tourney, players, getPlayer} = useTournament();\n    const matchList = tourney.roundList[roundId];\n    const [options] = useOptionsDb();\n    const match = findById(matchId, matchList);\n    const playerData = createPlayerStats({\n        avoidList: options.avoidPairs,\n        id: match.playerIds[color],\n        players,\n        roundId,\n        roundList: tourney.roundList\n    });\n    const colorBalance = playerData.colorBalance;\n    const prettyBalance = (function () {\n        if (colorBalance < 0) {\n            return \"White +\" + Math.abs(colorBalance);\n        } else if (colorBalance > 0) {\n            return \"Black +\" + colorBalance;\n        } else {\n            return \"Even\";\n        }\n    }());\n    return (\n        <dl className=\"player-card\">\n            <h3>\n                {playerData.profile.firstName} {playerData.profile.lastName}\n            </h3>\n            <dt>Score</dt>\n            <dd>{playerData.score}</dd>\n            <dt>Rating</dt>\n            <dd data-testid={`rating-${playerData.id}`}>\n                {match.origRating[color]} (\n                {numeral(\n                    match.newRating[color] - match.origRating[color]\n                ).format(\"+0\")}\n                )\n            </dd>\n            <dt>Color balance</dt>\n            <dd>{prettyBalance}</dd>\n            <dt>Has had a bye round</dt>\n            <dd>{playerData.hasHadBye ? \"Yes\" : \"No\"}</dd>\n            <dt>Opponent history</dt>\n            <dd>\n                <ol>\n                    {playerData.opponentHistory.map((opId) => (\n                        <li key={opId}>\n                            {getPlayer(opId).firstName}{\" \"}\n                            {getPlayer(opId).lastName}\n                        </li>\n                    ))}\n                </ol>\n            </dd>\n        </dl>\n    );\n}\nPlayerMatchInfo.propTypes = {\n    color: PropTypes.number,\n    matchId: PropTypes.string,\n    roundId: PropTypes.number\n};\n","import \"@reach/dialog/styles.css\";\nimport {BLACK, DUMMY_ID, WHITE} from \"../../../data-types\";\nimport {Panel, PanelContainer} from \"../../utility\";\nimport React, {useState} from \"react\";\nimport {Dialog} from \"@reach/dialog\";\nimport Hidden from \"@reach/visually-hidden\";\nimport Icons from \"../../icons\";\nimport PlayerMatchInfo from \"./player-match-info\";\nimport PropTypes from \"prop-types\";\nimport {calcNewRatings} from \"../../../pairing-scoring\";\nimport {useTournament} from \"../../../hooks\";\nimport {winnerSelect} from \"./round.module.css\";\n\nexport default function MatchRow({\n    pos,\n    match,\n    roundId,\n    selectedMatch,\n    setSelectedMatch\n}) {\n    const {\n        tourney,\n        tourneyDispatch,\n        players,\n        getPlayer,\n        playersDispatch\n    } = useTournament();\n    const dispatch = tourneyDispatch;\n    const [openModal, setOpenModal] = useState(false);\n    const resultCode = (function () {\n        if (match.result[0] > match.result[1]) {\n            return \"WHITE\";\n        } else if (match.result[1] > match.result[0]) {\n            return \"BLACK\";\n        } else if (match.result.every((x) => x === 0.5)) {\n            return \"DRAW\";\n        } else {\n            return \"NOTSET\";\n        }\n    }());\n    const whitePlayer = getPlayer(match.playerIds[WHITE]);\n    const blackPlayer = getPlayer(match.playerIds[BLACK]);\n    const whiteName = whitePlayer.firstName + \" \" + whitePlayer.lastName;\n    const blackName = blackPlayer.firstName + \" \" + blackPlayer.lastName;\n\n    function setMatchResult(event) {\n        const result = (function () {\n            switch (event.target.value) {\n            case \"WHITE\":\n                return [1, 0];\n            case \"BLACK\":\n                return [0, 1];\n            case \"DRAW\":\n                return [0.5, 0.5];\n            case \"NOTSET\":\n                return [0, 0];\n            default:\n                throw new Error();\n            }\n        }());\n        const white = players[match.playerIds[WHITE]];\n        const black = players[match.playerIds[BLACK]];\n        const newRating = (\n            (event.currentTarget.value === \"NOTSET\")\n            ? match.origRating\n            : calcNewRatings(\n                match.origRating,\n                [white.matchCount, black.matchCount],\n                result\n            )\n        );\n        playersDispatch({\n            id: white.id,\n            rating: newRating[WHITE],\n            type: \"SET_PLAYER_RATING\"\n        });\n        playersDispatch({\n            id: black.id,\n            rating: newRating[BLACK],\n            type: \"SET_PLAYER_RATING\"\n        });\n        // if the result hasn't been scored yet, increment the matchCount\n        if (match.result.reduce((a, b) => a + b) === 0) {\n            playersDispatch({\n                id: white.id,\n                matchCount: white.matchCount + 1,\n                type: \"SET_PLAYER_MATCHCOUNT\"\n            });\n            playersDispatch({\n                id: black.id,\n                matchCount: black.matchCount + 1,\n                type: \"SET_PLAYER_MATCHCOUNT\"\n            });\n        }\n        dispatch({\n            matchId: match.id,\n            newRating,\n            result,\n            roundId,\n            type: \"SET_MATCH_RESULT\"\n        });\n    }\n\n    return (\n        <tr className={match.id === selectedMatch ? \"selected\" : \"\"}>\n            <th className=\"table__number row__id\" scope=\"row\">{pos + 1}</th>\n            <td\n                className={\"table__player row__player \" + whitePlayer.type}\n                data-testid={`match-${pos}-white`}\n            >\n                {whiteName}{\" \"}\n                {resultCode === \"WHITE\" && (\n                    <span role=\"img\" aria-hidden>\n                        🏆\n                    </span>\n                )}\n            </td>\n            <td\n                className={\"table__player row__player \" + blackPlayer.type}\n                data-testid={`match-${pos}-black`}\n            >\n                {blackName}{\" \"}\n                {resultCode === \"BLACK\" && (\n                    <span role=\"img\" aria-hidden>\n                        🏆\n                    </span>\n                )}\n            </td>\n            <td className=\"data__input row__controls\">\n                <select\n                    className={winnerSelect}\n                    disabled={match.playerIds.includes(DUMMY_ID)}\n                    value={resultCode}\n                    onBlur={setMatchResult}\n                    onChange={setMatchResult}\n                >\n                    <option value=\"NOTSET\">\n                        Select a winner\n                    </option>\n                    <option value=\"WHITE\">\n                        {whiteName} won\n                    </option>\n                    <option value=\"BLACK\">\n                        {blackName} won\n                    </option>\n                    <option value=\"DRAW\">\n                        Draw\n                    </option>\n                </select>\n            </td>\n            <td className=\"data__input row__controls\">\n                {(selectedMatch !== match.id)\n                ? (\n                    <button\n                        className=\"button-ghost\"\n                        title=\"Edit match\"\n                        onClick={() => setSelectedMatch(match.id)}\n                    >\n                        <Icons.Edit />\n                    </button>\n                ) : (\n                    <button\n                        className=\"button-ghost\"\n                        title=\"End editing match\"\n                        onClick={() => setSelectedMatch(null)}\n                    >\n                        <Icons.Check />\n                    </button>\n                )}\n                <button\n                    className=\"button-ghost\"\n                    title=\"Open match information.\"\n                    onClick={() => setOpenModal(true)}\n                >\n                    <Icons.Info />\n                    <Hidden>\n                        View information for match:{\" \"}\n                        {whiteName} versus {blackName}\n                    </Hidden>\n                </button>\n                <Dialog isOpen={openModal}>\n                    <button\n                        className=\"button-micro button-primary\"\n                        onClick={() => setOpenModal(false)}\n                    >\n                        close\n                    </button>\n                    <p>{tourney.name}</p>\n                    <p>Round {roundId + 1}, match {pos + 1}</p>\n                    <PanelContainer>\n                        <Panel>\n                            <PlayerMatchInfo\n                                color={0}\n                                matchId={match.id}\n                                roundId={roundId}\n                            />\n                        </Panel>\n                        <Panel>\n                            <PlayerMatchInfo\n                                color={1}\n                                matchId={match.id}\n                                roundId={roundId}\n                            />\n                        </Panel>\n                    </PanelContainer>\n                </Dialog>\n            </td>\n        </tr>\n    );\n}\nMatchRow.propTypes = {\n    match: PropTypes.object,\n    pos: PropTypes.number,\n    roundId: PropTypes.number,\n    selectedMatch: PropTypes.string,\n    setSelectedMatch: PropTypes.func,\n    tourneyId: PropTypes.number\n};\n","import React, {useState} from \"react\";\nimport {findById, findIndexById} from \"../../utility\";\nimport Icons from \"../../icons\";\nimport MatchRow from \"./match-row\";\nimport PropTypes from \"prop-types\";\nimport style from \"./round.module.css\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function Round({roundId}) {\n    const {\n        tourney,\n        players,\n        tourneyDispatch,\n        playersDispatch\n    } = useTournament();\n    const matchList = tourney.roundList[roundId];\n    const [selectedMatch, setSelectedMatch] = useState(null);\n    if (!matchList) {\n        throw new Error(\"Round \" + roundId + \" does not exist.\");\n    }\n    function unMatch(matchId) {\n        const match = findById(matchId, matchList);\n        if (match.result.reduce((a, b) => a + b) !== 0) {\n            // checks if the match has been scored yet & resets the players'\n            // records\n            match.playerIds.forEach(function (pId, color) {\n                playersDispatch({\n                    id: pId,\n                    matchCount: players[pId].matchCount - 1,\n                    type: \"SET_PLAYER_MATCHCOUNT\"\n                });\n                playersDispatch({\n                    id: pId,\n                    rating: match.origRating[color],\n                    type: \"SET_PLAYER_RATING\"\n                });\n            });\n        }\n        tourneyDispatch({matchId, roundId, type: \"DEL_MATCH\"});\n        setSelectedMatch(null);\n    }\n\n    function swapColors(matchId) {\n        tourneyDispatch({matchId, roundId, type: \"SWAP_COLORS\"});\n    }\n\n    function moveMatch(matchId, direction) {\n        const oldIndex = findIndexById(matchId, matchList);\n        const newIndex = (oldIndex + direction >= 0) ? oldIndex + direction : 0;\n        tourneyDispatch({newIndex, oldIndex, roundId, type: \"MOVE_MATCH\"});\n    }\n\n    return (\n        <div className=\"content-area\">\n            <div className=\"toolbar\">\n                <button\n                    className=\"danger\"\n                    disabled={selectedMatch === null}\n                    onClick={() => unMatch(selectedMatch)}\n                >\n                    <Icons.Trash /> Unmatch\n                </button>{\" \"}\n                <button\n                    className=\"\"\n                    disabled={selectedMatch === null}\n                    onClick={() => swapColors(selectedMatch)}\n                >\n                    <Icons.Repeat /> Swap colors\n                </button>{\" \"}\n                <button\n                    className=\"\"\n                    disabled={selectedMatch === null}\n                    onClick={() => moveMatch(selectedMatch, -1)}\n                >\n                    <Icons.ArrowUp /> Move up\n                </button>{\" \"}\n                <button\n                    className=\"\"\n                    disabled={selectedMatch === null}\n                    onClick={() => moveMatch(selectedMatch, 1)}\n                >\n                    <Icons.ArrowDown /> Move down\n                </button>\n            </div>\n            {matchList.length === 0 &&\n                <p>No players matched yet.</p>\n            }\n            <table className={style.table}>\n                {matchList.length > 0 &&\n                    <caption>Round {roundId + 1} results</caption>\n                }\n                <tbody>\n                    {matchList.length > 0 &&\n                        <tr>\n                            <th className=\"row__id\" scope=\"col\">\n                                #\n                            </th>\n                            <th className=\"row__player\" scope=\"col\">\n                                White\n                            </th>\n                            <th className=\"row__player\" scope=\"col\">\n                                Black\n                            </th>\n                            <th className=\"row__result\" scope=\"col\">\n                                Result\n                            </th>\n                            <th className=\"row__controls\" scope=\"col\">\n                                Controls\n                            </th>\n                        </tr>\n                    }\n                    {matchList.map((match, pos) => (\n                        <MatchRow\n                            key={match.id}\n                            match={match}\n                            pos={pos}\n                            roundId={roundId}\n                            selectedMatch={selectedMatch}\n                            setSelectedMatch={setSelectedMatch}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\nRound.propTypes = {\n    roundId: PropTypes.number,\n    tourneyId: PropTypes.number\n};\n","import React, {useEffect, useState} from \"react\";\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from \"@reach/tabs\";\nimport Icons from \"../../icons\";\nimport PairPicker from \"../pair-picker\";\nimport PropTypes from \"prop-types\";\nimport Round from \"./round\";\nimport {getUnmatched} from \"../../../pairing-scoring\";\nimport {useTournament} from \"../../../hooks\";\n\nexport default function Index(props) {\n    const roundId = Number(props.roundId); // Reach Router passes a string.\n    const {tourney, players} = useTournament();\n    // only use unmatched players if this is the last round.\n    const unmatched = (roundId === tourney.roundList.length - 1)\n        ? getUnmatched(tourney, players, roundId)\n        : {};\n    const unmatchedCount = Object.keys(unmatched).length;\n    const [openTab, setOpenTab] = useState(0);\n    useEffect(\n        function () {\n            (unmatchedCount > 0) ? setOpenTab(1) : setOpenTab(0);\n        },\n        [unmatchedCount]\n    );\n    return (\n        <Tabs\n            index={openTab}\n            onChange={(index) => setOpenTab(index)}\n        >\n            <TabList>\n                <Tab><Icons.List/> Matches</Tab>\n                <Tab disabled={unmatchedCount === 0}>\n                    <Icons.Users/> Unmatched players\n                </Tab>\n            </TabList>\n            <TabPanels>\n                <TabPanel>\n                    <Round roundId={roundId}/>\n                </TabPanel>\n                <TabPanel>\n                    <PairPicker roundId={roundId} />\n                </TabPanel>\n            </TabPanels>\n        </Tabs>\n    );\n}\nIndex.propTypes = {\n    path: PropTypes.string,\n    roundId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n","import React, {useState} from \"react\";\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from \"@reach/tabs\";\nimport {\n    createStandingTree,\n    tieBreakMethods\n} from \"../../pairing-scoring\";\nimport Icons from \"../icons\";\nimport PropTypes from \"prop-types\";\nimport dashify from \"dashify\";\nimport {defaultTo} from \"ramda\";\nimport numeral from \"numeral\";\nimport style from \"./scores.module.css\";\nimport {useTournament} from \"../../hooks\";\n\nfunction ScoreTable(props) {\n    const {tourney, getPlayer} = useTournament();\n    const {tieBreaks, roundList} = tourney;\n    const [standingTree, tbMethods] = createStandingTree(tieBreaks, roundList);\n    return (\n        <table className={style.table}>\n            <caption>Score detail</caption>\n            <tbody>\n                <tr className={style.topHeader}>\n                    <th scope=\"col\">Rank</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Score</th>\n                    {tbMethods.map((name, i) => (\n                        <th key={i} scope=\"col\">\n                            {name}\n                        </th>\n                    ))}\n                </tr>\n                {standingTree.map((standingsFlat, rank) =>\n                    standingsFlat.map((standing, j, src) => (\n                        <tr key={standing.id} className={style.row}>\n                            {j === 0 && ( // Only display the rank once\n                                <th\n                                    className={\"table__number \" + style.rank}\n                                    rowSpan={src.length}\n                                    scope=\"row\"\n                                >\n                                    {numeral(rank + 1).format(\"0o\")}\n                                </th>\n                            )}\n                            <th\n                                className={style.playerName}\n                                data-testid={rank}\n                                scope=\"row\"\n                            >\n                                {getPlayer(standing.id).firstName}&nbsp;\n                                {getPlayer(standing.id).lastName}\n                            </th>\n                            <td\n                                className=\"table__number\"\n                                data-testid={dashify(\n                                    getPlayer(standing.id).firstName\n                                    + getPlayer(standing.id).lastName\n                                    + \" score\"\n                                )}\n                            >\n                                {numeral(standing.score).format(\"1/2\")}\n                            </td>\n                            {standing.tieBreaks.map((score, i) => (\n                                <td\n                                    key={i}\n                                    className=\"table__number\"\n                                    data-testid={dashify(\n                                        getPlayer(standing.id).firstName\n                                        + getPlayer(standing.id).lastName\n                                        + tbMethods[i]\n                                    )}\n                                >\n                                    {numeral(score).format(\"1/2\")}\n                                </td>\n                            ))}\n                        </tr>\n                    ))\n                )}\n            </tbody>\n        </table>\n    );\n}\nScoreTable.propTypes = {};\n\nfunction SelectTieBreaks(props) {\n    const {tourney, tourneyDispatch} = useTournament();\n    const dispatch = tourneyDispatch;\n    const {tieBreaks} = tourney;\n    const [selectedTb, setSelectedTb] = useState(null);\n\n    function toggleTb(id = null) {\n        const defaultId = defaultTo(selectedTb);\n        if (tieBreaks.includes(defaultId(id))) {\n            dispatch({id: defaultId(id), type: \"DEL_TIEBREAK\"});\n            setSelectedTb(null);\n        } else {\n            dispatch({id: defaultId(id), type: \"ADD_TIEBREAK\"});\n        }\n    }\n\n    function moveTb(direction) {\n        const index = tieBreaks.indexOf(selectedTb);\n        dispatch({\n            newIndex: index + direction,\n            oldIndex: index,\n            type: \"MOVE_TIEBREAK\"\n        });\n    }\n\n    return (\n        <div>\n            <div className=\"toolbar\">\n                <button\n                    disabled={selectedTb === null}\n                    onClick={() => toggleTb()}\n                >\n                    Toggle\n                </button>\n                <button\n                    disabled={selectedTb === null}\n                    onClick={() => moveTb(-1)}\n                >\n                    <Icons.ArrowUp/> Move up\n                </button>\n                <button\n                    disabled={selectedTb === null}\n                    onClick={() => moveTb(1)}\n                >\n                    <Icons.ArrowDown/> Move down\n                </button>\n                <button\n                    disabled={selectedTb === null}\n                    onClick={() => setSelectedTb(null)}\n                >\n                    Done\n                </button>\n            </div>\n            <table>\n                <caption className=\"title-30\">\n                    Selected Tiebreak methods\n                </caption>\n                <tr>\n                    <th>Name</th>\n                    <th>Controls</th>\n                </tr>\n                {tieBreaks.map((id) => (\n                    <tr\n                        key={id}\n                        className={selectedTb === id ? \"selected\" : \"\"}\n                    >\n                        <td>\n                            {tieBreakMethods[id].name}\n                        </td>\n                        <td>\n                            <button\n                                className=\"button-micro\"\n                                disabled={\n                                    selectedTb !== null && selectedTb !== id\n                                }\n                                onClick={() =>\n                                    selectedTb === id\n                                        ? setSelectedTb(null)\n                                        : setSelectedTb(id)\n                                }\n                            >\n                                {selectedTb === id ? \"Done\" : \"Edit\"}\n                            </button>\n                        </td>\n                    </tr>\n                ))}\n            </table>\n            <table style={{marginTop: \"16px\"}}>\n                <caption className=\"title-30\">\n                    Available tiebreak methods\n                </caption>\n                <tr>\n                    <th>Name</th>\n                    <th>Controls</th>\n                </tr>\n                {Object.values(tieBreakMethods).map(({name, id}) => (\n                    <tr key={id}>\n                        <td>\n                            <span\n                                className={\n                                    tieBreaks.includes(id)\n                                        ? \"enabled\"\n                                        : \"disabled\"\n                                }\n                            >\n                                {name}\n                            </span>\n                        </td>\n                        <td>\n                            {!tieBreaks.includes(id) && (\n                                <button\n                                    className=\"button-micro\"\n                                    onClick={() => toggleTb(id)}\n                                >\n                                    Add\n                                </button>\n                            )}\n                        </td>\n                    </tr>\n                ))}\n            </table>\n        </div>\n    );\n}\nSelectTieBreaks.propTypes = {};\n\nconst Scores = (props) => (\n    <Tabs>\n        <TabList>\n            <Tab><Icons.List /> Scores</Tab>\n            <Tab><Icons.Settings /> Edit tiebreak rules</Tab>\n        </TabList>\n        <TabPanels>\n            <TabPanel>\n                <ScoreTable />\n            </TabPanel>\n            <TabPanel>\n                <SelectTieBreaks />\n            </TabPanel>\n        </TabPanels>\n    </Tabs>\n);\nScores.propTypes = {\n    path: PropTypes.string\n};\n\nexport default Scores;\n","import React, {useState} from \"react\";\nimport {DateFormat} from \"../utility\";\nimport Icons from \"../icons\";\nimport PropTypes from \"prop-types\";\nimport {useTournament} from \"../../hooks\";\n\nconst PlaceholderButton = () => (\n    <button\n        className=\"button-ghost placeholder\"\n        aria-hidden\n        disabled\n    />\n);\n\nexport default function Header(props) {\n    const {tourney, tourneyDispatch} = useTournament();\n    const [isEditingName, setIsEditingName] = useState(false);\n    const [isEditingDate, setIsEditingDate] = useState(false);\n    const dateInput = (function () {\n        const year = tourney.date.getFullYear();\n        const month = (tourney.date.getMonth() < 9)\n            ? \"0\" + (tourney.date.getMonth() + 1)\n            : tourney.date.getMonth() + 1;\n        const day = (tourney.date.getDate() < 10)\n            ? \"0\" + tourney.date.getDate()\n            : tourney.date.getDate();\n        return year + \"-\" + month + \"-\" + day;\n    }());\n\n    function updateDate(event) {\n        const [\n            rawYear,\n            rawMonth,\n            rawDay\n        ] = event.currentTarget.value.split(\"-\");\n        const year = Number(rawYear);\n        const month = Number(rawMonth) - 1;\n        const day = Number(rawDay);\n        tourneyDispatch({\n            date: new Date(year, month, day),\n            type: \"SET_DATE\"\n        });\n    }\n\n    return (\n        <div className={props.className}>\n            {(isEditingName)\n            ? (\n                <p className=\"display-20\">\n                    <PlaceholderButton />{\" \"}\n                    <input\n                        className=\"display-20\"\n                        type=\"text\"\n                        value={tourney.name}\n                        onChange={(event) => tourneyDispatch({\n                            name: event.currentTarget.value,\n                            type: \"SET_NAME\"\n                        })}\n                    />{\" \"}\n                    <button\n                        className=\"button-ghost\"\n                        onClick={() => setIsEditingName(false)}\n                    >\n                        <Icons.Check />\n                    </button>\n                </p>\n            ) : (\n                <h1 className=\"buttons-on-hover\">\n                    <PlaceholderButton />{\" \"}\n                    <span className=\"inputPlaceholder\">\n                        {tourney.name}\n                    </span>{\" \"}\n                    <button\n                        className=\"button-ghost\"\n                        onClick={() => setIsEditingName(true)}\n                    >\n                        <Icons.Edit />\n                    </button>\n                </h1>\n            )}\n            {(isEditingDate)\n            ? (\n                <p className=\"caption-30\">\n                    <PlaceholderButton />{\" \"}\n                    <input\n                        className=\"caption-30\"\n                        type=\"date\"\n                        value={dateInput}\n                        onChange={updateDate}\n                    />{\" \"}\n                    <button\n                        className=\"button-ghost\"\n                        onClick={() => setIsEditingDate(false)}\n                    >\n                        <Icons.Check />\n                    </button>\n                </p>\n            )\n            : (\n                <p className=\"caption-30 buttons-on-hover\">\n                    <PlaceholderButton />{\" \"}\n                    <DateFormat date={tourney.date} />{\" \"}\n                    <button\n                        className=\"button-ghost\"\n                        onClick={() => setIsEditingDate(true)}\n                    >\n                        <Icons.Edit />\n                    </button>\n                </p>\n            )}\n\n        </div>\n    );\n}\nHeader.propTypes = {\n    className: PropTypes.string\n};\n","import {calcNumOfRounds, getUnmatched} from \"../../pairing-scoring\";\nimport {useDocumentTitle, useTournament} from \"../../hooks\";\nimport {DUMMY_ID} from \"../../data-types\";\nimport Icons from \"../icons\";\nimport {Link} from \"@reach/router\";\nimport {Notification} from \"../utility\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport last from \"ramda/src/last\";\n\nexport default function Sidebar(props) {\n    const {\n        tourney,\n        players,\n        getPlayer,\n        playersDispatch,\n        tourneyDispatch\n    } = useTournament();\n    useDocumentTitle(tourney.name);\n    const {roundList} = tourney;\n    const unmatched = getUnmatched(tourney, players, roundList.length - 1);\n\n    const isNewRoundReady = (function () {\n        const lastRound = last(roundList);\n        if (!lastRound) {\n            return true;\n        }\n        const results = lastRound.map(\n            (match) => match.result[0] + match.result[1]\n        );\n        return Object.keys(unmatched).length === 0 && !results.includes(0);\n    }());\n    const roundCount = calcNumOfRounds(Object.keys(players).length);\n    const isItOver = roundList.length >= roundCount;\n    const [tooltipText, tooltipWarn] = (function () {\n        if (!isNewRoundReady) {\n            return [\n                \"Complete the last round before beginning a new one.\",\n                true\n            ];\n        } else if (isItOver) {\n            return [\"All necessary rounds have completed.\", true];\n        } else {\n            return [\"Ready to begin a new round.\", false];\n        }\n    }());\n\n    function newRound() {\n        const confirmText = \"All rounds have completed. Are you sure you want \"\n            + \"to begin a new one?\";\n        if (isItOver) {\n            if (!window.confirm(confirmText)) {\n                return;\n            }\n        }\n        tourneyDispatch({type: \"ADD_ROUND\"});\n    }\n\n    async function delLastRound() {\n        if (window.confirm(\"Are you sure you want to delete the last round?\")) {\n            await props.navigate(\".\");\n            // If a match has been scored, then reset it.\n            // Should this logic be somewhere else?\n            last(roundList).forEach(function (match) {\n                if (match.result[0] + match.result[1] === 0) {\n                    return; // Don't change players who haven't scored.\n                }\n                match.playerIds.forEach(function (pId, color) {\n                    if (pId === DUMMY_ID) {\n                        return; // Don't try to set the dummy.\n                    }\n                    const {matchCount} = getPlayer(pId);\n                    playersDispatch({\n                        id: pId,\n                        matchCount: matchCount - 1,\n                        type: \"SET_PLAYER_MATCHCOUNT\"\n                    });\n                    playersDispatch({\n                        id: pId,\n                        rating: match.origRating[color],\n                        type: \"SET_PLAYER_RATING\"\n                    });\n                });\n            });\n            tourneyDispatch({type: \"DEL_LAST_ROUND\"});\n            if (tourney.roundList.length === 1) {\n                // Automatically remake round 1.\n                tourneyDispatch({type: \"ADD_ROUND\"});\n            }\n        }\n    }\n\n    return (\n        <div className={props.className}>\n            <nav>\n                <ul>\n                    <li>\n                        <Link to=\"..\">\n                            <Icons.X/>Close\n                        </Link>\n                    </li>\n                </ul>\n                <hr />\n                <ul>\n                    <li>\n                        <Link to=\".\">\n                            <Icons.Users /> Players\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"crosstable\">\n                            <Icons.Layers /> Crosstable\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"scores\">\n                            <Icons.List /> Score detail\n                        </Link>\n                    </li>\n                </ul>\n                <hr />\n                <ul>\n                    {Object.keys(roundList).map((id) => (\n                        <li key={id}>\n                            <Link to={`${id}`}>\n                            Round {Number(id) + 1}\n                            </Link>\n                        </li>\n                    ))}\n                </ul>\n            </nav>\n            <hr />\n            <ul>\n                <li>\n                    <button\n                        className={(tooltipWarn ? \"\" : \"button-primary\")}\n                        disabled={!isNewRoundReady}\n                        onClick={newRound}\n                    >\n                        <Icons.Plus/> New round\n                    </button>\n                    <Notification\n                        style={{marginLeft: \"-8px\", marginRight: \"-8px\"}}\n                        success={!tooltipWarn}\n                    >\n                        {tooltipText}\n                    </Notification>\n                </li>\n                <li>\n                    <button\n                        className={\"danger\"}\n                        disabled={roundList.length === 0}\n                        onClick={delLastRound}\n                    >\n                        <Icons.Trash /> Remove last round\n                    </button>\n                </li>\n                <li className=\"caption-30\">\n                    Round progress: {roundList.length}/{roundCount}\n                </li>\n            </ul>\n        </div>\n    );\n}\nSidebar.propTypes = {\n    className: PropTypes.string,\n    navigate: PropTypes.func.isRequired\n};\n","import Crosstable from \"./crosstable\";\nimport Header from \"./header\";\nimport PlayerSelect from \"./player-select\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Round from \"./round\";\nimport {Router} from \"@reach/router\";\nimport Scores from \"./scores\";\nimport Sidebar from \"./sidebar\";\nimport {TournamentProvider} from \"../../hooks\";\nimport styles from \"./tournament.module.css\";\n\nexport default function Tournament(props) {\n    return (\n        <TournamentProvider tourneyId={props.tourneyId}>\n            <div className={styles.tournament}>\n                <Header className={styles.header} />\n                <Sidebar className={styles.sidebar} navigate={props.navigate} />\n                <div className={styles.content}>\n                    <Router>\n                        <PlayerSelect path=\"/\" />\n                        <Crosstable path=\"crosstable\" />\n                        <Scores path=\"scores\" />\n                        <Round path=\":roundId\" />\n                    </Router>\n                </div>\n            </div>\n        </TournamentProvider>\n    );\n}\nTournament.propTypes = {\n    children: PropTypes.node,\n    navigate: PropTypes.func,\n    path: PropTypes.string,\n    tourneyId: PropTypes.string\n};\n","import React, {useState} from \"react\";\nimport {useAllTournamentsDb, useDocumentTitle} from \"../../hooks\";\nimport {DateFormat} from \"../utility\";\nimport {Dialog} from \"@reach/dialog\";\nimport Icons from \"../icons\";\nimport {Link} from \"@reach/router\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\n\nexport default function TournamentList(props) {\n    const [tourneys, dispatch] = useAllTournamentsDb();\n    const [newTourneyName, setNewTourneyName] = useState(\"\");\n    const [isFormOpen, setIsFormOpen] = useState(false);\n    useDocumentTitle(\"tournament list\");\n\n    function updateNewName(event) {\n        setNewTourneyName(event.target.value);\n    }\n\n    function makeTournament(event) {\n        event.preventDefault();\n        dispatch({\n            name: newTourneyName,\n            type: \"ADD_TOURNEY\"\n        });\n        setNewTourneyName(\"\");\n    }\n\n    return (\n        <div className=\"content-area\">\n            <div className=\"toolbar toolbar__left\">\n                <button\n                    onClick={() => setIsFormOpen(true)}\n                >\n                    <Icons.Plus /> Add tournament\n                </button>\n            </div>\n            {(Object.keys(tourneys).length > 0)\n            ?\n            <table>\n                <caption>Tournament list</caption>\n                <tbody>\n                    <tr>\n                        <th>Name</th>\n                        <th>Date</th>\n                        <th><VisuallyHidden>Controls</VisuallyHidden></th>\n                    </tr>\n                    {Object.values(tourneys).map(({date, id, name}) =>\n                        <tr key={id} className=\"buttons-on-hover\">\n                            <td>\n                                <Link to={id}>\n                                    {name}\n                                </Link>\n                            </td>\n                            <td>\n                                <DateFormat date={date} />\n                            </td>\n                            <td>\n                                <button\n                                    aria-label={`Delete “${name}”`}\n                                    className=\"danger button-ghost\"\n                                    title={`Delete “${name}”`}\n                                    onClick={\n                                        () => dispatch({id, type: \"DEL_ITEM\"})\n                                    }\n                                >\n                                    <Icons.Trash />\n                                </button>\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            : <p>No tournaments added yet.</p>\n            }\n            <Dialog isOpen={isFormOpen}>\n                <button\n                    className=\"button-micro\"\n                    onClick={() => setIsFormOpen(false)}\n                >\n                    Close\n                </button>\n                <form onSubmit={makeTournament}>\n                    <fieldset>\n                        <legend>Make a new tournament</legend>\n                        <label htmlFor=\"tourney-name\">Name:</label>\n                        <input\n                            name=\"tourney-name\"\n                            placeholder=\"tournament name\"\n                            required={true}\n                            type=\"text\"\n                            value={newTourneyName}\n                            onChange={updateNewName}\n                        />{\" \"}\n                        <input\n                            className=\"button-primary\"\n                            type=\"submit\"\n                            value=\"Create\"\n                        />\n                    </fieldset>\n                </form>\n            </Dialog>\n        </div>\n    );\n}\n","import Crosstable from \"./crosstable\";\nimport PlayerSelect from \"./player-select\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Round from \"./round\";\nimport Scores from \"./scores\";\nimport Tournament from \"./tournament\";\nimport TournamentList from \"./tournament-list\";\n\nconst TournamentIndex = (props) => (\n    <div className=\"passthrough\">\n        {props.children}\n    </div>\n);\nTournamentIndex.propTypes = {\n    children: PropTypes.node\n};\n\nexport default TournamentIndex;\nexport {Crosstable, PlayerSelect, Round, Scores, Tournament, TournamentList};\n","import React from \"react\";\nimport styles from \"./index.module.css\";\n\nconst Caution = () => (\n    <aside className={styles.caution + \" body-20\"}>\n        <p className={styles.caution__text}>\n            This is beta software. Want to help make it better? Check out the\n            {\" \"}\n            <span role=\"img\" aria-hidden>👉</span>\n            &nbsp;\n            <a\n                className={styles.caution__link}\n                href=\"https://github.com/johnridesabike/chessahoochee\"\n            >\n                Git repository\n            </a>.\n        </p>\n    </aside>\n);\n\nexport default Caution;\n","import React from \"react\";\n\nconst NotFound = (props) => (\n    <div data-testid=\"404\">\n        <p>Page not found.</p>\n    </div>\n);\n\nexport default NotFound;\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport {\n    useAllPlayersDb,\n    useAllTournamentsDb,\n    useDocumentTitle,\n    useOptionsDb\n} from \"../hooks\";\nimport demoData from \"../demo-data\";\n\nexport default function Options(props) {\n    const [tourneys, tourneysDispatch] = useAllTournamentsDb();\n    const [players, playersDispatch] = useAllPlayersDb();\n    const [text, setText] = useState(\"\");\n    const [options, optionsDispatch] = useOptionsDb();\n    useDocumentTitle(\"Options\");\n    // memoize this so the `useEffect` hook syncs with the correct states\n    const exportData = useMemo(\n        () => ({options, players, tourneys}),\n        [options, tourneys, players]\n    );\n    useEffect(\n        function () {\n            setText(JSON.stringify(exportData, null, 4));\n        },\n        [exportData]\n    );\n    function loadData(data) {\n        tourneysDispatch({state: data.tournaments, type: \"LOAD_STATE\"});\n        optionsDispatch({state: data.options, type: \"LOAD_STATE\"});\n        playersDispatch({state: data.players, type: \"LOAD_STATE\"});\n        window.alert(\"Data loaded!\");\n    }\n    function handleText(event) {\n        event.preventDefault();\n        const importData = JSON.parse(text);\n        loadData(importData);\n    }\n    function handleFile(event) {\n        event.preventDefault();\n        const reader = new FileReader();\n        // eslint-disable-next-line fp/no-mutation\n        reader.onload = function (ev) {\n            const data = ev.target.result;\n            const importData = JSON.parse(data);\n            loadData(importData);\n        };\n        reader.readAsText(event.currentTarget.files[0]);\n        event.currentTarget.value = \"\"; // so the filename won't linger onscreen\n    }\n    function reloadDemoData(event) {\n        event.preventDefault();\n        loadData(demoData);\n    }\n    return (\n        <div className=\"content-area\">\n            <h2>Game settings</h2>\n            <form>\n                <fieldset>\n                    <legend>Bye options</legend>\n                    Select how many points a bye is worth:\n                    <label className=\"monospace\">\n                        1{\" \"}\n                        <input\n                            checked={options.byeValue === 1}\n                            type=\"radio\"\n                            onChange={() => optionsDispatch({\n                                option: \"byeValue\",\n                                type: \"SET_OPTION\",\n                                value: 1\n                            })}\n                        />\n                    </label>\n                    <label className=\"monospace\">\n                        ½{\" \"}\n                        <input\n                            checked={options.byeValue === 0.5}\n                            type=\"radio\"\n                            onChange={() => optionsDispatch({\n                                option: \"byeValue\",\n                                type: \"SET_OPTION\",\n                                value: 0.5\n                            })}\n                        />\n                    </label>\n                </fieldset>\n            </form>\n            <h2>Data</h2>\n            <fieldset>\n                <legend>Manage data</legend>\n                <p>\n                    <a\n                        download=\"chessahoochee.json\"\n                        href={\n                            \"data:application/json,\"\n                            + encodeURIComponent(JSON.stringify(exportData))\n                        }\n                    >\n                        Download all data\n                    </a>\n                </p>\n                <label htmlFor=\"file\">Load data file:</label>\n                <input\n                    id=\"file\"\n                    name=\"file\"\n                    type=\"file\"\n                    onChange={handleFile}\n                />\n            </fieldset>\n            <fieldset>\n                <legend>Reset all changes</legend>\n                <button onClick={reloadDemoData}>Reload demo data</button>\n            </fieldset>\n            <form onSubmit={handleText}>\n                <fieldset>\n                    <legend>\n                        Advanced: manually edit data\n                    </legend>\n                    <textarea\n                        className=\"json\"\n                        cols={50}\n                        name=\"playerdata\"\n                        rows={25}\n                        spellCheck={false}\n                        value={text}\n                        onChange={(event) => setText(event.currentTarget.value)}\n                    />\n                    <p>\n                        <input type=\"submit\" value=\"Load\" />\n                    </p>\n                </fieldset>\n            </form>\n        </div>\n    );\n}\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport {getPlayerAvoidList, kFactor} from \"../../pairing-scoring\";\nimport Icons from \"../icons\";\nimport {Link} from \"@reach/router\";\nimport PropTypes from \"prop-types\";\nimport numeral from \"numeral\";\nimport styles from \"./index.module.css\";\nimport {useDocumentTitle} from \"../../hooks\";\n\nexport default function PlayerInfoBox({\n    playerId,\n    players,\n    playersDispatch,\n    options,\n    optionsDispatch\n}) {\n    const player = players[playerId];\n    const [singAvoidList, setSingAvoidList] = useState(\n        getPlayerAvoidList(playerId, options.avoidPairs)\n    );\n    const playerName = (player) ? player.firstName + \" \" + player.lastName : \"\";\n    useDocumentTitle(\"profile for \" + playerName);\n    // Memoize this so useEffect doesn't cause a memory leak.\n    const unAvoided = useMemo(\n        () => Object.keys(players).filter(\n            (id) => !singAvoidList.includes(id) && id !== playerId\n        ),\n        [players, playerId, singAvoidList]\n    );\n    const [selectedAvoider, setSelectedAvoider] = useState(unAvoided[0]);\n    function avoidAdd(event) {\n        event.preventDefault();\n        optionsDispatch({\n            pair: [playerId, selectedAvoider],\n            type: \"ADD_AVOID_PAIR\"\n        });\n    }\n    useEffect(\n        function () {\n            setSingAvoidList(getPlayerAvoidList(playerId, options.avoidPairs));\n        },\n        [options.avoidPairs, playerId]\n    );\n    useEffect(\n        function () {\n            setSelectedAvoider(unAvoided[0]);\n        },\n        [setSelectedAvoider, unAvoided]\n    );\n    function handleChange(event) {\n        event.preventDefault();\n        const {firstName, lastName, matchCount, rating} = event.currentTarget;\n        playersDispatch({\n            firstName: firstName.value,\n            id: playerId,\n            lastName: lastName.value,\n            matchCount: Number(matchCount.value),\n            rating: Number(rating.value),\n            type: \"SET_PLAYER\"\n        });\n    }\n    if (!player) {\n        return <div>Loading...</div>;\n    }\n    return (\n        <div className={styles.playerInfo}>\n            <Link to=\"..\"><Icons.ChevronLeft /> Back</Link>\n            <h2>\n                Profile for {player.firstName} {player.lastName}\n            </h2>\n            <form onChange={handleChange} onSubmit={handleChange}>\n                <p>\n                    <label htmlFor=\"firstName\">First name</label>\n                    <input\n                        defaultValue={player.firstName}\n                        name=\"firstName\"\n                        type=\"text\"\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"lastName\">Last name</label>\n                    <input\n                        defaultValue={player.lastName}\n                        name=\"lastName\"\n                        type=\"text\"\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"matchCount\">Matches played</label>\n                    <input\n                        defaultValue={String(player.matchCount)}\n                        name=\"matchCount\"\n                        type=\"number\"\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"rating\">Rating</label>\n                    <input\n                        defaultValue={String(player.rating)}\n                        name=\"rating\"\n                        type=\"number\"\n                    />\n                </p>\n                <p>\n                    <label htmlFor=\"Kfactor\">K factor</label>\n                    <input\n                        name=\"kfactor\"\n                        type=\"number\"\n                        value={numeral(kFactor(player.matchCount)).format(\"00\")}\n                        readOnly\n                    />\n                </p>\n            </form>\n            <h3>Players to avoid</h3>\n            <ul>\n                {singAvoidList.map((pId) =>\n                    <li key={pId}>\n                        {players[pId].firstName} {players[pId].lastName}\n                        <button\n                            arial-label={`Remove \n${players[pId].firstName} ${players[pId].lastName} from avoid list.`}\n                            className=\"danger button-ghost\"\n                            title={`Remove ${players[pId].firstName} \n${players[pId].lastName}`}\n                            onClick={() =>\n                                optionsDispatch({\n                                    pair: [playerId, pId],\n                                    type: \"DEL_AVOID_PAIR\"\n                                })\n                            }\n                        >\n                            <Icons.Trash />\n                        </button>\n                    </li>\n                )}\n                {singAvoidList.length === 0 &&\n                    <li>None</li>\n                }\n            </ul>\n            <form onSubmit={avoidAdd}>\n                <fieldset>\n                    <legend>Add player to avoid</legend>\n                    <select\n                        onBlur={(event) =>\n                            setSelectedAvoider(event.target.value)\n                        }\n                    >\n                        {unAvoided.map((pId) => (\n                            <option key={pId} value={pId}>\n                                {players[pId].firstName} {players[pId].lastName}\n                            </option>\n                        ))}\n                    </select>{\" \"}\n                    <input type=\"submit\" value=\"Add\" />\n                </fieldset>\n            </form>\n        </div>\n    );\n}\nPlayerInfoBox.propTypes = {\n    options: PropTypes.object.isRequired,\n    optionsDispatch: PropTypes.func.isRequired,\n    playerId: PropTypes.string,\n    players: PropTypes.object.isRequired,\n    playersDispatch: PropTypes.func.isRequired\n};\n","import React, {useState} from \"react\";\nimport {Dialog} from \"@reach/dialog\";\nimport Icons from \"../icons\";\nimport {Link} from \"@reach/router\";\nimport NewPlayer from \"../new-player\";\nimport PropTypes from \"prop-types\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport styles from \"./index.module.css\";\nimport {useDocumentTitle} from \"../../hooks\";\n\nexport default function PlayerList({\n    players,\n    playersDispatch,\n    optionsDispatch\n}) {\n    const [isFormOpen, setIsFormOpen] = useState(false);\n    useDocumentTitle(\"Players\");\n    const delPlayer = function (event, id) {\n        event.preventDefault();\n        const message = \"Are you sure you want to delete \"\n            + players[id].firstName + \" \" + players[id].lastName + \"?\";\n        if (window.confirm(message)) {\n            playersDispatch({id, type: \"DEL_ITEM\"});\n            optionsDispatch({id, type: \"DEL_AVOID_SINGLE\"});\n        }\n    };\n    return (\n        <div className=\"content-area\">\n            <div className=\"toolbar toolbar__left\">\n                <button onClick={() => setIsFormOpen(true)}>\n                    <Icons.UserPlus /> Add a new player\n                </button>\n            </div>\n            <table className={styles.table}>\n                <caption>Player roster</caption>\n                <thead>\n                    <tr>\n                        <th colSpan={2}>Name</th>\n                        <th>Rating</th>\n                        <th>Matches</th>\n                        <th><VisuallyHidden>Controls</VisuallyHidden></th>\n                    </tr>\n                </thead>\n                <tbody>{Object.values(players).map((player) =>\n                    <tr key={player.id}  className=\"buttons-on-hover\">\n                        <td className=\"table__player\">\n                            {player.firstName}\n                        </td>\n                        <td className=\"table__player\">\n                            {player.lastName}\n                        </td>\n                        <td className=\"table__number\">{player.rating}</td>\n                        <td className=\"table__number\">{player.matchCount}</td>\n                        <td>\n                            <button\n                                // eslint-disable-next-line max-len\n                                aria-label={`Delete ${player.firstName} ${player.lastName}`}\n                                className=\"danger button-ghost\"\n                                // eslint-disable-next-line max-len\n                                title={`Delete ${player.firstName} ${player.lastName}`}\n                                onClick={(event) => delPlayer(event, player.id)}\n                            >\n                                <Icons.Trash />\n                            </button>{\" \"}\n                            <Link to={String(player.id)}>\n                            Open\n                                <VisuallyHidden>\n                                    {\" \"}{player.firstName} {player.lastName}\n                                </VisuallyHidden>{\" \"}\n                                <Icons.ChevronRight />\n                            </Link>\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n            <Dialog isOpen={isFormOpen}>\n                <button\n                    className=\"button-micro\"\n                    onClick={() => setIsFormOpen(false)}\n                >\n                    Close\n                </button>\n                <NewPlayer dispatch={playersDispatch} />\n            </Dialog>\n        </div>\n    );\n}\nPlayerList.propTypes = {\n    optionsDispatch: PropTypes.func.isRequired,\n    players: PropTypes.object.isRequired,\n    playersDispatch: PropTypes.func.isRequired\n};\n","import {useAllPlayersDb, useOptionsDb} from \"../../hooks\";\nimport PlayerInfo from \"./info-box\";\nimport PlayerList from \"./player-list\";\nimport React from \"react\";\nimport {Router} from \"@reach/router\";\n\nexport default function Players(props) {\n    const [players, playersDispatch] = useAllPlayersDb();\n    const [options, optionsDispatch] = useOptionsDb();\n    const childProps = {options, optionsDispatch, players, playersDispatch};\n    return (\n        <Router basepath=\"players\">\n            <PlayerList path=\"/\" {...childProps} />\n            <PlayerInfo path=\":playerId\" {...childProps} />\n        </Router>\n    );\n}\nPlayers.propTypes = {};\n\nexport {PlayerInfo, PlayerList};\n","import Icons from \"./icons\";\nimport {Notification} from \"./utility\";\nimport React from \"react\";\nimport {loadDemoDB} from \"../hooks/db\";\nimport styles from \"./splash.module.css\";\n\nconst Splash = (props) => (\n    <div className={styles.splash}>\n        <aside className={styles.hint}>\n            <ol>\n                <li>\n                    <button\n                        className=\"button-primary\"\n                        onClick={() => loadDemoDB()}\n                    >\n                        Click here to load the demo data\n                    </button>{\" \"}\n                    (optional)\n                </li>\n                <li>\n                    <Icons.ArrowUpLeft />\n                    Select a menu item above.\n                </li>\n                <li>\n                    Start creating your tournaments!\n                </li>\n            </ol>\n            <Notification warning>\n                If you experience any glitches or crashes,<br />\n                clear your browser cache and try again.\n            </Notification>\n        </aside>\n        <div className={styles.title}>\n            <h1>\n                <span aria-hidden>♘</span>{\" \"}\n                Chessahoochee\n            </h1>\n            <p className={styles.subtitle + \" caption-30\"}>\n                a chess tournament app\n            </p>\n        </div>\n        <footer className={\"body-20 \" + styles.footer}>\n            <p>\n                This is an early, proof-of-concept chess tournament app.<br />\n                <a href=\"https://github.com/johnridesabike/chessahoochee\">\n                    Suggetions, bug reports, and contributions are welcome.\n                </a>\n            </p>\n            <p>\n                Built with JavaScript and{\" \"}\n                <a href=\"https://reactjs.org/\">React</a>.{\" \"}\n                <span style={{fontSize: \"16px\"}}>\n                    <Icons.Javascript /> <Icons.React />\n                </span>\n            </p>\n        </footer>\n    </div>\n);\nexport default Splash;\n","import \"side-effects\";\nimport {\n    Link,\n    LocationProvider,\n    Router,\n    createHistory\n} from \"@reach/router\";\nimport TournamentIndex, {\n    Tournament,\n    TournamentList\n} from \"./components/tournament\";\nimport {link, mainMenu} from \"./App.module.css\";\nimport Caution from \"./components/caution\";\nimport NotFound from \"./components/404\";\nimport Options from \"./components/options\";\nimport Players from \"./components/players\";\nimport React from \"react\";\nimport Splash from \"./components/splash\";\nimport createHashSource from \"hash-source\";\nimport {useDocumentTitle} from \"./hooks\";\n// These are just for deploying to GitHub pages.\nlet source = createHashSource();\nlet history = createHistory(source);\n\n// const electron = window.require(\"electron\");\n\nfunction App() {\n    useDocumentTitle(\"a chess tournament app\");\n    return (\n        <div className=\"app\">\n            <LocationProvider history={history}>\n                <header className=\"header\">\n                    <nav className={mainMenu}>\n                        <Link className={link} to=\"tourneys\">\n                            Tournaments\n                        </Link>\n                        <Link className={link} to=\"players\">\n                            Players\n                        </Link>\n                        <Link className={link} to=\"options\">\n                            Options\n                        </Link>\n                        <Link className={link} to=\"/\">\n                            About\n                        </Link>\n                    </nav>\n                </header>\n                <main className=\"content\">\n                    <Router>\n                        <Splash path=\"/\" />\n                        <TournamentIndex path=\"tourneys\">\n                            <TournamentList path=\"/\" />\n                            <Tournament path=\":tourneyId/*\" />\n                        </TournamentIndex>\n                        <Players path=\"players/*\" />\n                        <Options path=\"options\" />\n                        <NotFound default />\n                    </Router>\n                </main>\n            </LocationProvider>\n            <footer className=\"footer\">\n                <Caution />\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import \"./styles\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport React, {StrictMode} from \"react\";\nimport App from \"./App\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n    <StrictMode><App /></StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"scores_table__22BFZ\",\"topHeader\":\"scores_topHeader__2RVRR\",\"row\":\"scores_row__bmBzX\",\"playerName\":\"scores_playerName__3ghv9\",\"rank\":\"scores_rank__3AxBb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"App_link__TB6Cl\",\"mainMenu\":\"App_mainMenu__3u0XV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"splash\":\"splash_splash__37_vi\",\"hint\":\"splash_hint__2lVJb\",\"footer\":\"splash_footer__2Z__A\",\"title\":\"splash_title__Cm7sw\",\"subtitle\":\"splash_subtitle__PvmGO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tournament\":\"tournament_tournament__2nSxH\",\"header\":\"tournament_header__9nZzI\",\"sidebar\":\"tournament_sidebar__21G-s\",\"content\":\"tournament_content__1mdG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"winnerSelect\":\"round_winnerSelect__317oT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"players_table__yk6rK\",\"playerInfo\":\"players_playerInfo__nGWwZ\",\"controls\":\"players_controls__1rlpj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"caution\":\"caution_caution__17Bbq\",\"caution__text\":\"caution_caution__text__2ptRS\",\"caution__link\":\"caution_caution__link__X_K5Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panels\":\"utility_panels__LN75I\",\"panel\":\"utility_panel__2GOiH\"};"],"sourceRoot":""}