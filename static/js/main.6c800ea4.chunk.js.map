{"version":3,"sources":["chess-tourney/constants.js","chess-tourney/player.js","jsx/utility.jsx","chess-tourney/tournament.js","chess-tourney/scores.js","chess-tourney/utility.js","chess-tourney/pairing.js","chess-tourney/match.js","jsx/tournament/round.jsx","jsx/tournament/player-select.jsx","jsx/tournament/index.jsx","jsx/players.jsx","jsx/options.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["BLACK","WHITE","createPlayer","importObj","arguments","length","undefined","id","type","firstName","lastName","rating","matchCount","Object","freeze","dummyPlayer","getPlayer","playerList","player","filter","p","getPlayerAvoidList","playerId","avoidList","pair","includes","reduce","accumulator","concat","cleanAvoidList","ids","map","pairs","kFactor","calcNewRatings","origRatings","matchCounts","result","whiteElo","EloRank","blackElo","scoreExpected","getExpected","updateRating","Button","_ref","children","action","react_default","a","createElement","onClick","BackButton","_ref2","OpenButton","_ref3","Panel","_ref5","style","objectSpread","PanelContainer","_ref6","display","React","Children","child","name","tieBreaks","byeQueue","players","roundList","isBye","match","playerMatchColor","matchList","color","m","indexOf","getMatchesByPlayer","roundId","slice","acc","round","hasHadBye","getPlayersByOpponent","opponentId","playerScore","score","scoreList","playerScoreList","b","playerScoreCum","runningScore","cumScores","playerScoreListNoByes","forEach","push","totalScore","playerColorBalance","modifiedMedian","pId","isSolkoff","scores","opponent","sort","pop","shift","finalScore","tieBreakMethods","func","oppScores","calcStandings","methods","standingsFlat","allPlayers","Array","from","Set","getAllPlayers","method","sortFunc","firstBy","standing","ignore","index","thenBy","standingsTree","runningRank","i","orig","standing1","standing2","areEqual","keys","areScoresEqual","getPlayerMatchData","roundNum","data","opponents","colorBalance","calcNumOfRounds","playerCount","Math","ceil","log2","Number","isFinite","getById","list","x","getIndexById","genPlayerData","dueColor","opponentHistory","upperHalf","avoidMeetingTwicePriority","sameScoresPriority","differentHalfPriority","differentDueColorPriority","calcPairIdeal","player1","player2","scoreDiff","priority","metBefore","mustAvoid","abs","byeMatch","potentialMatches","matches","reducedResults","playerData","byePlayerData","last","playersWithScore","pd","reverse","chunk","playerDatum","src","playerMatches","blossom","p1Id","p2Id","p1","p2","ideal","matched","origRating","newRating","Round","tourneyList","tourneyId","setTourneyList","setPlayerList","options","tourney","_useState","useState","_useState2","slicedToArray","selectedMatch","setSelectedMatch","_useState3","_useState4","selectedPlayers","setSelectedPlayers","selectPlayer","event","target","value","checked","prevState","unMatched","setMatchResult","matchId","mIndex","white","black","_calcNewRatings","_calcNewRatings2","whiteRating","blackRating","isNew","prevTourney","newTourney","toConsumableArray","moveMatch","direction","matchesRef","arrayMove","className","unMatch","disabled","swapColors","pos","key","byeValue","onChange","PlayerMatchInfo","react","createMatch","join","manualPair","unPairedPlayers","nextBye","newMatchList","pairPlayers","dummy","autoPair","prettyBalance","numeral","format","PlayerSelect","isSelecting","setIsSelecting","selectedTb","setSelectedTb","toggleTb","id2","moveTb","console","log","togglePlayer","colSpan","TournamentList","openTourney","setOpenTourney","newTourneyName","setNewTourneyName","content","TournamentTabs","backButton","splice","onSubmit","preventDefault","createTournament","placeholder","required","_useState5","_useState6","defaultTab","setDefaultTab","_calcStandings","_calcStandings2","standingTree","tbMethods","es","defaultIndex","rank","PlayerView","setAvoidList","openPlayer","setOpenPlayer","PlayerInfoBox","PlayerList","newPlayerDefault","newPlayerData","setNewPlayerdata","nextId","setNextId","updateField","update","currentTarget","assign","rosterTable","delPlayer","newPlayer","prevId","_useState7","_useState8","singAvoidList","setSingAvoidList","unAvoided","_useState9","_useState10","selectedAvoider","setSelectedAvoider","useEffect","avoidPlayer","avoidAdd","onBlur","Options","setOptions","outputPlayers","JSON","stringify","outputTourney","rows","cols","readOnly","Caution","role","aria-label","href","Boolean","window","location","hostname","ReactDOM","render","demoRoster","demoTourneyList","demoOptions","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c800ea4.chunk.js","sourcesContent":["// @ts-check\nconst BLACK = 1;\nexport {BLACK};\nconst WHITE = 0;\nexport {WHITE};","// @ts-check\nimport EloRank from \"elo-rank\";\nimport {WHITE, BLACK} from \"./constants\";\n/**\n * @typedef {import(\"./index\").Player} Player\n * @typedef {import(\"./index\").MatchScore} MatchScore\n */\n\nfunction createPlayer(importObj = {}) {\n    /** @type {Player} */\n    const player = {\n        id: importObj.id || 0,\n        type: importObj.type || \"person\", // used for CSS styling etc.\n        firstName: importObj.firstName || \"\",\n        lastName: importObj.lastName || \"\",\n        rating: importObj.rating || 0,\n        matchCount: importObj.matchCount || 0\n    };\n    return player;\n}\nexport default Object.freeze(createPlayer);\n\nconst dummyPlayer = createPlayer();\ndummyPlayer.id = -1;\ndummyPlayer.firstName = \"Bye\";\ndummyPlayer.lastName = \"Player\";\ndummyPlayer.type = \"dummy\";\nObject.freeze(dummyPlayer);\nexport {dummyPlayer};\n\n\n/**\n * @param {number} id\n * @param {Player[]} playerList\n * @returns {Player}\n */\nfunction getPlayer(id, playerList) {\n    if (id === -1) {\n        return dummyPlayer;\n    }\n    let player = playerList.filter((p) => p.id === id)[0];\n    if (!player) {\n        player = createPlayer({\n            id: id,\n            firstName: \"Anonymous\",\n            type: \"missing\"\n        });\n    }\n    return player;\n}\nObject.freeze(getPlayer);\nexport {getPlayer};\n\n/**\n * @param {number} playerId\n * @param {number[][]} avoidList\n * @returns {number[]}\n */\nfunction getPlayerAvoidList(playerId, avoidList) {\n    return avoidList.filter( // get pairings with the player\n        (pair) => pair.includes(playerId)\n    ).reduce( // Flatten the array\n        (accumulator, pair) => pair.concat(accumulator),\n        []\n    ).filter( // filter out the player's id\n        (id) => id !== playerId\n    );\n}\nObject.freeze(getPlayerAvoidList);\nexport {getPlayerAvoidList};\n\n/**\n * @param {number[][]} avoidList\n * @param {Player[]} playerList\n */\nfunction cleanAvoidList(avoidList, playerList) {\n    const ids = playerList.map((p) => p.id);\n    return avoidList.filter(\n        (pairs) => (ids.includes(pairs[0]) && ids.includes(pairs[1]))\n    );\n}\nObject.freeze(cleanAvoidList);\nexport {cleanAvoidList};\n\n/**\n * @param {number} matchCount\n */\nfunction kFactor(matchCount) {\n    const ne = matchCount || 1;\n    return (800 / ne);\n}\nObject.freeze(kFactor);\nexport {kFactor};\n\n/**\n * @param {[number, number]} origRatings\n * @param {[number, number]} matchCounts\n * @param {[MatchScore, MatchScore]} result\n */\nfunction calcNewRatings(origRatings, matchCounts, result) {\n    const whiteElo = new EloRank(kFactor(matchCounts[WHITE]));\n    const blackElo = new EloRank(kFactor(matchCounts[BLACK]));\n    const FLOOR = 100;\n    const scoreExpected = [\n        whiteElo.getExpected(origRatings[WHITE], origRatings[BLACK]),\n        blackElo.getExpected(origRatings[BLACK], origRatings[WHITE])\n    ];\n    const newRating = [\n        whiteElo.updateRating(\n            scoreExpected[WHITE],\n            result[WHITE],\n            origRatings[WHITE]\n        ),\n        blackElo.updateRating(\n            scoreExpected[BLACK],\n            result[BLACK],\n            origRatings[BLACK]\n        )\n    ];\n    return newRating.map(\n        (rating) => (\n            (rating < FLOOR)\n            ? FLOOR\n            : rating\n        )\n    );\n}\nObject.freeze(calcNewRatings);\nexport {calcNewRatings};","// @ts-check\nimport React from \"react\";\nimport {FaArrowsAltV} from \"react-icons/fa\";\n\n/**\n * @param {Object} props\n * @param {JSX.Element | string} [props.children]\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\n */\nexport function Button({children, action}\n) {\n    return (\n        <nav>\n            <button onClick={action}>\n                {children}\n            </button>\n        </nav>\n    );\n}\n\n/**\n * @param {Object} props\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\n */\nexport function BackButton({action}) {\n    return <Button action={action}>&lt; Back</Button>;\n}\n\n/**\n * @param {Object} props\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\n */\nexport function OpenButton({action}) {\n    return <Button action={action}>Open &gt;</Button>;\n}\n\n/**\n * @param {Object} props\n * @param {boolean} props.isDragged\n */\nexport function DragIcon({isDragged}) {\n    return (\n        <FaArrowsAltV style={{cursor: isDragged ? 'grabbing' : 'grab'}}\n        tabIndex={-1}/>\n    );\n\n}\n\n/**\n * @param {*[]} arr\n * @param {number} pos\n * @param {number} dir\n */\nexport function moveArrItem(arr, pos, dir) {\n    const newPos = pos + dir;\n    const newArr = [...arr];\n    const movedMethod = newArr.splice(pos, 1)[0];\n    newArr.splice(newPos, 0, movedMethod);\n    return newArr;\n}\n\n/**\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {React.CSSProperties} [props.style]\n */\nexport function Panel({children, style}) {\n    return (\n        <div style={{...style}}>\n            {children}\n        </div>\n    );\n}\n\n/**\n *\n * @param {object} props\n */\nexport function PanelContainer({children}) {\n    return (\n        <div style={{display: \"flex\"}}>\n            {React.Children.map(children, (child) => child)}\n        </div>\n    );\n}","// @ts-check\n/**\n * @typedef {import(\"./index\").Tournament} Tournament\n */\nfunction createTournament(importObj) {\n    /** @type {Tournament} */\n    const tourney = {\n        name: importObj.name || \"\",\n        tieBreaks: importObj.tieBreaks || [0, 1, 2, 3],\n        byeQueue: importObj.byeQueue || [],\n        players: importObj.players || [],\n        roundList: importObj.roundList || []\n    };\n    return tourney;\n}\nexport default Object.freeze(createTournament);","// @ts-check\nimport {firstBy} from \"thenby\";\nimport {dummyPlayer, getPlayer, getPlayerAvoidList} from \"./player\";\n\n/**\n * @typedef {import(\"./index\").ScoreCalculator} ScoreCalculator\n * @typedef {import(\"./index\").Match} Match\n */\n\n/**\n *\n * @param {Match} match\n * @returns {boolean}\n */\nfunction isBye(match) {\n    return match.players.includes(dummyPlayer.id);\n}\n\n/**\n * @param {number} playerId\n * @param {object[]} matchList\n * @returns {number?}\n */\nfunction playerMatchColor(playerId, matchList) {\n    /**@type {number} */\n    let color = null;\n    const match = matchList.filter((m) => m.players.includes(playerId))[0];\n    if (match) {\n        color = match.players.indexOf(playerId);\n    }\n    return color;\n}\nObject.freeze(playerMatchColor);\nexport {playerMatchColor};\n\n/**\n * @type {ScoreCalculator}\n * @returns {Match[]}\n */\nfunction getMatchesByPlayer(playerId, roundList, roundId = null) {\n    let rounds;\n    if (roundId === null) {\n        rounds = roundList;\n    } else {\n        rounds = roundList.slice(0, roundId + 1);\n    }\n    return rounds.reduce( // flatten the rounds to just the matches\n        (acc, round) => acc.concat(round),\n        []\n    ).filter(\n        (match) => match.players.includes(playerId)\n    );\n}\n\n/**\n * @type {ScoreCalculator}\n * @returns {boolean}\n */\nfunction hasHadBye(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        playerId,\n        roundList,\n        roundId\n    ).reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    ).includes(dummyPlayer.id);\n}\nObject.freeze(hasHadBye);\nexport {hasHadBye};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number[]}\n */\nfunction getPlayersByOpponent(opponentId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        opponentId,\n        roundList,\n        roundId\n    ).reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    ).filter(\n        (playerId) => playerId !== opponentId\n    );\n}\nObject.freeze(getPlayersByOpponent);\nexport {getPlayersByOpponent};\n\n/**\n * Get a list of all of a player's scores from each match.\n * @type {ScoreCalculator}\n * @returns {number[]} the list of scores\n */\nfunction playerScoreList(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(playerId, roundList, roundId).map(\n        (match) => match.result[match.players.indexOf(playerId)]\n    );\n}\n\n/**\n * TODO: Maybe merge this with the other function?\n */\n/**\n * @type {ScoreCalculator}\n * @returns {number[]}\n */\nfunction playerScoreListNoByes(playerId, roundList, roundId = null) {\n    return getMatchesByPlayer(\n        playerId,\n        roundList,\n        roundId\n    ).filter(\n        (match) => !isBye(match)\n    ).map(\n        (match) => match.result[match.players.indexOf(playerId)]\n    );\n}\n\n/**\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerScore(playerId, roundList, roundId = null) {\n    let score = 0;\n    const scoreList = playerScoreList(playerId, roundList, roundId);\n    if (scoreList.length > 0) {\n        score = scoreList.reduce((a, b) => a + b);\n    }\n    return score;\n}\nObject.freeze(playerScore);\nexport {playerScore};\n\n/**\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerScoreCum(playerId, roundList, roundId = null) {\n    let runningScore = 0;\n    /** @type {number[]} */\n    let cumScores = [];\n    let scores = playerScoreListNoByes(playerId, roundList, roundId);\n    scores.forEach(function (score) {\n        runningScore += score;\n        cumScores.push(runningScore);\n    });\n    let totalScore = 0;\n    if (cumScores.length !== 0) {\n        totalScore = cumScores.reduce((a, b) => a + b);\n    }\n    return totalScore;\n}\n\n/**\n * Calculate a player's color balance. A negative number means they played as\n * white more. A positive number means they played as black more.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerColorBalance(playerId, roundList, roundId = null) {\n    let color = 0;\n    getMatchesByPlayer(playerId, roundList, roundId).filter(\n        (match) => !isBye(match)\n    ).forEach(\n        function (match) {\n            if (match.players[0] === playerId) {\n                color += -1;\n            } else if (match.players[1] === playerId) {\n                color += 1;\n            }\n        }\n    );\n    return color;\n}\nObject.freeze(playerColorBalance);\nexport {playerColorBalance};\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @type {ScoreCalculator}\n * @param {boolean} [isSolkoff]\n * @returns {number}\n */\nfunction modifiedMedian(pId, roundList, roundId = null, isSolkoff = false) {\n    // get all of the opponent's scores\n    let scores = getPlayersByOpponent(\n        pId,\n        roundList,\n        roundId\n    ).filter(\n        (opponent) => opponent !== dummyPlayer.id\n    ).map(\n        (opponent) => playerScore(opponent, roundList, roundId)\n    );\n    //sort them, then remove the first and last items\n    scores.sort();\n    if (!isSolkoff) {\n        scores.pop();\n        scores.shift();\n    }\n    let finalScore = 0;\n    if (scores.length > 0) {\n        finalScore = scores.reduce((a, b) => a + b);\n    }\n    return finalScore;\n}\n\n/**\n * A shortcut for passing the `isSolkoff` variable to `modifiedMedian`.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction solkoff(playerId, roundList, roundId = null) {\n    return modifiedMedian(playerId, roundList, roundId, true);\n}\n\n/**\n * Get the cumulative scores of a player's opponents.\n * @type {ScoreCalculator}\n * @returns {number}\n */\nfunction playerOppScoreCum(playerId, roundList, roundId = null) {\n    const opponents = getPlayersByOpponent(\n        playerId,\n        roundList,\n        roundId\n    ).filter(\n        (opponent) => opponent !== dummyPlayer.id\n    );\n    let oppScores = opponents.map((p) => playerScoreCum(p, roundList, roundId));\n    let score = 0;\n    if (oppScores.length !== 0) {\n        score = oppScores.reduce((a, b) => a + b);\n    }\n    return score;\n}\n\nconst tieBreakMethods = [\n    {\n        name: \"Modified median\",\n        func: modifiedMedian\n    },\n    {\n        name: \"Solkoff\",\n        func: solkoff\n    },\n    {\n        name: \"Cumulative score\",\n        func: playerScoreCum\n    },\n    {\n        name: \"Cumulative of opposition\",\n        func: playerOppScoreCum\n    },\n    {\n        name: \"Most black\",\n        func: playerColorBalance\n    }\n];\n\nObject.freeze(tieBreakMethods);\nexport {tieBreakMethods};\n\n/**\n * @typedef {import(\"./index\").Standing} Standing\n */\n\n/**\n * @param {Standing} standing1\n * @param {Standing} standing2\n * @returns {boolean}\n */\nfunction areScoresEqual(standing1, standing2) {\n    let areEqual = true;\n    // Check if any of them aren't equal\n    if (standing1.score !== standing2.score) {\n        areEqual = false;\n    }\n    Object.keys(standing1.tieBreaks).forEach(function (index) {\n        if (standing1.tieBreaks[index] !== standing2.tieBreaks[index]) {\n            areEqual = false;\n        }\n    });\n    return areEqual;\n}\n\n/**\n * @typedef {import(\"./index\").Round} Round\n */\n\n/**\n * @param {Round[]} roundList\n * @returns {number[]}\n */\nfunction getAllPlayers(roundList) {\n    const allPlayers = roundList.reduce( // flatten the rounds\n        (acc, round) => acc.concat(round),\n        []\n    ).reduce( // flaten the players\n        (acc, match) => acc.concat(match.players),\n        []\n    );\n    return Array.from(new Set(allPlayers));\n}\n\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * @param {number[]} methods\n * @param {Round[]} roundList\n * @param {number} [roundId]\n * @returns {[Standing[][], string[]]} The standings and the list of method used\n */\nfunction calcStandings(methods, roundList, roundId = null) {\n    const tieBreaks = methods.map((m) => tieBreakMethods[m]);\n    // Get a flat list of all of the players and their scores.\n    const standingsFlat = getAllPlayers(roundList).map(function (pId) {\n        /** @type {Standing} */\n        const standing = {\n            id: pId,\n            score: playerScore(pId, roundList, roundId),\n            tieBreaks: tieBreaks.map((method) => (\n                method.func(pId, roundList, roundId)\n            ))\n        };\n        return standing;\n    });\n    // Create a function to sort the players\n    let sortFunc = firstBy((standing) => standing.score, -1);\n    // For each tiebreak method, chain another `thenBy` to the function.\n    tieBreaks.forEach(function (ignore, index) {\n        sortFunc = sortFunc.thenBy((standing) => standing.tieBreaks[index], -1);\n    });\n    // Finally, sort the players.\n    standingsFlat.sort(sortFunc);\n    /** @type {Standing[][]} */\n    const standingsTree = [];\n    let runningRank = 0;\n    standingsFlat.forEach(function (standing, i, orig) {\n        if (i !== 0) { // we can't compare the first player with a previous one\n            const prevPlayer = orig[i - 1];\n            if (!areScoresEqual(standing, prevPlayer)) {\n                runningRank += 1;\n            }\n        }\n        if (!standingsTree[runningRank]) {\n            standingsTree[runningRank] = [];\n        }\n        standingsTree[runningRank].push(standing);\n    });\n    return [standingsTree, tieBreaks.map((m) => m.name)];\n}\nObject.freeze(calcStandings);\nexport {calcStandings};\n\n/**\n * TODO: merge this with the pairings one?\n * @type {ScoreCalculator}\n * @returns {Object}\n */\nfunction getPlayerMatchData(playerId, roundList, roundNum = null) {\n    return {\n        data: (playerList) => getPlayer(playerId, playerList),\n        score: () => playerScore(playerId, roundList, roundNum),\n        opponents: (playerList) => (\n            getPlayersByOpponent(playerId, roundList, roundNum).map(\n                (pId) => getPlayer(pId, playerList)\n            )\n        ),\n        colorBalance: () => playerColorBalance(playerId, roundList, roundNum),\n        avoidList: (avoidList, playerList) => (\n            getPlayerAvoidList(playerId, avoidList).map(\n                (pId) => getPlayer(pId, playerList)\n            )\n        )\n    };\n}\nObject.freeze(getPlayerMatchData);\nexport {getPlayerMatchData};","// @ts-check\n/**\n * @param {number} playerCount\n */\nfunction calcNumOfRounds(playerCount) {\n    let roundId = Math.ceil(Math.log2(playerCount));\n    if (!Number.isFinite(roundId)) {\n        roundId = 0;\n    }\n    return roundId;\n}\nObject.freeze(calcNumOfRounds);\nexport {calcNumOfRounds};\n\n/**\n * @param {Object[]} list\n * @param {number | string} id\n */\nfunction getById(list, id) {\n    return list.filter((x) => x.id === id)[0];\n}\nObject.freeze(getById);\nexport {getById};\n/**\n * @param {Object[]} list\n * @param {number | string} id\n */\nfunction getIndexById(list, id) {\n    return list.indexOf(getById(list, id));\n}\nObject.freeze(getIndexById);\nexport {getIndexById};","// @ts-check\nimport {firstBy} from \"thenby\";\nimport {chunk, last} from \"lodash\";\nimport blossom from \"edmonds-blossom\";\nimport {dummyPlayer, getPlayerAvoidList, getPlayer} from \"./player\";\nimport {\n    playerScore,\n    playerColorBalance,\n    getPlayersByOpponent,\n    playerMatchColor,\n    hasHadBye\n} from \"./scores\";\n/**\n * @typedef {import(\"./index\").PlayerData} PlayerData\n * @typedef {import(\"./index\").Round} Round\n * @typedef {import(\"./index\").Player} Player\n */\n/**\n * @param {number} playerId\n * @param {Round[]} roundList\n * @param {number} roundId\n * @param {Player[]} playerList\n * @param {number[][]} avoidList\n * @returns {PlayerData}\n */\nfunction genPlayerData(playerId, playerList, avoidList, roundList, roundId) {\n    /**\n     * @param {number} pId\n     * @returns {number | null}\n     */\n    const dueColor = function (pId) {\n        if (!roundList[roundId - 1]) {\n            return null;\n        }\n        let color = 0;\n        let prevColor = playerMatchColor(\n            pId,\n            roundList[roundId - 1]\n        );\n        if (prevColor === 0) {\n            color = 1;\n        }\n        return color;\n    };\n    return {\n        rating: getPlayer(playerId, playerList).rating,\n        id: playerId,\n        score: playerScore(playerId, roundList, roundId),\n        dueColor: dueColor(playerId),\n        colorBalance: playerColorBalance(playerId, roundList, roundId),\n        opponentHistory: getPlayersByOpponent(playerId, roundList, null),\n        upperHalf: false,\n        avoidList: getPlayerAvoidList(playerId, avoidList)\n    };\n}\nObject.freeze(genPlayerData);\nexport {genPlayerData};\n\n/**\n * TODO: These probably need to be tweaked a lot.\n */\n/**\n * @constant avoidMeetingTwicePriority The weight given to avoid players\n * meeting twice. This same weight is given to avoid matching players on each\n * other's \"avoid\" list. This is the highest priority. (USCF § 27A1)\n * @type {number}\n */\nconst avoidMeetingTwicePriority = 20;\n/**\n * @constant sameScoresPriority The weight given to match players with\n * equal scores. This gets muliplied against a ratio taken from the distance\n * between each player's score. For example, if the tournament has players\n * scoring 0, 1, 2, and 3, and if a player scoring 1 gets compared with a\n * player scoring 3, then their `sameScoresPriority` will be reduced by 50%.\n * (`(3 - 1) / 4 = 0.5`) (USCF § 27A2)\n * @type {number}\n */\nconst sameScoresPriority = 16;\n/**\n * @constant differentHalfPriority The weight given to match players in lower\n * versus upper halves. This is only applied to players being matched within\n * the same score group. (USCF § 27A3)\n * @type {number}\n */\nconst differentHalfPriority = 2;\n/**\n * @constant differentDueColorPriority The weight given to match players with\n * opposite due colors. (USCF § 27A4 and § 27A5)\n * @type {number}\n */\nconst differentDueColorPriority = 1;\n// /** @type {number} */\n// const maxPriority = (\n//     avoidMeetingTwicePriority\n//     + sameScoresPriority\n//     + differentHalfPriority\n//     + differentDueColorPriority\n// );\n\n\n/**\n * Create an array of blossom-compatible weighted matchups. This returns\n * an array of each potential match, formatted like so: [idOfPlayer1,\n * idOfPlayer2, priority]. A higher priority means a more likely matchup.\n * @param {PlayerData} player1\n * @param {PlayerData} player2\n * @param {number[]} scoreList\n * @returns {number}\n */\nfunction calcPairIdeal(player1, player2, scoreList) {\n    let priority = 0;\n    let scoreDiff;\n    const metBefore = player1.opponentHistory.includes(player2.id);\n    const mustAvoid = player1.avoidList.includes(player2.id);\n    if (!metBefore && !mustAvoid) {\n        priority += avoidMeetingTwicePriority;\n    }\n    // Calculate the \"distance\" between their scores and multiply that\n    // against the `sameScoresPriority` constant.\n    scoreDiff = Math.abs(\n        scoreList.indexOf(player1.score)\n        - scoreList.indexOf(player2.score)\n    );\n    scoreDiff = (scoreList.length - scoreDiff) / scoreList.length;\n    priority += sameScoresPriority * scoreDiff;\n    // Only include `differentHalfPriority` if they're in the same\n    // score group.\n    if (player1.score === player2.score) {\n        if (player1.upperHalf !== player2.upperHalf) {\n            priority += differentHalfPriority;\n        }\n    }\n    if (player1.dueColor === null) {\n        priority += differentDueColorPriority;\n    } else if (player1.dueColor !== player2.dueColor) {\n        priority += differentDueColorPriority;\n    }\n    return Math.ceil(priority);\n}\nObject.freeze(calcPairIdeal);\nexport {calcPairIdeal};\n\n/**\n * Creates pairings according to the rules specified in USCF § 27, § 28,\n * and § 29. This is a work in progress and does not account for all of the\n * rules yet.\n * @param {object[][]} roundList\n * @param {number} roundId\n * @param {number[]} players\n * @param {object[]} playerList\n * @param {number[][]} avoidList\n */\nfunction pairPlayers(players, roundId, roundList, playerList, avoidList) {\n    /** @type {number[]} */\n    let byeMatch;\n    /** @type {number[][]} */\n    let potentialMatches;\n    /** @type {Number[][]} */\n    let matches;\n    /** @type {number[]} */\n    let blossomResults;\n    /** @type {[PlayerData, PlayerData, number][]} */\n    let reducedResults;\n    /** @type {number[]} */\n    let scoreList;\n    /** @type {PlayerData[]} */\n    let playerData = players.map((playerId) => (\n        genPlayerData(playerId, playerList, avoidList, roundList, roundId)\n    ));\n    scoreList = Array.from(new Set(playerData.map((p) => p.score)));\n    scoreList.sort();\n    // Sort the data so matchups default to order by score and rating.\n    playerData.sort(\n        firstBy((p) => p.score, -1).thenBy((p) => p.rating, -1)\n    );\n    // If there's an odd number of players, time to assign a bye.\n    if (playerData.length % 2 !== 0) {\n        // Assign a bye to the lowest-rated player in the lowest score group.\n        // (USCF § 29L2.)\n        let byePlayerData = last(\n            playerData.filter( // filter out players who have had a bye already.\n                (p) => !hasHadBye(p.id, roundList, roundId)\n            )\n        );\n        // In the impossible situation that *everyone* has played a bye round\n        // previously, then just pick the last player.\n        if (!byePlayerData) {\n            byePlayerData = last(playerData);\n        }\n        byeMatch = [byePlayerData.id, dummyPlayer.id];\n        // Remove the bye'd player from the list so they won't be matched again.\n        playerData = playerData.filter((p) => p !== byePlayerData);\n    }\n    // Determine which players are in the upper and lower halves of their score\n    // groups.\n    scoreList.forEach(function (score) {\n        let playersWithScore = playerData.filter((pd) => pd.score === score);\n        playersWithScore.sort((pd) => pd.rating).reverse();\n        if (playersWithScore.length > 1) {\n            // The first chunk is the upper half\n            chunk(\n                playersWithScore,\n                playersWithScore.length / 2\n            )[0].forEach(function (playerDatum) {\n                playerDatum.upperHalf = true;\n            });\n        }\n    });\n    // Turn the data into blossom-compatible input.\n    potentialMatches = playerData.reduce(\n        function (acc, player1, ignore, src) {\n            const playerMatches = src.filter(\n                (player) => player !== player1\n            ).map(\n                (player2) => [\n                    player1.id,\n                    player2.id,\n                    calcPairIdeal(player1, player2, scoreList)\n                ]\n            );\n            return acc.concat(playerMatches);\n        },\n        []\n    );\n    // Feed all of the potential matches to Edmonds-blossom and let the\n    // algorithm work its magic. This returns an array where each index is the\n    // ID of one player and each value is the ID of the matched player.\n    blossomResults = blossom(potentialMatches);\n    // Translate those IDs into actual pairs of players.\n    reducedResults = blossomResults.reduce(\n        function (acc, p1Id, p2Id) {\n            // Filter out unmatched players. Even though we removed the byes\n            // from the list, blossom will automatically include their missing\n            // IDs in its results.\n            if (p1Id !== -1) {\n                const p1 = playerData.filter((p) => p.id === p1Id)[0];\n                const p2 = playerData.filter((p) => p.id === p2Id)[0];\n                const ideal = potentialMatches.filter(\n                    (pair) => pair[0] === p1Id && pair[1] === p2Id\n                )[0][2];\n                const matched = acc.map((pair) => pair[0]);\n                // Blossom returns a lot of redundant matches. Check that this\n                // matchup wasn't already added.\n                if (!matched.includes(p1) && !matched.includes(p2)) {\n                    acc.push([p1, p2, ideal]);\n                }\n            }\n            return acc;\n        },\n        []\n    );\n    // Sort by net score and rating for board placement.\n    reducedResults.sort(\n        firstBy(\n            /** @param {[PlayerData, PlayerData, number]} pair */\n            (pair) => pair[0].score + pair[1].score,\n            -1\n        ).thenBy(\n            /** @param {[PlayerData, PlayerData, number]} pair */\n            (pair) => pair[0].rating + pair[1].rating,\n            -1\n        )\n    );\n    // Turn the results into new match objects.\n    matches = reducedResults.map(\n        function (pair) {\n            const player1 = pair[0];\n            const player2 = pair[1];\n            // const ideal = pair[2];\n            const match = [player1.id, player2.id];\n            if (player1.colorBalance < player2.colorBalance) {\n                match.reverse();\n            }\n            return match;\n        }\n    );\n    // The bye match always gets added last so as not to affect the numbering.\n    if (byeMatch) {\n        matches.push(byeMatch);\n    }\n    return matches;\n}\n\nexport default Object.freeze(pairPlayers);","// @ts-check\n/**\n * @typedef {import(\"./index\").Match} Match\n */\n/**\n *\n * @param {object} importObj\n */\nfunction createMatch(importObj) {\n    /** @type {Match} */\n    const match = {\n        id: importObj.id,\n        players: importObj.players,\n        result: importObj.result || [0, 0],\n        origRating: importObj.origRating,\n        newRating: importObj.newRating\n    };\n    return match;\n}\nexport default Object.freeze(createMatch);\n","// @ts-check\nimport React, {Fragment, useState} from \"react\";\nimport numeral from \"numeral\";\nimport {OpenButton, PanelContainer, Panel, BackButton} from \"../utility\";\nimport {\n    getPlayer,\n    calcNewRatings,\n    dummyPlayer\n} from \"../../chess-tourney/player\";\nimport {getPlayerMatchData, hasHadBye} from \"../../chess-tourney/scores\";\nimport pairPlayers from \"../../chess-tourney/pairing\";\nimport createMatch from \"../../chess-tourney/match\";\nimport {BLACK, WHITE} from \"../../chess-tourney/constants\";\nimport {\n    getById,\n    getIndexById\n} from \"../../chess-tourney/utility\";\nimport arrayMove from \"array-move\";\n\nexport default function Round({\n    matchList,\n    roundId,\n    playerList,\n    avoidList,\n    tourneyList,\n    tourneyId,\n    setTourneyList,\n    setPlayerList,\n    options\n}) {\n    const tourney = tourneyList[tourneyId];\n    const [selectedMatch, setSelectedMatch] = useState(null);\n    const [selectedPlayers, setSelectedPlayers] = useState([]);\n    function selectPlayer(event) {\n        const pId = Number(event.target.value);\n        if (event.target.checked) {\n            setSelectedPlayers(function (prevState) {\n                // stop React from adding an ID twice in a row\n                if (!prevState.includes(pId)) {\n                    prevState.push(pId);\n                }\n                // ensure that only the last two players stay selected.\n                return prevState.slice(-2);\n            });\n        } else {\n            setSelectedPlayers(selectedPlayers.filter((id) => id !== pId));\n        }\n    }\n    const roundList = tourney.roundList;\n    const matched = matchList.reduce(\n        (acc, match) => acc.concat(match.players),\n        []\n    );\n    const unMatched = tourney.players.filter(\n        (pId) => !matched.includes(pId)\n    );\n    function autoPair(unPairedPlayers) {\n        const nextBye = tourney.byeQueue.filter(\n            (pId) => !hasHadBye(pId, tourney.roundList)\n        )[0];\n        let byeMatch = null;\n        if (nextBye >= 0) {\n            byeMatch = createMatch({\n                id: nextBye + \"-\" + dummyPlayer.id,\n                players: [nextBye, dummyPlayer.id],\n                origRating: [\n                    getPlayer(nextBye, playerList).rating,\n                    dummyPlayer.rating\n                ],\n                newRating: [\n                    getPlayer(nextBye, playerList).rating,\n                    dummyPlayer.rating\n                ]\n            });\n            unPairedPlayers = unPairedPlayers.filter((pId) => pId !== nextBye);\n        }\n        const pairs = pairPlayers(\n            unPairedPlayers,\n            roundId,\n            tourney.roundList,\n            playerList,\n            avoidList\n        );\n        const newMatchList = pairs.map(\n            (pair) => createMatch({\n                id: pair.join(\"-\"),\n                players: [pair[WHITE], pair[BLACK]],\n                origRating: [\n                    getPlayer(pair[WHITE], playerList).rating,\n                    getPlayer(pair[BLACK], playerList).rating\n                ],\n                newRating: [\n                    getPlayer(pair[WHITE], playerList).rating,\n                    getPlayer(pair[BLACK], playerList).rating\n                ]\n            })\n        );\n        if (byeMatch) {\n            newMatchList.push(byeMatch);\n        }\n        // this covers manual bye matches and auto-paired bye matches\n        newMatchList.forEach(function (match) {\n            const dummy = match.players.indexOf(dummyPlayer.id);\n            if (dummy === BLACK) {\n                match.result[WHITE] = options.byeValue;\n            }\n            if (dummy === WHITE) {\n                match.result[BLACK] = options.byeValue;\n            }\n        });\n        tourney.roundList[roundId] = (\n            tourney.roundList[roundId].concat(newMatchList)\n        );\n        setTourneyList([...tourneyList]);\n    }\n    function manualPair(pair) {\n        const match = createMatch({\n            id: pair.join(\"-\"),\n            players: [pair[WHITE], pair[BLACK]],\n            origRating: [\n                getPlayer(pair[WHITE], playerList).rating,\n                getPlayer(pair[BLACK], playerList).rating\n            ],\n            newRating: [\n                getPlayer(pair[WHITE], playerList).rating,\n                getPlayer(pair[BLACK], playerList).rating\n            ]\n        });\n        if (pair[WHITE] === dummyPlayer.id) {\n            match.result = [options.byeValue, 0];\n        }\n        if (pair[BLACK] === dummyPlayer.id) {\n            match.result = [0, options.byeValue];\n        }\n        tourney.roundList[roundId].push(match);\n        setTourneyList([...tourneyList]);\n    }\n    function setMatchResult(matchId, result) {\n        const match = getById(tourney.roundList[roundId], matchId);\n        const mIndex = tourney.roundList[roundId].indexOf(match);\n        const white = getPlayer(match.players[WHITE], playerList);\n        const black = getPlayer(match.players[BLACK], playerList);\n        const [\n            whiteRating,\n            blackRating\n        ] = calcNewRatings(\n            match.origRating,\n            [white.matchCount, black.matchCount],\n            result\n        );\n        const isNew = (match.result.reduce((a, b) => a + b) === 0);\n        setTourneyList(function (prevTourney) {\n            const newTourney = [...prevTourney];\n            newTourney[tourneyId].roundList[roundId][mIndex].result = result;\n            newTourney[tourneyId].roundList[roundId][mIndex].newRating = [\n                whiteRating,\n                blackRating\n            ];\n            return newTourney;\n        });\n        white.rating = whiteRating;\n        black.rating = blackRating;\n        if (isNew) {\n            white.matchCount += 1;\n            black.matchCount += 1;\n        }\n        setPlayerList([...playerList]);\n    }\n    function unMatch(matchId) {\n        const match = getById(tourney.roundList[roundId], matchId);\n        if (match.result.reduce((a, b) => a + b) !== 0) {\n            // checks if the match has been scored yet & resets the players'\n            // records\n            match.players.forEach(function (pId, color) {\n                getPlayer(pId, playerList).matchCount -= 1;\n                getPlayer(pId, playerList).rating = match.origRating[color];\n            });\n        }\n        tourneyList[tourneyId].roundList[roundId] = (\n            tourneyList[tourneyId].roundList[roundId].filter((m) => m !== match)\n        );\n        setSelectedMatch(null);\n        setTourneyList([...tourneyList]);\n    }\n    function swapColors(matchId) {\n        const match = getById(tourney.roundList[roundId], matchId);\n        match.players.reverse();\n        match.origRating.reverse();\n        match.newRating.reverse();\n        setTourneyList([...tourneyList]);\n    }\n    function moveMatch(matchId, direction) {\n        const matchesRef = tourneyList[tourneyId].roundList[roundId];\n        const mIndex = getIndexById(matchesRef, matchId);\n        tourneyList[tourneyId].roundList[roundId] = (\n            arrayMove(matchesRef, mIndex, mIndex + direction)\n        );\n        setTourneyList([...tourneyList]);\n    }\n    return (\n        <PanelContainer>\n            <Panel>\n            <div className=\"toolbar\">\n                <button\n                    onClick={() => unMatch(selectedMatch)}\n                    disabled={selectedMatch === null}>\n                    Unmatch\n                </button>\n                <button\n                    onClick={() => swapColors(selectedMatch)}\n                    disabled={selectedMatch === null}>\n                    Swap colors\n                </button>\n                <button\n                    onClick={() => moveMatch(selectedMatch, -1)}\n                    disabled={selectedMatch === null}>\n                    Move up\n                </button>\n                <button\n                    onClick={() => moveMatch(selectedMatch, 1)}\n                    disabled={selectedMatch === null}>\n                    Move down\n                </button>\n            </div>\n            <table className=\"table__roster\">\n                <caption>Round {roundId + 1} results</caption>\n                <thead>\n                <tr>\n                    <th className=\"row__id\">#</th>\n                    <th className=\"row__player\">White</th>\n                    <th className=\"row__result\">Result</th>\n                    <th className=\"row__player\">Black</th>\n                    <th className=\"row__controls\"></th>\n                </tr>\n                </thead>\n                <tbody>\n                {matchList.map((match, pos) =>\n                    <tr key={match.id}>\n                        <td className=\"table__number row__id\">{pos + 1}</td>\n                        <td className=\"table__player row__player\">\n                            {getPlayer(match.players[0], playerList).firstName}\n                            &nbsp;\n                            {getPlayer(match.players[0], playerList).lastName}\n                        </td>\n                        <td className=\"data__input row__result\">\n                            <input\n                                type=\"radio\"\n                                checked={(\n                                    match.result[0] === 1\n                                    || match.result[0] === options.byeValue\n                                )}\n                                onChange={\n                                    () => setMatchResult(match.id, [1, 0])\n                                }\n                                disabled={\n                                    match.players.includes(dummyPlayer.id)\n                                }/>\n                            <input\n                                type=\"radio\"\n                                checked={(\n                                    match.result[0] === 0.5\n                                    && match.result[1] === 0.5\n                                )}\n                                onChange={\n                                    () => setMatchResult(match.id, [0.5, 0.5])\n                                }\n                                disabled={\n                                    match.players.includes(dummyPlayer.id)\n                                }/>\n                            <input\n                                type=\"radio\"checked={(\n                                    match.result[1] === 1\n                                    || match.result[1] === options.byeValue\n                                )}\n                                onChange={\n                                    () => setMatchResult(match.id, [0, 1])\n                                }\n                                disabled={\n                                    match.players.includes(dummyPlayer.id)\n                                }/>\n                        </td>\n                        <td className=\"table__player row__player\">\n                            {getPlayer(match.players[1], playerList).firstName}\n                            &nbsp;\n                            {getPlayer(match.players[1], playerList).lastName}\n                        </td>\n                        <td className=\"data__input row__controls\">\n                        {(\n                        (selectedMatch !== match.id)\n                        ? <OpenButton\n                            action={() => setSelectedMatch(match.id)} />\n                        : <BackButton action={() => setSelectedMatch(null)} />\n                        )}\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n            </Panel>\n            <Panel>\n            {selectedMatch !== null &&\n                <PanelContainer>\n                    <Panel>\n                        <PlayerMatchInfo\n                            match={getById(matchList, selectedMatch)}\n                            color={0}\n                            playerData={\n                                getPlayerMatchData(\n                                    getById(\n                                        matchList,\n                                        selectedMatch\n                                    ).players[0],\n                                    roundList,\n                                    roundId\n                                )\n                            }\n                            playerList={playerList}/>\n                    </Panel>\n                    <Panel>\n                        <PlayerMatchInfo\n                            match={getById(matchList, selectedMatch)}\n                            color={1}\n                            playerData={\n                                getPlayerMatchData(\n                                    getById(\n                                        matchList,\n                                        selectedMatch\n                                    ).players[1],\n                                    roundList,\n                                    roundId\n                                )\n                            }\n                            playerList={playerList} />\n                    </Panel>\n                </PanelContainer>\n            }\n            {unMatched.length > 0 && (\n                <Fragment>\n                    <h3>Unmatched players</h3>\n                    <ul>\n                        {unMatched.map((pId) =>\n                            <li key={pId}>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={selectedPlayers.includes(pId)}\n                                    value={pId}\n                                    onChange={selectPlayer}/>\n                                {getPlayer(pId, playerList).firstName}&nbsp;\n                                {getPlayer(pId, playerList).lastName}\n                            </li>\n                        )}\n                        {(unMatched.length % 2 !== 0) &&\n                            <li>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={\n                                        selectedPlayers.includes(dummyPlayer.id)\n                                    }\n                                    value={dummyPlayer.id}\n                                    onChange={selectPlayer}/>\n                                {dummyPlayer.firstName} {dummyPlayer.lastName}\n                            </li>\n                        }\n                    </ul>\n                    <button\n                        onClick={() => manualPair(selectedPlayers)}\n                        disabled={selectedPlayers.length !== 2}>\n                        Pair checked\n                    </button>&nbsp;\n                    <button\n                        onClick={() => autoPair(unMatched)}\n                        disabled={unMatched.length === 0}>\n                        Auto-pair\n                    </button>\n                </Fragment>\n            )}\n            </Panel>\n        </PanelContainer>\n    );\n}\n\nfunction PlayerMatchInfo({match, color, playerData, playerList}) {\n    const colorBalance = playerData.colorBalance();\n    let prettyBalance = \"Even\";\n    if (colorBalance < 0) {\n        prettyBalance = \"White +\" + Math.abs(colorBalance);\n    } else if (colorBalance > 0) {\n        prettyBalance = \"Black +\" + colorBalance;\n    }\n    return (\n        <dl className=\"player-card\">\n            <h3>\n                {playerData.data(playerList).firstName}&nbsp;\n                {playerData.data(playerList).lastName}\n            </h3>\n            <dt>Score</dt>\n            <dd>{playerData.score()}</dd>\n            <dt>Rating</dt>\n            <dd>\n                {match.origRating[color]}\n                &nbsp;\n                (\n                {numeral(\n                    match.origRating[color] - match.newRating[color]\n                ).format(\"+0\")}\n                )\n            </dd>\n            <dt>Color balance</dt>\n            <dd>{prettyBalance}</dd>\n            <dt>Opponent history</dt>\n            <dd>\n                <ol>\n                {playerData.opponents(playerList).map((opponent) =>\n                    <li key={opponent.id}>\n                    {opponent.firstName}\n                    </li>\n                )}\n                </ol>\n            </dd>\n            <dt>Players to avoid</dt>\n            <dd>TBD</dd>\n        </dl>\n    );\n}\n","import React, {useState} from \"react\";\nimport {getPlayer} from \"../../chess-tourney/player\";\nimport {tieBreakMethods, hasHadBye} from \"../../chess-tourney/scores\";\nimport {PanelContainer, Panel} from \"../utility\";\nimport arrayMove from \"array-move\";\n\nexport default function PlayerSelect({\n    tourneyList,\n    setTourneyList,\n    tourneyId,\n    playerList\n}) {\n    const players = tourneyList[tourneyId].players;\n    const tourney = tourneyList[tourneyId];\n    const [isSelecting, setIsSelecting] = useState((players.length === 0));\n    const [selectedTb, setSelectedTb] = useState(null);\n    function toggleTb(id = null) {\n        if (!id) {\n            id = selectedTb;\n        }\n        const tieBreaks = tourneyList[tourneyId].tieBreaks;\n        if (tieBreaks.includes(id)) {\n            tourneyList[tourneyId].tieBreaks = tieBreaks.filter(\n                (id2) => id2 !== id\n            );\n        } else {\n            tourneyList[tourneyId].tieBreaks = tieBreaks.concat([id]);\n        }\n        setTourneyList([...tourneyList]);\n    }\n    function moveTb(direction) {\n        const tieBreaks = tourneyList[tourneyId].tieBreaks;\n        const index = tieBreaks.indexOf(selectedTb);\n        console.log(tieBreaks,index, direction);\n        tourneyList[tourneyId].tieBreaks = arrayMove(\n            tieBreaks,\n            index,\n            index + direction\n        );\n        setTourneyList([...tourneyList]);\n    }\n    function togglePlayer(event) {\n        const id = Number(event.target.value);\n        if (event.target.checked) {\n            tourneyList[tourneyId].players = players.concat([id]);\n        } else {\n            tourneyList[tourneyId].players = players.filter(\n                (pId) => pId !== id\n            );\n        }\n        setTourneyList([...tourneyList]);\n    }\n    function selectAll() {\n        tourneyList[tourneyId].players = playerList.map((p) => p.id);\n        setTourneyList([...tourneyList]);\n    }\n    function selectNone() {\n        tourneyList[tourneyId].players = [];\n        setTourneyList([...tourneyList]);\n    }\n    function addByeQueue(id) {\n        tourney.byeQueue = tourney.byeQueue.concat([id]);\n        setTourneyList([...tourneyList]);\n    }\n    function removeByeQueue(id) {\n        tourney.byeQueue = tourney.byeQueue.filter((pId) => pId !== id);\n        setTourneyList([...tourneyList]);\n    }\n    if (isSelecting) {\n        return (\n            <table>\n                <caption>Select players</caption>\n                <thead>\n                    <tr>\n                        <th>First name</th>\n                        <th>Last name</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                {playerList.map((p) =>\n                    <tr key={p.id}>\n                        <td>{p.firstName}</td>\n                        <td>{p.lastName}</td>\n                        <td>\n                            <input\n                                type=\"checkbox\"\n                                value={p.id}\n                                checked={players.includes(p.id)}\n                                onChange={togglePlayer} />\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n                <tfoot>\n                    <tr>\n                        <td colSpan={3}>\n                            <button onClick={() => selectAll()}>\n                                Select all\n                            </button>\n                            <button onClick={() => selectNone()}>\n                                Select none\n                            </button>\n                            <button onClick={() => setIsSelecting(false)}>\n                                Done\n                            </button>\n                        </td>\n                    </tr>\n                </tfoot>\n            </table>\n        );\n    } else {\n        return (\n            <PanelContainer>\n            <Panel>\n            <table>\n                <thead>\n                    <tr>\n                        <th>First name</th>\n                        <th>Last name</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                {players.map((pId) =>\n                    <tr\n                        key={pId}\n                        className={\n                            getPlayer(pId, playerList).type + \" player\"\n                        }>\n                        <td>{getPlayer(pId, playerList).firstName}</td>\n                        <td>{getPlayer(pId, playerList).lastName}</td>\n                        <td>\n                            <button\n                                onClick={() => addByeQueue(pId)}\n                                disabled={tourney.byeQueue.includes(pId)}>\n                                Bye\n                            </button>\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n            <button onClick={() => setIsSelecting(true)}>\n                Edit player roster\n            </button>\n            <h3>Bye queue</h3>\n            <ol>\n            {tourney.byeQueue.map((pId) =>\n                <li\n                    key={pId}\n                    className={(\n                        (hasHadBye(pId, tourney.roundList))\n                        ? \"disabled\"\n                        : \"\"\n                    )}>\n                    {getPlayer(pId, playerList).firstName}&nbsp;\n                    {getPlayer(pId, playerList).lastName}\n                    <button\n                        onClick={() => removeByeQueue(pId)}>\n                        Remove\n                    </button>\n                </li>\n            )}\n            </ol>\n            </Panel>\n            <Panel>\n                <h3>Selected tiebreak methods</h3>\n                <div className=\"toolbar\">\n                    <button\n                        onClick={() => toggleTb()}\n                        disabled={selectedTb === null}>\n                        Toggle\n                    </button>\n                    <button\n                        onClick={() => moveTb(-1)}\n                        disabled={selectedTb === null}>\n                        Move up\n                    </button>\n                    <button\n                        onClick={() => moveTb(1)}\n                        disabled={selectedTb === null}>\n                        Move down\n                    </button>\n                    <button\n                        onClick={() => setSelectedTb(null)}\n                        disabled={selectedTb === null}>\n                        Done\n                    </button>\n                </div>\n                <ol>\n                {tourney.tieBreaks.map((id) =>\n                    <li key={id}>\n                        {tieBreakMethods[id].name}\n                        <button\n                            onClick={() => (\n                                (selectedTb === id)\n                                ? setSelectedTb(null)\n                                : setSelectedTb(id)\n                            )}\n                            disabled={selectedTb !== null && selectedTb !== id}>\n                            {selectedTb === id ? \"Done\" : \"Edit\"}\n                        </button>\n                    </li>\n                )}\n                </ol>\n                <h3>Available tiebreak methods</h3>\n                <ol>\n                {tieBreakMethods.map((method, i) =>\n                    <li key={i}>\n                        <span\n                            className={(\n                                (tourney.tieBreaks.includes(i))\n                                ? \"enabled\"\n                                : \"disabled\"\n                            )}>\n                            {method.name}\n                        </span>\n                        {(!tourney.tieBreaks.includes(i)) &&\n                            <button onClick={() => toggleTb(i)}>\n                                Add\n                            </button>\n                        }\n                    </li>\n                )}\n                </ol>\n            </Panel>\n            </PanelContainer>\n        );\n    }\n}","// @ts-check\nimport React, {Fragment, useState} from \"react\";\nimport {Tabs, TabList, Tab, TabPanels, TabPanel} from \"@reach/tabs\";\nimport {BackButton} from \"../utility\";\nimport {getPlayer, dummyPlayer} from \"../../chess-tourney/player\";\nimport createTournament from \"../../chess-tourney/tournament\";\nimport {calcStandings} from \"../../chess-tourney/scores\";\nimport {calcNumOfRounds} from \"../../chess-tourney/utility\";\nimport Round from \"./round\";\nimport PlayerSelect from \"./player-select\";\nimport {last} from \"lodash\";\n\n\nexport function TournamentList({\n    playerList,\n    setPlayerList,\n    avoidList,\n    tourneyList,\n    setTourneyList,\n    options\n}) {\n    const [openTourney, setOpenTourney] = useState(null);\n    const [newTourneyName, setNewTourneyName] = useState(\"\");\n    function updateNewName(event) {\n        setNewTourneyName(event.target.value);\n    }\n    function makeTournament(event) {\n        event.preventDefault();\n        setTourneyList(tourneyList.concat([\n            createTournament({\n                name: newTourneyName\n            })\n        ]));\n        setNewTourneyName(\"\");\n    }\n    function removeTourney(index) {\n        tourneyList.splice(index, 1);\n        setPlayerList([...playerList]);\n    }\n    let content = <Fragment></Fragment>;\n    if (openTourney !== null) {\n        content = (\n            <TournamentTabs\n                tourneyId={openTourney}\n                playerList={playerList}\n                setOpenTourney={setOpenTourney}\n                backButton={<BackButton action={() => setOpenTourney(null)}/>}\n                avoidList={avoidList}\n                setPlayerList={setPlayerList}\n                tourneyList={tourneyList}\n                setTourneyList={setTourneyList}\n                options={options} />\n        );\n    } else {\n        content = (\n            <div>\n            {(\n                (tourneyList.length > 0)\n                ?\n                    <ol>\n                    {tourneyList.map((tourney, i) =>\n                        <li key={i}>\n                            <button\n                                className=\"tourney-select\"\n                                onClick={() => setOpenTourney(i)}>\n                                {tourney.name}\n                            </button>\n                            <button\n                                className=\"danger\"\n                                onClick={() => removeTourney(i)}>\n                                delete\n                            </button>\n                        </li>\n                    )}\n                    </ol>\n                :\n                    <p>\n                        No tournaments added yet.\n                    </p>\n            )}\n                <form onSubmit={makeTournament}>\n                    <fieldset>\n                        <legend>Make a new tournament</legend>\n                        <input\n                            type=\"text\"\n                            placeholder=\"tournament name\"\n                            value={newTourneyName}\n                            onChange={updateNewName}\n                            required={true}/>\n                        <input type=\"submit\" value=\"Create\" />\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n    return (\n        <div>\n            {content}\n        </div>\n    );\n}\n\n/**\n *\n * @param {Object} props\n */\nexport function TournamentTabs({\n    tourneyId,\n    playerList,\n    setPlayerList,\n    backButton,\n    avoidList,\n    tourneyList,\n    setTourneyList,\n    options\n}) {\n    const tourney = tourneyList[tourneyId];\n    const players = tourney.players;\n    const [defaultTab, setDefaultTab] = useState(0);\n    const [standingTree, tbMethods] = calcStandings(\n        tourney.tieBreaks,\n        tourney.roundList\n    );\n    console.log(standingTree);\n    function newRound() {\n        const round = [];\n        tourney.roundList = tourney.roundList.concat([round]);\n        setTourneyList([...tourneyList]);\n        setDefaultTab(tourney.roundList.length + 1);\n    }\n    function delLastRound() {\n        const round2Del = last(tourney.roundList);\n        // if a match hasn't been scored, then reset it.\n        round2Del.forEach(function (match) {\n            if (match.result.reduce((a, b) => a + b) !== 0) {\n               match.players.forEach(function (pId, color) {\n                    getPlayer(pId, playerList).matchCount -= 1;\n                    getPlayer(pId, playerList).rating = match.origRating[color];\n                });\n            }\n        });\n        tourney.roundList = tourney.roundList.slice(\n            0,\n            tourney.roundList.length - 1\n        );\n        setTourneyList([...tourneyList]);\n    }\n    return (\n        <Tabs defaultIndex={defaultTab}>\n            {backButton}\n            <div>\n                <h2>{tourney.name}</h2>\n                Round progress: {tourney.roundList.length}/\n                {calcNumOfRounds(players.length)}\n                <button onClick={() => newRound()}>New Round</button>\n                <button\n                    onClick={() => delLastRound()}\n                    disabled={tourney.roundList.length === 0}>\n                    Remove last round\n                </button>\n            </div>\n            <TabList>\n                <Tab>Players</Tab>\n                <Tab>Scores</Tab>\n                {Object.keys(tourney.roundList).map((id) =>\n                    <Tab key={id}>Round {Number(id) + 1}</Tab>\n                )}\n            </TabList>\n            <TabPanels>\n            <TabPanel>\n                <PlayerSelect\n                    tourneyList={tourneyList}\n                    setTourneyList={setTourneyList}\n                    tourneyId={tourneyId}\n                    playerList={playerList}/>\n            </TabPanel>\n            <TabPanel>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Name</th>\n                                <th>Score</th>\n                                {tbMethods.map((name, i) =>\n                                    <th key={i}>{name}</th>\n                                )}\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {standingTree.map((standingsFlat, rank) =>\n                            standingsFlat.filter(\n                                (p) => p.id !== dummyPlayer.id\n                            ).map((standing) =>\n                                <tr key={standing.id}>\n                                    <td className=\"table__number\">\n                                        {rank + 1}\n                                    </td>\n                                    <td>\n                                        {getPlayer(\n                                            standing.id,\n                                            playerList\n                                        ).firstName}\n                                    </td>\n                                    <td className=\"table__number\">\n                                        {standing.score}\n                                    </td>\n                                    {standing.tieBreaks.map((score, i) =>\n                                        <td key={i} className=\"table__number\">\n                                            {score}\n                                        </td>\n                                    )}\n                                </tr>\n                            )\n                        )}\n                        </tbody>\n                    </table>\n            </TabPanel>\n            {tourney.roundList.map((matchList, id) =>\n                <TabPanel key={id}>\n                    <Round\n                        matchList={matchList}\n                        roundId={id}\n                        playerList={playerList}\n                        avoidList={avoidList}\n                        tourneyList={tourneyList}\n                        tourneyId={tourneyId}\n                        setTourneyList={setTourneyList}\n                        setPlayerList={setPlayerList}\n                        options={options} />\n                </TabPanel>\n            )}\n            </TabPanels>\n        </Tabs>\n    );\n}\n","// @ts-check\nimport React, {useState, useEffect, Fragment} from \"react\";\nimport {BackButton, OpenButton} from \"./utility\";\nimport createPlayer, {\n    getPlayer,\n    getPlayerAvoidList,\n    kFactor\n} from \"../chess-tourney/player\";\n\n/**\n * @param {Object} props\n */\nexport function PlayerView({\n    playerList,\n    setPlayerList,\n    avoidList,\n    setAvoidList\n}) {\n    /** @type {number} */\n    const defaultOpen = null;\n    const [openPlayer, setOpenPlayer] = useState(defaultOpen);\n    if (openPlayer !== null) {\n        return <PlayerInfoBox\n            key={openPlayer}\n            playerId={openPlayer}\n            setOpenPlayer={setOpenPlayer}\n            playerList={playerList}\n            avoidList={avoidList}\n            setAvoidList={setAvoidList} />;\n    } else {\n        return <PlayerList\n            playerList={playerList}\n            setPlayerList={setPlayerList}\n            setOpenPlayer={setOpenPlayer}/>;\n    }\n}\n\n/**\n * @param {Object} props\n */\nexport function PlayerList({\n    playerList,\n    setPlayerList,\n    setOpenPlayer\n}) {\n    const newPlayerDefault = {firstName: \"\", lastName: \"\", rating: 1200};\n    const [newPlayerData, setNewPlayerdata] = useState(newPlayerDefault);\n    const ids = playerList.map((p) => p.id);\n    ids.sort((a, b) => a - b);\n    ids.reverse();\n    const [nextId, setNextId] = useState(ids[0] + 1);\n    const handleSubmit = function (event) {\n        event.preventDefault();\n        const newPlayer = createPlayer(newPlayerData);\n        newPlayer.id = nextId;\n        setNextId((prevId) => prevId + 1);\n        setNewPlayerdata(newPlayerDefault);\n        setPlayerList(playerList.concat(newPlayer));\n    };\n    const updateField = function (event) {\n        event.preventDefault();\n        /** @type {Object<string, string>} */\n        let update = {};\n        update[event.currentTarget.name] = event.currentTarget.value;\n        setNewPlayerdata(Object.assign({}, newPlayerData, update));\n    };\n    const delPlayer = function (event, player) {\n        event.preventDefault();\n        const index = playerList.indexOf(player);\n        playerList.splice(index, 1);\n        setPlayerList([...playerList]);\n    };\n    let rosterTable = <Fragment></Fragment>;\n    if (playerList.length > 0) {\n        rosterTable =\n        <table>\n            <caption>Demo Roster</caption>\n            <thead>\n                <tr>\n                    <th>First name</th>\n                    <th>Last name</th>\n                    <th>Rating</th>\n                    <th></th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n            {playerList.map((player) =>\n                <tr key={player.id}>\n                    <td className=\"table__player\">{player.firstName}</td>\n                    <td className=\"table__player\">{player.lastName}</td>\n                    <td className=\"table__number\">{player.rating}</td>\n                    <td>\n                        <button\n                            className=\"danger\"\n                            onClick={(event) =>\n                                delPlayer(event, player)\n                            }>\n                            delete\n                        </button>\n                    </td>\n                    <td>\n                        <OpenButton action={() => setOpenPlayer(player.id)} />\n                    </td>\n                </tr>\n                )}\n            </tbody>\n        </table>;\n    }\n    return (\n        <div className=\"roster\">\n            {rosterTable}\n            <form onSubmit={handleSubmit}>\n            <fieldset>\n                <legend>Add your own players</legend>\n                <p>\n                    <label>\n                        First name&nbsp;\n                        <input type=\"text\" name=\"firstName\"\n                            onChange={updateField}\n                            value={newPlayerData.firstName} required />\n                    </label>\n                </p>\n                <p>\n                    <label>\n                        Last name&nbsp;\n                        <input type=\"text\" name=\"lastName\"\n                            onChange={updateField}\n                            value={newPlayerData.lastName} required />\n                    </label>\n                </p>\n                <p>\n                    <label>\n                        Rating&nbsp;\n                        <input type=\"number\" name=\"rating\"\n                            onChange={updateField}\n                            value={newPlayerData.rating} required />\n                    </label>\n                </p>\n                <p>\n                    <input type=\"submit\" value=\"Add\"/>\n                </p>\n            </fieldset>\n            </form>\n        </div>\n    );\n}\n\n/**\n *\n * @param {Object} props\n */\nfunction PlayerInfoBox({\n    playerId,\n    playerList,\n    setOpenPlayer,\n    avoidList,\n    setAvoidList\n}) {\n    const [singAvoidList, setSingAvoidList] = useState(\n        getPlayerAvoidList(playerId, avoidList)\n    );\n    const unAvoided = () => playerList.map(\n        (player) => player.id\n    ).filter(\n        (pId) => !singAvoidList.includes(pId) && pId !== playerId\n    );\n    const [selectedAvoider, setSelectedAvoider] = useState(unAvoided()[0]);\n    function avoidAdd(event) {\n        event.preventDefault();\n        avoidList.push([playerId, Number(selectedAvoider)]);\n        setAvoidList([...avoidList]);\n    };\n    /** @param {number} avoidPlayer */\n    function avoidRemove(avoidPlayer) {\n        setAvoidList(avoidList.filter(\n            (pair) => !(pair.includes(playerId) && pair.includes(avoidPlayer))\n        ));\n    };\n    useEffect(function () {\n        setSelectedAvoider(unAvoided()[0]);\n        setSingAvoidList(getPlayerAvoidList(playerId, avoidList));\n    }, [avoidList]);\n    return (\n        <div>\n            <BackButton action={() => setOpenPlayer(null)}/>\n            <h2>\n                {getPlayer(playerId, playerList).firstName}&nbsp;\n                {getPlayer(playerId, playerList).lastName}\n            </h2>\n            <dl>\n                <dt>Matches played</dt>\n                <dd>{getPlayer(playerId, playerList).matchCount}</dd>\n                <dt>K factor</dt>\n                <dd>{kFactor(getPlayer(playerId, playerList).matchCount)}</dd>\n                <dt>Players to avoid</dt>\n                <dd>\n                    <ul>\n                    {singAvoidList.map((pId) =>\n                        <li key={pId}>\n                            {getPlayer(pId, playerList).firstName}&nbsp;\n                            {getPlayer(pId, playerList).lastName}\n                            <button onClick={() => avoidRemove(pId)}>\n                                x\n                            </button>\n                        </li>\n                    )}\n                    {(avoidList.length === 0) &&\n                        <li>None</li>\n                    }\n                    </ul>\n                </dd>\n            </dl>\n            <form onSubmit={(event) => avoidAdd(event)}>\n            <fieldset>\n                <legend>Add player to avoid</legend>\n                <select\n                    onBlur={(event) => setSelectedAvoider(event.target.value)}>\n                {unAvoided().map((pId) =>\n                    <option key={pId} value={pId}>\n                        {getPlayer(pId, playerList).firstName}&nbsp;\n                        {getPlayer(pId, playerList).lastName}\n                    </option>\n                )}\n                </select>\n                <input type=\"submit\" value=\"Add\"/>\n            </fieldset>\n            </form>\n        </div>\n    );\n}\n","// @ts-check\nimport React from \"react\";\n\nexport function Options({\n    playerList,\n    avoidList,\n    tourneyList,\n    options,\n    setOptions\n}) {\n    const outputPlayers = JSON.stringify({playerList, avoidList}, null, 2);\n    const outputTourney = JSON.stringify(tourneyList, null, 2);\n    return (\n        <div>\n            <form>\n            <fieldset>\n                <legend>Bye options</legend>\n                Select how many points a bye is worth:&nbsp;\n                <input\n                    type=\"number\"\n                    value={options.byeValue}\n                    onChange={\n                        (event) => setOptions({\n                            byeValue: Number(event.target.value)\n                        })\n                    }\n                    />\n            </fieldset>\n            </form>\n            <form onSubmit={(event) => event.preventDefault()}>\n            <fieldset>\n                <legend>Export tournament data</legend>\n                <textarea\n                    className=\"json\"\n                    rows={25}\n                    cols={50}\n                    value={outputTourney}\n                    readOnly\n                    name=\"tourneyData\"\n                    />\n                <input type=\"submit\" value=\"load\" disabled />\n            </fieldset>\n            </form>\n            <form onSubmit={(event) => event.preventDefault()}>\n            <fieldset>\n                <legend>Export player data</legend>\n                <textarea\n                    className=\"json\"\n                    rows={25}\n                    cols={50}\n                    value={outputPlayers}\n                    name=\"playerdata\"\n                    readOnly\n                />\n                <input type=\"submit\" value=\"Load\" disabled />\n            </fieldset>\n            </form>\n        </div>\n    );\n}","// @ts-check\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\";\nimport \"@reach/tabs/styles.css\";\nimport demoRoster from \"./demo-players.json\";\nimport demoTourneyList from \"./demo-tourney.json\";\nimport createPlayer from \"./chess-tourney/player\";\nimport {cleanAvoidList} from \"./chess-tourney/player\";\nimport {TournamentList} from \"./jsx/tournament/index\";\nimport {PlayerView} from \"./jsx/players.jsx\";\nimport {Options} from \"./jsx/options\";\nimport demoOptions from \"./demo-options.json\";\n\nfunction App() {\n    const [playerList, setPlayerList] = useState(\n        demoRoster.playerList.map((p) => createPlayer(p))\n    );\n    const [avoidList, setAvoidList] = useState(demoRoster.avoidList);\n    const [tourneyList, setTourneyList] = useState(demoTourneyList);\n    const [options, setOptions] = useState(demoOptions);\n    useEffect(function () {\n        // remove stale IDs\n        setAvoidList(cleanAvoidList(avoidList, playerList));\n    }, [playerList]);\n    return (\n        <React.StrictMode>\n        <Tabs className=\"app\" defaultIndex={1}>\n            <TabList className=\"header\">\n                <Tab>Players</Tab>\n                <Tab>Tournament</Tab>\n                <Tab>Options</Tab>\n                <Tab>About</Tab>\n            </TabList>\n            <TabPanels className=\"content\">\n                <TabPanel>\n                    <PlayerView\n                        playerList={playerList}\n                        setPlayerList={setPlayerList}\n                        avoidList={avoidList}\n                        setAvoidList={setAvoidList}/>\n                </TabPanel>\n                <TabPanel>\n                    <TournamentList\n                        playerList={playerList}\n                        setPlayerList={setPlayerList}\n                        avoidList={avoidList}\n                        tourneyList={tourneyList}\n                        setTourneyList={setTourneyList}\n                        options={options}/>\n                </TabPanel>\n                <TabPanel>\n                    <Options\n                        playerList={playerList}\n                        avoidList={avoidList}\n                        tourneyList={tourneyList}\n                        options={options}\n                        setOptions={setOptions}\n                    />\n                </TabPanel>\n                <TabPanel>\n                    <p>\n                        {/* eslint-disable-next-line max-len*/}\n                        This is an early, proof-of-concept, demo of a chess tournament manager. <a href=\"https://github.com/johnridesabike/chessahoochee\">You can find out more here.</a>\n                    </p>\n                </TabPanel>\n            </TabPanels>\n            <footer className=\"caution footer\">\n                <Caution />\n            </footer>\n        </Tabs>\n        </React.StrictMode>\n    );\n}\n\nexport const RedTab = (props) => <Tab {...props} style={{ color: \"red\" }} />;\n\nfunction Caution() {\n    return (\n        <p>\n            <span role=\"img\" aria-label=\"waving hand\">👋</span>&nbsp;\n            This is an unstable demo build!\n            Want to help make it better? Head to the&nbsp;\n            <span role=\"img\" aria-label=\"finger pointing right\">👉</span>&nbsp;\n            <a href=\"https://github.com/johnridesabike/chessahoochee\">\n                Git repository\n            </a>.\n        </p>\n    );\n}\n\nexport {App, Caution};\n","/*jslint browser*/\n/*global process fetch*/\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}