{"version":3,"sources":["chess-tourney/roster.js","chess-tourney/player.js","chess-tourney/match.js","chess-tourney/round.js","chess-tourney/tournament.js","demo-players.js","chess-tourney-ui.js","App.js","serviceWorker.js","index.js"],"names":["Roster","players","arguments","length","undefined","this","all","inactive","Object","defineProperties","prototype","active","get","_this","filter","i","includes","Player","firstName","lastName","rating","dummy","assign","DUMMYPLAYER","ELO","require","Match","round","white","black","result","scoreExpected","origRating","newRating","dummies","map","p","whitePlayer","set","player","blackPlayer","whiteOrigRating","blackOrigRating","isComplete","reduce","a","b","isBye","playerInfo","index","indexOf","score","blackWon","calcRatings","whiteWon","draw","resetResult","getExpected","updateRating","chain","flatten","zip","Round","tourney","roundNum","prevRound","roster","playerTree","matches","hasDummy","m","pairPlayers","forEach","playerScore","push","keys","reverse","scoreList","oddPlayer","splice","newGroup","sortBy","chunk","value","upperHalf","lowerHalf","match","construct","concat","toConsumableArray","upperHalfHistory","p2","playerOppHistory","error","console","log","player1","history","othersHistory","slice","_this$_findAMatch","_findAMatch","x","_this$_findAMatch2","slicedToArray","player2","_this$_findAMatch3","_this$_findAMatch4","_this$_findAMatch5","_this$_findAMatch6","foundASwap","otherPlayer","otherMatch","otherPlayer2","otherHistory","pool","newMatch","_this2","blackList","lastColor","playerColor","hasntPlayed","oppColor","playerColorBalance","playerMatch","theMatch","color","addPlayer","firstBy","last","times","Tournament","name","timeControl","byeValue","roundList","isNewRoundReady","addPlayers","deactivatePlayer","activatePlayer","removePlayer","playerMatchHistory","numOfRounds","Math","ceil","log2","Infinity","calcStandings","playerScoreList","scores","playerScoreCum","runningScore","cumScores","totalScore","playerStandings","playersClone","sort","thenBy","modifiedMedian","solkoff","playerOppScoreCum","_this3","opponent","pop","shift","finalScore","opponents","_this4","oppScores","newRound","demoPlayers","lastname","MainRoster","_ref","_useState","useState","_useState2","setRoster","_useState3","_useState4","demoLoaded","setDemoLoaded","newPlayer","updateField","event","target","react_default","createElement","className","key","onClick","disabled","demoRoster","onSubmit","preventDefault","type","onChange","required","_ref2","_useState5","o","_useState6","setMatches","setWinner","origMatch","checked","Standings","_ref3","cvlTourney","App","contents","tabList","setTabList","currentTab","setCurrentTab","tab","chess_tourney_ui_Round","alert","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79961324.chunk.js","sourcesContent":["/**\n * Roster class.\n * @param {Array} players \n */\nfunction Roster(players = []) {\n  if (!(this instanceof Roster)) {\n    return new Roster(players)\n  }\n  this.all = players;\n  this.inactive = [];\n}\n\nObject.defineProperties(\n  Roster.prototype,\n  {\n    active: {\n      get: function() { return this.all.filter(i => !this.inactive.includes(i)) }\n    }\n  }\n);\n\nexport default Roster;","/**\n * Represents an indivudal player. Call it with `Player('John', ...)` or\n * `Player({firstName: 'John', ...})`. The latter is convenient for converting \n * JSON objects.\n * @param {string or object} firstName\n * @param {string} lastName\n * @param {int}    rating\n */\nfunction Player(firstName, lastName = '', rating = 1200) {\n  if (!(this instanceof Player)) {\n    return new Player(firstName, lastName, rating)\n  }\n  this.dummy = false;\n  if (typeof firstName === 'object') {\n    Object.assign(this, firstName)\n  } else {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.rating = rating;\n  }\n}\n\n/**\n * A stand-in for bye matches.\n * @constant {Player} DUMMYPLAYER\n */\nconst DUMMYPLAYER =  Player('Dummy');\nDUMMYPLAYER.dummy = true;\nDUMMYPLAYER.rating = 0;\n\nexport { Player, DUMMYPLAYER };","import  { DUMMYPLAYER } from './player';\nconst EloRank = require('elo-rank');\n\n/**\n * TODO: make this customizable for each player based on their match history.\n * @constant KFACTOR The k-factor used for calculating ratings\n * @constant ELO     The EloRank object\n */\nconst KFACTOR = 16;\nconst ELO = new EloRank(KFACTOR);\n\n/**\n * Represents a match in a tournament.\n *\n * @param {Player} black\n * @param {Player} white\n */\nfunction Match(round, white, black) {\n  if (!(this instanceof Match)) {\n    return new Match(round, white, black);\n  }\n  this.round = round;\n  this.players = [white, black];\n  this.result = [0, 0];\n  this.scoreExpected = [0, 0]; // used for the Elo calculator\n  this.origRating = [white.rating, black.rating]; // cache the ratings from when the match began\n  this.newRating = [white.rating, black.rating]; // the newly calculated ratings after the match ends\n  // set bye rounds\n  const dummies = this.players.map(p => p.dummy);\n  if (dummies[0]) {\n    this.result = [0, 1];\n  } else if(dummies[1]) {\n    this.result = [1, 0];\n  }\n}\n\nObject.defineProperties(\n  Match.prototype,\n  {\n    whitePlayer: {\n      get: function(){ return this.players[0]},\n      set: function(player){ this.players[0] = player}\n    },\n    blackPlayer: {\n      get: function(){ return this.players[1]},\n      set: function(player){ this.players[1] = player}\n    },\n    whiteOrigRating: {\n      get: function(){ return this.origRating[0]}\n    },\n    blackOrigRating: {\n      get: function(){ return this.origRating[1]}\n    },\n    isComplete: {\n      get: function(){ return this.result.reduce((a, b) => a + b) !== 0}\n    },\n    isBye: {\n      get: function(){ return this.players.includes(DUMMYPLAYER)}\n    }\n  }\n);\n\nMatch.prototype.playerInfo = function(player) {\n  var index = this.players.indexOf(player)\n  if (index === -1) {\n    return false;\n  }\n  return {\n    origRating: this.origRating[index],\n    newRating: this.newRating[index],\n    score: this.result[index]\n  }\n}\n\n/**\n * Sets black as the winner.\n */\nMatch.prototype.blackWon = function() {\n  this.result = [0, 1];\n  this.calcRatings();\n}\n\n/**\n * Sets white as the winner.\n */\nMatch.prototype.whiteWon = function() {\n  this.result = [1, 0];\n  this.calcRatings();\n}\n\n/**\n * Sets result as a draw.\n */\nMatch.prototype.draw = function() {\n  this.result = [0.5, 0.5];\n  this.calcRatings();\n}\n\nMatch.prototype.resetResult = function() {\n  this.result = [0, 0];\n  this.newRating = this.origRating;\n}\n\nMatch.prototype.calcRatings = function() {\n  this.scoreExpected = [\n    ELO.getExpected(this.whiteOrigRating, this.blackOrigRating),\n    ELO.getExpected(this.blackOrigRating, this.whiteOrigRating),\n  ];\n  this.newRating = [\n    ELO.updateRating(this.scoreExpected[0], this.result[0], this.whiteOrigRating),\n    ELO.updateRating(this.scoreExpected[1], this.result[1], this.blackOrigRating)\n  ];\n  this.whitePlayer.rating = this.newRating[0];\n  this.blackPlayer.rating = this.newRating[1];\n}\n\n// This fails for some reason...\n// module.exports = {Tournament, Player};\n\nexport default Match;","import { DUMMYPLAYER } from './player';\nimport Match from './match';\nconst { chain, flatten, zip } = require('lodash');\n\n/**\n * Represents a round in a tournament.\n */\nfunction Round(tourney, roundNum, prevRound, players) {\n  if (!(this instanceof Round)) {\n    return new Round(tourney, roundNum, prevRound, players)\n  }\n  this.roundNum = roundNum;\n  this.tourney = tourney;\n  this.roster = players;\n  this.prevRound = prevRound;\n  this.playerTree = {};\n  this.matches = [];\n  this.hasDummy = false;\n}\n\nObject.defineProperties(\n  Round.prototype,\n  {\n    isComplete: {\n      get: function(){\n        return !this.matches.map(m => m.isComplete).includes(false);\n      }\n    }\n  }\n);\n\n/**\n * Pair the players\n */\nRound.prototype.pairPlayers = function() {\n  /**\n   * Part 1: Split players into separate groups based on their scores\n   * (USCF § 27A2)\n   * Tree structure:\n   * {\n   *  score: [list of players],\n   *  ...\n   * }\n   */\n  this.roster.forEach(player => {\n    var score = this.tourney.playerScore(player);\n    if(!(score in this.playerTree)) {\n      this.playerTree[score] = [];\n    }\n    this.playerTree[score].push(player);\n  });\n  /**\n   * Part 2: Split each score group into an upper half and a lower half, \n   * based on rating (USCF § 27A3)\n   * Tree structure:\n   * {\n   *  score: [\n   *    [upper half list of players],\n   *    [lower half list of players]\n   *  ],\n   *  ...\n   * }\n   */\n  Object.keys(this.playerTree).reverse().forEach((score, i, scoreList) => {\n    var players = this.playerTree[score];\n    /**\n     * If there's an odd number of players in this score group,\n     */\n    if (players.length % 2 !== 0) {\n      /**\n       * ...and if there's an odd number of players in the total round, then\n       * add a dummy player.\n       */\n      if (this.roster.length % 2 !== 0 && !this.hasDummy) {\n        players.push(DUMMYPLAYER);\n        this.hasDummy = true;\n      /**\n       * But if there's an even number of players in the total round, then\n       * just move a player to the next score group.\n       */\n      } else {\n        var oddPlayer = players[players.length - 1];\n        players.splice(players.length - 1, 1);\n        var newGroup = scoreList[i + 1]; // the group to move the player to\n        if(!(newGroup in this.playerTree)) {\n          this.playerTree[newGroup] = [];\n        }\n        this.playerTree[newGroup].push(oddPlayer);\n      }\n    }\n    /**\n     * If there are no players in this group (e.g. a lone player got pushed\n     * to another group) then delete the key.\n     */\n    if (players.length === 0) {\n      delete this.playerTree[score];\n    } else {\n      this.playerTree[score] = chain(players)\n      .sortBy('rating')\n      .reverse()\n      .chunk(players.length / 2)\n      .value();\n    }\n  });\n  Object.keys(this.playerTree).forEach(score => {\n    // name the upperHalf and lowerHalf to make the code easier to read\n    var upperHalf = this.playerTree[score][0];\n    var lowerHalf = this.playerTree[score][1];\n    /**\n     * If there was no previous round, zip the players and call it a day.\n     */\n    if (this.prevRound === undefined) {\n      zip(upperHalf, lowerHalf)\n        .forEach(match => \n          this.matches.push(new Match(this, ...match))\n        );\n    } else {\n      /**\n       * If there was a previous round, then things get complicated....\n       * 1. Record each upper-half player's opponent history\n       * 2. Iterate through each upper-half player to find an opponent in the\n       *    lower half\n       * 3. Attempt to match with a lower-half opponent who isn't in their\n       *    history yet AND who is in the history of other upper-half\n       *    players. The second part helps eliminate a small percentage of\n       *    history overlap.\n       *      * (USCF § 27A1 - highest priority rule)\n       * 4. If no opponent was found, try again but don't consider the\n       *    history of other upper-half players.\n       * 5. If still no opponent was found, just pick whoever is left in the\n       *    lower half, even if they've played each other before.\n       * 6. If they have played each other before, attempt to swap opponents\n       *    with another upper-half player.\n       * \n       * This code is certainly not the most reliable or the most efficient.\n       * Changes will be needed.\n       */\n      /**\n       * 1.\n       * @var {Array} upperHalfHistory Each index matches the player's indexin upperHalf. Each sub-array is a list of their opponents.\n       */\n      try {\n        var upperHalfHistory = upperHalf.map(p => \n          [].concat(lowerHalf).concat(upperHalf) // merge the upperHalf and lowerHalf\n            .filter(p2 =>\n              this.tourney.playerOppHistory(p2).includes(p) // filter the players who have played this player\n            )\n        );\n      } catch (error) {\n        console.log(score, this.playerTree[score]);\n        throw error;\n      }\n      /**\n       * 2.\n       */\n      upperHalf.forEach(player1 => {\n        var history = upperHalfHistory[upperHalf.indexOf(player1)];\n        var othersHistory = flatten(upperHalfHistory\n          .slice(upperHalf.indexOf(player1))\n        );\n        /**\n         * 3.\n         */\n        var [ player2, match ] = this\n          ._findAMatch(player1, lowerHalf.filter(x =>\n            othersHistory.includes(x)), history\n        );\n        /**\n         * 4.\n         */\n        if (!player2) {\n          [ player2, match ] = this._findAMatch(player1, lowerHalf, history);\n        }\n        /**\n         * 5.\n         */\n        if (!player2) {\n          [ player2, match ] = this._findAMatch(player1, lowerHalf, []);\n        }\n        /**\n         * 6.\n         */\n        if (history.includes(player2)) {\n          var foundASwap = false;\n          upperHalf.filter(p => p !== player1).forEach(otherPlayer => {\n            if(!foundASwap) {\n              var otherMatch = this.matches\n                .filter(m => m.players.includes(otherPlayer))[0];\n              if(otherMatch) {\n                var otherPlayer2 = otherMatch.players\n                  .filter(p => p !== otherPlayer)[0];\n                var otherHistory = upperHalfHistory[upperHalf\n                  .indexOf(otherPlayer)];\n                if (!history.includes(otherPlayer2)\n                    && !otherHistory.includes(player2)) {\n                  match.players = [player1, otherPlayer2];\n                  otherMatch.players = [otherPlayer, player2];\n                  foundASwap = true;\n                }\n              }\n            }\n          })\n        }\n      })\n    }\n  })\n  return this.matches;\n}\n  \n/**\n * Find a match for a given player.\n * @param   {Player} player1  The player to be paired\n * @param   {Array}  pool      The pool of available players\n * @param   {Array}  blackList A blacklist of players, possibly in the pool, who should not be paired\n * @returns {Array}  The paired player and the Match object. Both will be undefined if no match was made.\n */\nRound.prototype._findAMatch = function(player1, pool, blackList = []) {\n  /**\n   * Try to pair the player as the opposite color as their last round.\n   * (USCF § 27A4 and § 27A5)\n   */\n  var lastColor = this.prevRound.playerColor(player1);\n  var hasntPlayed = pool\n    .filter(p2 => !blackList.includes(p2)) // Filter anyone on the blacklist (e.g. past opponents [USCF § 27A1])\n    .filter(p2 => p2 !== player1) // Don't pair players with themselves\n    .filter(p2 => !flatten(this.matches.map(m => m.players)).includes(p2)); // Don't pair anyone who's already been paired\n  /**\n   * Prioritize opponents who played that color for *their* last round. (USCF § 27A4 and § 27A5)\n   */\n  var oppColor = pool\n    .filter(p2 => lastColor !== this.prevRound.playerColor(p2));\n  var player2 = hasntPlayed\n    .filter(p2 => oppColor.includes(p2))[0] || hasntPlayed[0];\n  var newMatch;\n  if (player2) {\n    newMatch = new Match(this, player1, player2);\n    if (this.tourney.playerColorBalance(player1) > this.tourney.playerColorBalance(player2)) {\n      newMatch.players.reverse();\n    }\n    this.matches.push(newMatch);\n  }\n  return [ player2, newMatch ];\n}\n\nRound.prototype.playerMatch = function(player) {\n  var theMatch;\n  this.matches.forEach(match => {\n    if (match.players.includes(player)) {\n      theMatch = match;\n    }\n  });\n  return theMatch;\n}\n\n/**\n * Sees what color a player was for this round.\n * @param {Player} player \n * @return {number} 0 for white and 1 for black\n */\nRound.prototype.playerColor = function(player) {\n  var color = -1;\n  this.matches.forEach(match => {\n    if (match.players.includes(player)) {\n      color = match.players.indexOf(player);\n    }\n  })\n  return color;\n}\n\n/**\n * Add a player to the roster\n *\n * @param {Player} player\n */\nRound.prototype.addPlayer = function(player) {\n  this.players.push(player);\n  return this;\n}\n\nexport default Round;","import Roster from './roster';\nimport Round from './round';\nconst { firstBy }     = require('thenby'),\n      { last, times } = require('lodash');\n\n/**\n * Tournament class\n * @param {string} name\n * @param {int}    timeControl\n * @param {array}  roster\n * @param {int}    byeValue\n */\nfunction Tournament(name = '', timeControl = 15, roster = [], byeValue = 1) {\n  if (!(this instanceof Tournament)) {\n    return new Tournament(name, timeControl, roster, byeValue)\n  }\n  this.name = name;\n  this.timeControl = timeControl;\n  this.roster = Roster(roster);\n  this.roundList = [];\n  this.byeValue = byeValue;\n}\n\nObject.defineProperties(\n  Tournament.prototype,\n  {\n    isNewRoundReady: {\n      get: function() {\n        var isReady = false;\n        if (this.roundList.length > 0) {\n          isReady = last(this.roundList).isComplete;\n        } else {\n          isReady = (this.roster.all.length > 0);\n        }\n        return isReady;\n      }\n    }\n  }\n);\n\n/**\n * Add a player to the roster.\n * @param {Player} player the player to add\n */\nTournament.prototype.addPlayer = function(player) {\n  this.roster.all.push(player);\n}\n\n/**\n * Add a list of players to the roster.\n * @param {Array} players the list of players to add\n */\nTournament.prototype.addPlayers = function(players) {\n  this.roster.all = this.roster.all.concat(players);\n}\n\n/**\n * Remove a player from the active roster. This player won't be placed in\n * future rounds.\n * @param {Player} player \n */\nTournament.prototype.deactivatePlayer = function(player) {\n  this.roster.inactive.push(player);\n}\n  \n/**\n * Add a player to the active roster. This player will be placed in future\n * rounds.\n * @param {Player} player \n */\nTournament.prototype.activatePlayer = function(player) {\n  this.roster.inactive.splice(this.roster.inactive.indexOf(player), 1);\n}\n\nTournament.prototype.removePlayer = function(player) {\n  if (this.playerMatchHistory(player).length > 0) {\n    return false; // TODO: add a helpful error message\n  }\n  delete this.roster.all[this.roster.all.indexOf(player)];\n  return this;\n}\n\n/**\n * Calculate number of rounds.\n * @returns {int} the number of rounds\n */\nTournament.prototype.numOfRounds = function() {\n  var roundNum = Math.ceil(Math.log2(this.roster.active.length));\n  if (roundNum === -Infinity) {\n    roundNum = 0;\n  }\n  return roundNum;\n}\n\n/**\n * Calculate standings\n */\nTournament.prototype.calcStandings = function() {\n  return true; // todo\n}\n\nTournament.prototype.playerMatchHistory = function(player, roundNum = null) {\n  if (roundNum === null) {\n    roundNum = this.roundList.length;\n  }\n  var matches = []\n  times(roundNum + 1, i => {\n    if (this.roundList[i] !== undefined) {\n      this.roundList[i].matches.forEach(match => {\n        if (match.players.indexOf(player) !== -1) {\n          matches.push(match);\n        }\n      })\n    }\n  });\n  return matches;\n}\n\n/**\n * Get a list of all of a player's scores from each match.\n * @param {Player} player\n * @returns {array} the list of scores\n */\nTournament.prototype.playerScoreList = function(player, roundNum = null) {\n  var scores = this\n    .playerMatchHistory(player, roundNum)\n    .map(match => \n      match.result[match.players.indexOf(player)]);\n  return scores;\n}\n\n/**\n * Get the total score of a player after a given round.\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.playerScore = function(player, roundNum = null) {\n  var score = 0;\n  var scores = this.playerScoreList(player, roundNum);\n  if (scores.length > 0) {\n    score = scores.reduce((a, b) => a + b);\n  }\n  return score;\n}\n\n/**\n * Get the cumulative score of a player\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.playerScoreCum = function(player, roundNum = null) {\n  var runningScore = 0;\n  var cumScores = []\n  var scores = this.playerScoreList(player, roundNum);\n  scores.forEach(score => {\n    runningScore += score;\n    cumScores.push(runningScore);\n  });\n  var totalScore = 0;\n  if (cumScores.length !== 0) {\n    totalScore = cumScores.reduce((a, b) => a + b);\n  }\n  return totalScore;\n}\n\n/**\n * Calculate a player's color balance\n * @param {Player} player\n * @param {Int}    round The ID of the highest round to consider\n * @returns {Int} A negative number means they played as black more. A positive number means they played as white more.\n */\nTournament.prototype.playerColorBalance = function(player, roundNum = null) {\n  var color = 0;\n  this\n    .playerMatchHistory(player, roundNum)\n    .forEach(match => {\n      if (match.players[0] === player) {\n        color += 1;\n      } else if (match.players[1] === player) {\n        color += -1;\n      }\n    }\n  );\n  return color;\n}\n\n/**\n * Sort the standings by score and USCF tie-break rules from § 34. USCF\n * recommends using these methods in-order: modified median, solkoff, \n * cumulative, and cumulative of opposition.\n * @param {number} roundNum \n * @returns {Array} The sorted list of players\n */\nTournament.prototype.playerStandings = function(roundNum = null) {\n  var playersClone = [].concat(this.roster.all);\n  playersClone.sort(\n    firstBy(p => this.playerScore(p, roundNum), -1)\n    .thenBy(p => this.modifiedMedian(p, roundNum), -1) /* USCF § 34E1 */\n    .thenBy(p => this.solkoff(p, roundNum), -1) /* USCF § 34E2 */\n    .thenBy(p => this.playerScoreCum(p, roundNum), -1) /* USCF § 34E3 */\n    .thenBy(p => this.playerOppScoreCum(p, roundNum), -1) /* USCF § 34E9 */\n  );\n  return playersClone;\n}\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.modifiedMedian = function(player, roundNum = null, solkoff = false) {\n  // get all of the opponent's scores\n  var scores = this.playerOppHistory(player, roundNum)\n    .map(opponent => this.playerScore(opponent, roundNum));\n  //sort them, then remove the first and last items\n  scores.sort();\n  if (!solkoff) {\n    scores.pop();\n    scores.shift();\n  }\n  var finalScore = 0;\n  if (scores.length > 0) {\n    finalScore = scores.reduce((a,b) => a + b);\n  }\n  return finalScore;\n}\n  \n/**\n * A shortcut for passing the `solkoff` variable to `this.modifiedMedian`.\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.solkoff = function(player, roundNum = null) {\n  return this.modifiedMedian(player, roundNum, true);\n}\n\n/**\n * Generate a list of a player's opponents.\n * @param   {Player} player\n * @returns {Array} A list of past opponents\n */\nTournament.prototype.playerOppHistory = function(player, roundNum = null) {\n  var opponents = [];\n  this\n    .playerMatchHistory(player, roundNum)\n    .forEach(match => {\n      opponents = opponents.concat(\n        match.players\n          .filter(player2 => player2 !== player)\n          .filter(player2 => !opponents.includes(player2))\n      );\n    }\n  );\n  return opponents\n}\n\nTournament.prototype.playerOppScoreCum = function(player, round = null) {\n  const opponents = this.playerOppHistory(player, round);\n  var oppScores = opponents.map(p => this.playerScoreCum(p, round));\n  var score = 0;\n  if (oppScores.length !== 0){\n    score = oppScores.reduce((a, b) => a + b);\n  }\n  return score;\n}\n\n/**\n * Generates a new round.\n * @returns {Array} the new round\n */\nTournament.prototype.newRound = function() {\n  if (!this.isNewRoundReady) {\n    return false;\n  }\n  var newRound = Round(\n    this,\n    this.roundList.length,\n    last(this.roundList),\n    this.roster.active\n  );\n  newRound.pairPlayers();\n  this.roundList.push(newRound);\n  return newRound;\n}\n\nexport default Tournament;","const demoPlayers = [\n  {firstName: 'Matthew',     lastName: 'A', rating: 800},\n  {firstName: 'Mark',        lastName: 'B', rating: 850},\n  {firstName: 'Luke',        lastname: 'C', rating: 900},\n  {firstName: 'John',        lastname: 'D', rating: 950},\n  {firstName: 'Simon',       lastname: 'E', rating: 1000},\n  {firstName: 'Andrew',      lastname: 'F', rating: 1050},\n  {firstName: 'James',       lastname: 'G', rating: 1100},\n  {firstName: 'Philip',      lastname: 'H', rating: 1150},\n  {firstName: 'Bartholomew', lastname: 'I', rating: 1200},\n  {firstName: 'Thomas',      lastname: 'J', rating: 1250},\n  {firstName: 'Catherine',   lastname: 'K', rating: 1300},\n  {firstName: 'Clare',       lastname: 'L', rating: 1350},\n  {firstName: 'Judas',       lastname: 'M', rating: 1400},\n  {firstName: 'Matthias',    lastname: 'N', rating: 1450},\n  {firstName: 'Paul',        lastname: 'O', rating: 1500},\n  {firstName: 'Mary',        lastname: 'P', rating: 1600},\n  {firstName: 'Theresa',     lastname: 'Q', rating: 1650},\n  {firstName: 'Megan',       lastname: 'R', rating: 1700},\n  {firstName: 'Elizabeth',   lastname: 'S', rating: 1750}\n];\n\nexport default demoPlayers;","import React, { useState } from 'react';\nimport { Player } from './chess-tourney/player';\nimport demoRoster from './demo-players';\n\nfunction MainRoster ({tourney}) {\n  const [roster, setRoster] = useState(tourney.roster.all);\n  const [demoLoaded, setDemoLoaded] = useState(false);\n  const newPlayer = {firstName: '', lastName: '', rating: 1200};\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    tourney.addPlayer(\n      Player(\n        newPlayer['firstName'],\n        newPlayer['lastName'],\n        newPlayer['rating']\n      )\n    );\n    setRoster([].concat(tourney.roster.all));\n  }\n  const updateField = (event) => {\n    newPlayer[event.target.name] = event.target.value;\n  }\n  const loadDemo = () => {\n    var players = demoRoster.slice(0,16).map(p => Player(p));\n    tourney.addPlayers(players);\n    setDemoLoaded(true);\n    setRoster([].concat(tourney.roster.all));\n  }\n  const deactivatePlayer = (player) => {\n    var baleted = tourney.removePlayer(player);\n    if (!baleted) {\n      tourney.deactivatePlayer(player);\n    }\n    setRoster([].concat(tourney.roster.all));\n  }\n  const activatePlayer = (player) => {\n    tourney.activatePlayer(player);\n    setRoster([].concat(tourney.roster.all));\n  }\n  return (\n    <div className=\"roster\">\n      <table>\n        <caption>Roster</caption>\n        <thead>\n          <tr>\n            <th>First name</th>\n            <th>Rating</th>\n            <th>Rounds played</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          { roster.map((player, i) =>\n            <tr key={i} \n              className={tourney.roster.inactive.includes(player) ? 'inactive' : 'active'}>\n              <td className=\"table__player\">{player.firstName}</td>\n              <td className=\"table__number\">{player.rating}</td>\n              <td className=\"table__number\">\n                {tourney.playerMatchHistory(player).length}\n              </td>\n              <td>\n              {tourney.roster.inactive.includes(player)\n                ? <button onClick={() => activatePlayer(player)}>Activate</button>\n                : <button onClick={() => deactivatePlayer(player)}>Deactivate</button>\n              }\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <p>\n        <button disabled={demoLoaded} onClick={loadDemo}>Load a demo roster</button>\n      </p>\n      <p>\n        Or add your own players:\n      </p>\n      <form onSubmit={handleSubmit}>\n        <label>\n          First name\n          <input type=\"text\" name=\"firstName\" onChange={updateField} required />\n        </label>\n        <label>\n          Last name\n          <input type=\"text\" name=\"lastName\" onChange={updateField} required />\n        </label>\n        <label>\n          Rating\n          <input type=\"number\" name=\"rating\" onChange={updateField} value=\"1200\" />\n        </label>\n        <input type=\"submit\" value=\"Add\"/>\n      </form>\n      <p className=\"center\">Total rounds: {tourney.numOfRounds()}</p>\n    </div>\n  );\n}\n\nfunction Round ({tourney, roundNum}) {\n  /**\n   * Be careful when using the `setState` matches and the API's matches.\n   * They have to mirror each other but can't be the same objects.\n   */\n  const round = tourney.roundList[roundNum];\n  const [matches, setMatches] = useState(round.matches.map(o => Object.assign({}, o)));\n  const setWinner = (match, color, index, event) => {\n    var origMatch = round.matches[index];\n    if(event.target.checked) {\n      if(color === 0) {\n        origMatch.whiteWon();\n      } else if (color === 1) {\n        origMatch.blackWon();\n      } else if (color === 0.5) {\n        origMatch.draw();\n      }\n    } else {\n      origMatch.resetResult();\n    }\n    // matches[index] = match;\n    setMatches(round.matches.map(o => Object.assign({}, o)));\n  }\n  return (\n    <div>\n      <table key={round.roundNum}>\n        <caption>Round {round.roundNum + 1} results</caption>\n        <thead>\n          <tr>\n            <th>Won</th>\n            <th>Rating change</th>\n            <th>White</th>\n            <th>Draw</th>\n            <th>Black</th>\n            <th>Rating change</th>\n            <th>Won</th>\n          </tr>\n        </thead>\n        <tbody>\n          {matches.map((match, i) =>\n            <tr key={i}>\n              <td>\n                <form>\n                  <input \n                    type=\"checkbox\"\n                    checked={round.matches[i].result[0] === 1}\n                    onChange={(event) => setWinner(match, 0, i, event)} />\n                </form>\n              </td>\n              <td>{round.matches[i].newRating[0] - round.matches[i].origRating[0]}</td>\n              <td>{round.matches[i].whitePlayer.firstName}</td>\n              <td>\n                <form>\n                  <input \n                    type=\"checkbox\"\n                    checked={round.matches[i].result[0] === 0.5}\n                    onChange={(event) => setWinner(match, 0.5, i, event)} />\n                </form>\n              </td>\n              <td>{round.matches[i].blackPlayer.firstName}</td>\n              <td>{round.matches[i].newRating[1] - round.matches[i].origRating[1]}</td>\n              <td>\n                <form>\n                  <input \n                    type=\"checkbox\"\n                    checked={round.matches[i].result[1] === 1}\n                    onChange={(event) => setWinner(match, 1, i, event)} />\n                </form>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <Standings roundNum={round.roundNum} tourney={round.tourney} />\n    </div>\n  );\n}\n\nfunction Standings({tourney, roundNum}) {\n  const round = tourney.roundList[roundNum]\n  return (\n    <table key={roundNum}>\n      <caption>Current Standings</caption>\n      <thead>\n        <tr>\n          <th>First name</th>\n          <th>Score</th>\n          <th>Median</th>\n          <th>Solkoff</th>\n          <th>Cumulative</th>\n          <th>Cumulative of opposition</th>\n          <th>Rating</th>\n          <th>Color balance</th>\n          <th>Opponent count</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tourney.playerStandings(roundNum).map((player, i) => \n          <tr key={i}>\n            <td>{player.firstName}</td>\n            <td className=\"table__number\">{tourney.playerScore(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.modifiedMedian(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.solkoff(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.playerScoreCum(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.playerOppScoreCum(player, roundNum)}</td>\n            <td>\n              {/* Get the player's rating for the round, or their rating for\n                  the last round they completed. */}\n              {round.playerMatch(player)\n                ? round.playerMatch(player).playerInfo(player).newRating\n                : tourney\n                    .playerMatchHistory(player)[tourney.playerMatchHistory(player).length -1]\n                    .playerInfo(player)\n                    .newRating\n              }\n            </td>\n            <td className=\"table__number\">{tourney.playerColorBalance(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.playerOppHistory(player, roundNum).length}</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n}\n\nexport {MainRoster, Round, Standings};","import React, { useState } from 'react';\nimport './App.css';\nimport Tournament from './chess-tourney/tournament';\nimport { MainRoster, Round } from './chess-tourney-ui';\n\nconst cvlTourney = new Tournament(\n  'CVL Winter Open',\n  15\n)\n\nfunction App() {\n  const newRound = (event) => {\n    var round = cvlTourney.newRound();\n    if (!round) {\n      alert('Either add players or complete the current matches first.');\n      return;\n    }\n    tabList.push(\n      {\n        name: 'Round ' + (round.roundNum + 1),\n        contents: <Round tourney={cvlTourney} roundNum={round.roundNum} />\n      }\n    );\n    setTabList([].concat(tabList));\n    setCurrentTab(tabList[tabList.length - 1])\n  }\n  const [tabList, setTabList] = useState(\n    [\n      {\n        name: 'Roster',\n        contents: <MainRoster tourney={cvlTourney} />\n      }\n    ]\n  );\n  const [currentTab, setCurrentTab] = useState(tabList[0]);\n  return (\n    <div className=\"tournament\">\n      <nav className=\"tabbar\">\n        <ul>\n          {tabList.map((tab, i) => \n            <li key={i}>\n              <button\n                className=\"tab\"\n                onClick={() => setCurrentTab(tab)}\n                disabled={currentTab === tab}\n                >\n                {tab.name}\n              </button>\n            </li>\n          )}\n          <li>\n            <button \n              className=\"tab new_round\"\n              onClick={newRound}\n              >\n              New Round\n            </button>\n          </li>\n        </ul>\n      </nav>\n      <h1>Chessahoochee: a chess tournament app</h1>\n      {currentTab.contents}\n      {/* {cvlTourney.roundList.map(round => \n        <div className=\"round\" key={round.roundNum}>\n          <Round round={round} />\n        </div>\n      )} */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}