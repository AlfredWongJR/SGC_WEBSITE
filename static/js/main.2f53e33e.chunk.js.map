{"version":3,"sources":["chess-tourney/player.js","chess-tourney/match.js","chess-tourney/roster.js","chess-tourney/scores.js","chess-tourney/round.js","chess-tourney/tournament.js","demo-players.js","chess-tourney.jsx.js","App.jsx.js","serviceWorker.js","index.js"],"names":["createPlayer","firstName","lastName","arguments","length","undefined","rating","player","dummy","Ne","eloRank","match","m","round","tourney","getMatchesByPlayer","K","EloRank","Object","assign","DUMMYPLAYER","calcRatings","whiteElo","players","blackElo","scoreExpected","getExpected","origRating","newRating","updateRating","result","map","freeze","white","black","blackWon","whiteWon","draw","resetResult","concat","isComplete","isBye","includes","getColorInfo","color","getPlayerColor","indexOf","getPlayerInfo","getWhite","getBlack","dummies","p","roster","all","inactive","getActive","filter","i","addPlayer","push","addPlayers","deactivatePlayer","activatePlayer","splice","removePlayer","playerScoreList","roundId","playerScore","score","scoreList","reduce","a","b","playerScoreCum","runningScore","cumScores","forEach","totalScore","playerColorBalance","modifiedMedian","solkoff","scores","getPlayersByOpponent","opponent","sort","pop","shift","finalScore","playerOppScoreCum","oppScores","calcStandings","standingsFlat","scoreCum","oppScoreCum","firstBy","thenBy","standingsTree","runningRank","sf","prevPlayer","findAMatch","player1","pool","newMatch","blackList","lastColor","prevRound","playerColor","hasntPlayed","p2","flatten","matches","oppColor","player2","createMatch","reverse","id","playerTree","hasDummy","getMatchByPlayer","theMatch","keys","list","oddPlayer","newGroup","chain","sortBy","chunk","value","upperHalf","lowerHalf","zip","apply","toConsumableArray","upperHalfHistory","history","othersHistory","slice","_findAMatch","x","_findAMatch2","slicedToArray","_findAMatch3","_findAMatch4","_findAMatch5","_findAMatch6","foundASwap","otherPlayer","otherMatch","otherPlayer2","otherHistory","pairPlayers","name","playerList","roundList","byeValue","isNewRoundReady","last","times","getNumOfRounds","Math","ceil","log2","newRound","createRound","newRoster","lastname","MainRoster","_ref","_useState","useState","_useState2","setRoster","_useState3","_useState4","demoLoaded","setDemoLoaded","newPlayer","updateField","event","target","rosterTable","react_default","createElement","key","className","onClick","disabled","demoRoster","onSubmit","preventDefault","type","onChange","required","Round","_ref2","_useState5","o","_useState6","setMatches","_useState7","_useState8","openCards","setCards","setWinner","index","origMatch","checked","togglePlayerCard","PlayerCard","style","textAlign","rando","random","Standings","_ref3","ratingChange","colorBalance","abs","_ref4","rank","j","cvlTourney","createTournament","Boolean","window","location","hostname","ReactDOM","render","contents","tabList","setTabList","currentTab","setCurrentTab","tab","alert","document","getElementById","role","aria-label","href","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0kBAUA,SAASA,EAAaC,GAAyC,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnB,GAAIG,EAAeH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAC/CI,EAAS,CACXC,OAAO,EACPC,GAAI,EACJC,QAAS,SAAUC,GACf,IAAMC,EAAID,EAAME,MAAMC,QAAQC,mBAAmBR,GAAQH,OACnDY,EAAI,KAAOT,EAAOE,GAAKG,GAC7B,OAAO,IAAIK,IAAQD,KAU3B,MAPyB,kBAAdf,EACPiB,OAAOC,OAAOZ,EAAQN,IAEtBM,EAAON,UAAYA,EACnBM,EAAOL,SAAWA,EAClBK,EAAOD,OAASA,GAEbC,EAOX,IAAMa,EAAcpB,EAChB,CACIC,UAAW,QACXO,OAAO,EACPF,OAAQ,ICpChB,SAASe,EAAYV,GACjB,IAAIW,EAAWX,EAAMY,QAAQ,GAAGb,QAAQC,GACpCa,EAAWb,EAAMY,QAAQ,GAAGb,QAAQC,GAEpCc,EAAgB,CAChBH,EAASI,YAAYf,EAAMgB,WAAW,GAAIhB,EAAMgB,WAAW,IAC3DH,EAASE,YAAYf,EAAMgB,WAAW,GAAIhB,EAAMgB,WAAW,KAuB/D,OArBAhB,EAAMiB,UAAY,CACdN,EAASO,aACLJ,EAAc,GACdd,EAAMmB,OAAO,GACbnB,EAAMgB,WAAW,IAErBH,EAASK,aACLJ,EAAc,GACdd,EAAMmB,OAAO,GACbnB,EAAMgB,WAAW,KAGzBhB,EAAMiB,UAAYjB,EAAMiB,UAAUG,IAC9B,SAACzB,GAAD,OACKA,EAnBK,QAqBJA,IAGVK,EAAMY,QAAQ,GAAGjB,OAASK,EAAMiB,UAAU,GAC1CjB,EAAMY,QAAQ,GAAGjB,OAASK,EAAMiB,UAAU,GACnCjB,EAoFIO,aAAOc,OA3EtB,SAAqBnB,EAAOoB,EAAOC,GAC/B,IAAMvB,EAAQ,CACVE,MAAOA,EACPU,QAAS,CAACU,EAAOC,GACjBJ,OAAQ,CAAC,EAAG,GAEZH,WAAY,CAACM,EAAM3B,OAAQ4B,EAAM5B,QAEjCsB,UAAW,CAACK,EAAM3B,OAAQ4B,EAAM5B,QAIhC6B,SAXU,WAcN,OAFAxB,EAAMmB,OAAS,CAAC,EAAG,GACnBT,EAAYV,GACLA,GAKXyB,SAnBU,WAsBN,OAFAzB,EAAMmB,OAAS,CAAC,EAAG,GACnBT,EAAYV,GACLA,GAKX0B,KA3BU,WA8BN,OAFA1B,EAAMmB,OAAS,CAAC,GAAK,IACrBT,EAAYV,GACLA,GAEX2B,YAhCU,WAmCN,OAFA3B,EAAMmB,OAAS,CAAC,EAAG,GACnBnB,EAAMiB,UAAY,GAAGW,OAAO5B,EAAMgB,YAC3BhB,GAEX6B,WArCU,WAsCN,OAAO7B,EAAMmB,OAAO,GAAKnB,EAAMmB,OAAO,KAAO,GAEjDW,MAxCU,WAyCN,OAAO9B,EAAMY,QAAQmB,SAAStB,IAElCuB,aA3CU,SA2CGC,GACT,MAAO,CACHrC,OAAQI,EAAMY,QAAQqB,GACtBd,OAAQnB,EAAMmB,OAAOc,GACrBjB,WAAYhB,EAAMgB,WAAWiB,GAC7BhB,UAAWjB,EAAMiB,UAAUgB,KAGnCC,eAnDU,SAmDKtC,GACX,OAAOI,EAAMY,QAAQuB,QAAQvC,IAEjCwC,cAtDU,SAsDIxC,GACV,OAAOI,EAAMgC,aAAahC,EAAMkC,eAAetC,KAEnDyC,SAzDU,WA0DN,OAAOrC,EAAMgC,aAAa,IAE9BM,SA5DU,WA6DN,OAAOtC,EAAMgC,aAAa,KAI5BO,EAAUvC,EAAMY,QAAQQ,IAAI,SAACoB,GAAD,OAAOA,EAAE3C,QAM3C,OALI0C,EAAQ,GACRvC,EAAMmB,OAAS,CAAC,EAAG,GACZoB,EAAQ,KACfvC,EAAMmB,OAAS,CAAC,EAAG,IAEhBnB,ICvDIO,aAAOc,OArDtB,SAAmBlB,GAAuB,IAChCsC,EAAS,CACXtC,QAASA,EACTuC,IAHkClD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAI9BmD,SAAU,GACVC,UAAW,WACP,OAAOH,EAAOC,IAAIG,OAAO,SAACC,GAAD,OAAQL,EAAOE,SAASZ,SAASe,MAM9DC,UAAW,SAAUnD,GAEjB,OADA6C,EAAOC,IAAIM,KAAKpD,GACT6C,GAMXQ,WAAY,SAAUrC,GAElB,OADA6B,EAAOC,IAAMD,EAAOC,IAAId,OAAOhB,GACxB6B,GAOXS,iBAAkB,SAAUtD,GAExB,OADA6C,EAAOE,SAASK,KAAKpD,GACd6C,GAOXU,eAAgB,SAAUvD,GAEtB,OADA6C,EAAOE,SAASS,OAAOX,EAAOE,SAASR,QAAQvC,GAAS,GACjD6C,GAEXY,aAAc,SAAUzD,GACpB,OAAI6C,EAAOtC,QAAQC,mBAAmBR,GAAQH,OAAS,EAC5C,aAEJgD,EAAOC,IAAID,EAAOC,IAAIP,QAAQvC,IAC9B6C,KAGf,OAAOA,kBC/CX,SAASa,EAAgBnD,EAASP,GAAwB,IAAhB2D,EAAgB/D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAChD,OAAOW,EAAQC,mBAAmBR,EAAQ2D,GAASnC,IAC/C,SAACpB,GAAD,OAAWA,EAAMmB,OAAOnB,EAAMY,QAAQuB,QAAQvC,MAStD,SAAS4D,EAAYrD,EAASP,GAAwB,IAC9C6D,EAAQ,EACRC,EAAYJ,EAAgBnD,EAASP,EAFSJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,MAM5C,OAHIkE,EAAUjE,OAAS,IACnBgE,EAAQC,EAAUC,OAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAEpCJ,EAQX,SAASK,EAAe3D,EAASP,GAAwB,IAAhB2D,EAAgB/D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAC3CuE,EAAe,EACfC,EAAY,GACHV,EAAgBnD,EAASP,EAAQ2D,GACvCU,QAAQ,SAAUR,GACrBM,GAAgBN,EAChBO,EAAUhB,KAAKe,KAEnB,IAAIG,EAAa,EAIjB,OAHyB,IAArBF,EAAUvE,SACVyE,EAAaF,EAAUL,OAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAEzCK,EAUX,SAASC,EAAmBhE,EAASP,GAAwB,IAAhB2D,EAAgB/D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAC/CyC,EAAQ,EAYZ,OAXA9B,EAAQC,mBAAmBR,EAAQ2D,GAASV,OACxC,SAAC7C,GAAD,OAAYA,EAAM8B,QACpBmC,QACE,SAAUjE,GACFA,EAAMY,QAAQ,KAAOhB,EACrBqC,GAAS,EACFjC,EAAMY,QAAQ,KAAOhB,IAC5BqC,IAAU,KAIfA,EAQX,SAASmC,EAAejE,EAASP,GAAyC,IAAjC2D,EAAiC/D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvB,KAAM6E,EAAiB7E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAElE8E,EAASnE,EAAQoE,qBAAqB3E,EAAQ2D,GAASnC,IACvD,SAACoD,GAAD,OAAchB,EAAYrD,EAASqE,EAAUjB,KAGjDe,EAAOG,OACFJ,IACDC,EAAOI,MACPJ,EAAOK,SAEX,IAAIC,EAAa,EAIjB,OAHIN,EAAO7E,OAAS,IAChBmF,EAAaN,EAAOX,OAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAEtCe,EAQX,SAASP,EAAQlE,EAASP,GACtB,OAAOwE,EAAejE,EAASP,EADeJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,MACQ,GAGpD,SAASqF,EAAkB1E,EAASP,GAAwB,IAAhB2D,EAAgB/D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAE9CsF,EADc3E,EAAQoE,qBAAqB3E,EAAQ2D,GAC7BnC,IAAI,SAACoB,GAAD,OAAOsB,EAAe3D,EAASqC,EAAGe,KAC5DE,EAAQ,EAIZ,OAHyB,IAArBqB,EAAUrF,SACVgE,EAAQqB,EAAUnB,OAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAEpCJ,EAUX,SAASsB,EAAc5E,GAAyB,IAAhBoD,EAAgB/D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAChCwF,EAAgB7E,EAAQsC,OAAOC,IAAItB,IAAI,SAAUxB,GACnD,MAAO,CACHA,OAAQA,EACR6D,MAAOD,EAAYrD,EAASP,EAAQ2D,GACpCa,eAAgBA,EAAejE,EAASP,EAAQ2D,GAChDc,QAASA,EAAQlE,EAASP,EAAQ2D,GAClC0B,SAAUnB,EAAe3D,EAASP,EAAQ2D,GAC1C2B,YAAaL,EAAkB1E,EAASP,EAAQ2D,MAGxDyB,EAAcP,KACVU,kBACI,SAAC3C,GAAD,OAAOA,EAAEiB,QACR,GACH2B,OACE,SAAC5C,GAAD,OAAOA,EAAE4B,iBACR,GACHgB,OACE,SAAC5C,GAAD,OAAOA,EAAE6B,UACR,GACHe,OACE,SAAC5C,GAAD,OAAOA,EAAEyC,WACR,GACHG,OACE,SAAC5C,GAAD,OAAOA,EAAE0C,cACR,IAGT,IAAMG,EAAgB,GAClBC,EAAc,EAiBlB,OAhBAN,EAAcf,QAAQ,SAAUrE,EAAQkD,EAAGyC,GACvC,GAAU,IAANzC,EAAS,CACT,IAAI0C,EAAaD,EAAGzC,EAAI,GAClBlD,EAAO6D,QAAU+B,EAAW/B,OAC3B7D,EAAOwE,iBAAmBoB,EAAWpB,gBACrCxE,EAAOyE,UAAYmB,EAAWnB,SAC9BzE,EAAOqF,WAAaO,EAAWP,UAC/BrF,EAAOsF,cAAgBM,EAAWN,cACrCI,GAAe,GAGlBD,EAAcC,KACfD,EAAcC,GAAe,IAEjCD,EAAcC,GAAatC,KAAKpD,KAE7ByF,aCxJX,SAASI,EAAWvF,EAAOwF,EAASC,GAAsB,IAuBlDC,EAvBkCC,EAAgBrG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAK9CsG,EAAY5F,EAAM6F,UAAUC,YAAYN,GACxCO,EAAcN,EAEb9C,OAAO,SAACqD,GAAD,OAASL,EAAU9D,SAASmE,KAEnCrD,OAAO,SAACqD,GAAD,OAAQA,IAAOR,IAEtB7C,OAAO,SAACqD,GAAD,OAASC,kBAAQjG,EAAMkG,QAAQhF,IACnC,SAACnB,GAAD,OAAOA,EAAEW,WAAUmB,SAASmE,KAMhCG,EAAWV,EACV9C,OAAO,SAACqD,GAAD,OAAQJ,IAAc5F,EAAM6F,UAAUC,YAAYE,KAC1DI,EAAUL,EACTpD,OAAO,SAACqD,GAAD,OAAQG,EAAStE,SAASmE,KAAK,IAAMD,EAAY,GAU7D,OARIK,IACAV,EAAWW,EAAYrG,EAAOwF,EAASY,GACnCnC,EAAmBjE,EAAMC,QAASuF,GAChCvB,EAAmBjE,EAAMC,QAASmG,IACpCV,EAAShF,QAAQ4F,UAErBtG,EAAMkG,QAAQpD,KAAK4C,IAEhB,CAAEU,EAASV,GAsOPrF,aAAOc,OAvCtB,SAAqBlB,EAASsG,EAAIV,EAAWnF,GACzC,IAAMV,EAAQ,CACVuG,GAAIA,EACJtG,QAASA,EACTsC,OAAQ7B,EACRmF,UAAWA,EACXW,WAAY,GACZN,QAAS,GACTO,UAAU,EACV9E,WAAY,WACJ,OAAQ3B,EAAMkG,QAAQhF,IAAI,SAACnB,GAAD,OAAOA,EAAE4B,aAAYE,UAAS,IAEhE6E,iBAAkB,SAAUhH,GACxB,IAAIiH,EAAW,KAMf,OALA3G,EAAMkG,QAAQnC,QAAQ,SAAUjE,GACxBA,EAAMY,QAAQmB,SAASnC,KACvBiH,EAAW7G,KAGZ6G,GAEXb,YAAa,SAAUpG,GACnB,IAAIqC,GAAS,EAMb,OALA/B,EAAMkG,QAAQnC,QAAQ,SAAUjE,GACxBA,EAAMY,QAAQmB,SAASnC,KACvBqC,EAAQjC,EAAMY,QAAQuB,QAAQvC,MAG/BqC,GAEXc,UAAW,SAASnD,GAEhB,OADAM,EAAMU,QAAQoC,KAAKpD,GACZM,IAIf,OA7NJ,SAAqBA,GAUjBA,EAAMuC,OAAOwB,QAAQ,SAAUrE,GAC3B,IAAI6D,EAAQD,EAAYtD,EAAMC,QAASP,EAAQM,EAAMuG,SACtB/G,IAA5BQ,EAAMwG,WAAWjD,KAChBvD,EAAMwG,WAAWjD,GAAS,IAE9BvD,EAAMwG,WAAWjD,GAAOT,KAAKpD,KAcjCW,OAAOuG,KAAK5G,EAAMwG,YAAYF,UAAUvC,QAAQ,SAAUR,EAAOX,EAAGiE,GAChE,IAAInG,EAAUV,EAAMwG,WAAWjD,GAI/B,GAAI7C,EAAQnB,OAAS,IAAM,EAKvB,GAAIS,EAAMuC,OAAOhD,OAAS,IAAM,GAAMS,EAAMyG,SAOrC,CACH,IAAIK,EAAYpG,EAAQA,EAAQnB,OAAS,GACzCmB,EAAQwC,OAAOxC,EAAQnB,OAAS,EAAG,GAEnC,IAAIwH,EAAWF,EAAKjE,EAAI,QACUpD,IAA/BQ,EAAMwG,WAAWO,KAChB/G,EAAMwG,WAAWO,GAAY,IAEjC/G,EAAMwG,WAAWO,GAAUjE,KAAKgE,QAdhCpG,EAAQoC,KAAKvC,GACbP,EAAMyG,UAAW,EAoBF,IAAnB/F,EAAQnB,cACDS,EAAMwG,WAAWjD,GAExBvD,EAAMwG,WAAWjD,GAASyD,gBAAMtG,GAC/BuG,OAAO,UACPX,UACAY,MAAMxG,EAAQnB,OAAS,GACvB4H,UAGT9G,OAAOuG,KAAK5G,EAAMwG,YAAYzC,QAAQ,SAAUR,GAE5C,IAAI6D,EAAYpH,EAAMwG,WAAWjD,GAAO,GACpC8D,EAAYrH,EAAMwG,WAAWjD,GAAO,GAIxC,QAAwB/D,IAApBQ,EAAM6F,UACNyB,cAAIF,EAAWC,GACVtD,QAAQ,SAACjE,GAAD,OACLE,EAAMkG,QAAQpD,KAAKuD,EAAWkB,WAAX,GAAYvH,GAAZ0B,OAAArB,OAAAmH,EAAA,EAAAnH,CAAsBP,YAE9C,CA0BH,IAAI2H,EAAmBL,EAAUlG,IAAI,SAACoB,GAAD,MAEjC,GAAGZ,OAAO2F,GAAW3F,OAAO0F,GACvBzE,OAAO,SAACqD,GAAD,OAERhG,EAAMC,QAAQoE,qBAAqB2B,GAAInE,SAASS,OAMxD8E,EAAUrD,QAAQ,SAAUyB,GACxB,IAOIY,EACAtG,EARA4H,EAAUD,EAAiBL,EAAUnF,QAAQuD,IAC7CmC,EAAgB1B,kBAAQwB,EACvBG,MAAMR,EAAUnF,QAAQuD,KAHIqC,EAUdtC,EACfvF,EACAwF,EACA6B,EAAU1E,OAAO,SAACmF,GAAD,OACbH,EAAc9F,SAASiG,KAAKJ,GAdHK,EAAA1H,OAAA2H,EAAA,EAAA3H,CAAAwH,EAAA,GAmBjC,GATCzB,EAVgC2B,EAAA,GAUvBjI,EAVuBiI,EAAA,IAmB5B3B,EAAS,KAAA6B,EACS1C,EACfvF,EAAMwF,EAAS6B,EAAWK,GAFpBQ,EAAA7H,OAAA2H,EAAA,EAAA3H,CAAA4H,EAAA,GACT7B,EADS8B,EAAA,GACApI,EADAoI,EAAA,GAQd,IAAK9B,EAAS,KAAA+B,EACS5C,EACfvF,EAAOwF,EAAS6B,EAAW,IAFrBe,EAAA/H,OAAA2H,EAAA,EAAA3H,CAAA8H,EAAA,GACT/B,EADSgC,EAAA,GACAtI,EADAsI,EAAA,GAQd,GAAIV,EAAQ7F,SAASuE,GAAU,CAC3B,IAAIiC,GAAa,EACjBjB,EAAUzE,OAAO,SAACL,GAAD,OAAOA,IAAMkD,IAASzB,QAAQ,SAAUuE,GACrD,IAAID,EAAY,CACZ,IAAIE,EAAavI,EAAMkG,QAClBvD,OAAO,SAAC5C,GAAD,OAAOA,EAAEW,QAAQmB,SAASyG,KAAc,GACpD,GAAGC,EAAY,CACX,IAAIC,EAAeD,EAAW7H,QACzBiC,OAAO,SAACL,GAAD,OAAOA,IAAMgG,IAAa,GAClCG,EAAehB,EAAiBL,EAC/BnF,QAAQqG,IACRZ,EAAQ7F,SAAS2G,IACVC,EAAa5G,SAASuE,KAC9BtG,EAAMY,QAAU,CAAC8E,EAASgD,GAC1BD,EAAW7H,QAAU,CAAC4H,EAAalC,GACnCiC,GAAa,aAStCrI,EAAMkG,QAyCbwC,CAAY1I,GACLA,ICvMIK,aAAOc,OAtEtB,WAAsD,IAA5BwH,EAA4BrJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArB,GAAIsJ,EAAiBtJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACxCW,EAAU,CACZ0I,KAAMA,EACNE,UAAW,GACXC,SAAU,EACVC,gBAAiB,WAOb,OALI9I,EAAQ4I,UAAUtJ,OAAS,EACjByJ,eAAK/I,EAAQ4I,WAAWlH,aAEvB1B,EAAQsC,OAAOC,IAAIjD,OAAS,GAI/CW,mBAAoB,SAAUR,GAAwB,IAAhB2D,EAAgB/D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAC5B,OAAZ+D,IACAA,EAAUpD,EAAQ4I,UAAUtJ,QAEhC,IAAI2G,EAAU,GAUd,OATA+C,gBAAM5F,EAAU,EAAG,SAAUT,QACIpD,IAAzBS,EAAQ4I,UAAUjG,IAClB3C,EAAQ4I,UAAUjG,GAAGsD,QAAQnC,QAAQ,SAAUjE,IACJ,IAAnCA,EAAMY,QAAQuB,QAAQvC,IACtBwG,EAAQpD,KAAKhD,OAKtBoG,GAEX7B,qBAAsB,SAAUC,GAA0B,IAAhBjB,EAAgB/D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAC5CoB,EAAU,GAUd,OATAT,EAAQC,mBAAmBoE,EAAUjB,GAASU,QAC1C,SAAUjE,GACNY,EAAUA,EAAQgB,OACd5B,EAAMY,QAAQiC,OACV,SAACjD,GAAD,OAAYA,IAAW4E,OAKhC5D,GAEXwI,eAAgB,WACZ,IAAI7F,EAAU8F,KAAKC,KACfD,KAAKE,KAAKpJ,EAAQsC,OAAOG,YAAYnD,SAKzC,OAHI8D,KAAY,MACZA,EAAU,GAEPA,GAEXiG,SAAU,WACN,IAAKrJ,EAAQ8I,kBACT,OAAO,EAEX,IAAIO,EAAWC,EACXtJ,EACAA,EAAQ4I,UAAUtJ,OAClByJ,eAAK/I,EAAQ4I,WACb5I,EAAQsC,OAAOG,aAGnB,OADAzC,EAAQ4I,UAAU/F,KAAKwG,GAChBA,IAIf,OADArJ,EAAQsC,OAASiH,EAAUvJ,EAAS2I,GAC7B3I,ICjDII,SAAOc,OAtBF,CAChB,CAAC/B,UAAW,UAAWC,SAAU,IAAKI,OAAQ,KAC9C,CAACL,UAAW,OAAQC,SAAU,IAAKI,OAAQ,KAC3C,CAACL,UAAW,OAAQqK,SAAU,IAAKhK,OAAQ,KAC3C,CAACL,UAAW,OAAQqK,SAAU,IAAKhK,OAAQ,KAC3C,CAACL,UAAW,QAASqK,SAAU,IAAKhK,OAAQ,KAC5C,CAACL,UAAW,SAAUqK,SAAU,IAAKhK,OAAQ,MAC7C,CAACL,UAAW,QAASqK,SAAU,IAAKhK,OAAQ,MAC5C,CAACL,UAAW,SAAUqK,SAAU,IAAKhK,OAAQ,MAC7C,CAACL,UAAW,cAAeqK,SAAU,IAAKhK,OAAQ,MAClD,CAACL,UAAW,SAAUqK,SAAU,IAAKhK,OAAQ,MAC7C,CAACL,UAAW,YAAaqK,SAAU,IAAKhK,OAAQ,MAChD,CAACL,UAAW,QAASqK,SAAU,IAAKhK,OAAQ,MAC5C,CAACL,UAAW,QAASqK,SAAU,IAAKhK,OAAQ,MAC5C,CAACL,UAAW,WAAYqK,SAAU,IAAKhK,OAAQ,MAC/C,CAACL,UAAW,OAAQqK,SAAU,IAAKhK,OAAQ,MAC3C,CAACL,UAAW,OAAQqK,SAAU,IAAKhK,OAAQ,MAC3C,CAACL,UAAW,UAAWqK,SAAU,IAAKhK,OAAQ,MAC9C,CAACL,UAAW,QAASqK,SAAU,IAAKhK,OAAQ,MAC5C,CAACL,UAAW,YAAaqK,SAAU,IAAKhK,OAAQ,QCfpD,SAASiK,EAATC,GAAgC,IAAV1J,EAAU0J,EAAV1J,QAAU2J,EACFC,mBAAS5J,EAAQsC,OAAOC,KADtBsH,EAAAzJ,OAAA2H,EAAA,EAAA3H,CAAAuJ,EAAA,GACvBrH,EADuBuH,EAAA,GACfC,EADeD,EAAA,GAAAE,EAEMH,oBAAS,GAFfI,EAAA5J,OAAA2H,EAAA,EAAA3H,CAAA2J,EAAA,GAEvBE,EAFuBD,EAAA,GAEXE,EAFWF,EAAA,GAGxBG,EAAY,CAAChL,UAAW,GAAIC,SAAU,GAAII,OAAQ,MAYlD4K,EAAc,SAACC,GACnBF,EAAUE,EAAMC,OAAO5B,MAAQ2B,EAAMC,OAAOpD,OAmB1CqD,EAAc,GAgClB,OA/BIjI,EAAOhD,OAAS,IAClBiL,EACAC,EAAA/G,EAAAgH,cAAA,aAAOD,EAAA/G,EAAAgH,cAAA,yBACLD,EAAA/G,EAAAgH,cAAA,aACED,EAAA/G,EAAAgH,cAAA,UACED,EAAA/G,EAAAgH,cAAA,wBACAD,EAAA/G,EAAAgH,cAAA,oBACAD,EAAA/G,EAAAgH,cAAA,2BACAD,EAAA/G,EAAAgH,cAAA,aAGJD,EAAA/G,EAAAgH,cAAA,aACInI,EAAOrB,IAAI,SAACxB,EAAQkD,GAAT,OACX6H,EAAA/G,EAAAgH,cAAA,MAAIC,IAAK/H,EACPgI,UAAW3K,EAAQsC,OAAOE,SAASZ,SAASnC,GAAU,WAAa,UACnE+K,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBAAiBlL,EAAON,WACtCqL,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBAAiBlL,EAAOD,QACtCgL,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBACX3K,EAAQC,mBAAmBR,GAAQH,QAEtCkL,EAAA/G,EAAAgH,cAAA,UACCzK,EAAQsC,OAAOE,SAASZ,SAASnC,GAC9B+K,EAAA/G,EAAAgH,cAAA,UAAQG,QAAS,kBA3BR,SAACnL,GACtBO,EAAQsC,OAAOU,eAAevD,GAC9BqK,EAAU,GAAGrI,OAAOzB,EAAQsC,OAAOC,MAyBAS,CAAevD,KAAtC,YACA+K,EAAA/G,EAAAgH,cAAA,UAAQG,QAAS,kBAnCN,SAACnL,GACVO,EAAQsC,OAAOY,aAAazD,IAExCO,EAAQsC,OAAOS,iBAAiBtD,GAElCqK,EAAU,GAAGrI,OAAOzB,EAAQsC,OAAOC,MA8BAQ,CAAiBtD,KAAxC,YASZ+K,EAAA/G,EAAAgH,cAAA,OAAKE,UAAU,UACZJ,EACDC,EAAA/G,EAAAgH,cAAA,SACED,EAAA/G,EAAAgH,cAAA,UAAQI,SAAUZ,EAAYW,QArDnB,WACf,IAAInK,EAAUqK,EAAWnD,MAAM,EAAE,IAAI1G,IAAI,SAAAoB,GAAC,OAAInD,EAAamD,KAC3DrC,EAAQsC,OAAOQ,WAAWrC,GAC1ByJ,GAAc,GACdJ,EAAU,GAAGrI,OAAOzB,EAAQsC,OAAOC,QAiD/B,uBAEFiI,EAAA/G,EAAAgH,cAAA,qCAGAD,EAAA/G,EAAAgH,cAAA,QAAMM,SAxEW,SAACV,GACpBA,EAAMW,iBACNhL,EAAQsC,OAAOM,UACX1D,EACIiL,EAAS,UACTA,EAAS,SACTA,EAAS,SAGjBL,EAAU,GAAGrI,OAAOzB,EAAQsC,OAAOC,QAgE/BiI,EAAA/G,EAAAgH,cAAA,SACID,EAAA/G,EAAAgH,cAAA,8BAEAD,EAAA/G,EAAAgH,cAAA,SAAOQ,KAAK,OAAOvC,KAAK,YAAYwC,SAAUd,EAAae,UAAQ,MAGvEX,EAAA/G,EAAAgH,cAAA,SACID,EAAA/G,EAAAgH,cAAA,6BAEAD,EAAA/G,EAAAgH,cAAA,SAAOQ,KAAK,OAAOvC,KAAK,WAAWwC,SAAUd,EAAae,UAAQ,MAGtEX,EAAA/G,EAAAgH,cAAA,SACID,EAAA/G,EAAAgH,cAAA,0BAEAD,EAAA/G,EAAAgH,cAAA,SAAOQ,KAAK,SAASvC,KAAK,SAASwC,SAAUd,EAAalD,MAAM,WAGpEsD,EAAA/G,EAAAgH,cAAA,SAAOQ,KAAK,SAAS/D,MAAM,SAE7BsD,EAAA/G,EAAAgH,cAAA,KAAGE,UAAU,UAAb,iBAAqC3K,EAAQiJ,mBAKnD,SAASmC,EAATC,GAAoC,IAAnBrL,EAAmBqL,EAAnBrL,QAASoD,EAAUiI,EAAVjI,QAKlBrD,EAAQC,EAAQ4I,UAAUxF,GALEkI,EAMJ1B,mBAAS7J,EAAMkG,QAAQhF,IAAI,SAAAsK,GAAC,OAAInL,OAAOC,OAAO,GAAIkL,MAN9CC,EAAApL,OAAA2H,EAAA,EAAA3H,CAAAkL,EAAA,GAM3BrF,EAN2BuF,EAAA,GAMlBC,EANkBD,EAAA,GAAAE,EAOJ9B,mBAAS,IAPL+B,EAAAvL,OAAA2H,EAAA,EAAA3H,CAAAsL,EAAA,GAO3BE,EAP2BD,EAAA,GAOhBE,EAPgBF,EAAA,GAQ5BG,EAAY,SAAChK,EAAOiK,EAAO1B,GAC/B,IAAI2B,EAAYjM,EAAMkG,QAAQ8F,GAC3B1B,EAAMC,OAAO2B,QACD,IAAVnK,EACDkK,EAAU1K,WACS,IAAVQ,EACTkK,EAAU3K,WACS,KAAVS,GACTkK,EAAUzK,OAGZyK,EAAUxK,cAGZiK,EAAW1L,EAAMkG,QAAQhF,IAAI,SAAAsK,GAAC,OAAInL,OAAOC,OAAO,GAAIkL,OAEhDW,EAAmB,SAAC5F,GACpBsF,EAAUhK,SAAS0E,GACrBuF,EAASD,EAAUlJ,OAAO,SAAAC,GAAC,OAAIA,IAAM2D,KAErCuF,EAAS,GAAGpK,OAAOmK,GAAWnK,OAAO,CAAC6E,MAiB1C,OACEkE,EAAA/G,EAAAgH,cAAA,WACED,EAAA/G,EAAAgH,cAAA,SAAOC,IAAK3K,EAAMuG,GAAIqE,UAAU,iBAC9BH,EAAA/G,EAAAgH,cAAA,wBAAgB1K,EAAMuG,GAAK,EAA3B,YACAkE,EAAA/G,EAAAgH,cAAA,aACED,EAAA/G,EAAAgH,cAAA,UACED,EAAA/G,EAAAgH,cAAA,eACAD,EAAA/G,EAAAgH,cAAA,iBACAD,EAAA/G,EAAAgH,cAAA,mBACAD,EAAA/G,EAAAgH,cAAA,kBACAD,EAAA/G,EAAAgH,cAAA,mBACAD,EAAA/G,EAAAgH,cAAA,mBAGJD,EAAA/G,EAAAgH,cAAA,aACGxE,EAAQhF,IAAI,SAACpB,EAAO8C,GAAR,OACX6H,EAAA/G,EAAAgH,cAAA,MAAIC,IAAK/H,EAAGgI,UAAW5K,EAAMkG,QAAQtD,GAAGhB,QAAU,WAAa,IAC7D6I,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBAAiBhI,EAAI,GACnC6H,EAAA/G,EAAAgH,cAAA,UACED,EAAA/G,EAAAgH,cAAA,SACEQ,KAAK,WACLgB,QAAgD,IAAvClM,EAAMkG,QAAQtD,GAAGT,WAAWlB,OACrC6J,SAAU9K,EAAMkG,QAAQtD,GAAGhB,QAC3BuJ,SAAU,SAACb,GAAD,OAAWyB,EAAU,EAAGnJ,EAAG0H,OAEzCG,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBACX5K,EAAMkG,QAAQtD,GAAGT,WAAWzC,OAAON,UACpCqL,EAAA/G,EAAAgH,cAAA,UAAQG,QAAS,kBAAMsB,EAAiBvJ,KAAxC,KACCiJ,EAAUhK,SAASe,IAClB6H,EAAA/G,EAAAgH,cAAC0B,EAAD,CACEnM,QAASA,EACTD,MAAOA,EACPN,OAAQM,EAAMkG,QAAQtD,GAAGT,WAAWzC,UAG1C+K,EAAA/G,EAAAgH,cAAA,UACED,EAAA/G,EAAAgH,cAAA,SACEQ,KAAK,WACLgB,QAAgD,KAAvClM,EAAMkG,QAAQtD,GAAGT,WAAWlB,OACrC6J,SAAU9K,EAAMkG,QAAQtD,GAAGhB,QAC3BuJ,SAAU,SAACb,GAAD,OAAWyB,EAAU,GAAKnJ,EAAG0H,OAE3CG,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBACX5K,EAAMkG,QAAQtD,GAAGR,WAAW1C,OAAON,UACpCqL,EAAA/G,EAAAgH,cAAA,UAAQG,QAAS,kBAAMsB,EAAiBvJ,KAAxC,KACCiJ,EAAUhK,SAASe,IAClB6H,EAAA/G,EAAAgH,cAAC0B,EAAD,CACEnM,QAASA,EACTD,MAAOA,EACPN,OAAQM,EAAMkG,QAAQtD,GAAGR,WAAW1C,UAG1C+K,EAAA/G,EAAAgH,cAAA,UACED,EAAA/G,EAAAgH,cAAA,SACEQ,KAAK,WACLgB,QAAgD,IAAvClM,EAAMkG,QAAQtD,GAAGR,WAAWnB,OACrC6J,SAAU9K,EAAMkG,QAAQtD,GAAGhB,QAC3BuJ,SAAU,SAACb,GAAD,OAAWyB,EAAU,EAAGnJ,EAAG0H,YAMjDG,EAAA/G,EAAAgH,cAAA,KAAG2B,MAAO,CAACC,UAAW,WACpB7B,EAAA/G,EAAAgH,cAAA,UAAQG,QA9EI,WAChB3E,EAAQnC,QAAQ,SAACjE,EAAO8C,GACtB,IAAIqJ,EAAYjM,EAAMkG,QAAQtD,GAC1B2J,EAAQpD,KAAKqD,SACbD,GAAS,IACXN,EAAU1K,WACDgL,GAAS,GAClBN,EAAU3K,WAEV2K,EAAUzK,SAGdkK,EAAW1L,EAAMkG,QAAQhF,IAAI,SAAAsK,GAAC,OAAInL,OAAOC,OAAO,GAAIkL,QAkEhD,YAEFf,EAAA/G,EAAAgH,cAAC+B,EAAD,CAAWpJ,QAASrD,EAAMuG,GAAItG,QAASD,EAAMC,WAKnD,SAASmM,EAATM,GAA8C,IAAzBzM,EAAyByM,EAAzBzM,QAASD,EAAgB0M,EAAhB1M,MAAON,EAASgN,EAAThN,OAC/BiN,EACF3M,EAAM0G,iBAAiBhH,GAAQwC,cAAcxC,GAAQqB,UACnDf,EAAM0G,iBAAiBhH,GAAQwC,cAAcxC,GAAQoB,WAErD6L,GAAgB,IAClBA,EAAe,IAAMA,GAEvB,IAAMC,EAAexI,EAAOH,mBAAmBhE,EAASP,EAAQM,EAAMuG,IAClExE,EAAQ,OAMZ,OALI6K,EAAe,EACjB7K,EAAQ,UAAY6K,EACXA,EAAe,IACxB7K,EAAQ,UAAYoH,KAAK0D,IAAID,IAG7BnC,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,eACZH,EAAA/G,EAAAgH,cAAA,oBACAD,EAAA/G,EAAAgH,cAAA,UACG1K,EAAM0G,iBAAiBhH,GAAQwC,cAAcxC,GAAQoB,WADxD,QAEU6L,EAFV,KAIAlC,EAAA/G,EAAAgH,cAAA,2BACAD,EAAA/G,EAAAgH,cAAA,UAAK3I,GACL0I,EAAA/G,EAAAgH,cAAA,8BACAD,EAAA/G,EAAAgH,cAAA,UACED,EAAA/G,EAAAgH,cAAA,UACGzK,EAAQoE,qBAAqB3E,EAAQM,EAAMuG,IAAIrF,IAAI,SAACoD,EAAU1B,GAAX,OAClD6H,EAAA/G,EAAAgH,cAAA,MAAIC,IAAK/H,GACN0B,EAASlF,gBASxB,SAASqN,EAATK,GAAuC,IAAnB7M,EAAmB6M,EAAnB7M,QAASoD,EAAUyJ,EAAVzJ,QAC3B,OACEoH,EAAA/G,EAAAgH,cAAA,SAAOC,IAAKtH,GACVoH,EAAA/G,EAAAgH,cAAA,oCACAD,EAAA/G,EAAAgH,cAAA,aACED,EAAA/G,EAAAgH,cAAA,UACED,EAAA/G,EAAAgH,cAAA,WACAD,EAAA/G,EAAAgH,cAAA,wBACAD,EAAA/G,EAAAgH,cAAA,mBACAD,EAAA/G,EAAAgH,cAAA,oBACAD,EAAA/G,EAAAgH,cAAA,qBACAD,EAAA/G,EAAAgH,cAAA,wBACAD,EAAA/G,EAAAgH,cAAA,wCAGHtG,EAAOS,cAAc5E,EAASoD,GAASnC,IAAI,SAAC6L,EAAMnK,GAAP,OAC1C6H,EAAA/G,EAAAgH,cAAA,SAAOC,IAAK/H,GACTmK,EAAK7L,IAAI,SAACxB,EAAQsN,GAAT,OACRvC,EAAA/G,EAAAgH,cAAA,MAAIC,IAAKqC,GACPvC,EAAA/G,EAAAgH,cAAA,UAAK9H,EAAI,GACT6H,EAAA/G,EAAAgH,cAAA,UAAKhL,EAAOA,OAAON,WACnBqL,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBAAiBlL,EAAO6D,OACtCkH,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBAAiBlL,EAAOwE,gBACtCuG,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBAAiBlL,EAAOyE,SACtCsG,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBAAiBlL,EAAOqF,UACtC0F,EAAA/G,EAAAgH,cAAA,MAAIE,UAAU,iBAAiBlL,EAAOsF,oBCxRpD,IAAMiI,EAAaC,EAAiB,mBCOhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxN,MACvB,2DCZNyN,IAASC,OAAO/C,EAAA/G,EAAAgH,cFChB,WACE,IADad,EAgBiBC,mBAC5B,CACE,CACElB,KAAM,SACN8E,SAAUhD,EAAA/G,EAAAgH,cAAChB,EAAD,CAAYzJ,QAASgN,OApBxBnD,EAAAzJ,OAAA2H,EAAA,EAAA3H,CAAAuJ,EAAA,GAgBN8D,EAhBM5D,EAAA,GAgBG6D,EAhBH7D,EAAA,GAAAE,EAwBuBH,mBAAS6D,EAAQ,IAxBxCzD,EAAA5J,OAAA2H,EAAA,EAAA3H,CAAA2J,EAAA,GAwBN4D,EAxBM3D,EAAA,GAwBM4D,EAxBN5D,EAAA,GAyBb,OACEQ,EAAA/G,EAAAgH,cAAA,OAAKE,UAAU,cACbH,EAAA/G,EAAAgH,cAAA,OAAKE,UAAU,UACbH,EAAA/G,EAAAgH,cAAA,UACGgD,EAAQxM,IAAI,SAAC4M,EAAKlL,GAAN,OACX6H,EAAA/G,EAAAgH,cAAA,MAAIC,IAAK/H,GACP6H,EAAA/G,EAAAgH,cAAA,UACEE,UAAU,MACVC,QAAS,kBAAMgD,EAAcC,IAC7BhD,SAAU8C,IAAeE,GAExBA,EAAInF,SAIX8B,EAAA/G,EAAAgH,cAAA,UACED,EAAA/G,EAAAgH,cAAA,UACEE,UAAU,gBACVC,QA1CK,SAACP,GAChB,IAAItK,EAAQiN,EAAW3D,WAClBtJ,GAIL0N,EAAQ5K,KACN,CACE6F,KAAM,UAAY3I,EAAMuG,GAAK,GAC7BkH,SAAUhD,EAAA/G,EAAAgH,cAACW,EAAD,CAAOpL,QAASgN,EAAY5J,QAASrD,EAAMuG,OAGzDoH,EAAW,GAAGjM,OAAOgM,IACrBG,EAAcH,EAAQA,EAAQnO,OAAS,KAVrCwO,MAAM,+DAqCA,gBASNtD,EAAA/G,EAAAgH,cAAA,mDACCkD,EAAWH,WEpDF,MAASO,SAASC,eAAe,SACjDV,IAASC,OAAO/C,EAAA/G,EAAAgH,cFwDhB,WACI,OACID,EAAA/G,EAAAgH,cAAA,SACID,EAAA/G,EAAAgH,cAAA,QAAMwD,KAAK,MAAMC,aAAW,eAA5B,gBADJ,oFAII1D,EAAA/G,EAAAgH,cAAA,QAAMwD,KAAK,MAAMC,aAAW,yBAA5B,gBAJJ,OAKI1D,EAAA/G,EAAAgH,cAAA,KAAG0D,KAAK,mDAAR,kBALJ,ME1DQ,MAAaJ,SAASC,eAAe,YD0H/C,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2f53e33e.chunk.js","sourcesContent":["import EloRank from \"elo-rank\";\r\n\r\n/**\r\n * Represents an indivudal player. Call it with `createPlayer(\"John\", ...)` or\r\n * `createPlayer({firstName: \"John\", ...})`. The latter is convenient for\r\n * converting JSON objects.\r\n * @param {string or object} firstName\r\n * @param {string} lastName\r\n * @param {int}        rating\r\n */\r\nfunction createPlayer(firstName, lastName = \"\", rating = 1200) {\r\n    const player = {\r\n        dummy: false,\r\n        Ne: 0, // number of games the rating is based on\r\n        eloRank: function (match) {\r\n            const m = match.round.tourney.getMatchesByPlayer(player).length;\r\n            const K = 800 / (player.Ne + m);\r\n            return new EloRank(K);\r\n        }\r\n    };\r\n    if (typeof firstName === \"object\") {\r\n        Object.assign(player, firstName);\r\n    } else {\r\n        player.firstName = firstName;\r\n        player.lastName = lastName;\r\n        player.rating = rating;\r\n    }\r\n    return player;\r\n}\r\n\r\n/**\r\n * A stand-in for bye matches.\r\n * @constant {Player} DUMMYPLAYER\r\n */\r\nconst DUMMYPLAYER = createPlayer(\r\n    {\r\n        firstName: \"Dummy\",\r\n        dummy: true,\r\n        rating: 0\r\n    }\r\n);\r\n\r\nexport {DUMMYPLAYER, createPlayer};","import {DUMMYPLAYER} from \"./player\";\r\n\r\nfunction calcRatings(match) {\r\n    let whiteElo = match.players[0].eloRank(match);\r\n    let blackElo = match.players[1].eloRank(match);\r\n    const FLOOR = 100;\r\n    let scoreExpected = [\r\n        whiteElo.getExpected(match.origRating[0], match.origRating[1]),\r\n        blackElo.getExpected(match.origRating[1], match.origRating[0])\r\n    ];\r\n    match.newRating = [\r\n        whiteElo.updateRating(\r\n            scoreExpected[0],\r\n            match.result[0],\r\n            match.origRating[0]\r\n        ),\r\n        blackElo.updateRating(\r\n            scoreExpected[1],\r\n            match.result[1],\r\n            match.origRating[1]\r\n        )\r\n    ];\r\n    match.newRating = match.newRating.map(\r\n        (rating) => (\r\n            (rating < FLOOR)\r\n            ? FLOOR\r\n            : rating\r\n        )\r\n    );\r\n    match.players[0].rating = match.newRating[0];\r\n    match.players[1].rating = match.newRating[1];\r\n    return match;\r\n}\r\n\r\n/**\r\n * Represents a match in a tournament.\r\n *\r\n * @param {Player} black\r\n * @param {Player} white\r\n */\r\nfunction createMatch(round, white, black) {\r\n    const match = {\r\n        round: round,\r\n        players: [white, black],\r\n        result: [0, 0],\r\n        // cache the ratings from when the match began\r\n        origRating: [white.rating, black.rating],\r\n        // the newly calculated ratings after the match ends\r\n        newRating: [white.rating, black.rating],\r\n        /**\r\n         * Sets black as the winner.\r\n         */\r\n        blackWon() {\r\n            match.result = [0, 1];\r\n            calcRatings(match);\r\n            return match;\r\n        },\r\n        /**\r\n         * Sets white as the winner.\r\n         */\r\n        whiteWon() {\r\n            match.result = [1, 0];\r\n            calcRatings(match);\r\n            return match;\r\n        },\r\n        /**\r\n         * Sets result as a draw.\r\n         */\r\n        draw() {\r\n            match.result = [0.5, 0.5];\r\n            calcRatings(match);\r\n            return match;\r\n        },\r\n        resetResult() {\r\n            match.result = [0, 0];\r\n            match.newRating = [].concat(match.origRating);\r\n            return match;\r\n        },\r\n        isComplete() {\r\n            return match.result[0] + match.result[1] !== 0;\r\n        },\r\n        isBye() {\r\n            return match.players.includes(DUMMYPLAYER);\r\n        },\r\n        getColorInfo(color) {\r\n            return {\r\n                player: match.players[color],\r\n                result: match.result[color],\r\n                origRating: match.origRating[color],\r\n                newRating: match.newRating[color]\r\n            };\r\n        },\r\n        getPlayerColor(player) {\r\n            return match.players.indexOf(player);\r\n        },\r\n        getPlayerInfo(player) {\r\n            return match.getColorInfo(match.getPlayerColor(player));\r\n        },\r\n        getWhite() {\r\n            return match.getColorInfo(0);\r\n        },\r\n        getBlack() {\r\n            return match.getColorInfo(1);\r\n        }\r\n    };\r\n    // set bye rounds\r\n    const dummies = match.players.map((p) => p.dummy);\r\n    if (dummies[0]) {\r\n        match.result = [0, 1];\r\n    } else if (dummies[1]) {\r\n        match.result = [1, 0];\r\n    }\r\n    return match;\r\n}\r\n\r\nexport default Object.freeze(createMatch);\r\n","/**\r\n * Roster class.\r\n * @param {Array} players\r\n */\r\nfunction newRoster(tourney, players = []) {\r\n    const roster = {\r\n        tourney: tourney,\r\n        all: players,\r\n        inactive: [],\r\n        getActive: function () {\r\n            return roster.all.filter((i) => !roster.inactive.includes(i));\r\n        },\r\n        /**\r\n         * Add a player to the roster.\r\n         * @param {Player} player the player to add\r\n         */\r\n        addPlayer: function (player) {\r\n            roster.all.push(player);\r\n            return roster;\r\n        },\r\n        /**\r\n         * Add a list of players to the roster.\r\n         * @param {Array} players the list of players to add\r\n         */\r\n        addPlayers: function (players) {\r\n            roster.all = roster.all.concat(players);\r\n            return roster;\r\n        },\r\n        /**\r\n         * Remove a player from the active roster. This player won't be placed\r\n         * in future rounds.\r\n         * @param {Player} player\r\n         */\r\n        deactivatePlayer: function (player) {\r\n            roster.inactive.push(player);\r\n            return roster;\r\n        },\r\n        /**\r\n         * Add a player to the active roster. This player will be placed in\r\n         * future rounds.\r\n         * @param {Player} player\r\n         */\r\n        activatePlayer: function (player) {\r\n            roster.inactive.splice(roster.inactive.indexOf(player), 1);\r\n            return roster;\r\n        },\r\n        removePlayer: function (player) {\r\n            if (roster.tourney.getMatchesByPlayer(player).length > 0) {\r\n                return null; // TODO: add a helpful error message\r\n            }\r\n            delete roster.all[roster.all.indexOf(player)];\r\n            return roster;\r\n        }\r\n    };\r\n    return roster;\r\n}\r\n\r\nexport default Object.freeze(newRoster);","import {firstBy} from \"thenby\";\r\n\r\n/**\r\n * Get a list of all of a player's scores from each match.\r\n * @param {Player} player\r\n * @returns {array} the list of scores\r\n */\r\nfunction playerScoreList(tourney, player, roundId = null) {\r\n    return tourney.getMatchesByPlayer(player, roundId).map(\r\n        (match) => match.result[match.players.indexOf(player)]\r\n    );\r\n}\r\n\r\n/**\r\n * Get the total score of a player after a given round.\r\n * @param {Player} player\r\n * @param {number} roundId\r\n */\r\nfunction playerScore(tourney, player, roundId = null) {\r\n    var score = 0;\r\n    var scoreList = playerScoreList(tourney, player, roundId);\r\n    if (scoreList.length > 0) {\r\n        score = scoreList.reduce((a, b) => a + b);\r\n    }\r\n    return score;\r\n}\r\n\r\n/**\r\n * Get the cumulative score of a player\r\n * @param {Player} player\r\n * @param {number} roundId\r\n */\r\nfunction playerScoreCum(tourney, player, roundId = null) {\r\n    var runningScore = 0;\r\n    var cumScores = [];\r\n    var scores = playerScoreList(tourney, player, roundId);\r\n    scores.forEach(function (score) {\r\n        runningScore += score;\r\n        cumScores.push(runningScore);\r\n    });\r\n    var totalScore = 0;\r\n    if (cumScores.length !== 0) {\r\n        totalScore = cumScores.reduce((a, b) => a + b);\r\n    }\r\n    return totalScore;\r\n}\r\n\r\n/**\r\n * Calculate a player's color balance\r\n * @param {Player} player\r\n * @param {Int}    round The ID of the highest round to consider\r\n * @returns {Int} A negative number means they played as black more. A positive\r\n * number means they played as white more.\r\n */\r\nfunction playerColorBalance(tourney, player, roundId = null) {\r\n    var color = 0;\r\n    tourney.getMatchesByPlayer(player, roundId).filter(\r\n        (match) => !match.isBye\r\n    ).forEach(\r\n        function (match) {\r\n            if (match.players[0] === player) {\r\n                color += 1;\r\n            } else if (match.players[1] === player) {\r\n                color += -1;\r\n            }\r\n        }\r\n    );\r\n    return color;\r\n}\r\n\r\n/**\r\n * Gets the modified median factor defined in USCF § 34E1\r\n * @param {Player} player\r\n * @param {number} roundId\r\n */\r\nfunction modifiedMedian(tourney, player, roundId = null, solkoff = false) {\r\n    // get all of the opponent's scores\r\n    var scores = tourney.getPlayersByOpponent(player, roundId).map(\r\n        (opponent) => playerScore(tourney, opponent, roundId)\r\n    );\r\n    //sort them, then remove the first and last items\r\n    scores.sort();\r\n    if (!solkoff) {\r\n        scores.pop();\r\n        scores.shift();\r\n    }\r\n    var finalScore = 0;\r\n    if (scores.length > 0) {\r\n        finalScore = scores.reduce((a, b) => a + b);\r\n    }\r\n    return finalScore;\r\n}\r\n\r\n/**\r\n * A shortcut for passing the `solkoff` variable to `modifiedMedian`.\r\n * @param {Player} player\r\n * @param {number} roundId\r\n */\r\nfunction solkoff(tourney, player, roundId = null) {\r\n    return modifiedMedian(tourney, player, roundId, true);\r\n}\r\n\r\nfunction playerOppScoreCum(tourney, player, roundId = null) {\r\n    const opponents = tourney.getPlayersByOpponent(player, roundId);\r\n    var oppScores = opponents.map((p) => playerScoreCum(tourney, p, roundId));\r\n    var score = 0;\r\n    if (oppScores.length !== 0) {\r\n        score = oppScores.reduce((a, b) => a + b);\r\n    }\r\n    return score;\r\n}\r\n\r\n/**\r\n * Sort the standings by score and USCF tie-break rules from § 34. USCF\r\n * recommends using these methods in-order: modified median, solkoff,\r\n * cumulative, and cumulative of opposition.\r\n * @param {number} roundId\r\n * @returns {Array} The sorted list of players\r\n */\r\nfunction calcStandings(tourney, roundId = null) {\r\n    const standingsFlat = tourney.roster.all.map(function (player) {\r\n        return {\r\n            player: player,\r\n            score: playerScore(tourney, player, roundId),\r\n            modifiedMedian: modifiedMedian(tourney, player, roundId),\r\n            solkoff: solkoff(tourney, player, roundId),\r\n            scoreCum: playerScoreCum(tourney, player, roundId),\r\n            oppScoreCum: playerOppScoreCum(tourney, player, roundId)\r\n        };\r\n    });\r\n    standingsFlat.sort(\r\n        firstBy(\r\n            (p) => p.score,\r\n            -1\r\n        ).thenBy(\r\n            (p) => p.modifiedMedian,\r\n            -1\r\n        ).thenBy(\r\n            (p) => p.solkoff,\r\n            -1\r\n        ).thenBy(\r\n            (p) => p.scoreCum,\r\n            -1\r\n        ).thenBy(\r\n            (p) => p.oppScoreCum,\r\n            -1\r\n        )\r\n    );\r\n    const standingsTree = [];\r\n    var runningRank = 0;\r\n    standingsFlat.forEach(function (player, i, sf) {\r\n        if (i !== 0) { // we can't compare the first player with a previous one\r\n            var prevPlayer = sf[i - 1];\r\n            if (!(player.score === prevPlayer.score\r\n                && player.modifiedMedian === prevPlayer.modifiedMedian\r\n                && player.solkoff === prevPlayer.solkoff\r\n                && player.scoreCum === prevPlayer.scoreCum\r\n                && player.oppScoreCum === prevPlayer.oppScoreCum)) {\r\n                runningRank += 1;\r\n            }\r\n        }\r\n        if (!standingsTree[runningRank]) {\r\n            standingsTree[runningRank] = [];\r\n        }\r\n        standingsTree[runningRank].push(player);\r\n    });\r\n    return standingsTree;\r\n}\r\n\r\nexport {\r\n    calcStandings,\r\n    modifiedMedian,\r\n    playerColorBalance,\r\n    playerOppScoreCum,\r\n    playerScore,\r\n    playerScoreCum,\r\n    playerScoreList,\r\n    solkoff\r\n};\r\n","import {DUMMYPLAYER} from \"./player\";\r\nimport createMatch from \"./match\";\r\nimport {playerColorBalance, playerScore} from \"./scores\";\r\nimport {chain, flatten, zip} from \"lodash\";\r\n\r\n/**\r\n * Find a match for a given player.\r\n * @param     {Player} player1    The player to be paired\r\n * @param     {Array}    pool            The pool of available players\r\n * @param     {Array}    blackList A blacklist of players, possibly in the pool,\r\n * who should not be paired\r\n * @returns {Array}    The paired player and the Match object. Both will be\r\n * undefined if no match was made.\r\n */\r\nfunction findAMatch(round, player1, pool, blackList = []) {\r\n    /**\r\n     * Try to pair the player as the opposite color as their last round.\r\n     * (USCF § 27A4 and § 27A5)\r\n     */\r\n    var lastColor = round.prevRound.playerColor(player1);\r\n    var hasntPlayed = pool\r\n        // Filter anyone on the blacklist (e.g. past opponents [USCF § 27A1])\r\n        .filter((p2) => !blackList.includes(p2))\r\n        // Don\"t pair players with themselves\r\n        .filter((p2) => p2 !== player1)\r\n        // Don\"t pair anyone who\"s already been paired\r\n        .filter((p2) => !flatten(round.matches.map(\r\n            (m) => m.players)).includes(p2)\r\n        );\r\n    /**\r\n     * Prioritize opponents who played that color for *their* last round.\r\n     * (USCF § 27A4 and § 27A5)\r\n     */\r\n    var oppColor = pool\r\n        .filter((p2) => lastColor !== round.prevRound.playerColor(p2));\r\n    var player2 = hasntPlayed\r\n        .filter((p2) => oppColor.includes(p2))[0] || hasntPlayed[0];\r\n    var newMatch;\r\n    if (player2) {\r\n        newMatch = createMatch(round, player1, player2);\r\n        if (playerColorBalance(round.tourney, player1)\r\n            > playerColorBalance(round.tourney, player2)) {\r\n            newMatch.players.reverse();\r\n        }\r\n        round.matches.push(newMatch);\r\n    }\r\n    return [ player2, newMatch ];\r\n}\r\n\r\n/**\r\n * Pair the players\r\n */\r\nfunction pairPlayers(round) {\r\n    /**\r\n     * Part 1: Split players into separate groups based on their scores\r\n     * (USCF § 27A2)\r\n     * Tree structure:\r\n     * {\r\n     *    score: [list of players],\r\n     *    ...\r\n     * }\r\n     */\r\n    round.roster.forEach(function (player) {\r\n        var score = playerScore(round.tourney, player, round.id);\r\n        if(round.playerTree[score] === undefined) {\r\n            round.playerTree[score] = [];\r\n        }\r\n        round.playerTree[score].push(player);\r\n    });\r\n    /**\r\n     * Part 2: Split each score group into an upper half and a lower half,\r\n     * based on rating (USCF § 27A3)\r\n     * Tree structure:\r\n     * {\r\n     *    score: [\r\n     *        [upper half list of players],\r\n     *        [lower half list of players]\r\n     *    ],\r\n     *    ...\r\n     * }\r\n     */\r\n    Object.keys(round.playerTree).reverse().forEach(function (score, i, list) {\r\n        var players = round.playerTree[score];\r\n        /**\r\n         * If there\"s an odd number of players in this score group,\r\n         */\r\n        if (players.length % 2 !== 0) {\r\n            /**\r\n             * ...and if there\"s an odd number of players in the total round,\r\n             * then add a dummy player.\r\n             */\r\n            if (round.roster.length % 2 !== 0 && !round.hasDummy) {\r\n                players.push(DUMMYPLAYER);\r\n                round.hasDummy = true;\r\n            /**\r\n             * But if there\"s an even number of players in the total round, then\r\n             * just move a player to the next score group.\r\n             */\r\n            } else {\r\n                var oddPlayer = players[players.length - 1];\r\n                players.splice(players.length - 1, 1);\r\n                // the group to move the player to\r\n                var newGroup = list[i + 1];\r\n                if(round.playerTree[newGroup] === undefined) {\r\n                    round.playerTree[newGroup] = [];\r\n                }\r\n                round.playerTree[newGroup].push(oddPlayer);\r\n            }\r\n        }\r\n        /**\r\n         * If there are no players in this group (e.g. a lone player got pushed\r\n         * to another group) then delete the key.\r\n         */\r\n        if (players.length === 0) {\r\n            delete round.playerTree[score];\r\n        } else {\r\n            round.playerTree[score] = chain(players)\r\n            .sortBy(\"rating\")\r\n            .reverse()\r\n            .chunk(players.length / 2)\r\n            .value();\r\n        }\r\n    });\r\n    Object.keys(round.playerTree).forEach(function (score) {\r\n        // name the upperHalf and lowerHalf to make the code easier to read\r\n        var upperHalf = round.playerTree[score][0];\r\n        var lowerHalf = round.playerTree[score][1];\r\n        /**\r\n         * If there was no previous round, zip the players and call it a day.\r\n         */\r\n        if (round.prevRound === undefined) {\r\n            zip(upperHalf, lowerHalf)\r\n                .forEach((match) =>\r\n                    round.matches.push(createMatch(round, ...match))\r\n                );\r\n        } else {\r\n            /**\r\n             * If there was a previous round, then things get complicated....\r\n             * 1. Record each upper-half player\"s opponent history\r\n             * 2. Iterate through each upper-half player to find an opponent in\r\n             *    the lower half\r\n             * 3. Attempt to match with a lower-half opponent who isn\"t in their\r\n             *    history yet AND who is in the history of other upper-half\r\n             *    players. The second part helps eliminate a small percentage of\r\n             *    history overlap.\r\n             *      * (USCF § 27A1 - highest priority rule)\r\n             * 4. If no opponent was found, try again but don\"t consider the\r\n             *    history of other upper-half players.\r\n             * 5. If still no opponent was found, just pick whoever is left in\r\n             *    the lower half, even if they\"ve played each other before.\r\n             * 6. If they have played each other before, attempt to swap\r\n             *    opponents with another upper-half player.\r\n             *\r\n             * This code is certainly not the most reliable or the most\r\n             * efficient. Changes will be needed.\r\n             */\r\n            /**\r\n             * 1.\r\n             * @var {Array} upperHalfHistory Each index matches the player\"s\r\n             * indexin upperHalf. Each sub-array is a list of their opponents.\r\n             */\r\n            var upperHalfHistory = upperHalf.map((p) =>\r\n                // merge the upperHalf and lowerHalf\r\n                [].concat(lowerHalf).concat(upperHalf)\r\n                    .filter((p2) =>\r\n                    // filter the players who have played this player\r\n                    round.tourney.getPlayersByOpponent(p2).includes(p)\r\n                    )\r\n            );\r\n            /**\r\n             * 2.\r\n             */\r\n            upperHalf.forEach(function (player1) {\r\n                var history = upperHalfHistory[upperHalf.indexOf(player1)];\r\n                var othersHistory = flatten(upperHalfHistory\r\n                    .slice(upperHalf.indexOf(player1))\r\n                );\r\n                /**\r\n                 * 3.\r\n                 */\r\n                var player2;\r\n                var match;\r\n                [player2, match] = findAMatch(\r\n                    round,\r\n                    player1,\r\n                    lowerHalf.filter((x) =>\r\n                        othersHistory.includes(x)), history\r\n                );\r\n                /**\r\n                 * 4.\r\n                 */\r\n                if (!player2) {\r\n                    [player2, match] = findAMatch(\r\n                        round,player1, lowerHalf, history\r\n                    );\r\n                }\r\n                /**\r\n                 * 5.\r\n                 */\r\n                if (!player2) {\r\n                    [player2, match] = findAMatch(\r\n                        round, player1, lowerHalf, []\r\n                    );\r\n                }\r\n                /**\r\n                 * 6.\r\n                 */\r\n                if (history.includes(player2)) {\r\n                    var foundASwap = false;\r\n                    upperHalf.filter((p) => p !== player1).forEach(function (otherPlayer) {\r\n                        if(!foundASwap) {\r\n                            var otherMatch = round.matches\r\n                                .filter((m) => m.players.includes(otherPlayer))[0];\r\n                            if(otherMatch) {\r\n                                var otherPlayer2 = otherMatch.players\r\n                                    .filter((p) => p !== otherPlayer)[0];\r\n                                var otherHistory = upperHalfHistory[upperHalf\r\n                                    .indexOf(otherPlayer)];\r\n                                if (!history.includes(otherPlayer2)\r\n                                        && !otherHistory.includes(player2)) {\r\n                                    match.players = [player1, otherPlayer2];\r\n                                    otherMatch.players = [otherPlayer, player2];\r\n                                    foundASwap = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return round.matches;\r\n}\r\n\r\n/**\r\n * Represents a round in a tournament.\r\n */\r\nfunction createRound(tourney, id, prevRound, players) {\r\n    const round = {\r\n        id: id,\r\n        tourney: tourney,\r\n        roster: players,\r\n        prevRound: prevRound,\r\n        playerTree: {},\r\n        matches: [],\r\n        hasDummy: false,\r\n        isComplete: function() {\r\n                return !round.matches.map((m) => m.isComplete).includes(false);\r\n        },\r\n        getMatchByPlayer: function (player) {\r\n            var theMatch = null;\r\n            round.matches.forEach(function (match) {\r\n                if (match.players.includes(player)) {\r\n                    theMatch = match;\r\n                }\r\n            });\r\n            return theMatch;\r\n        },\r\n        playerColor: function (player) {\r\n            var color = -1;\r\n            round.matches.forEach(function (match) {\r\n                if (match.players.includes(player)) {\r\n                    color = match.players.indexOf(player);\r\n                }\r\n            });\r\n            return color;\r\n        },\r\n        addPlayer: function(player) {\r\n            round.players.push(player);\r\n            return round;\r\n        }\r\n    };\r\n    pairPlayers(round);\r\n    return round;\r\n}\r\n\r\nexport default Object.freeze(createRound);","import newRoster from \"./roster\";\r\nimport createRound from \"./round\";\r\nimport {last, times} from \"lodash\";\r\n\r\nfunction createTournament(name = \"\", playerList = []) {\r\n    const tourney = {\r\n        name: name,\r\n        roundList: [],\r\n        byeValue: 1,\r\n        isNewRoundReady: function () {\r\n            var isReady = false;\r\n            if (tourney.roundList.length > 0) {\r\n                isReady = last(tourney.roundList).isComplete();\r\n            } else {\r\n                isReady = (tourney.roster.all.length > 0);\r\n            }\r\n            return isReady;\r\n        },\r\n        getMatchesByPlayer: function (player, roundId = null) {\r\n            if (roundId === null) {\r\n                roundId = tourney.roundList.length;\r\n            }\r\n            var matches = [];\r\n            times(roundId + 1, function (i) {\r\n                if (tourney.roundList[i] !== undefined) {\r\n                    tourney.roundList[i].matches.forEach(function (match) {\r\n                        if (match.players.indexOf(player) !== -1) {\r\n                            matches.push(match);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            return matches;\r\n        },\r\n        getPlayersByOpponent: function (opponent, roundId = null) {\r\n            var players = [];\r\n            tourney.getMatchesByPlayer(opponent, roundId).forEach(\r\n                function (match) {\r\n                    players = players.concat(\r\n                        match.players.filter(\r\n                            (player) => player !== opponent\r\n                        )\r\n                    );\r\n                }\r\n            );\r\n            return players;\r\n        },\r\n        getNumOfRounds: function () {\r\n            var roundId = Math.ceil(\r\n                Math.log2(tourney.roster.getActive().length)\r\n            );\r\n            if (roundId === -Infinity) {\r\n                roundId = 0;\r\n            }\r\n            return roundId;\r\n        },\r\n        newRound: function () {\r\n            if (!tourney.isNewRoundReady()) {\r\n                return false;\r\n            }\r\n            var newRound = createRound(\r\n                tourney,\r\n                tourney.roundList.length,\r\n                last(tourney.roundList),\r\n                tourney.roster.getActive()\r\n            );\r\n            tourney.roundList.push(newRound);\r\n            return newRound;\r\n        }\r\n    };\r\n    tourney.roster = newRoster(tourney, playerList);\r\n    return tourney;\r\n}\r\n\r\nexport default Object.freeze(createTournament);\r\n","const demoPlayers = [\r\n    {firstName: \"Matthew\", lastName: \"A\", rating: 800},\r\n    {firstName: \"Mark\", lastName: \"B\", rating: 850},\r\n    {firstName: \"Luke\", lastname: \"C\", rating: 900},\r\n    {firstName: \"John\", lastname: \"D\", rating: 950},\r\n    {firstName: \"Simon\", lastname: \"E\", rating: 1000},\r\n    {firstName: \"Andrew\", lastname: \"F\", rating: 1050},\r\n    {firstName: \"James\", lastname: \"G\", rating: 1100},\r\n    {firstName: \"Philip\", lastname: \"H\", rating: 1150},\r\n    {firstName: \"Bartholomew\", lastname: \"I\", rating: 1200},\r\n    {firstName: \"Thomas\", lastname: \"J\", rating: 1250},\r\n    {firstName: \"Catherine\", lastname: \"K\", rating: 1300},\r\n    {firstName: \"Clare\", lastname: \"L\", rating: 1350},\r\n    {firstName: \"Judas\", lastname: \"M\", rating: 1400},\r\n    {firstName: \"Matthias\", lastname: \"N\", rating: 1450},\r\n    {firstName: \"Paul\", lastname: \"O\", rating: 1500},\r\n    {firstName: \"Mary\", lastname: \"P\", rating: 1600},\r\n    {firstName: \"Theresa\", lastname: \"Q\", rating: 1650},\r\n    {firstName: \"Megan\", lastname: \"R\", rating: 1700},\r\n    {firstName: \"Elizabeth\", lastname: \"S\", rating: 1750}\r\n];\r\n\r\nexport default Object.freeze(demoPlayers);","import React, { useState } from 'react';\r\nimport {createPlayer, scores} from './chess-tourney';\r\nimport demoRoster from './demo-players';\r\n\r\nfunction MainRoster ({tourney}) {\r\n  const [roster, setRoster] = useState(tourney.roster.all);\r\n  const [demoLoaded, setDemoLoaded] = useState(false);\r\n  const newPlayer = {firstName: '', lastName: '', rating: 1200};\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    tourney.roster.addPlayer(\r\n        createPlayer(\r\n            newPlayer['firstName'],\r\n            newPlayer['lastName'],\r\n            newPlayer['rating']\r\n        )\r\n    );\r\n    setRoster([].concat(tourney.roster.all));\r\n  }\r\n  const updateField = (event) => {\r\n    newPlayer[event.target.name] = event.target.value;\r\n  }\r\n  const loadDemo = () => {\r\n    var players = demoRoster.slice(0,16).map(p => createPlayer(p));\r\n    tourney.roster.addPlayers(players);\r\n    setDemoLoaded(true);\r\n    setRoster([].concat(tourney.roster.all));\r\n  }\r\n  const deactivatePlayer = (player) => {\r\n    var baleted = tourney.roster.removePlayer(player);\r\n    if (!baleted) {\r\n      tourney.roster.deactivatePlayer(player);\r\n    }\r\n    setRoster([].concat(tourney.roster.all));\r\n  }\r\n  const activatePlayer = (player) => {\r\n    tourney.roster.activatePlayer(player);\r\n    setRoster([].concat(tourney.roster.all));\r\n  }\r\n  var rosterTable = '';\r\n  if (roster.length > 0) {\r\n    rosterTable = \r\n    <table><caption>Roster</caption>\r\n      <thead>\r\n        <tr>\r\n          <th>First name</th>\r\n          <th>Rating</th>\r\n          <th>Rounds played</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        { roster.map((player, i) =>\r\n          <tr key={i} \r\n            className={tourney.roster.inactive.includes(player) ? 'inactive' : 'active'}>\r\n            <td className=\"table__player\">{player.firstName}</td>\r\n            <td className=\"table__number\">{player.rating}</td>\r\n            <td className=\"table__number\">\r\n              {tourney.getMatchesByPlayer(player).length}\r\n            </td>\r\n            <td>\r\n            {tourney.roster.inactive.includes(player)\r\n              ? <button onClick={() => activatePlayer(player)}>Activate</button>\r\n              : <button onClick={() => deactivatePlayer(player)}>x</button>\r\n            }\r\n            </td>\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  }\r\n  return (\r\n    <div className=\"roster\">\r\n      {rosterTable}\r\n      <p>\r\n        <button disabled={demoLoaded} onClick={loadDemo}>Load a demo roster</button>\r\n      </p>\r\n      <p>\r\n        Or add your own players:\r\n      </p>\r\n      <form onSubmit={handleSubmit}>\r\n        <p>\r\n            <label>\r\n            First name&nbsp;\r\n            <input type=\"text\" name=\"firstName\" onChange={updateField} required />\r\n            </label>\r\n        </p>\r\n        <p>\r\n            <label>\r\n            Last name&nbsp;\r\n            <input type=\"text\" name=\"lastName\" onChange={updateField} required />\r\n            </label>\r\n        </p>\r\n        <p>\r\n            <label>\r\n            Rating&nbsp;\r\n            <input type=\"number\" name=\"rating\" onChange={updateField} value=\"1200\" />\r\n            </label>\r\n        </p>\r\n        <input type=\"submit\" value=\"Add\"/>\r\n      </form>\r\n      <p className=\"center\">Total rounds: {tourney.getNumOfRounds()}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Round ({tourney, roundId}) {\r\n  /**\r\n   * Be careful when using the `setState` `matches` and the API's `matches`.\r\n   * They have to mirror each other but can't be the same objects.\r\n   */\r\n  const round = tourney.roundList[roundId];\r\n  const [matches, setMatches] = useState(round.matches.map(o => Object.assign({}, o)));\r\n  const [openCards, setCards] = useState([]);\r\n  const setWinner = (color, index, event) => {\r\n    let origMatch = round.matches[index];\r\n    if(event.target.checked) {\r\n      if(color === 0) {\r\n        origMatch.whiteWon();\r\n      } else if (color === 1) {\r\n        origMatch.blackWon();\r\n      } else if (color === 0.5) {\r\n        origMatch.draw();\r\n      }\r\n    } else {\r\n      origMatch.resetResult();\r\n    }\r\n    // matches[index] = match;\r\n    setMatches(round.matches.map(o => Object.assign({}, o)));\r\n  }\r\n  const togglePlayerCard = (id) => {\r\n    if (openCards.includes(id)) {\r\n      setCards(openCards.filter(i => i !== id));\r\n    } else {\r\n      setCards([].concat(openCards).concat([id]));\r\n    }\r\n  }\r\n  const randomize = () => {\r\n    matches.forEach((match, i) => {\r\n      let origMatch = round.matches[i];\r\n      let rando = Math.random();\r\n      if (rando >= 0.55) {\r\n        origMatch.whiteWon();\r\n      } else if (rando >= .1) {\r\n        origMatch.blackWon();\r\n      } else {\r\n        origMatch.draw();\r\n      }\r\n    });\r\n    setMatches(round.matches.map(o => Object.assign({}, o)));\r\n  }\r\n  return (\r\n    <div>\r\n      <table key={round.id} className=\"table__roster\">\r\n        <caption>Round {round.id + 1} results</caption>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Won</th>\r\n            <th>White</th>\r\n            <th>Draw</th>\r\n            <th>Black</th>\r\n            <th>Won</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {matches.map((match, i) =>\r\n            <tr key={i} className={round.matches[i].isBye() ? 'inactive' : ''}>\r\n              <td className=\"table__number\">{i + 1}</td>\r\n              <td>\r\n                <input \r\n                  type=\"checkbox\"\r\n                  checked={round.matches[i].getWhite().result === 1}\r\n                  disabled={round.matches[i].isBye()}\r\n                  onChange={(event) => setWinner(0, i, event)} />\r\n              </td>\r\n              <td className=\"table__player\">\r\n                {round.matches[i].getWhite().player.firstName}\r\n                <button onClick={() => togglePlayerCard(i)}>?</button>\r\n                {openCards.includes(i) && \r\n                  <PlayerCard\r\n                    tourney={tourney}\r\n                    round={round}\r\n                    player={round.matches[i].getWhite().player} />\r\n                }\r\n              </td>\r\n              <td>\r\n                <input \r\n                  type=\"checkbox\"\r\n                  checked={round.matches[i].getWhite().result === 0.5}\r\n                  disabled={round.matches[i].isBye()}\r\n                  onChange={(event) => setWinner(0.5, i, event)} />\r\n              </td>\r\n              <td className=\"table__player\">\r\n                {round.matches[i].getBlack().player.firstName}\r\n                <button onClick={() => togglePlayerCard(i)}>?</button>\r\n                {openCards.includes(i) && \r\n                  <PlayerCard\r\n                    tourney={tourney}\r\n                    round={round}\r\n                    player={round.matches[i].getBlack().player} />\r\n                }\r\n              </td>\r\n              <td>\r\n                <input \r\n                  type=\"checkbox\"\r\n                  checked={round.matches[i].getBlack().result === 1}\r\n                  disabled={round.matches[i].isBye()}\r\n                  onChange={(event) => setWinner(1, i, event)} />\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <p style={{textAlign: 'center'}}>\r\n        <button onClick={randomize}>Random!</button>\r\n      </p>\r\n      <Standings roundId={round.id} tourney={round.tourney} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PlayerCard({tourney, round, player}) {\r\n  var ratingChange = (\r\n    round.getMatchByPlayer(player).getPlayerInfo(player).newRating\r\n    - round.getMatchByPlayer(player).getPlayerInfo(player).origRating\r\n  );\r\n  if (ratingChange > -1) {\r\n    ratingChange = \"+\" + ratingChange\r\n  }\r\n  const colorBalance = scores.playerColorBalance(tourney, player, round.id);\r\n  var color = 'Even';\r\n  if (colorBalance > 0) {\r\n    color = 'White +' + colorBalance;\r\n  } else if (colorBalance < 0) {\r\n    color = 'Black +' + Math.abs(colorBalance);\r\n  }\r\n  return (\r\n    <dl className=\"player-card\">\r\n      <dt>Rating</dt>\r\n      <dd>\r\n        {round.getMatchByPlayer(player).getPlayerInfo(player).origRating}\r\n        &nbsp;({ratingChange})\r\n      </dd>\r\n      <dt>Color balance</dt>\r\n      <dd>{color}</dd>\r\n      <dt>Opponent history</dt>\r\n      <dd>\r\n        <ol>\r\n          {tourney.getPlayersByOpponent(player, round.id).map((opponent, i) =>\r\n            <li key={i}>\r\n              {opponent.firstName}\r\n            </li>  \r\n          )}\r\n        </ol>\r\n      </dd>\r\n    </dl>\r\n  );\r\n}\r\n\r\nfunction Standings({tourney, roundId}) {\r\n  return (\r\n    <table key={roundId}>\r\n      <caption>Current Standings</caption>\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          <th>First name</th>\r\n          <th>Score</th>\r\n          <th>Median</th>\r\n          <th>Solkoff</th>\r\n          <th>Cumulative</th>\r\n          <th>Cumulative of opposition</th>\r\n        </tr>\r\n      </thead>\r\n      {scores.calcStandings(tourney, roundId).map((rank, i) => \r\n        <tbody key={i}>\r\n          {rank.map((player, j) => \r\n            <tr key={j}>\r\n              <td>{i + 1}</td>\r\n              <td>{player.player.firstName}</td>\r\n              <td className=\"table__number\">{player.score}</td>\r\n              <td className=\"table__number\">{player.modifiedMedian}</td>\r\n              <td className=\"table__number\">{player.solkoff}</td>\r\n              <td className=\"table__number\">{player.scoreCum}</td>\r\n              <td className=\"table__number\">{player.oppScoreCum}</td>\r\n            </tr>\r\n            )}\r\n        </tbody>\r\n      )}\r\n    </table>\r\n  );\r\n}\r\n\r\nexport {MainRoster, Round, Standings};","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport {createTournament} from \"./chess-tourney\";\r\nimport {MainRoster, Round} from \"./chess-tourney.jsx.js\";\r\n\r\nconst cvlTourney = createTournament(\"CVL Winter Open\");\r\n\r\nfunction App() {\r\n  const newRound = (event) => {\r\n    var round = cvlTourney.newRound();\r\n    if (!round) {\r\n      alert(\"Either add players or complete the current matches first.\");\r\n      return;\r\n    }\r\n    tabList.push(\r\n      {\r\n        name: \"Round \" + (round.id + 1),\r\n        contents: <Round tourney={cvlTourney} roundId={round.id} />\r\n      }\r\n    );\r\n    setTabList([].concat(tabList));\r\n    setCurrentTab(tabList[tabList.length - 1])\r\n  }\r\n  const [tabList, setTabList] = useState(\r\n    [\r\n      {\r\n        name: \"Roster\",\r\n        contents: <MainRoster tourney={cvlTourney} />\r\n      }\r\n    ]\r\n  );\r\n  const [currentTab, setCurrentTab] = useState(tabList[0]);\r\n  return (\r\n    <div className=\"tournament\">\r\n      <nav className=\"tabbar\">\r\n        <ul>\r\n          {tabList.map((tab, i) => \r\n            <li key={i}>\r\n              <button\r\n                className=\"tab\"\r\n                onClick={() => setCurrentTab(tab)}\r\n                disabled={currentTab === tab}\r\n                >\r\n                {tab.name}\r\n              </button>\r\n            </li>\r\n          )}\r\n          <li>\r\n            <button \r\n              className=\"tab new_round\"\r\n              onClick={newRound}\r\n              >\r\n              New Round\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <h1>Chessahoochee: a chess tournament app</h1>\r\n      {currentTab.contents}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Caution() {\r\n    return (\r\n        <p>\r\n            <span role=\"img\" aria-label=\"waving hand\">👋</span>&nbsp;\r\n            This is an unstable demo build!\r\n            Want to help make it better? Head to the&nbsp;\r\n            <span role=\"img\" aria-label=\"finger pointing right\">👉</span>&nbsp;\r\n            <a href=\"https://github.com/johnridesabike/chessahoochee\">Git repository</a>.\r\n        </p>\r\n    );\r\n}\r\n\r\nexport {App, Caution};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport {App, Caution} from \"./App.jsx\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nReactDOM.render(<Caution />, document.getElementById(\"caution\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}