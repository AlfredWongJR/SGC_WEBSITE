{"version":3,"sources":["components/caution/index.module.css","components/utility.jsx","data/tournament.js","data/constants.js","data/player.js","data/utility.js","data/match.js","pairing-scoring/scoring.js","pairing-scoring/pairing.js","state/match-functions.js","state/global-state.js","components/tournament/round.jsx","components/tournament/player-select.jsx","components/tournament/tabs.jsx","components/tournament/list.jsx","components/players/list.jsx","components/players/info-box.jsx","components/players/index.jsx","components/options.jsx","components/caution/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","caution","caution__text","caution__link","Button","_ref","children","action","react_default","a","createElement","onClick","BackButton","_ref2","OpenButton","_ref3","Panel","_ref4","style","Object","objectSpread","PanelContainer","_ref5","display","React","Children","map","child","freeze","importObj","name","tieBreaks","byeQueue","players","roundList","BLACK","WHITE","createPlayer","arguments","length","undefined","id","type","firstName","lastName","rating","matchCount","dummyPlayer","getPlayerById","playerList","player","filter","p","getPlayerAvoidList","playerId","avoidList","pair","includes","reduce","accumulator","concat","kFactor","calcNewRatings","origRatings","matchCounts","result","whiteElo","EloRank","blackElo","scoreExpected","getExpected","updateRating","calcNumOfRounds","playerCount","roundId","Math","ceil","log2","Number","isFinite","getById","list","x","getIndexById","indexOf","ids","pairs","origRating","newRating","isBye","match","playerMatchColor","matchList","color","m","getMatchesByPlayer","slice","acc","round","hasHadBye","getPlayersByOpponent","opponentId","playerScore","score","scoreList","playerScoreList","b","playerScoreCum","runningScore","cumScores","playerScoreListNoByes","forEach","push","totalScore","playerColorBalance","modifiedMedian","pId","isSolkoff","scores","opponent","sort","pop","shift","finalScore","tieBreakMethods","func","oppScores","calcStandings","methods","standingsFlat","allPlayers","Array","from","Set","getAllPlayers","method","sortFunc","firstBy","standing","ignore","index","thenBy","standingsTree","runningRank","i","orig","standing1","standing2","areEqual","keys","areScoresEqual","dueColor","genPlayerData","data","colorBalance","opponentHistory","upperHalf","avoidMeetingTwicePriority","sameScoresPriority","differentHalfPriority","differentDueColorPriority","calcPairIdeal","player1","player2","scoreDiff","priority","metBefore","mustAvoid","abs","byeMatch","potentialMatches","matches","reducedResults","playerData","byePlayerData","last","playersWithScore","pd","reverse","splitAt","playerDatum","src","playerMatches","blossom","p1Id","p2Id","p1","p2","ideal","matched","autoPair","state","tourneyId","unPairedPlayers","tourney","tourneys","getPlayer","curry","nextBye","createMatch","newMatchList","pairPlayers","avoid","join","dummy","options","byeValue","manualPair","swapColors","matchId","defaultData","defaultOptions","defaultPlayers","defaultTourneyList","dataReducer","assign","newPlayer","arrayMove","oldIndex","newIndex","unpairedPlayers","Error","DataContext","createContext","Round","_useContext","useContext","dispatch","_useState","useState","_useState2","slicedToArray","selectedMatch","setSelectedMatch","_useState3","_useState4","selectedPlayers","setSelectedPlayers","selectPlayer","event","target","value","checked","prevState","unMatched","setMatchResult","white","black","moveMatch","direction","mIndex","className","unMatch","disabled","pos","MatchRow","key","PlayerMatchInfo","react","onChange","htmlFor","whiteWon","blackWon","draw","every","whiteName","blackName","role","aria-label","menu_button_es","visually_hidden_es","aria-hidden","onSelect","prettyBalance","numeral","format","opId","PlayerSelect","isSelecting","setIsSelecting","selectedTb","setSelectedTb","toggleTb","moveTb","togglePlayer","colSpan","TournamentTabs","backButton","defaultTab","setDefaultTab","_calcStandings","_calcStandings2","standingTree","tbMethods","es","defaultIndex","rank","TournamentList","tourneyList","openTourney","setOpenTourney","newTourneyName","setNewTourneyName","content","onSubmit","preventDefault","createTournament","placeholder","required","PlayerList","setOpenPlayer","newPlayerDefault","newPlayerData","setNewPlayerdata","nextId","setNextId","updateField","update","currentTarget","rosterTable","delPlayer","prevId","PlayerInfoBox","singAvoidList","setSingAvoidList","unAvoided","selectedAvoider","setSelectedAvoider","useEffect","aria-labelledby","avoidAdd","onBlur","PlayerView","openPlayer","Options","outputData","JSON","stringify","rows","cols","readOnly","Caution","styles","href","App","_useReducer","useReducer","_useReducer2","StrictMode","Provider","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b24bf4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"caution\":\"caution_caution__3ty2F\",\"caution__text\":\"caution_caution__text__bwHtS\",\"caution__link\":\"caution_caution__link__1X0bz\"};","// @ts-check\r\nimport React from \"react\";\r\n/**\r\n * @param {Object} props\r\n * @param {JSX.Element | string} [props.children]\r\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\r\n */\r\nexport function Button({children, action}\r\n) {\r\n    return (\r\n        <button onClick={action}>\r\n            {children}\r\n        </button>\r\n    );\r\n}\r\n\r\n/**\r\n * @param {Object} props\r\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\r\n */\r\nexport function BackButton({action}) {\r\n    return <Button action={action}>&lt; Back</Button>;\r\n}\r\n\r\n/**\r\n * @param {Object} props\r\n * @param {(event: React.MouseEvent | React.KeyboardEvent) => void} props.action\r\n */\r\nexport function OpenButton({action}) {\r\n    return <Button action={action}>Open &gt;</Button>;\r\n}\r\n\r\n/**\r\n * @param {*[]} arr\r\n * @param {number} pos\r\n * @param {number} dir\r\n */\r\nexport function moveArrItem(arr, pos, dir) {\r\n    const newPos = pos + dir;\r\n    const newArr = [...arr];\r\n    const movedMethod = newArr.splice(pos, 1)[0];\r\n    newArr.splice(newPos, 0, movedMethod);\r\n    return newArr;\r\n}\r\n\r\n/**\r\n * @param {object} props\r\n * @param {React.ReactNode} props.children\r\n * @param {React.CSSProperties} [props.style]\r\n */\r\nexport function Panel({children, style}) {\r\n    return (\r\n        <div style={{...style}}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n *\r\n * @param {object} props\r\n */\r\nexport function PanelContainer({children}) {\r\n    return (\r\n        <div style={{display: \"flex\"}}>\r\n            {React.Children.map(children, (child) => child)}\r\n        </div>\r\n    );\r\n}","// @ts-check\r\n/**\r\n * @typedef {import(\"./index\").Tournament} Tournament\r\n */\r\nfunction createTournament(importObj) {\r\n    /** @type {Tournament} */\r\n    const tourney = {\r\n        name: importObj.name || \"\",\r\n        tieBreaks: importObj.tieBreaks || [0, 1, 2, 3],\r\n        byeQueue: importObj.byeQueue || [],\r\n        players: importObj.players || [],\r\n        roundList: importObj.roundList || []\r\n    };\r\n    return tourney;\r\n}\r\nexport default Object.freeze(createTournament);","// @ts-check\r\nconst BLACK = 1;\r\nexport {BLACK};\r\nconst WHITE = 0;\r\nexport {WHITE};","// @ts-check\r\nimport EloRank from \"elo-rank\";\r\nimport {WHITE, BLACK} from \"./constants\";\r\n/**\r\n * @typedef {import(\"./index\").Player} Player\r\n */\r\n\r\nfunction createPlayer(importObj = {}) {\r\n    /** @type {Player} */\r\n    const player = {\r\n        id: importObj.id || 0,\r\n        type: importObj.type || \"person\", // used for CSS styling etc.\r\n        firstName: importObj.firstName || \"\",\r\n        lastName: importObj.lastName || \"\",\r\n        rating: importObj.rating || 0,\r\n        matchCount: importObj.matchCount || 0\r\n    };\r\n    return player;\r\n}\r\nObject.freeze(createPlayer);\r\nexport {createPlayer};\r\n\r\nconst dummyPlayer = createPlayer();\r\ndummyPlayer.id = -1;\r\ndummyPlayer.firstName = \"Bye\";\r\ndummyPlayer.lastName = \"Player\";\r\ndummyPlayer.type = \"dummy\";\r\nObject.freeze(dummyPlayer);\r\nexport {dummyPlayer};\r\n\r\n\r\n/**\r\n * @param {Player[]} playerList\r\n * @param {number} id\r\n * @returns {Player}\r\n */\r\nfunction getPlayerById(playerList, id) {\r\n    if (id === -1) {\r\n        return dummyPlayer;\r\n    }\r\n    let player = playerList.filter((p) => p.id === id)[0];\r\n    if (!player) {\r\n        player = createPlayer({\r\n            id: id,\r\n            firstName: \"Anonymous\",\r\n            type: \"missing\"\r\n        });\r\n    }\r\n    return player;\r\n}\r\nObject.freeze(getPlayerById);\r\nexport {getPlayerById};\r\n\r\n/**\r\n * @param {number} playerId\r\n * @param {number[][]} avoidList\r\n * @returns {number[]}\r\n */\r\nfunction getPlayerAvoidList(playerId, avoidList) {\r\n    return avoidList.filter( // get pairings with the player\r\n        (pair) => pair.includes(playerId)\r\n    ).reduce( // Flatten the array\r\n        (accumulator, pair) => pair.concat(accumulator),\r\n        []\r\n    ).filter( // filter out the player's id\r\n        (id) => id !== playerId\r\n    );\r\n}\r\nObject.freeze(getPlayerAvoidList);\r\nexport {getPlayerAvoidList};\r\n\r\n/**\r\n * @param {number[][]} avoidList\r\n * @param {Player[]} playerList\r\n */\r\nfunction cleanAvoidList(avoidList, playerList) {\r\n    const ids = playerList.map((p) => p.id);\r\n    return avoidList.filter(\r\n        (pairs) => (ids.includes(pairs[0]) && ids.includes(pairs[1]))\r\n    );\r\n}\r\nObject.freeze(cleanAvoidList);\r\nexport {cleanAvoidList};\r\n\r\n/**\r\n * @param {number} matchCount\r\n */\r\nfunction kFactor(matchCount) {\r\n    const ne = matchCount || 1;\r\n    return (800 / ne);\r\n}\r\nObject.freeze(kFactor);\r\nexport {kFactor};\r\n\r\n/**\r\n * @param {[number, number]} origRatings\r\n * @param {[number, number]} matchCounts\r\n * @param {[number, number]} result\r\n */\r\nfunction calcNewRatings(origRatings, matchCounts, result) {\r\n    const whiteElo = new EloRank(kFactor(matchCounts[WHITE]));\r\n    const blackElo = new EloRank(kFactor(matchCounts[BLACK]));\r\n    const FLOOR = 100;\r\n    const scoreExpected = [\r\n        whiteElo.getExpected(origRatings[WHITE], origRatings[BLACK]),\r\n        blackElo.getExpected(origRatings[BLACK], origRatings[WHITE])\r\n    ];\r\n    const newRating = [\r\n        whiteElo.updateRating(\r\n            scoreExpected[WHITE],\r\n            result[WHITE],\r\n            origRatings[WHITE]\r\n        ),\r\n        blackElo.updateRating(\r\n            scoreExpected[BLACK],\r\n            result[BLACK],\r\n            origRatings[BLACK]\r\n        )\r\n    ];\r\n    return newRating.map(\r\n        (rating) => (\r\n            (rating < FLOOR)\r\n            ? FLOOR\r\n            : rating\r\n        )\r\n    );\r\n}\r\nObject.freeze(calcNewRatings);\r\nexport {calcNewRatings};","// @ts-check\r\n/**\r\n * @param {number} playerCount\r\n */\r\nfunction calcNumOfRounds(playerCount) {\r\n    let roundId = Math.ceil(Math.log2(playerCount));\r\n    if (!Number.isFinite(roundId)) {\r\n        roundId = 0;\r\n    }\r\n    return roundId;\r\n}\r\nObject.freeze(calcNumOfRounds);\r\nexport {calcNumOfRounds};\r\n\r\n/**\r\n * @param {Object[]} list\r\n * @param {number | string} id\r\n */\r\nfunction getById(list, id) {\r\n    return list.filter((x) => x.id === id)[0];\r\n}\r\nObject.freeze(getById);\r\nexport {getById};\r\n/**\r\n * @param {Object[]} list\r\n * @param {number | string} id\r\n */\r\nfunction getIndexById(list, id) {\r\n    return list.indexOf(getById(list, id));\r\n}\r\nObject.freeze(getIndexById);\r\nexport {getIndexById};","// @ts-check\r\n/**\r\n * @typedef {import(\"./index\").Match} Match\r\n */\r\n/**\r\n *\r\n * @param {object} importObj\r\n */\r\nfunction createMatch(importObj) {\r\n    /** @type {Match} */\r\n    const match = {\r\n        id: importObj.id,\r\n        players: importObj.players,\r\n        result: importObj.result || [0, 0],\r\n        origRating: importObj.origRating,\r\n        newRating: importObj.newRating\r\n    };\r\n    return match;\r\n}\r\nexport default Object.freeze(createMatch);\r\n","// @ts-check\r\nimport {firstBy} from \"thenby\";\r\nimport {\r\n    dummyPlayer,\r\n    getPlayerById,\r\n    getPlayerAvoidList\r\n} from \"../data/player\";\r\n\r\n/**\r\n * @typedef {import(\"./\").ScoreCalculator} ScoreCalculator\r\n * @typedef {import(\"./\").PlayerData} PlayerData\r\n * @typedef {import(\"./\").Standing} Standing\r\n * @typedef {import(\"../data/\").Match} Match\r\n * @typedef {import(\"../data/\").Player} Player\r\n */\r\n\r\n/**\r\n *\r\n * @param {Match} match\r\n * @returns {boolean}\r\n */\r\nfunction isBye(match) {\r\n    return match.players.includes(dummyPlayer.id);\r\n}\r\n\r\n/**\r\n * @param {number} playerId\r\n * @param {object[]} matchList\r\n * @returns {number?}\r\n */\r\nfunction playerMatchColor(playerId, matchList) {\r\n    /**@type {number} */\r\n    let color = null;\r\n    const match = matchList.filter((m) => m.players.includes(playerId))[0];\r\n    if (match) {\r\n        color = match.players.indexOf(playerId);\r\n    }\r\n    return color;\r\n}\r\nObject.freeze(playerMatchColor);\r\nexport {playerMatchColor};\r\n\r\n/**\r\n * @type {ScoreCalculator}\r\n * @returns {Match[]}\r\n */\r\nfunction getMatchesByPlayer(playerId, roundList, roundId = null) {\r\n    let rounds;\r\n    if (roundId === null) {\r\n        rounds = roundList;\r\n    } else {\r\n        rounds = roundList.slice(0, roundId + 1);\r\n    }\r\n    return rounds.reduce( // flatten the rounds to just the matches\r\n        (acc, round) => acc.concat(round),\r\n        []\r\n    ).filter(\r\n        (match) => match.players.includes(playerId)\r\n    );\r\n}\r\n\r\n/**\r\n * @type {ScoreCalculator}\r\n * @returns {boolean}\r\n */\r\nfunction hasHadBye(playerId, roundList, roundId = null) {\r\n    return getMatchesByPlayer(\r\n        playerId,\r\n        roundList,\r\n        roundId\r\n    ).reduce(\r\n        (acc, match) => acc.concat(match.players),\r\n        []\r\n    ).includes(dummyPlayer.id);\r\n}\r\nObject.freeze(hasHadBye);\r\nexport {hasHadBye};\r\n\r\n/**\r\n * @type {ScoreCalculator}\r\n * @returns {number[]}\r\n */\r\nfunction getPlayersByOpponent(opponentId, roundList, roundId = null) {\r\n    return getMatchesByPlayer(\r\n        opponentId,\r\n        roundList,\r\n        roundId\r\n    ).reduce(\r\n        (acc, match) => acc.concat(match.players),\r\n        []\r\n    ).filter(\r\n        (playerId) => playerId !== opponentId\r\n    );\r\n}\r\nObject.freeze(getPlayersByOpponent);\r\nexport {getPlayersByOpponent};\r\n\r\n/**\r\n * Get a list of all of a player's scores from each match.\r\n * @type {ScoreCalculator}\r\n * @returns {number[]} the list of scores\r\n */\r\nfunction playerScoreList(playerId, roundList, roundId = null) {\r\n    return getMatchesByPlayer(playerId, roundList, roundId).map(\r\n        (match) => match.result[match.players.indexOf(playerId)]\r\n    );\r\n}\r\n\r\n/**\r\n * TODO: Maybe merge this with the other function?\r\n */\r\n/**\r\n * @type {ScoreCalculator}\r\n * @returns {number[]}\r\n */\r\nfunction playerScoreListNoByes(playerId, roundList, roundId = null) {\r\n    return getMatchesByPlayer(\r\n        playerId,\r\n        roundList,\r\n        roundId\r\n    ).filter(\r\n        (match) => !isBye(match)\r\n    ).map(\r\n        (match) => match.result[match.players.indexOf(playerId)]\r\n    );\r\n}\r\n\r\n/**\r\n * @type {ScoreCalculator}\r\n * @returns {number}\r\n */\r\nfunction playerScore(playerId, roundList, roundId = null) {\r\n    let score = 0;\r\n    const scoreList = playerScoreList(playerId, roundList, roundId);\r\n    if (scoreList.length > 0) {\r\n        score = scoreList.reduce((a, b) => a + b);\r\n    }\r\n    return score;\r\n}\r\nObject.freeze(playerScore);\r\nexport {playerScore};\r\n\r\n/**\r\n * @type {ScoreCalculator}\r\n * @returns {number}\r\n */\r\nfunction playerScoreCum(playerId, roundList, roundId = null) {\r\n    let runningScore = 0;\r\n    /** @type {number[]} */\r\n    let cumScores = [];\r\n    let scores = playerScoreListNoByes(playerId, roundList, roundId);\r\n    scores.forEach(function (score) {\r\n        runningScore += score;\r\n        cumScores.push(runningScore);\r\n    });\r\n    let totalScore = 0;\r\n    if (cumScores.length !== 0) {\r\n        totalScore = cumScores.reduce((a, b) => a + b);\r\n    }\r\n    return totalScore;\r\n}\r\n\r\n/**\r\n * Calculate a player's color balance. A negative number means they played as\r\n * white more. A positive number means they played as black more.\r\n * @type {ScoreCalculator}\r\n * @returns {number}\r\n */\r\nfunction playerColorBalance(playerId, roundList, roundId = null) {\r\n    let color = 0;\r\n    getMatchesByPlayer(playerId, roundList, roundId).filter(\r\n        (match) => !isBye(match)\r\n    ).forEach(\r\n        function (match) {\r\n            if (match.players[0] === playerId) {\r\n                color += -1;\r\n            } else if (match.players[1] === playerId) {\r\n                color += 1;\r\n            }\r\n        }\r\n    );\r\n    return color;\r\n}\r\nObject.freeze(playerColorBalance);\r\nexport {playerColorBalance};\r\n\r\n/**\r\n * Gets the modified median factor defined in USCF § 34E1\r\n * @type {ScoreCalculator}\r\n * @param {boolean} [isSolkoff]\r\n * @returns {number}\r\n */\r\nfunction modifiedMedian(pId, roundList, roundId = null, isSolkoff = false) {\r\n    // get all of the opponent's scores\r\n    let scores = getPlayersByOpponent(\r\n        pId,\r\n        roundList,\r\n        roundId\r\n    ).filter(\r\n        (opponent) => opponent !== dummyPlayer.id\r\n    ).map(\r\n        (opponent) => playerScore(opponent, roundList, roundId)\r\n    );\r\n    //sort them, then remove the first and last items\r\n    scores.sort();\r\n    if (!isSolkoff) {\r\n        scores.pop();\r\n        scores.shift();\r\n    }\r\n    let finalScore = 0;\r\n    if (scores.length > 0) {\r\n        finalScore = scores.reduce((a, b) => a + b);\r\n    }\r\n    return finalScore;\r\n}\r\n\r\n/**\r\n * A shortcut for passing the `isSolkoff` variable to `modifiedMedian`.\r\n * @type {ScoreCalculator}\r\n * @returns {number}\r\n */\r\nfunction solkoff(playerId, roundList, roundId = null) {\r\n    return modifiedMedian(playerId, roundList, roundId, true);\r\n}\r\n\r\n/**\r\n * Get the cumulative scores of a player's opponents.\r\n * @type {ScoreCalculator}\r\n * @returns {number}\r\n */\r\nfunction playerOppScoreCum(playerId, roundList, roundId = null) {\r\n    const opponents = getPlayersByOpponent(\r\n        playerId,\r\n        roundList,\r\n        roundId\r\n    ).filter(\r\n        (opponent) => opponent !== dummyPlayer.id\r\n    );\r\n    let oppScores = opponents.map((p) => playerScoreCum(p, roundList, roundId));\r\n    let score = 0;\r\n    if (oppScores.length !== 0) {\r\n        score = oppScores.reduce((a, b) => a + b);\r\n    }\r\n    return score;\r\n}\r\n\r\nconst tieBreakMethods = [\r\n    {\r\n        name: \"Modified median\",\r\n        func: modifiedMedian\r\n    },\r\n    {\r\n        name: \"Solkoff\",\r\n        func: solkoff\r\n    },\r\n    {\r\n        name: \"Cumulative score\",\r\n        func: playerScoreCum\r\n    },\r\n    {\r\n        name: \"Cumulative of opposition\",\r\n        func: playerOppScoreCum\r\n    },\r\n    {\r\n        name: \"Most black\",\r\n        func: playerColorBalance\r\n    }\r\n];\r\n\r\nObject.freeze(tieBreakMethods);\r\nexport {tieBreakMethods};\r\n\r\n/**\r\n * @param {Standing} standing1\r\n * @param {Standing} standing2\r\n * @returns {boolean}\r\n */\r\nfunction areScoresEqual(standing1, standing2) {\r\n    let areEqual = true;\r\n    // Check if any of them aren't equal\r\n    if (standing1.score !== standing2.score) {\r\n        areEqual = false;\r\n    }\r\n    Object.keys(standing1.tieBreaks).forEach(function (index) {\r\n        if (standing1.tieBreaks[index] !== standing2.tieBreaks[index]) {\r\n            areEqual = false;\r\n        }\r\n    });\r\n    return areEqual;\r\n}\r\n\r\n/**\r\n * @typedef {import(\"../data/index\").Round} Round\r\n */\r\n\r\n/**\r\n * @param {Round[]} roundList\r\n * @returns {number[]}\r\n */\r\nfunction getAllPlayers(roundList) {\r\n    const allPlayers = roundList.reduce( // flatten the rounds\r\n        (acc, round) => acc.concat(round),\r\n        []\r\n    ).reduce( // flaten the players\r\n        (acc, match) => acc.concat(match.players),\r\n        []\r\n    );\r\n    return Array.from(new Set(allPlayers));\r\n}\r\n\r\n/**\r\n * Sort the standings by score, see USCF tie-break rules from § 34.\r\n * @param {number[]} methods\r\n * @param {Round[]} roundList\r\n * @param {number} [roundId]\r\n * @returns {[Standing[][], string[]]} The standings and the list of method used\r\n */\r\nfunction calcStandings(methods, roundList, roundId = null) {\r\n    const tieBreaks = methods.map((m) => tieBreakMethods[m]);\r\n    // Get a flat list of all of the players and their scores.\r\n    const standingsFlat = getAllPlayers(roundList).map(function (pId) {\r\n        /** @type {Standing} */\r\n        const standing = {\r\n            id: pId,\r\n            score: playerScore(pId, roundList, roundId),\r\n            tieBreaks: tieBreaks.map((method) => (\r\n                method.func(pId, roundList, roundId)\r\n            ))\r\n        };\r\n        return standing;\r\n    });\r\n    // Create a function to sort the players\r\n    let sortFunc = firstBy((standing) => standing.score, -1);\r\n    // For each tiebreak method, chain another `thenBy` to the function.\r\n    tieBreaks.forEach(function (ignore, index) {\r\n        sortFunc = sortFunc.thenBy((standing) => standing.tieBreaks[index], -1);\r\n    });\r\n    // Finally, sort the players.\r\n    standingsFlat.sort(sortFunc);\r\n    /** @type {Standing[][]} */\r\n    const standingsTree = [];\r\n    let runningRank = 0;\r\n    standingsFlat.forEach(function (standing, i, orig) {\r\n        if (i !== 0) { // we can't compare the first player with a previous one\r\n            const prevPlayer = orig[i - 1];\r\n            if (!areScoresEqual(standing, prevPlayer)) {\r\n                runningRank += 1;\r\n            }\r\n        }\r\n        if (!standingsTree[runningRank]) {\r\n            standingsTree[runningRank] = [];\r\n        }\r\n        standingsTree[runningRank].push(standing);\r\n    });\r\n    return [standingsTree, tieBreaks.map((m) => m.name)];\r\n}\r\nObject.freeze(calcStandings);\r\nexport {calcStandings};\r\n\r\n/**\r\n * @type {ScoreCalculator}\r\n * @returns {number?} 0 for white, 1 for black, null if no color history\r\n */\r\nfunction dueColor(playerId, roundList, roundId = null) {\r\n    if (!roundList[roundId - 1]) {\r\n        return null;\r\n    }\r\n    let color = 0;\r\n    let prevColor = playerMatchColor(\r\n        playerId,\r\n        roundList[roundId - 1]\r\n    );\r\n    if (prevColor === 0) {\r\n        color = 1;\r\n    }\r\n    return color;\r\n}\r\n\r\n/**\r\n * @param {number} playerId\r\n * @param {Round[]} roundList\r\n * @param {number} roundId\r\n * @param {Player[]} playerList\r\n * @param {number[][]} avoidList\r\n * @returns {PlayerData}\r\n */\r\nfunction genPlayerData(playerId, playerList, avoidList, roundList, roundId) {\r\n    const player = getPlayerById(playerList, playerId);\r\n    return {\r\n        data: player,\r\n        rating: player.rating,\r\n        id: playerId,\r\n        score: playerScore(playerId, roundList, roundId),\r\n        dueColor: dueColor(playerId, roundList, roundId),\r\n        colorBalance: playerColorBalance(playerId, roundList, roundId),\r\n        opponentHistory: getPlayersByOpponent(playerId, roundList, null),\r\n        upperHalf: false,\r\n        avoidList: getPlayerAvoidList(playerId, avoidList),\r\n        hasHadBye: hasHadBye(playerId, roundList, roundId)\r\n    };\r\n}\r\nObject.freeze(genPlayerData);\r\nexport {genPlayerData};\r\n","// @ts-check\r\nimport {firstBy} from \"thenby\";\r\nimport splitAt from \"ramda/src/splitAt\";\r\nimport last from \"ramda/src/last\";\r\nimport blossom from \"edmonds-blossom\";\r\nimport {dummyPlayer} from \"../data/player\";\r\nimport {genPlayerData} from \"./scoring\";\r\n/**\r\n * @typedef {import(\"./\").PlayerData} PlayerData\r\n */\r\n\r\n/**\r\n * TODO: These probably need to be tweaked a lot.\r\n */\r\n/**\r\n * @constant avoidMeetingTwicePriority The weight given to avoid players\r\n * meeting twice. This same weight is given to avoid matching players on each\r\n * other's \"avoid\" list. This is the highest priority. (USCF § 27A1)\r\n * @type {number}\r\n */\r\nconst avoidMeetingTwicePriority = 20;\r\n/**\r\n * @constant sameScoresPriority The weight given to match players with\r\n * equal scores. This gets muliplied against a ratio taken from the distance\r\n * between each player's score. For example, if the tournament has players\r\n * scoring 0, 1, 2, and 3, and if a player scoring 1 gets compared with a\r\n * player scoring 3, then their `sameScoresPriority` will be reduced by 50%.\r\n * (`(3 - 1) / 4 = 0.5`) (USCF § 27A2)\r\n * @type {number}\r\n */\r\nconst sameScoresPriority = 16;\r\n/**\r\n * @constant differentHalfPriority The weight given to match players in lower\r\n * versus upper halves. This is only applied to players being matched within\r\n * the same score group. (USCF § 27A3)\r\n * @type {number}\r\n */\r\nconst differentHalfPriority = 2;\r\n/**\r\n * @constant differentDueColorPriority The weight given to match players with\r\n * opposite due colors. (USCF § 27A4 and § 27A5)\r\n * @type {number}\r\n */\r\nconst differentDueColorPriority = 1;\r\n// /** @type {number} */\r\n// const maxPriority = (\r\n//     avoidMeetingTwicePriority\r\n//     + sameScoresPriority\r\n//     + differentHalfPriority\r\n//     + differentDueColorPriority\r\n// );\r\n\r\n\r\n/**\r\n * Create an array of blossom-compatible weighted matchups. This returns\r\n * an array of each potential match, formatted like so: [idOfPlayer1,\r\n * idOfPlayer2, priority]. A higher priority means a more likely matchup.\r\n * @param {PlayerData} player1\r\n * @param {PlayerData} player2\r\n * @param {number[]} scoreList\r\n * @returns {number}\r\n */\r\nfunction calcPairIdeal(player1, player2, scoreList) {\r\n    let priority = 0;\r\n    let scoreDiff;\r\n    const metBefore = player1.opponentHistory.includes(player2.id);\r\n    const mustAvoid = player1.avoidList.includes(player2.id);\r\n    if (!metBefore && !mustAvoid) {\r\n        priority += avoidMeetingTwicePriority;\r\n    }\r\n    // Calculate the \"distance\" between their scores and multiply that\r\n    // against the `sameScoresPriority` constant.\r\n    scoreDiff = Math.abs(\r\n        scoreList.indexOf(player1.score)\r\n        - scoreList.indexOf(player2.score)\r\n    );\r\n    scoreDiff = (scoreList.length - scoreDiff) / scoreList.length;\r\n    priority += sameScoresPriority * scoreDiff;\r\n    // Only include `differentHalfPriority` if they're in the same\r\n    // score group.\r\n    if (player1.score === player2.score) {\r\n        if (player1.upperHalf !== player2.upperHalf) {\r\n            priority += differentHalfPriority;\r\n        }\r\n    }\r\n    if (player1.dueColor === null) {\r\n        priority += differentDueColorPriority;\r\n    } else if (player1.dueColor !== player2.dueColor) {\r\n        priority += differentDueColorPriority;\r\n    }\r\n    return Math.ceil(priority);\r\n}\r\nObject.freeze(calcPairIdeal);\r\nexport {calcPairIdeal};\r\n\r\n/**\r\n * Creates pairings according to the rules specified in USCF § 27, § 28,\r\n * and § 29. This is a work in progress and does not account for all of the\r\n * rules yet.\r\n * @param {object[][]} roundList\r\n * @param {number} roundId\r\n * @param {number[]} players\r\n * @param {object[]} playerList\r\n * @param {number[][]} avoidList\r\n */\r\nfunction pairPlayers(players, roundId, roundList, playerList, avoidList) {\r\n    /** @type {number[]} */\r\n    let byeMatch;\r\n    /** @type {number[][]} */\r\n    let potentialMatches;\r\n    /** @type {Number[][]} */\r\n    let matches;\r\n    /** @type {number[]} */\r\n    let blossomResults;\r\n    /** @type {[PlayerData, PlayerData, number][]} */\r\n    let reducedResults;\r\n    /** @type {number[]} */\r\n    let scoreList;\r\n    /** @type {PlayerData[]} */\r\n    let playerData = players.map((playerId) => (\r\n        genPlayerData(playerId, playerList, avoidList, roundList, roundId)\r\n    ));\r\n    scoreList = Array.from(new Set(playerData.map((p) => p.score)));\r\n    scoreList.sort();\r\n    // Sort the data so matchups default to order by score and rating.\r\n    playerData.sort(\r\n        firstBy((p) => p.score, -1).thenBy((p) => p.rating, -1)\r\n    );\r\n    // If there's an odd number of players, time to assign a bye.\r\n    if (playerData.length % 2 !== 0) {\r\n        // Assign a bye to the lowest-rated player in the lowest score group.\r\n        // (USCF § 29L2.)\r\n        // filter out players who have had a bye already.\r\n        let byePlayerData = last(playerData.filter((p) => !p.hasHadBye));\r\n        // In the impossible situation that *everyone* has played a bye round\r\n        // previously, then just pick the last player.\r\n        if (!byePlayerData) {\r\n            byePlayerData = last(playerData);\r\n        }\r\n        byeMatch = [byePlayerData.id, dummyPlayer.id];\r\n        // Remove the bye'd player from the list so they won't be matched again.\r\n        playerData = playerData.filter((p) => p !== byePlayerData);\r\n    }\r\n    // Determine which players are in the upper and lower halves of their score\r\n    // groups.\r\n    scoreList.forEach(function (score) {\r\n        let playersWithScore = playerData.filter((pd) => pd.score === score);\r\n        playersWithScore.sort((pd) => pd.rating).reverse();\r\n        if (playersWithScore.length > 1) {\r\n            splitAt(\r\n                playersWithScore.length / 2,\r\n                playersWithScore\r\n            )[0].forEach(function (playerDatum) {\r\n                playerDatum.upperHalf = true;\r\n            });\r\n        }\r\n    });\r\n    // Turn the data into blossom-compatible input.\r\n    potentialMatches = playerData.reduce(\r\n        function (acc, player1, ignore, src) {\r\n            const playerMatches = src.filter(\r\n                (player) => player !== player1\r\n            ).map(\r\n                (player2) => [\r\n                    player1.id,\r\n                    player2.id,\r\n                    calcPairIdeal(player1, player2, scoreList)\r\n                ]\r\n            );\r\n            return acc.concat(playerMatches);\r\n        },\r\n        []\r\n    );\r\n    // Feed all of the potential matches to Edmonds-blossom and let the\r\n    // algorithm work its magic. This returns an array where each index is the\r\n    // ID of one player and each value is the ID of the matched player.\r\n    blossomResults = blossom(potentialMatches);\r\n    // Translate those IDs into actual pairs of players.\r\n    reducedResults = blossomResults.reduce(\r\n        function (acc, p1Id, p2Id) {\r\n            // Filter out unmatched players. Even though we removed the byes\r\n            // from the list, blossom will automatically include their missing\r\n            // IDs in its results.\r\n            if (p1Id !== -1) {\r\n                const p1 = playerData.filter((p) => p.id === p1Id)[0];\r\n                const p2 = playerData.filter((p) => p.id === p2Id)[0];\r\n                const ideal = potentialMatches.filter(\r\n                    (pair) => pair[0] === p1Id && pair[1] === p2Id\r\n                )[0][2];\r\n                const matched = acc.map((pair) => pair[0]);\r\n                // Blossom returns a lot of redundant matches. Check that this\r\n                // matchup wasn't already added.\r\n                if (!matched.includes(p1) && !matched.includes(p2)) {\r\n                    acc.push([p1, p2, ideal]);\r\n                }\r\n            }\r\n            return acc;\r\n        },\r\n        []\r\n    );\r\n    // Sort by net score and rating for board placement.\r\n    reducedResults.sort(\r\n        firstBy(\r\n            /** @param {[PlayerData, PlayerData, number]} pair */\r\n            (pair) => pair[0].score + pair[1].score,\r\n            -1\r\n        ).thenBy(\r\n            /** @param {[PlayerData, PlayerData, number]} pair */\r\n            (pair) => pair[0].rating + pair[1].rating,\r\n            -1\r\n        )\r\n    );\r\n    // Turn the results into new match objects.\r\n    matches = reducedResults.map(\r\n        function (pair) {\r\n            const player1 = pair[0];\r\n            const player2 = pair[1];\r\n            // const ideal = pair[2];\r\n            const match = [player1.id, player2.id];\r\n            if (player1.colorBalance < player2.colorBalance) {\r\n                match.reverse();\r\n            }\r\n            return match;\r\n        }\r\n    );\r\n    // The bye match always gets added last so as not to affect the numbering.\r\n    if (byeMatch) {\r\n        matches.push(byeMatch);\r\n    }\r\n    return matches;\r\n}\r\nexport default Object.freeze(pairPlayers);\r\n","// @ts-check\r\nimport curry from \"ramda/src/curry\";\r\nimport {BLACK, WHITE} from \"../data/constants\";\r\nimport createMatch from \"../data/match\";\r\nimport {hasHadBye} from \"../pairing-scoring/scoring\";\r\nimport {dummyPlayer, getPlayerById} from \"../data/player\";\r\nimport pairPlayers from \"../pairing-scoring/pairing\";\r\nimport {getById} from \"../data/utility\";\r\n/**\r\n* @typedef {import(\"./dispatch\").GlobalState} GlobalState\r\n*/\r\n\r\n/**\r\n * @param {GlobalState} state\r\n * @param {number} tourneyId\r\n * @param {number} roundId\r\n * @param {number[]} unPairedPlayers\r\n */\r\nfunction autoPair(state, tourneyId, roundId, unPairedPlayers) {\r\n    const tourney = state.tourneys[tourneyId];\r\n    const roundList = tourney.roundList;\r\n    const getPlayer = curry(getPlayerById)(state.players);\r\n    const nextBye = tourney.byeQueue.filter(\r\n        (pId) => !hasHadBye(pId, roundList)\r\n    )[0];\r\n    let byeMatch = null;\r\n    if (nextBye >= 0) {\r\n        byeMatch = createMatch({\r\n            id: nextBye + \"-\" + dummyPlayer.id,\r\n            players: [nextBye, dummyPlayer.id],\r\n            origRating: [\r\n                getPlayer(nextBye).rating,\r\n                dummyPlayer.rating\r\n            ],\r\n            newRating: [\r\n                getPlayer(nextBye).rating,\r\n                dummyPlayer.rating\r\n            ]\r\n        });\r\n        unPairedPlayers = unPairedPlayers.filter((pId) => pId !== nextBye);\r\n    }\r\n    const pairs = pairPlayers(\r\n        unPairedPlayers,\r\n        roundId,\r\n        roundList,\r\n        state.players,\r\n        state.avoid\r\n    );\r\n    const newMatchList = pairs.map(\r\n        (pair) => createMatch({\r\n            id: pair.join(\"-\"),\r\n            players: [pair[WHITE], pair[BLACK]],\r\n            origRating: [\r\n                getPlayer(pair[WHITE]).rating,\r\n                getPlayer(pair[BLACK]).rating\r\n            ],\r\n            newRating: [\r\n                getPlayer(pair[WHITE]).rating,\r\n                getPlayer(pair[BLACK]).rating\r\n            ]\r\n        })\r\n    );\r\n    if (byeMatch) {\r\n        newMatchList.push(byeMatch);\r\n    }\r\n    // this covers manual bye matches and auto-paired bye matches\r\n    newMatchList.forEach(function (match) {\r\n        const dummy = match.players.indexOf(dummyPlayer.id);\r\n        if (dummy === BLACK) {\r\n            match.result[WHITE] = state.options.byeValue;\r\n        }\r\n        if (dummy === WHITE) {\r\n            match.result[BLACK] = state.options.byeValue;\r\n        }\r\n    });\r\n    return newMatchList;\r\n}\r\nObject.freeze(autoPair);\r\nexport {autoPair};\r\n\r\n/**\r\n * @param {GlobalState} state\r\n * @param {number[]} pair\r\n */\r\nfunction manualPair(state, pair) {\r\n    const getPlayer = curry(getPlayerById)(state.players);\r\n    const match = createMatch({\r\n        id: pair.join(\"-\"),\r\n        players: [pair[WHITE], pair[BLACK]],\r\n        origRating: [\r\n            getPlayer(pair[WHITE]).rating,\r\n            getPlayer(pair[BLACK]).rating\r\n        ],\r\n        newRating: [\r\n            getPlayer(pair[WHITE]).rating,\r\n            getPlayer(pair[BLACK]).rating\r\n        ]\r\n    });\r\n    if (pair[WHITE] === dummyPlayer.id) {\r\n        match.result = [state.options.byeValue, 0];\r\n    }\r\n    if (pair[BLACK] === dummyPlayer.id) {\r\n        match.result = [0, state.options.byeValue];\r\n    }\r\n    return match;\r\n}\r\nObject.freeze(manualPair);\r\nexport {manualPair};\r\n\r\n/**\r\n * @param {GlobalState} state\r\n * @param {number} tourneyId\r\n * @param {number} roundId\r\n * @param {number} matchId\r\n */\r\nfunction swapColors(state, tourneyId, roundId, matchId) {\r\n    const round = state.tourneys[tourneyId].roundList[roundId];\r\n    const match = getById(round, matchId);\r\n    match.players.reverse();\r\n    match.origRating.reverse();\r\n    match.newRating.reverse();\r\n}\r\nObject.freeze(swapColors);\r\nexport {swapColors};\r\n","// @ts-check\r\nimport {createContext} from \"react\";\r\nimport last from \"ramda/src/last\";\r\nimport curry from \"ramda/src/curry\";\r\nimport arrayMove from \"array-move\";\r\nimport {createPlayer, getPlayerById} from \"../data/player\";\r\nimport {getById} from \"../data/utility\";\r\nimport defaultOptions from \"./demo-options.json\";\r\nimport defaultPlayers from \"./demo-players.json\";\r\nimport defaultTourneyList from \"./demo-tourney.json\";\r\nimport {autoPair, manualPair, swapColors} from \"./match-functions\";\r\n/**\r\n * @typedef {import(\"./dispatch\").Action} Action\r\n * @typedef {import(\"./dispatch\").GlobalState} GlobalState\r\n */\r\n\r\n/**\r\n * @type {GlobalState}\r\n */\r\nconst defaultData = {\r\n    options: defaultOptions,\r\n    players: defaultPlayers.playerList.map((p) => createPlayer(p)),\r\n    avoid: defaultPlayers.avoidList,\r\n    // @ts-ignore\r\n    tourneys: defaultTourneyList\r\n};\r\nexport {defaultData};\r\n\r\n/**\r\n * @param {GlobalState} state\r\n * @param {Action} action\r\n * @returns {GlobalState}\r\n */\r\nfunction dataReducer(state, action) {\r\n    const {avoid, players, options, tourneys} = state;\r\n    const getPlayer = curry(getPlayerById)(players);\r\n    switch (action.type) {\r\n    // Options\r\n    case \"SET_BYE_VALUE\":\r\n        options.byeValue = action.byeValue;\r\n        return Object.assign({}, state);\r\n    // Players\r\n    case \"ADD_PLAYER\":\r\n        return Object.assign(\r\n            {},\r\n            state,\r\n            {players: players.concat([action.newPlayer])}\r\n        );\r\n    case \"DEL_PLAYER\":\r\n        return Object.assign(\r\n            {},\r\n            state,\r\n            {\r\n                players: players.filter((p) => p.id !== action.id),\r\n                avoid: avoid.filter(\r\n                    (pair) => !pair.includes(action.id)\r\n                )\r\n            }\r\n        );\r\n    case \"SET_PLAYER_MATCHCOUNT\":\r\n        Object.assign(\r\n            players[players.map((p) => p.id).indexOf(action.id)],\r\n            {matchCount: action.matchCount}\r\n        );\r\n        return Object.assign({}, state);\r\n    case \"SET_PLAYER_RATING\":\r\n        Object.assign(\r\n            players[players.map((p) => p.id).indexOf(action.id)],\r\n            {rating: action.rating}\r\n        );\r\n        return Object.assign({}, state);\r\n    // Avoid\r\n    case \"ADD_AVOID_PAIR\":\r\n        return Object.assign(\r\n            {},\r\n            state,\r\n            {avoid: avoid.concat([action.pair])}\r\n        );\r\n    case \"DEL_AVOID_PAIR\":\r\n        return Object.assign(\r\n            {},\r\n            state,\r\n            {avoid: avoid.filter(\r\n                (pair) => !(\r\n                    pair.includes(action.pair[0])\r\n                    && pair.includes(action.pair[1])\r\n                )\r\n            )}\r\n        );\r\n    // Tournaments\r\n    case \"ADD_TOURNEY\":\r\n        return Object.assign(\r\n            {},\r\n            state,\r\n            {tourneys: tourneys.concat([action.tourney])}\r\n        );\r\n    case \"DEL_TOURNEY\":\r\n        return Object.assign(\r\n            {},\r\n            state,\r\n            {tourneys: tourneys.filter((ignore, i) => i !== action.index)}\r\n        );\r\n    case \"ADD_ROUND\":\r\n        tourneys[action.tourneyId].roundList = (\r\n            tourneys[action.tourneyId].roundList.concat([[]])\r\n        );\r\n        return Object.assign({}, state);\r\n    case \"DEL_LAST_ROUND\":\r\n        // if a match has been scored, then reset it.\r\n        last(\r\n            tourneys[action.tourneyId].roundList\r\n        ).forEach(function (match) {\r\n            if (match.result.reduce((a, b) => a + b) !== 0) {\r\n                match.players.forEach(function (pId, color) {\r\n                    getPlayer(pId).matchCount -= 1;\r\n                    getPlayer(pId).rating = (\r\n                        match.origRating[color]\r\n                    );\r\n                });\r\n            }\r\n        });\r\n        tourneys[action.tourneyId].roundList = (\r\n            tourneys[action.tourneyId].roundList.slice(\r\n                0,\r\n                tourneys[action.tourneyId].roundList.length - 1\r\n            )\r\n        );\r\n        return Object.assign({}, state);\r\n    case \"ADD_TIEBREAK\":\r\n        tourneys[action.tourneyId].tieBreaks = (\r\n            tourneys[action.tourneyId].tieBreaks.concat([action.id])\r\n        );\r\n        return Object.assign({}, state);\r\n    case \"DEL_TIEBREAK\":\r\n        tourneys[action.tourneyId].tieBreaks = (\r\n            tourneys[action.tourneyId].tieBreaks.filter(\r\n                (id) => id !== action.id\r\n            )\r\n        );\r\n        return Object.assign({}, state);\r\n    case \"MOVE_TIEBREAK\":\r\n        tourneys[action.tourneyId].tieBreaks = arrayMove(\r\n            tourneys[action.tourneyId].tieBreaks,\r\n            action.oldIndex,\r\n            action.newIndex\r\n        );\r\n        return Object.assign({}, state);\r\n    case \"SET_TOURNEY_PLAYERS\":\r\n        tourneys[action.tourneyId].players = action.players;\r\n        return Object.assign({}, state);\r\n    case \"SET_BYE_QUEUE\":\r\n        tourneys[action.tourneyId].byeQueue = action.byeQueue;\r\n        return Object.assign({}, state);\r\n    case \"AUTO_PAIR\":\r\n        tourneys[action.tourneyId].roundList[action.roundId] = (\r\n            tourneys[action.tourneyId].roundList[action.roundId].concat(\r\n                autoPair(\r\n                    state,\r\n                    action.tourneyId,\r\n                    action.roundId,\r\n                    action.unpairedPlayers\r\n                )\r\n            )\r\n        );\r\n        return Object.assign({}, state);\r\n    case \"MANUAL_PAIR\":\r\n        tourneys[action.tourneyId].roundList[action.roundId] = (\r\n            tourneys[action.tourneyId].roundList[action.roundId].concat([\r\n                manualPair(\r\n                    state,\r\n                    action.pair\r\n                )\r\n            ])\r\n        );\r\n        return Object.assign({}, state);\r\n    case \"SET_MATCH_RESULT\":\r\n        getById(\r\n            tourneys[action.tourneyId].roundList[action.roundId],\r\n            action.matchId\r\n        ).result = action.result;\r\n        getById(\r\n            tourneys[action.tourneyId].roundList[action.roundId],\r\n            action.matchId\r\n        ).newRating = action.newRating;\r\n        return Object.assign({}, state);\r\n    case \"DEL_MATCH\":\r\n        tourneys[action.tourneyId].roundList[action.roundId] = (\r\n            tourneys[action.tourneyId].roundList[action.roundId].filter(\r\n                (match) => match.id !== action.matchId\r\n            )\r\n        );\r\n        return Object.assign({}, state);\r\n    case \"SWAP_COLORS\":\r\n        swapColors(state, action.tourneyId, action.roundId, action.matchId);\r\n        return Object.assign({}, state);\r\n    case \"MOVE_MATCH\":\r\n        tourneys[action.tourneyId].roundList[action.roundId] = arrayMove(\r\n            tourneys[action.tourneyId].roundList[action.roundId],\r\n            action.oldIndex,\r\n            action.newIndex\r\n        );\r\n        return Object.assign({}, state);\r\n    default:\r\n        throw new Error(\"Unexpected action type\");\r\n    }\r\n}\r\nObject.freeze(dataReducer);\r\nexport {dataReducer};\r\n\r\nconst DataContext = createContext(null);\r\nexport {DataContext};","// @ts-check\r\nimport React, {Fragment, useState, useContext} from \"react\";\r\nimport {Menu, MenuList, MenuButton, MenuItem} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport VisuallyHidden from \"@reach/visually-hidden\";\r\nimport numeral from \"numeral\";\r\nimport curry from \"ramda/src/curry\";\r\nimport {OpenButton, PanelContainer, Panel, BackButton} from \"../utility\";\r\nimport {getPlayerById, calcNewRatings, dummyPlayer} from \"../../data/player\";\r\nimport {genPlayerData} from \"../../pairing-scoring/scoring\";\r\nimport {BLACK, WHITE} from \"../../data/constants\";\r\nimport {getById, getIndexById} from \"../../data/utility\";\r\nimport {DataContext} from \"../../state/global-state\";\r\n\r\n/**\r\n * @param {Object} props\r\n * @param {number} props.roundId\r\n * @param {number} props.tourneyId\r\n */\r\nexport default function Round({roundId, tourneyId}) {\r\n    const {data, dispatch} = useContext(DataContext);\r\n    // const playerList = data.players;\r\n    const getPlayer = curry(getPlayerById)(data.players);\r\n    const tourney = data.tourneys[tourneyId];\r\n    const matchList = tourney.roundList[roundId];\r\n    /** @type {number} */\r\n    const defaultMatch = null;\r\n    const [selectedMatch, setSelectedMatch] = useState(defaultMatch);\r\n    /** @type {number[]} */\r\n    const defaultPlayers = [];\r\n    const [selectedPlayers, setSelectedPlayers] = useState(defaultPlayers);\r\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\r\n    function selectPlayer(event) {\r\n        const pId = Number(event.target.value);\r\n        if (event.target.checked) {\r\n            setSelectedPlayers(function(prevState) {\r\n                // stop React from adding an ID twice in a row\r\n                if (!prevState.includes(pId)) {\r\n                    prevState.push(pId);\r\n                }\r\n                // ensure that only the last two players stay selected.\r\n                return prevState.slice(-2);\r\n            });\r\n        } else {\r\n            setSelectedPlayers(selectedPlayers.filter((id) => id !== pId));\r\n        }\r\n    }\r\n    const matched = matchList.reduce(\r\n        (acc, match) => acc.concat(match.players),\r\n        []\r\n    );\r\n    const unMatched = tourney.players.filter((pId) => !matched.includes(pId));\r\n    /** @param {number[]} unpairedPlayers */\r\n    function autoPair(unpairedPlayers) {\r\n        dispatch({\r\n            type: \"AUTO_PAIR\",\r\n            tourneyId: tourneyId,\r\n            roundId: roundId,\r\n            unpairedPlayers: unpairedPlayers\r\n        });\r\n    }\r\n    /** @param {number[]} pair */\r\n    function manualPair(pair) {\r\n        dispatch({\r\n            type: \"MANUAL_PAIR\",\r\n            tourneyId: tourneyId,\r\n            roundId: roundId,\r\n            pair: pair\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} matchId\r\n     * @param {[number, number]} result\r\n     */\r\n    function setMatchResult(matchId, result) {\r\n        const match = getById(tourney.roundList[roundId], matchId);\r\n        const white = getPlayer(match.players[WHITE]);\r\n        const black = getPlayer(match.players[BLACK]);\r\n        const newRating = calcNewRatings(\r\n            match.origRating,\r\n            [white.matchCount, black.matchCount],\r\n            result\r\n        );\r\n        dispatch({\r\n            type: \"SET_PLAYER_RATING\",\r\n            id: white.id,\r\n            rating: newRating[WHITE]\r\n        });\r\n        dispatch({\r\n            type: \"SET_PLAYER_RATING\",\r\n            id: black.id,\r\n            rating: newRating[BLACK]\r\n        });\r\n        // if the result hasn't been scored yet, increment the matchCount\r\n        if (match.result.reduce((a, b) => a + b) === 0) {\r\n            dispatch({\r\n                type: \"SET_PLAYER_MATCHCOUNT\",\r\n                id: white.id,\r\n                matchCount: white.matchCount + 1\r\n            });\r\n            dispatch({\r\n                type: \"SET_PLAYER_MATCHCOUNT\",\r\n                id: black.id,\r\n                matchCount: black.matchCount + 1\r\n            });\r\n        }\r\n        // setPlayerList([...playerList]);\r\n        dispatch({\r\n            type: \"SET_MATCH_RESULT\",\r\n            tourneyId: tourneyId,\r\n            roundId: roundId,\r\n            matchId: matchId,\r\n            result: result,\r\n            newRating: newRating\r\n        });\r\n    }\r\n    /** @param {number} matchId */\r\n    function unMatch(matchId) {\r\n        const match = getById(tourney.roundList[roundId], matchId);\r\n        if (match.result.reduce((a, b) => a + b) !== 0) {\r\n            // checks if the match has been scored yet & resets the players'\r\n            // records\r\n            match.players.forEach(function(pId, color) {\r\n                dispatch({\r\n                    type: \"SET_PLAYER_MATCHCOUNT\",\r\n                    id: pId,\r\n                    matchCount: getPlayer(pId).matchCount - 1\r\n                });\r\n                dispatch({\r\n                    type: \"SET_PLAYER_RATING\",\r\n                    id: pId,\r\n                    rating: match.origRating[color]\r\n                });\r\n            });\r\n        }\r\n        dispatch({\r\n            type: \"DEL_MATCH\",\r\n            tourneyId: tourneyId,\r\n            roundId: roundId,\r\n            matchId: matchId\r\n        });\r\n        setSelectedMatch(null);\r\n    }\r\n    function swapColors(matchId) {\r\n        dispatch({\r\n            type: \"SWAP_COLORS\",\r\n            tourneyId: tourneyId,\r\n            roundId: roundId,\r\n            matchId: matchId\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} matchId\r\n     * @param {number} direction\r\n     */\r\n    function moveMatch(matchId, direction) {\r\n        const matchesRef = data.tourneys[tourneyId].roundList[roundId];\r\n        const mIndex = getIndexById(matchesRef, matchId);\r\n        dispatch({\r\n            type: \"MOVE_MATCH\",\r\n            tourneyId: tourneyId,\r\n            roundId: roundId,\r\n            matchId: matchId,\r\n            oldIndex: mIndex,\r\n            newIndex: mIndex + direction\r\n        });\r\n    }\r\n    return (\r\n        <PanelContainer>\r\n            <Panel>\r\n                <div className=\"toolbar\">\r\n                    <button\r\n                        className=\"danger\"\r\n                        onClick={() => unMatch(selectedMatch)}\r\n                        disabled={selectedMatch === null}\r\n                    >\r\n                        Unmatch\r\n                    </button>\r\n                    <button\r\n                        onClick={() => swapColors(selectedMatch)}\r\n                        disabled={selectedMatch === null}\r\n                    >\r\n                        Swap colors\r\n                    </button>\r\n                    <button\r\n                        onClick={() => moveMatch(selectedMatch, -1)}\r\n                        disabled={selectedMatch === null}\r\n                    >\r\n                        Move up\r\n                    </button>\r\n                    <button\r\n                        onClick={() => moveMatch(selectedMatch, 1)}\r\n                        disabled={selectedMatch === null}\r\n                    >\r\n                        Move down\r\n                    </button>\r\n                </div>\r\n                <table className=\"table__roster\">\r\n                    <caption>Round {roundId + 1} results</caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"row__id\">#</th>\r\n                            <th className=\"row__player\">White</th>\r\n                            <th className=\"row__result\">Result</th>\r\n                            <th className=\"row__player\">Black</th>\r\n                            <th className=\"row__controls\" />\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {matchList.map((match, pos) => (\r\n                            <MatchRow\r\n                                key={match.id}\r\n                                pos={pos}\r\n                                match={match}\r\n                                setMatchResult={setMatchResult}\r\n                                selectedMatch={selectedMatch}\r\n                                setSelectedMatch={setSelectedMatch}\r\n                            />\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </Panel>\r\n            <Panel>\r\n                {selectedMatch !== null && (\r\n                    <PanelContainer>\r\n                        <Panel>\r\n                            <PlayerMatchInfo\r\n                                match={getById(matchList, selectedMatch)}\r\n                                color={0}\r\n                                tourneyId={tourneyId}\r\n                                roundId={roundId}\r\n                            />\r\n                        </Panel>\r\n                        <Panel>\r\n                            <PlayerMatchInfo\r\n                                match={getById(matchList, selectedMatch)}\r\n                                color={1}\r\n                                tourneyId={tourneyId}\r\n                                roundId={roundId}\r\n                            />\r\n                        </Panel>\r\n                    </PanelContainer>\r\n                )}\r\n                {unMatched.length > 0 && (\r\n                    <Fragment>\r\n                        <h3>Unmatched players</h3>\r\n                        <ul>\r\n                            {unMatched.map((pId) => (\r\n                                <li key={pId}>\r\n                                    <input\r\n                                        id={pId}\r\n                                        type=\"checkbox\"\r\n                                        checked={selectedPlayers.includes(pId)}\r\n                                        value={pId}\r\n                                        onChange={selectPlayer}\r\n                                    />{\" \"}\r\n                                    <label htmlFor={pId}>\r\n                                        {getPlayer(pId).firstName}{\" \"}\r\n                                        {getPlayer(pId).lastName}\r\n                                    </label>\r\n                                </li>\r\n                            ))}\r\n                            {unMatched.length % 2 !== 0 && (\r\n                                <li>\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        checked={selectedPlayers.includes(\r\n                                            dummyPlayer.id\r\n                                        )}\r\n                                        value={dummyPlayer.id}\r\n                                        onChange={selectPlayer}\r\n                                    />\r\n                                    {dummyPlayer.firstName}{\" \"}\r\n                                    {dummyPlayer.lastName}\r\n                                </li>\r\n                            )}\r\n                        </ul>\r\n                        <button\r\n                            onClick={() => manualPair(selectedPlayers)}\r\n                            disabled={selectedPlayers.length !== 2}\r\n                        >\r\n                            Pair checked\r\n                        </button>{\" \"}\r\n                        <button\r\n                            onClick={() => autoPair(unMatched)}\r\n                            disabled={unMatched.length === 0}\r\n                        >\r\n                            Auto-pair\r\n                        </button>\r\n                    </Fragment>\r\n                )}\r\n            </Panel>\r\n        </PanelContainer>\r\n    );\r\n}\r\n\r\nfunction MatchRow({\r\n    pos,\r\n    match,\r\n    setMatchResult,\r\n    selectedMatch,\r\n    setSelectedMatch\r\n}) {\r\n    const {data} = useContext(DataContext);\r\n    const getPlayer = curry(getPlayerById)(data.players);\r\n    const whiteWon = match.result[0] > match.result[1];\r\n    const blackWon = match.result[1] > match.result[0];\r\n    const draw = match.result.every((x) => x === 0.5);\r\n    const whiteName =\r\n        getPlayer(match.players[0]).firstName +\r\n        \" \" +\r\n        getPlayer(match.players[0]).lastName;\r\n    const blackName =\r\n        getPlayer(match.players[1]).firstName +\r\n        \" \" +\r\n        getPlayer(match.players[1]).lastName;\r\n    return (\r\n        <tr>\r\n            <td className=\"table__number row__id\">{pos + 1}</td>\r\n            <td className=\"table__player row__player\">\r\n                {whiteName}{\" \"}\r\n                {whiteWon && (\r\n                    <span role=\"img\" aria-label=\"Winner\">\r\n                        🏆\r\n                    </span>\r\n                )}\r\n            </td>\r\n            <td className=\"data__input row__result\">\r\n                {whiteWon && \"White\"}\r\n                {blackWon && \"Black\"}\r\n                {draw && \"Draw\"}\r\n            </td>\r\n            <td className=\"table__player row__player\">\r\n                {blackName}{\" \"}\r\n                {blackWon && (\r\n                    <span role=\"img\" aria-label=\"Winner\">\r\n                        🏆\r\n                    </span>\r\n                )}\r\n            </td>\r\n            <td className=\"data__input row__controls\">\r\n                <Menu>\r\n                    <MenuButton\r\n                        disabled={match.players.includes(dummyPlayer.id)}\r\n                    >\r\n                        <VisuallyHidden>\r\n                            Set result for {whiteName} versus {blackName}\r\n                        </VisuallyHidden>\r\n                        <span aria-hidden>Set result ▾</span>\r\n                    </MenuButton>\r\n                    <MenuList>\r\n                        <MenuItem\r\n                            onSelect={() => setMatchResult(match.id, [1, 0])}\r\n                        >\r\n                            {whiteName} won\r\n                        </MenuItem>\r\n                        <MenuItem\r\n                            onSelect={() => setMatchResult(match.id, [0, 1])}\r\n                        >\r\n                            {blackName} won\r\n                        </MenuItem>\r\n                        <MenuItem\r\n                            onSelect={() =>\r\n                                setMatchResult(match.id, [0.5, 0.5])\r\n                            }\r\n                        >\r\n                            Draw\r\n                        </MenuItem>\r\n                    </MenuList>\r\n                </Menu>{\" \"}\r\n                {selectedMatch !== match.id ? (\r\n                    <OpenButton action={() => setSelectedMatch(match.id)} />\r\n                ) : (\r\n                    <BackButton action={() => setSelectedMatch(null)} />\r\n                )}\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction PlayerMatchInfo({match, color, tourneyId, roundId}) {\r\n    const {data} = useContext(DataContext);\r\n    // const playerList = data.players;\r\n    const getPlayer = curry(getPlayerById)(data.players);\r\n    const playerData = genPlayerData(\r\n        match.players[color],\r\n        data.players,\r\n        data.avoid,\r\n        data.tourneys[tourneyId].roundList,\r\n        roundId\r\n    );\r\n    const colorBalance = playerData.colorBalance;\r\n    let prettyBalance = \"Even\";\r\n    if (colorBalance < 0) {\r\n        prettyBalance = \"White +\" + Math.abs(colorBalance);\r\n    } else if (colorBalance > 0) {\r\n        prettyBalance = \"Black +\" + colorBalance;\r\n    }\r\n    return (\r\n        <dl className=\"player-card\">\r\n            <h3>\r\n                {playerData.data.firstName} {playerData.data.lastName}\r\n            </h3>\r\n            <dt>Score</dt>\r\n            <dd>{playerData.score}</dd>\r\n            <dt>Rating</dt>\r\n            <dd>\r\n                {match.origRating[color]} (\r\n                {numeral(\r\n                    match.newRating[color] - match.origRating[color]\r\n                ).format(\"+0\")}\r\n                )\r\n            </dd>\r\n            <dt>Color balance</dt>\r\n            <dd>{prettyBalance}</dd>\r\n            <dt>Has had a bye round</dt>\r\n            <dd>{playerData.hasHadBye ? \"Yes\" : \"No\"}</dd>\r\n            <dt>Opponent history</dt>\r\n            <dd>\r\n                <ol>\r\n                    {playerData.opponentHistory.map((opId) => (\r\n                        <li key={opId}>\r\n                            {getPlayer(opId).firstName}{\" \"}\r\n                            {getPlayer(opId).lastName}\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </dd>\r\n            <dt>Players to avoid</dt>\r\n            <dd>\r\n                <ol>\r\n                    {playerData.avoidList.map((pId) => (\r\n                        <li key={pId}>\r\n                            {getPlayer(pId).firstName} {getPlayer(pId).lastName}\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </dd>\r\n        </dl>\r\n    );\r\n}\r\n","import React, {useContext, useState} from \"react\";\r\nimport curry from \"ramda/src/curry\";\r\nimport {getPlayerById} from \"../../data/player\";\r\nimport {tieBreakMethods, hasHadBye} from \"../../pairing-scoring/scoring\";\r\nimport {PanelContainer, Panel} from \"../utility\";\r\nimport {DataContext} from \"../../state/global-state\";\r\n\r\n/**\r\n * @param {Object} props\r\n * @param {number} props.tourneyId\r\n */\r\nexport default function PlayerSelect({tourneyId}) {\r\n    const {data, dispatch} = useContext(DataContext);\r\n    // const playerList = data.players;\r\n    const getPlayer = curry(getPlayerById)(data.players);\r\n    const players = data.tourneys[tourneyId].players;\r\n    const tourney = data.tourneys[tourneyId];\r\n    const [isSelecting, setIsSelecting] = useState(players.length === 0);\r\n    const [selectedTb, setSelectedTb] = useState(null);\r\n    /** @param {number} [id] */\r\n    function toggleTb(id = null) {\r\n        if (!id) {\r\n            id = selectedTb;\r\n        }\r\n        const tieBreaks = data.tourneys[tourneyId].tieBreaks;\r\n        if (tieBreaks.includes(id)) {\r\n            dispatch({type: \"DEL_TIEBREAK\", id: id, tourneyId: tourneyId});\r\n        } else {\r\n            dispatch({type: \"ADD_TIEBREAK\", id: id, tourneyId: tourneyId});\r\n        }\r\n    }\r\n    /** @param {number} direction */\r\n    function moveTb(direction) {\r\n        const index = data.tourneys[tourneyId].tieBreaks.indexOf(selectedTb);\r\n        dispatch({\r\n            type: \"MOVE_TIEBREAK\",\r\n            tourneyId: tourneyId,\r\n            oldIndex: index,\r\n            newIndex: index + direction\r\n        });\r\n    }\r\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\r\n    function togglePlayer(event) {\r\n        const id = Number(event.target.value);\r\n        if (event.target.checked) {\r\n            dispatch({\r\n                type: \"SET_TOURNEY_PLAYERS\",\r\n                tourneyId: tourneyId,\r\n                players: players.concat([id])\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: \"SET_TOURNEY_PLAYERS\",\r\n                tourneyId: tourneyId,\r\n                players: players.filter((pId) => pId !== id)\r\n            });\r\n        }\r\n    }\r\n    if (isSelecting) {\r\n        return (\r\n            <table>\r\n                <caption>Select players</caption>\r\n                <thead>\r\n                    <tr>\r\n                        <th>First name</th>\r\n                        <th>Last name</th>\r\n                        <th />\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data.players.map((p) => (\r\n                        <tr key={p.id}>\r\n                            <td>{p.firstName}</td>\r\n                            <td>{p.lastName}</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    value={p.id}\r\n                                    checked={players.includes(p.id)}\r\n                                    onChange={togglePlayer}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td colSpan={3}>\r\n                            <button\r\n                                onClick={() =>\r\n                                    dispatch({\r\n                                        type: \"SET_TOURNEY_PLAYERS\",\r\n                                        players: data.players.map((p) => p.id)\r\n                                    })\r\n                                }\r\n                            >\r\n                                Select all\r\n                            </button>\r\n                            <button\r\n                                onClick={() =>\r\n                                    dispatch({\r\n                                        type: \"SET_TOURNEY_PLAYERS\",\r\n                                        players: []\r\n                                    })\r\n                                }\r\n                            >\r\n                                Select none\r\n                            </button>\r\n                            <button onClick={() => setIsSelecting(false)}>\r\n                                Done\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                </tfoot>\r\n            </table>\r\n        );\r\n    } else {\r\n        return (\r\n            <PanelContainer>\r\n                <Panel>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>First name</th>\r\n                                <th>Last name</th>\r\n                                <th />\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {players.map((pId) => (\r\n                                <tr\r\n                                    key={pId}\r\n                                    className={getPlayer(pId).type + \" player\"}\r\n                                >\r\n                                    <td>{getPlayer(pId).firstName}</td>\r\n                                    <td>{getPlayer(pId).lastName}</td>\r\n                                    <td>\r\n                                        <button\r\n                                            onClick={() =>\r\n                                                dispatch({\r\n                                                    type: \"SET_BYE_QUEUE\",\r\n                                                    tourneyId: tourneyId,\r\n                                                    // eslint-disable-next-line max-len\r\n                                                    byeQueue: tourney.byeQueue.concat(\r\n                                                        [pId]\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            disabled={tourney.byeQueue.includes(\r\n                                                pId\r\n                                            )}\r\n                                        >\r\n                                            Bye signup\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <button onClick={() => setIsSelecting(true)}>\r\n                        Edit player roster\r\n                    </button>\r\n                    <h3>Bye queue</h3>\r\n                    <ol>\r\n                        {tourney.byeQueue.map((pId) => (\r\n                            <li\r\n                                key={pId}\r\n                                className={\r\n                                    hasHadBye(pId, tourney.roundList)\r\n                                        ? \"disabled\"\r\n                                        : \"\"\r\n                                }\r\n                            >\r\n                                {getPlayer(pId).firstName}{\" \"}\r\n                                {getPlayer(pId).lastName}\r\n                                <button\r\n                                    onClick={() =>\r\n                                        dispatch({\r\n                                            type: \"SET_BYE_QUEUE\",\r\n                                            tourneyId: tourneyId,\r\n                                            byeQueue: tourney.byeQueue.filter(\r\n                                                (id) => pId !== id\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                >\r\n                                    Remove\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                </Panel>\r\n                <Panel>\r\n                    <h3>Selected tiebreak methods</h3>\r\n                    <div className=\"toolbar\">\r\n                        <button\r\n                            onClick={() => toggleTb()}\r\n                            disabled={selectedTb === null}\r\n                        >\r\n                            Toggle\r\n                        </button>\r\n                        <button\r\n                            onClick={() => moveTb(-1)}\r\n                            disabled={selectedTb === null}\r\n                        >\r\n                            Move up\r\n                        </button>\r\n                        <button\r\n                            onClick={() => moveTb(1)}\r\n                            disabled={selectedTb === null}\r\n                        >\r\n                            Move down\r\n                        </button>\r\n                        <button\r\n                            onClick={() => setSelectedTb(null)}\r\n                            disabled={selectedTb === null}\r\n                        >\r\n                            Done\r\n                        </button>\r\n                    </div>\r\n                    <ol>\r\n                        {tourney.tieBreaks.map((id) => (\r\n                            <li key={id}>\r\n                                {tieBreakMethods[id].name}\r\n                                <button\r\n                                    onClick={() =>\r\n                                        selectedTb === id\r\n                                            ? setSelectedTb(null)\r\n                                            : setSelectedTb(id)\r\n                                    }\r\n                                    disabled={\r\n                                        selectedTb !== null && selectedTb !== id\r\n                                    }\r\n                                >\r\n                                    {selectedTb === id ? \"Done\" : \"Edit\"}\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                    <h3>Available tiebreak methods</h3>\r\n                    <ol>\r\n                        {tieBreakMethods.map((method, i) => (\r\n                            <li key={i}>\r\n                                <span\r\n                                    className={\r\n                                        tourney.tieBreaks.includes(i)\r\n                                            ? \"enabled\"\r\n                                            : \"disabled\"\r\n                                    }\r\n                                >\r\n                                    {method.name}\r\n                                </span>\r\n                                {!tourney.tieBreaks.includes(i) && (\r\n                                    <button onClick={() => toggleTb(i)}>\r\n                                        Add\r\n                                    </button>\r\n                                )}\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                </Panel>\r\n            </PanelContainer>\r\n        );\r\n    }\r\n}\r\n","// @ts-check\r\nimport React, {useContext, useState} from \"react\";\r\nimport {Tabs, TabList, Tab, TabPanels, TabPanel} from \"@reach/tabs\";\r\nimport curry from \"ramda/src/curry\";\r\nimport {getPlayerById, dummyPlayer} from \"../../data/player\";\r\nimport {calcStandings} from \"../../pairing-scoring/scoring\";\r\nimport {calcNumOfRounds} from \"../../data/utility\";\r\nimport Round from \"./round\";\r\nimport PlayerSelect from \"./player-select\";\r\nimport {DataContext} from \"../../state/global-state\";\r\n\r\n/**\r\n * @param {Object} props\r\n * @param {number} props.tourneyId\r\n * @param {React.ReactNode} [props.backButton]\r\n */\r\nexport default function TournamentTabs({tourneyId, backButton}) {\r\n    const {data, dispatch} = useContext(DataContext);\r\n    // const playerList = data.players;\r\n    const getPlayer = curry(getPlayerById)(data.players);\r\n    const tourney = data.tourneys[tourneyId];\r\n    const players = tourney.players;\r\n    const [defaultTab, setDefaultTab] = useState(0);\r\n    const [standingTree, tbMethods] = calcStandings(\r\n        tourney.tieBreaks,\r\n        tourney.roundList\r\n    );\r\n    function newRound() {\r\n        dispatch({type: \"ADD_ROUND\", tourneyId: tourneyId});\r\n        setDefaultTab(tourney.roundList.length + 1);\r\n    }\r\n    return (\r\n        <Tabs defaultIndex={defaultTab}>\r\n            <div>\r\n                {backButton}\r\n                <h2>{tourney.name}</h2>\r\n                Round progress: {tourney.roundList.length}/\r\n                {calcNumOfRounds(players.length)}{\" \"}\r\n                <button onClick={() => newRound()}>New round</button>{\" \"}\r\n                <button\r\n                    className=\"danger\"\r\n                    onClick={() =>\r\n                        dispatch({\r\n                            type: \"DEL_LAST_ROUND\",\r\n                            tourneyId: tourneyId\r\n                        })\r\n                    }\r\n                    disabled={tourney.roundList.length === 0}\r\n                >\r\n                    Remove last round\r\n                </button>\r\n            </div>\r\n            <TabList>\r\n                <Tab>Players</Tab>\r\n                <Tab>Scores</Tab>\r\n                {Object.keys(tourney.roundList).map((id) => (\r\n                    <Tab key={id}>Round {Number(id) + 1}</Tab>\r\n                ))}\r\n            </TabList>\r\n            <TabPanels>\r\n                <TabPanel>\r\n                    <PlayerSelect tourneyId={tourneyId} />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Name</th>\r\n                                <th>Score</th>\r\n                                {tbMethods.map((name, i) => (\r\n                                    <th key={i}>{name}</th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {standingTree.map((standingsFlat, rank) =>\r\n                                standingsFlat\r\n                                    .filter((p) => p.id !== dummyPlayer.id)\r\n                                    .map((standing) => (\r\n                                        <tr key={standing.id}>\r\n                                            <td className=\"table__number\">\r\n                                                {rank + 1}\r\n                                            </td>\r\n                                            <td>\r\n                                                {\r\n                                                    getPlayer(standing.id)\r\n                                                        .firstName\r\n                                                }\r\n                                            </td>\r\n                                            <td className=\"table__number\">\r\n                                                {standing.score}\r\n                                            </td>\r\n                                            {standing.tieBreaks.map(\r\n                                                (score, i) => (\r\n                                                    <td\r\n                                                        key={i}\r\n                                                        className=\"table__number\"\r\n                                                    >\r\n                                                        {score}\r\n                                                    </td>\r\n                                                )\r\n                                            )}\r\n                                        </tr>\r\n                                    ))\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </TabPanel>\r\n                {Object.keys(tourney.roundList).map((id) => (\r\n                    <TabPanel key={id}>\r\n                        <Round roundId={Number(id)} tourneyId={tourneyId} />\r\n                    </TabPanel>\r\n                ))}\r\n            </TabPanels>\r\n        </Tabs>\r\n    );\r\n}\r\n","// @ts-check\r\nimport React, {Fragment, useContext, useState} from \"react\";\r\nimport {BackButton} from \"../utility\";\r\nimport createTournament from \"../../data/tournament\";\r\nimport {DataContext} from \"../../state/global-state\";\r\nimport TournamentTabs from \"./tabs\";\r\n\r\nexport default function TournamentList() {\r\n    const {data, dispatch} = useContext(DataContext);\r\n    const tourneyList = data.tourneys;\r\n    /** @type {number} */\r\n    const defaultTourney = null;\r\n    const [openTourney, setOpenTourney] = useState(defaultTourney);\r\n    const [newTourneyName, setNewTourneyName] = useState(\"\");\r\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\r\n    function updateNewName(event) {\r\n        setNewTourneyName(event.target.value);\r\n    }\r\n    /** @param {React.FormEvent<HTMLFormElement>} event */\r\n    function makeTournament(event) {\r\n        event.preventDefault();\r\n        dispatch({\r\n            type: \"ADD_TOURNEY\",\r\n            tourney: createTournament({name: newTourneyName})\r\n        });\r\n        setNewTourneyName(\"\");\r\n    }\r\n    let content = <Fragment></Fragment>;\r\n    if (openTourney !== null) {\r\n        content = (\r\n            <TournamentTabs\r\n                tourneyId={openTourney}\r\n                backButton={<BackButton action={() => setOpenTourney(null)}/>}\r\n            />\r\n        );\r\n    } else {\r\n        content = (\r\n            <div>\r\n                {(tourneyList.length > 0)\r\n                    ?\r\n                    <ol>{tourneyList.map((tourney, i) =>\r\n                        <li key={i}>\r\n                            <button\r\n                                className=\"tourney-select\"\r\n                                onClick={() => setOpenTourney(i)}>\r\n                                {tourney.name}\r\n                            </button>\r\n                            <button\r\n                                className=\"danger\"\r\n                                onClick={\r\n                                    () => dispatch({\r\n                                        type: \"DEL_TOURNEY\",\r\n                                        index: i\r\n                                    })\r\n                                }>\r\n                                delete\r\n                            </button>\r\n                        </li>\r\n                    )}</ol>\r\n                    :\r\n                    <p>No tournaments added yet.</p>\r\n                }\r\n                <form onSubmit={makeTournament}>\r\n                    <fieldset>\r\n                        <legend>Make a new tournament</legend>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"tournament name\"\r\n                            value={newTourneyName}\r\n                            onChange={updateNewName}\r\n                            required={true}/>\r\n                        <input type=\"submit\" value=\"Create\" />\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n","// @ts-check\r\nimport React, {Fragment, useState, useContext} from \"react\";\r\nimport {OpenButton} from \"../utility\";\r\nimport {createPlayer} from \"../../data/player\";\r\nimport {DataContext} from \"../../state/global-state\";\r\n\r\n/**\r\n * @param {Object} props\r\n * @param {React.Dispatch<React.SetStateAction<number>>} props.setOpenPlayer\r\n */\r\nexport default function PlayerList({setOpenPlayer}) {\r\n    const {data, dispatch} = useContext(DataContext);\r\n    const playerList = data.players;\r\n    const newPlayerDefault = {firstName: \"\", lastName: \"\", rating: 1200};\r\n    const [newPlayerData, setNewPlayerdata] = useState(newPlayerDefault);\r\n    const ids = playerList.map((p) => p.id);\r\n    ids.sort((a, b) => a - b);\r\n    ids.reverse();\r\n    const [nextId, setNextId] = useState(ids[0] + 1);\r\n    /** @param {React.FormEvent<HTMLFormElement>} event */\r\n    const handleSubmit = function (event) {\r\n        event.preventDefault();\r\n        const newPlayer = createPlayer(newPlayerData);\r\n        newPlayer.id = nextId;\r\n        setNextId((prevId) => prevId + 1);\r\n        setNewPlayerdata(newPlayerDefault);\r\n        dispatch({type: \"ADD_PLAYER\", newPlayer: newPlayer});\r\n    };\r\n    /** @param {React.ChangeEvent<HTMLInputElement>} event */\r\n    const updateField = function (event) {\r\n        event.preventDefault();\r\n        /** @type {Object<string, string>} */\r\n        let update = {};\r\n        update[event.currentTarget.name] = event.currentTarget.value;\r\n        setNewPlayerdata(Object.assign({}, newPlayerData, update));\r\n    };\r\n    /**\r\n     * @param {React.MouseEvent<HTMLButtonElement, MouseEvent>} event\r\n     * @param {number} player\r\n     */\r\n    const delPlayer = function (event, player) {\r\n        event.preventDefault();\r\n        dispatch({type: \"DEL_PLAYER\", player: player});\r\n    };\r\n    let rosterTable = <Fragment></Fragment>;\r\n    if (playerList.length > 0) {\r\n        rosterTable =\r\n        <table>\r\n            <caption>Demo Roster</caption>\r\n            <thead>\r\n                <tr>\r\n                    <th>First name</th>\r\n                    <th>Last name</th>\r\n                    <th>Rating</th>\r\n                    <th></th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>{playerList.map((player) =>\r\n                <tr key={player.id}>\r\n                    <td className=\"table__player\">{player.firstName}</td>\r\n                    <td className=\"table__player\">{player.lastName}</td>\r\n                    <td className=\"table__number\">{player.rating}</td>\r\n                    <td>\r\n                        <button\r\n                            className=\"danger\"\r\n                            onClick={(event) =>\r\n                                delPlayer(event, player)\r\n                            }>\r\n                            delete\r\n                        </button>\r\n                    </td>\r\n                    <td>\r\n                        <OpenButton\r\n                            action={() => setOpenPlayer(player.id)} />\r\n                    </td>\r\n                </tr>\r\n            )}</tbody>\r\n        </table>;\r\n    }\r\n    return (\r\n        <div className=\"roster\">\r\n            {rosterTable}\r\n            <form onSubmit={handleSubmit}>\r\n                <fieldset>\r\n                    <legend>Add your own players</legend>\r\n                    <p>\r\n                        <label>\r\n                            First name\r\n                            {\" \"}\r\n                            <input type=\"text\" name=\"firstName\"\r\n                                onChange={updateField}\r\n                                value={newPlayerData.firstName} required />\r\n                        </label>\r\n                    </p>\r\n                    <p>\r\n                        <label>\r\n                            Last name\r\n                            {\" \"}\r\n                            <input type=\"text\" name=\"lastName\"\r\n                                onChange={updateField}\r\n                                value={newPlayerData.lastName} required />\r\n                        </label>\r\n                    </p>\r\n                    <p>\r\n                        <label>\r\n                            Rating\r\n                            {\" \"}\r\n                            <input\r\n                                type=\"number\"\r\n                                name=\"rating\"\r\n                                onChange={updateField}\r\n                                value={newPlayerData.rating}\r\n                                required />\r\n                        </label>\r\n                    </p>\r\n                    <p>\r\n                        <input type=\"submit\" value=\"Add\"/>\r\n                    </p>\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","// @ts-check\r\nimport React, {useState, useEffect, useContext} from \"react\";\r\nimport numeral from \"numeral\";\r\nimport curry from \"ramda/src/curry\";\r\nimport {BackButton} from \"../utility\";\r\nimport {\r\n    getPlayerById,\r\n    getPlayerAvoidList,\r\n    kFactor\r\n} from \"../../data/player\";\r\nimport {DataContext} from \"../../state/global-state\";\r\n\r\n/**\r\n * @param {Object} props\r\n * @param {number} props.playerId\r\n * @param {React.Dispatch<React.SetStateAction<number>>} [props.setOpenPlayer]\r\n */\r\nexport default function PlayerInfoBox({playerId, setOpenPlayer}) {\r\n    const {data, dispatch} = useContext(DataContext);\r\n    // const playerList = data.players;\r\n    const getPlayer = curry(getPlayerById)(data.players);\r\n    const avoidList = data.avoid;\r\n    const [singAvoidList, setSingAvoidList] = useState(\r\n        getPlayerAvoidList(playerId, avoidList)\r\n    );\r\n    const unAvoided = () => data.players.map(\r\n        (player) => player.id\r\n    ).filter(\r\n        (pId) => !singAvoidList.includes(pId) && pId !== playerId\r\n    );\r\n    const [selectedAvoider, setSelectedAvoider] = useState(unAvoided()[0]);\r\n    /** @param {React.FormEvent<HTMLFormElement>} event */\r\n    function avoidAdd(event) {\r\n        event.preventDefault();\r\n        setSelectedAvoider(unAvoided()[0]);\r\n        dispatch({\r\n            type: \"ADD_AVOID_PAIR\",\r\n            pair: [playerId, Number(selectedAvoider)]}\r\n        );\r\n    };\r\n    useEffect(function () {\r\n        setSingAvoidList(getPlayerAvoidList(playerId, avoidList));\r\n    }, [avoidList, playerId]);\r\n    return (\r\n        <div>\r\n            <BackButton action={() => setOpenPlayer(null)}/>\r\n            <h2>\r\n                {getPlayer(playerId).firstName}\r\n                {\" \"}\r\n                {getPlayer(playerId).lastName}\r\n            </h2>\r\n            <dl>\r\n                <dt>Matches played</dt>\r\n                <dd>{getPlayer(playerId).matchCount}</dd>\r\n                <dt id=\"rating\">Rating</dt>\r\n                <dd aria-labelledby=\"rating\">{getPlayer(playerId).rating}</dd>\r\n                <dt>K factor</dt>\r\n                <dd>\r\n                    {numeral(\r\n                        kFactor(getPlayer(playerId).matchCount)\r\n                    ).format(\"00\")}\r\n                </dd>\r\n                <dt>Players to avoid</dt>\r\n                <dd>\r\n                    <ul>\r\n                        {singAvoidList.map((pId) =>\r\n                            <li key={pId}>\r\n                                {getPlayer(pId).firstName}\r\n                                {\" \"}\r\n                                {getPlayer(pId).lastName}\r\n                                <button\r\n                                    className=\"danger\"\r\n                                    onClick={\r\n                                        () => dispatch({\r\n                                            type: \"DEL_AVOID_PAIR\",\r\n                                            pair: [playerId, pId]\r\n                                        })\r\n                                    }>\r\n                                remove\r\n                                </button>\r\n                            </li>\r\n                        )}\r\n                        {(avoidList.length === 0) &&\r\n                        <li>None</li>\r\n                        }\r\n                    </ul>\r\n                </dd>\r\n            </dl>\r\n            <form onSubmit={(event) => avoidAdd(event)}>\r\n                <fieldset>\r\n                    <legend>Add player to avoid</legend>\r\n                    <select\r\n                        onBlur={\r\n                            (event) => setSelectedAvoider(event.target.value)\r\n                        }>\r\n                        {unAvoided().map((pId) =>\r\n                            <option key={pId} value={pId}>\r\n                                {getPlayer(pId).firstName}\r\n                                {\" \"}\r\n                                {getPlayer(pId).lastName}\r\n                            </option>\r\n                        )}\r\n                    </select>\r\n                    <input type=\"submit\" value=\"Add\"/>\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","// @ts-check\r\nimport React, {useState} from \"react\";\r\nimport PlayerList from \"./list\";\r\nimport PlayerInfoBox from \"./info-box\";\r\n\r\nexport default function PlayerView() {\r\n    /** @type {number} */\r\n    const defaultOpen = null;\r\n    const [openPlayer, setOpenPlayer] = useState(defaultOpen);\r\n    if (openPlayer !== null) {\r\n        return (\r\n            <PlayerInfoBox\r\n                key={openPlayer}\r\n                playerId={openPlayer}\r\n                setOpenPlayer={setOpenPlayer} />\r\n        );\r\n    } else {\r\n        return (\r\n            <PlayerList setOpenPlayer={setOpenPlayer}/>\r\n        );\r\n    }\r\n}","// @ts-check\r\nimport React, {useContext} from \"react\";\r\nimport {DataContext} from \"../state/global-state\";\r\n\r\nexport function Options() {\r\n    const {data, dispatch} = useContext(DataContext);\r\n    const options = data.options;\r\n    const outputData = JSON.stringify(data, null, 2);\r\n    return (\r\n        <div>\r\n            <form>\r\n                <fieldset>\r\n                    <legend>Bye options</legend>\r\n                    Select how many points a bye is worth:\r\n                    {\" \"}\r\n                    <label>\r\n                        1\r\n                        <input\r\n                            type=\"radio\"\r\n                            checked={options.byeValue === 1}\r\n                            onChange={\r\n                                () => dispatch({\r\n                                    type: \"SET_BYE_VALUE\",\r\n                                    byeValue: 1\r\n                                })\r\n                            } />\r\n                    </label>\r\n                    <label>\r\n                        0.5\r\n                        <input\r\n                            type=\"radio\"\r\n                            checked={options.byeValue === 0.5}\r\n                            onChange={\r\n                                () => dispatch({\r\n                                    type: \"SET_BYE_VALUE\",\r\n                                    byeValue: 0.5\r\n                                })\r\n                            } />\r\n                    </label>\r\n                </fieldset>\r\n            </form>\r\n            {/* <form onSubmit={(event) => event.preventDefault()}>\r\n            <fieldset>\r\n                <legend>Export tournaments</legend>\r\n                <textarea\r\n                    className=\"json\"\r\n                    rows={25}\r\n                    cols={50}\r\n                    value={outputTourney}\r\n                    readOnly\r\n                    name=\"tourneyData\"\r\n                    />\r\n                <input type=\"submit\" value=\"load\" disabled />\r\n            </fieldset>\r\n            </form> */}\r\n            <form onSubmit={(event) => event.preventDefault()}>\r\n                <fieldset>\r\n                    <legend>Export data</legend>\r\n                    <textarea\r\n                        className=\"json\"\r\n                        rows={25}\r\n                        cols={50}\r\n                        value={outputData}\r\n                        name=\"playerdata\"\r\n                        readOnly />\r\n                    <input type=\"submit\" value=\"Load\" disabled />\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport styles from \"./index.module.css\";\r\n\r\nexport default function Caution() {\r\n    return (\r\n        <div className={styles.caution}>\r\n            <p className={styles.caution__text}>\r\n                <span role=\"img\" aria-label=\"warning\">⚠️</span>\r\n                &nbsp;\r\n                This is an unstable demo build.\r\n                &nbsp;\r\n                <span role=\"img\" aria-label=\"warning\">⚠️</span>\r\n                {\" \"}\r\n                Want to help make it better? Head to the\r\n                {\" \"}\r\n                <span role=\"img\" aria-label=\"finger pointing right\">👉</span>\r\n                &nbsp;\r\n                <a\r\n                    className={styles.caution__link}\r\n                    href=\"https://github.com/johnridesabike/chessahoochee\">\r\n                    Git repository\r\n                </a>.\r\n            </p>\r\n        </div>\r\n    );\r\n}","// @ts-check\r\nimport React, {useReducer} from \"react\";\r\nimport \"./App.css\";\r\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\";\r\nimport \"@reach/tabs/styles.css\";\r\nimport TournamentList from \"./components/tournament/list\";\r\nimport PlayerView from \"./components/players/index\";\r\nimport {Options} from \"./components/options\";\r\nimport Caution from \"./components/caution\";\r\nimport {defaultData, dataReducer, DataContext} from \"./state/global-state\";\r\n\r\nfunction App() {\r\n    const [data, dispatch] = useReducer(dataReducer, defaultData);\r\n    return (\r\n        <React.StrictMode>\r\n            <DataContext.Provider value={{data, dispatch}}>\r\n                <Tabs className=\"app\" defaultIndex={1}>\r\n                    <Caution />\r\n                    <TabList className=\"header\">\r\n                        <Tab>Players</Tab>\r\n                        <Tab>Tournaments</Tab>\r\n                        <Tab>Options</Tab>\r\n                        <Tab>About</Tab>\r\n                    </TabList>\r\n                    <TabPanels className=\"content\">\r\n                        <TabPanel>\r\n                            <PlayerView />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <TournamentList />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <Options />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <p>\r\n                                {/* eslint-disable-next-line max-len*/}\r\n                                This is an early, proof-of-concept, demo of a chess tournament manager. <a href=\"https://github.com/johnridesabike/chessahoochee\">You can find out more here.</a>\r\n                            </p>\r\n                        </TabPanel>\r\n                    </TabPanels>\r\n                </Tabs>\r\n            </DataContext.Provider>\r\n        </React.StrictMode>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","/*jslint browser*/\r\n/*global process fetch*/\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}