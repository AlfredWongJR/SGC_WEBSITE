{"version":3,"sources":["chess-tourney.js","chess-tourney-ui.js","App.js","serviceWorker.js","index.js"],"names":["require","chain","flatten","last","times","zip","EloRank","firstBy","ELO","Player","firstName","lastName","arguments","length","undefined","rating","this","dummy","DUMMYPLAYER","Tournament","name","timeControl","roster","byeValue","all","inactive","active","_this","filter","i","includes","roundList","Round","tourney","roundNum","prevRound","players","playerTree","matches","hasDummy","Match","round","white","black","result","scoreExpected","origRating","newRating","dummies","map","p","Roster","_ref","_useState","useState","_useState2","Object","slicedToArray","setRoster","newPlayer","updateField","event","target","value","react_default","a","createElement","className","player","key","onSubmit","preventDefault","addPlayer","concat","type","onChange","required","numOfRounds","_ref2","_useState3","o","assign","_useState4","setMatches","setWinner","match","color","index","origMatch","checked","whiteWon","blackWon","draw","resetResult","whitePlayer","blackPlayer","Standings","_ref3","playerStandings","playerScore","modifiedMedian","solkoff","playerScoreCum","playerOppScoreCum","playerColorBalance","playerOppHistory","prototype","push","addPlayers","deactivatePlayer","activatePlayer","splice","indexOf","Math","ceil","log2","calcStandings","playerScoreList","_this2","scores","forEach","score","reduce","b","runningScore","cumScores","totalScore","_this3","_this4","playersClone","sort","thenBy","_this5","opponent","pop","shift","finalScore","_this6","opponents","player2","_this7","oppScores","newRound","pairPlayers","_this8","keys","reverse","scoreList","oddPlayer","newGroup","sortBy","chunk","upperHalf","lowerHalf","construct","toConsumableArray","upperHalfHistory","p2","error","console","log","player1","history","othersHistory","slice","_this8$_findAMatch","_findAMatch","x","_this8$_findAMatch2","_this8$_findAMatch3","_this8$_findAMatch4","_this8$_findAMatch5","_this8$_findAMatch6","foundASwap","otherPlayer","otherMatch","m","otherPlayer2","otherHistory","pool","newMatch","_this9","blackList","lastColor","playerColor","hasntPlayed","oppColor","defineProperties","get","set","whiteOrigRating","blackOrigRating","isComplete","isBye","calcRatings","getExpected","updateRating","cvlTourney","App","contents","tabList","setTabList","currentTab","setCurrentTab","tab","onClick","disabled","chess_tourney_ui_Round","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47a1732d.chunk.js","sourcesContent":["/* ----------------------------------------------------------------------------\n*                               Chess Tourney js\n*\n* This file handles all of the tournament logic.\n* At some point, this could turn into a standalone node module.\n* --------------------------------------------------------------------------- */\nconst {chain, flatten, last, times, zip} = require('lodash');\nconst EloRank = require('elo-rank');\nconst {firstBy} = require('thenby');\n\n/**\n * @constant KFACTOR The k-factor used for calculating ratings\n * @constant ELO     The EloRank object\n */\nconst KFACTOR = 16;\nconst ELO = new EloRank(KFACTOR);\n\n\n/**\n * Represents an indivudal player.\n * @param {string} firstName\n * @param {string} lastName\n * @param {int}    rating\n */\nfunction Player(firstName, lastName = '', rating = 1200) {\n  if (!(this instanceof Player)) {\n    return new Player(firstName, lastName, rating)\n  }\n  this.firstName = firstName;\n  this.lastName = lastName;\n  this.rating = rating;\n  this.dummy = false;\n}\n\n/**\n * A stand-in for bye matches.\n * @constant {Player} DUMMYPLAYER\n */\nconst DUMMYPLAYER =  Player('Dummy');\nDUMMYPLAYER.dummy = true;\nDUMMYPLAYER.rating = 0;\n\n/**\n * Tournament class\n * @param {string} name\n * @param {int}    timeControl\n * @param {array}  roster\n * @param {int}    byeValue\n */\nfunction Tournament (name = '', timeControl = 15, roster = [], byeValue = 1) {\n  if (!(this instanceof Tournament)) {\n    return new Tournament(name, timeControl, roster, byeValue)\n  }\n  this.name = name;\n  this.timeControl = timeControl;\n  this.roster = {\n    all: roster,\n    inactive: [],\n    active: function() {\n      return this.all.filter(i => !this.inactive.includes(i))\n    }\n  };\n  this.roundList = [];\n  this.byeValue = byeValue;\n}\n\n/**\n * Add a player to the roster.\n * @param {Player} player the player to add\n */\nTournament.prototype.addPlayer = function(player) {\n  this.roster.all.push(player);\n}\n\n/**\n * Add a list of players to the roster.\n * @param {Array} players the list of players to add\n */\nTournament.prototype.addPlayers = function(players) {\n  this.roster.all = this.roster.all.concat(players);\n}\n\n/**\n * Remove a player from the active roster. This player won't be placed in\n * future rounds.\n * @param {Player} player \n */\nTournament.prototype.deactivatePlayer = function(player) {\n  this.roster.inactive.push(player);\n}\n  \n/**\n * Add a player to the active roster. This player will be placed in future\n * rounds.\n * @param {Player} player \n */\nTournament.prototype.activatePlayer = function(player) {\n  this.roster.inactive.splice(this.roster.inactive.indexOf(player), 1);\n}\n\n/**\n * Calculate number of rounds.\n * @returns {int} the number of rounds\n */\nTournament.prototype.numOfRounds = function() {\n  return Math.ceil(Math.log2(this.roster.active().length));\n}\n\n/**\n * Calculate standings\n */\nTournament.prototype.calcStandings = function() {\n  return true; // todo\n}\n\n/**\n * Get a list of all of a player's scores from each match.\n * @param {Player} player\n * @returns {array} the list of scores\n */\nTournament.prototype.playerScoreList = function(player, round = null) {\n  var scores = [];\n  if ( round === null) {\n    round = this.roundList.length;\n  }\n  times(round + 1, i => {\n    if(this.roundList[i] !== undefined) {\n      this.roundList[i].matches.forEach(match => {\n        var index = match.players.indexOf(player);\n        if (index !== -1) {\n          scores.push(match.result[index]);\n        }\n      });\n    }\n  });\n  return scores;\n}\n\n/**\n * Get the total score of a player after a given round.\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.playerScore = function(player, roundNum = null) {\n  var score = 0;\n  var scores = this.playerScoreList(player, roundNum);\n  if (scores.length > 0) {\n    score = scores.reduce((a, b) => a + b);\n  }\n  return score;\n}\n\n/**\n * Get the cumulative score of a player\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.playerScoreCum = function(player, roundNum = null) {\n  var runningScore = 0;\n  var cumScores = []\n  var scores = this.playerScoreList(player, roundNum);\n  scores.forEach(score => {\n    runningScore += score;\n    cumScores.push(runningScore);\n  });\n  var totalScore = 0;\n  if (cumScores.length !== 0) {\n    totalScore = cumScores.reduce((a, b) => a + b);\n  }\n  return totalScore;\n}\n\n/**\n * Calculate a player's color balance\n * @param {Player} player\n * @param {Int}    round The ID of the highest round to consider\n * @returns {Int} A negative number means they played as black more. A positive number means they played as white more.\n */\nTournament.prototype.playerColorBalance = function(player, round = null) {\n  var color = 0;\n  if ( round === null) {\n    round = this.roundList.length;\n  }\n  times(round + 1, i => {\n    if(this.roundList[i] !== undefined) {\n      this.roundList[i].matches.forEach(match => {\n        if (match.players[0] === player) {\n          color += 1;\n        } else if (match.players[1] === player) {\n          color += -1;\n        }\n      });\n    }\n  });\n  return color;\n}\n\n/**\n * Sort the standings by score and USCF tie-break rules from § 34. USCF\n * recommends using these methods in-order: modified median, solkoff, \n * cumulative, and cumulative of opposition.\n * @param {number} roundNum \n * @returns {Array} The sorted list of players\n */\nTournament.prototype.playerStandings = function(roundNum = null) {\n  var playersClone = [].concat(this.roster.all);\n  playersClone.sort(\n    firstBy(p => this.playerScore(p, roundNum), -1)\n    .thenBy(p => this.modifiedMedian(p, roundNum), -1) /* USCF § 34E1 */\n    .thenBy(p => this.solkoff(p, roundNum), -1) /* USCF § 34E2 */\n    .thenBy(p => this.playerScoreCum(p, roundNum), -1) /* USCF § 34E3 */\n    .thenBy(p => this.playerOppScoreCum(p, roundNum), -1) /* USCF § 34E9 */\n  );\n  return playersClone;\n}\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.modifiedMedian = function(player, roundNum = null, solkoff = false) {\n  // get all of the opponent's scores\n  var scores = this.playerOppHistory(player, roundNum)\n    .map(opponent => this.playerScore(opponent, roundNum));\n  //sort them, then remove the first and last items\n  scores.sort();\n  if (!solkoff) {\n    scores.pop();\n    scores.shift();\n  }\n  var finalScore = 0;\n  if (scores.length > 0) {\n    finalScore = scores.reduce((a,b) => a + b);\n  }\n  return finalScore;\n}\n  \n/**\n * A shortcut for passing the `solkoff` variable to `this.modifiedMedian`.\n * @param {Player} player \n * @param {number} roundNum \n */\nTournament.prototype.solkoff = function(player, roundNum = null) {\n  return this.modifiedMedian(player, roundNum, true);\n}\n\n/**\n * Generate a list of a player's opponents.\n * @param   {Player} player\n * @returns {Array} A list of past opponents\n */\nTournament.prototype.playerOppHistory = function(player, round = null) {\n  var opponents = [];\n  if ( round === null) {\n    round = this.roundList.length - 1;\n  }\n  times(round + 1, i => {\n    this.roundList[i].matches.forEach(match => {\n      if (match.players.includes(player)) {\n        opponents = opponents.concat(\n          match.players\n            .filter(player2 => player2 !== player)\n            .filter(player2 => !opponents.includes(player2))\n        );\n      }\n    });\n  });\n  return opponents\n}\n\nTournament.prototype.playerOppScoreCum = function(player, round = null) {\n  const opponents = this.playerOppHistory(player, round);\n  var oppScores = opponents.map(p => this.playerScoreCum(p, round));\n  var score = 0;\n  if (oppScores.length !== 0){\n    score = oppScores.reduce((a, b) => a + b);\n  }\n  return score;\n}\n\n/**\n * Generates a new round.\n * @returns {Array} the new round\n */\nTournament.prototype.newRound = function() {\n  var newRound = new Round(\n    this,\n    this.roundList.length,\n    last(this.roundList),\n    this.roster.active()\n  );\n  newRound.pairPlayers();\n  this.roundList.push(newRound);\n  return newRound;\n}\n\n/**\n * Represents a round in a tournament.\n */\nfunction Round(tourney, roundNum, prevRound, players) {\n  if (!(this instanceof Round)) {\n    return new Round(tourney, roundNum, prevRound, players)\n  }\n  this.roundNum = roundNum;\n  this.tourney = tourney;\n  this.roster = players;\n  this.prevRound = prevRound;\n  this.playerTree = {};\n  this.matches = [];\n  this.hasDummy = false;\n}\n\n/**\n * Pair the players\n */\nRound.prototype.pairPlayers = function() {\n  /**\n   * Part 1: Split players into separate groups based on their scores\n   * (USCF § 27A2)\n   * Tree structure:\n   * {\n   *  score: [list of players],\n   *  ...\n   * }\n   */\n  this.roster.forEach(player => {\n    var score = this.tourney.playerScore(player);\n    if(!(score in this.playerTree)) {\n      this.playerTree[score] = [];\n    }\n    this.playerTree[score].push(player);\n  });\n  /**\n   * Part 2: Split each score group into an upper half and a lower half, \n   * based on rating (USCF § 27A3)\n   * Tree structure:\n   * {\n   *  score: [\n   *    [upper half list of players],\n   *    [lower half list of players]\n   *  ],\n   *  ...\n   * }\n   */\n  Object.keys(this.playerTree).reverse().forEach((score, i, scoreList) => {\n    var players = this.playerTree[score];\n    /**\n     * If there's an odd number of players in this score group,\n     */\n    if (players.length % 2 !== 0) {\n      /**\n       * ...and if there's an odd number of players in the total round, then\n       * add a dummy player.\n       */\n      if (this.roster.length % 2 !== 0 && !this.hasDummy) {\n        players.push(DUMMYPLAYER);\n        this.hasDummy = true;\n      /**\n       * But if there's an even number of players in the total round, then\n       * just move a player to the next score group.\n       */\n      } else {\n        var oddPlayer = players[players.length - 1];\n        players.splice(players.length - 1, 1);\n        var newGroup = scoreList[i + 1]; // the group to move the player to\n        if(!(newGroup in this.playerTree)) {\n          this.playerTree[newGroup] = [];\n        }\n        this.playerTree[newGroup].push(oddPlayer);\n      }\n    }\n    /**\n     * If there are no players in this group (e.g. a lone player got pushed\n     * to another group) then delete the key.\n     */\n    if (players.length === 0) {\n      delete this.playerTree[score];\n    } else {\n      this.playerTree[score] = chain(players)\n      .sortBy('rating')\n      .reverse()\n      .chunk(players.length / 2)\n      .value();\n    }\n  });\n  Object.keys(this.playerTree).forEach(score => {\n    // name the upperHalf and lowerHalf to make the code easier to read\n    var upperHalf = this.playerTree[score][0];\n    var lowerHalf = this.playerTree[score][1];\n    /**\n     * If there was no previous round, zip the players and call it a day.\n     */\n    if (this.prevRound === undefined) {\n      zip(upperHalf, lowerHalf)\n        .forEach(match => \n          this.matches.push(new Match(this, ...match))\n        );\n    } else {\n      /**\n       * If there was a previous round, then things get complicated....\n       * 1. Record each upper-half player's opponent history\n       * 2. Iterate through each upper-half player to find an opponent in the\n       *    lower half\n       * 3. Attempt to match with a lower-half opponent who isn't in their\n       *    history yet AND who is in the history of other upper-half\n       *    players. The second part helps eliminate a small percentage of\n       *    history overlap.\n       *      * (USCF § 27A1 - highest priority rule)\n       * 4. If no opponent was found, try again but don't consider the\n       *    history of other upper-half players.\n       * 5. If still no opponent was found, just pick whoever is left in the\n       *    lower half, even if they've played each other before.\n       * 6. If they have played each other before, attempt to swap opponents\n       *    with another upper-half player.\n       * \n       * This code is certainly not the most reliable or the most efficient.\n       * Changes will be needed.\n       */\n      /**\n       * 1.\n       * @var {Array} upperHalfHistory Each index matches the player's indexin upperHalf. Each sub-array is a list of their opponents.\n       */\n      try {\n        var upperHalfHistory = upperHalf.map(p => \n          [].concat(lowerHalf).concat(upperHalf) // merge the upperHalf and lowerHalf\n            .filter(p2 =>\n              this.tourney.playerOppHistory(p2).includes(p) // filter the players who have played this player\n            )\n        );\n      } catch (error) {\n        console.log(score, this.playerTree[score]);\n        throw error;\n      }\n      /**\n       * 2.\n       */\n      upperHalf.forEach(player1 => {\n        var history = upperHalfHistory[upperHalf.indexOf(player1)];\n        var othersHistory = flatten(upperHalfHistory\n          .slice(upperHalf.indexOf(player1))\n        );\n        /**\n         * 3.\n         */\n        var [ player2, match ] = this\n          ._findAMatch(player1, lowerHalf.filter(x =>\n            othersHistory.includes(x)), history\n        );\n        /**\n         * 4.\n         */\n        if (!player2) {\n          [ player2, match ] = this._findAMatch(player1, lowerHalf, history);\n        }\n        /**\n         * 5.\n         */\n        if (!player2) {\n          [ player2, match ] = this._findAMatch(player1, lowerHalf, []);\n        }\n        /**\n         * 6.\n         */\n        if (history.includes(player2)) {\n          var foundASwap = false;\n          upperHalf.filter(p => p !== player1).forEach(otherPlayer => {\n            if(!foundASwap) {\n              var otherMatch = this.matches\n                .filter(m => m.players.includes(otherPlayer))[0];\n              if(otherMatch) {\n                var otherPlayer2 = otherMatch.players\n                  .filter(p => p !== otherPlayer)[0];\n                var otherHistory = upperHalfHistory[upperHalf\n                  .indexOf(otherPlayer)];\n                if (!history.includes(otherPlayer2)\n                    && !otherHistory.includes(player2)) {\n                  match.players = [player1, otherPlayer2];\n                  otherMatch.players = [otherPlayer, player2];\n                  foundASwap = true;\n                }\n              }\n            }\n          })\n        }\n      })\n    }\n  })\n  return this.matches;\n}\n  \n/**\n * Find a match for a given player.\n * @param   {Player} player1  The player to be paired\n * @param   {Array}  pool      The pool of available players\n * @param   {Array}  blackList A blacklist of players, possibly in the pool, who should not be paired\n * @returns {Array}  The paired player and the Match object. Both will be undefined if no match was made.\n */\nRound.prototype._findAMatch = function(player1, pool, blackList = []) {\n  /**\n   * Try to pair the player as the opposite color as their last round.\n   * (USCF § 27A4 and § 27A5)\n   */\n  var lastColor = this.prevRound.playerColor(player1);\n  var hasntPlayed = pool\n    .filter(p2 => !blackList.includes(p2)) // Filter anyone on the blacklist (e.g. past opponents [USCF § 27A1])\n    .filter(p2 => p2 !== player1) // Don't pair players with themselves\n    .filter(p2 => !flatten(this.matches.map(m => m.players)).includes(p2)); // Don't pair anyone who's already been paired\n  /**\n   * Prioritize opponents who played that color for *their* last round. (USCF § 27A4 and § 27A5)\n   */\n  var oppColor = pool\n    .filter(p2 => lastColor !== this.prevRound.playerColor(p2));\n  var player2 = hasntPlayed\n    .filter(p2 => oppColor.includes(p2))[0] || hasntPlayed[0];\n  var newMatch;\n  if (player2) {\n    newMatch = new Match(this, player1, player2);\n    if (this.tourney.playerColorBalance(player1) > this.tourney.playerColorBalance(player2)) {\n      newMatch.players.reverse();\n    }\n    this.matches.push(newMatch);\n  }\n  return [ player2, newMatch ];\n}\n\n/**\n * Sees what color a player was for this round.\n * @param {Player} player \n * @return {number} 0 for white and 1 for black\n */\nRound.prototype.playerColor = function(player) {\n  var color = -1;\n  this.matches.forEach(match => {\n    if (match.players.includes(player)) {\n      color = match.players.indexOf(player);\n    }\n  })\n  return color;\n}\n\n/**\n * Add a player to the roster\n *\n * @param {Player} player\n */\nRound.prototype.addPlayer = function(player) {\n  this.players.push(player);\n  return this;\n}\n\n/**\n * Represents a match in a tournament.\n *\n * @param {Player} black\n * @param {Player} white\n */\nfunction Match(round, white, black) {\n  if (!(this instanceof Match)) {\n    return new Match(round, white, black);\n  }\n  this.round = round;\n  this.players = [white, black];\n  this.result = [0, 0];\n  this.scoreExpected = [0, 0]; // used for the Elo calculator\n  this.origRating = [white.rating, black.rating]; // cache the ratings from when the match began\n  this.newRating = [white.rating, black.rating]; // the newly calculated ratings after the match ends\n  // set bye rounds\n  const dummies = this.players.map(p => p.dummy);\n  if (dummies[0]) {\n    this.result = [0, 1];\n  } else if(dummies[1]) {\n    this.result = [1, 0];\n  }\n}\n\nObject.defineProperties(Match.prototype,\n  {\n    whitePlayer: {\n      get: function(){ return this.players[0]},\n      set: function(player){ this.players[0] = player}\n    },\n    blackPlayer: {\n      get: function(){ return this.players[1]},\n      set: function(player){ this.players[1] = player}\n    },\n    whiteOrigRating: {\n      get: function(){ return this.origRating[0]}\n    },\n    blackOrigRating: {\n      get: function(){ return this.origRating[1]}\n    },\n    isComplete: {\n      get: function(){ return this.result.reduce((a, b) => a + b) !== 0}\n    },\n    isBye: {\n      get: function(){ return this.players.includes(DUMMYPLAYER)}\n    }\n  }\n);\n  // get whitePlayer() {\n  //   return this.players[0];\n  // }\n\n  // get blackPlayer() {\n  //   return this.players[1];\n  // }\n\n  // get whiteOrigRating() {\n  //   return this.origRating[0];\n  // }\n\n  // get blackOrigRating() {\n  //   return this.origRating[1];\n  // }\n\n  // get isComplete() {\n  //   return this.result.reduce((a, b) => a + b) !== 0;\n  // }\n\n  // get isBye() {\n  //   return this.players.includes(DUMMYPLAYER);\n  // }\n\n/**\n * Sets black as the winner.\n */\nMatch.prototype.blackWon = function() {\n  this.result = [0, 1];\n  this.calcRatings();\n}\n\n/**\n * Sets white as the winner.\n */\nMatch.prototype.whiteWon = function() {\n  this.result = [1, 0];\n  this.calcRatings();\n}\n\n/**\n * Sets result as a draw.\n */\nMatch.prototype.draw = function() {\n  this.result = [0.5, 0.5];\n  this.calcRatings();\n}\n\nRound.prototype.resetResult = function() {\n  this.result = [0, 0];\n  this.newRating = this.origRating;\n}\n\nMatch.prototype.calcRatings = function() {\n  this.scoreExpected = [\n    ELO.getExpected(this.whiteOrigRating, this.blackOrigRating),\n    ELO.getExpected(this.blackOrigRating, this.whiteOrigRating),\n  ];\n  this.newRating = [\n    ELO.updateRating(this.scoreExpected[0], this.result[0], this.whiteOrigRating),\n    ELO.updateRating(this.scoreExpected[1], this.result[1], this.blackOrigRating)\n  ];\n  this.whitePlayer.rating = this.newRating[0];\n  this.blackPlayer.rating = this.newRating[1];\n}\n\n// This fails for some reason...\n// module.exports = {Tournament, Player};\n\nexport {Tournament, Player};\n","import React, { useState } from 'react';\nimport { Player } from './chess-tourney';\n\nfunction Roster ({tourney}) {\n  const [roster, setRoster] = useState(tourney.roster.all);\n  const newPlayer = {firstName: '', lastName: '', rating: 1200};\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    tourney.addPlayer(\n      new Player(\n        newPlayer['firstName'],\n        newPlayer['lastName'],\n        newPlayer['rating']\n      )\n    );\n    setRoster([].concat(tourney.roster.all));\n  }\n  const updateField = (event) => {\n    newPlayer[event.target.name] = event.target.value;\n  }\n  return (\n    <div className=\"roster\">\n      <table>\n        <caption>Roster</caption>\n        <thead>\n          <tr>\n            <th>First name</th>\n            <th>Rating</th>\n          </tr>\n        </thead>\n        <tbody>\n          { roster.map((player, i) =>\n            <tr key={i}>\n              <td>{player.firstName}</td>\n              <td className=\"table__number\">{player.rating}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <form onSubmit={handleSubmit}>\n        <label>\n          First name\n          <input type=\"text\" name=\"firstName\" onChange={updateField} required />\n        </label>\n        <label>\n          Last name\n          <input type=\"text\" name=\"lastName\" onChange={updateField} required />\n        </label>\n        <label>\n          Rating\n          <input type=\"number\" name=\"rating\" onChange={updateField} value=\"1200\" />\n        </label>\n        <input type=\"submit\" value=\"Add\"/>\n      </form>\n      <p className=\"center\">Total rounds: {tourney.numOfRounds()}</p>\n    </div>\n  );\n}\n\nfunction Round ({tourney, roundNum}) {\n  /**\n   * Be careful when using the `setState` matches and the API's matches.\n   * They have to mirror each other but can't be the same objects.\n   */\n  const round = tourney.roundList[roundNum];\n  const [matches, setMatches] = useState(round.matches.map(o => Object.assign({}, o)));\n  const setWinner = (match, color, index, event) => {\n    var origMatch = round.matches[index];\n    if(event.target.checked) {\n      if(color === 0) {\n        origMatch.whiteWon();\n      } else if (color === 1) {\n        origMatch.blackWon();\n      } else if (color === 0.5) {\n        origMatch.draw();\n      }\n    } else {\n      origMatch.resetResult();\n    }\n    // matches[index] = match;\n    setMatches(round.matches.map(o => Object.assign({}, o)));\n  }\n  return (\n    <div>\n      <table key={round.roundNum}>\n        <caption>Round {round.roundNum + 1} results</caption>\n        <thead>\n          <tr>\n            <th>Won</th>\n            <th>Rating change</th>\n            <th>White</th>\n            <th>Draw</th>\n            <th>Black</th>\n            <th>Rating change</th>\n            <th>Won</th>\n          </tr>\n        </thead>\n        <tbody>\n          {matches.map((match, i) =>\n            <tr key={i}>\n              <td>\n                <form>\n                  <input \n                    type=\"checkbox\"\n                    checked={round.matches[i].result[0] === 1}\n                    onChange={(event) => setWinner(match, 0, i, event)} />\n                </form>\n              </td>\n              <td>{round.matches[i].newRating[0] - round.matches[i].origRating[0]}</td>\n              <td>{round.matches[i].whitePlayer.firstName}</td>\n              <td>\n                <form>\n                  <input \n                    type=\"checkbox\"\n                    checked={round.matches[i].result[0] === 0.5}\n                    onChange={(event) => setWinner(match, 0.5, i, event)} />\n                </form>\n              </td>\n              <td>{round.matches[i].blackPlayer.firstName}</td>\n              <td>{round.matches[i].newRating[1] - round.matches[i].origRating[1]}</td>\n              <td>\n                <form>\n                  <input \n                    type=\"checkbox\"\n                    checked={round.matches[i].result[1] === 1}\n                    onChange={(event) => setWinner(match, 1, i, event)} />\n                </form>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <Standings roundNum={round.roundNum} tourney={round.tourney} />\n    </div>\n  );\n}\n\nfunction Standings({tourney, roundNum}) {\n  return (\n    <table key={roundNum}>\n      <caption>Current Standings</caption>\n      <thead>\n        <tr>\n          <th>First name</th>\n          <th>Score</th>\n          <th>Median</th>\n          <th>Solkoff</th>\n          <th>Cumulative</th>\n          <th>Cumulative of opposition</th>\n          <th>Rating</th>\n          <th>Color balance</th>\n          <th>Opponent count</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tourney.playerStandings(roundNum).map((player, i) => \n          <tr key={i}>\n            <td>{player.firstName}</td>\n            <td className=\"table__number\">{tourney.playerScore(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.modifiedMedian(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.solkoff(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.playerScoreCum(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.playerOppScoreCum(player, roundNum)}</td>\n            <td>{player.rating}</td>\n            <td className=\"table__number\">{tourney.playerColorBalance(player, roundNum)}</td>\n            <td className=\"table__number\">{tourney.playerOppHistory(player, roundNum).length}</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n}\n\nexport {Roster, Round, Standings};","import React, { useState, useEffect, Component } from 'react';\nimport './App.css';\nimport {Tournament, Player} from './chess-tourney';\nimport {Roster, Round, Standings} from './chess-tourney-ui';\n\nconst cvlTourney = new Tournament(\n  'CVL Winter Open',\n  15\n)\n\nconst players = [\n  new Player('Matthew', 'A', 800), new Player('Mark', 'B', 850),\n  new Player('Luke', 'C', 900), new Player('John', 'D', 950),\n  new Player('Simon', 'E', 1000), new Player('Andrew', 'F', 1050),\n  new Player('James', 'G', 1100), new Player('Philip', 'H', 1150),\n  new Player('Bartholomew', 'I', 1200), new Player('Thomas', 'J', 1250),\n  new Player('Catherine', 'K', 1300), new Player('Clare', 'L', 1350),\n  new Player('Judas', 'M', 1400), new Player('Matthias', 'N', 1450),\n  new Player('Paul', 'O', 1500), new Player('Mary', 'P', 1600),\n  new Player('Theresa', 'Q', 1650), new Player('Megan', 'R', 1700),\n  new Player('Elizabeth', 'S', 1750)\n];\n\nfunction randomMatches(match) {\n  var bye = match.isBye();\n  if (!bye) {\n    if (Math.random() >= 0.5) {\n      match.whiteWon();\n    } else {\n      match.blackWon();\n    }\n  }\n}\n\ncvlTourney.addPlayers(players.slice(0,16));\n\n// while (cvlTourney.roundList.length < cvlTourney.numOfRounds()) {\n//   var round = cvlTourney.newRound();\n//   round.matches.forEach(function(match) {\n//     var bye = match.isBye();\n//     if (!bye) {\n//       if (Math.random() >= 0.5) {\n//         match.whiteWon();\n//       } else {\n//         match.blackWon();\n//       }\n//     }\n//   })\n// }\n\nfunction App() {\n  const newRound = (event) => {\n    var round = cvlTourney.newRound();\n    tabList.push(\n      {\n        name: 'Round ' + (round.roundNum + 1),\n        contents: <Round tourney={cvlTourney} roundNum={round.roundNum} />\n      }\n    );\n    setTabList([].concat(tabList));\n    setCurrentTab(tabList[tabList.length - 1])\n  }\n  const [tabList, setTabList] = useState(\n    [\n      {\n        name: 'Roster',\n        contents: <Roster tourney={cvlTourney} />\n      }\n    ]\n  );\n  const [currentTab, setCurrentTab] = useState(tabList[0]);\n  return (\n    <div className=\"tournament\">\n      <nav className=\"tabbar\">\n        <ul>\n          {tabList.map((tab, i) => \n            <li key={i}>\n              <button\n                className=\"tab\"\n                onClick={() => setCurrentTab(tab)}\n                disabled={currentTab === tab}\n                >\n                {tab.name}\n              </button>\n            </li>\n          )}\n          <li>\n            <button \n              className=\"tab new_round\"\n              onClick={newRound}\n              >\n              New Round\n            </button>\n          </li>\n        </ul>\n      </nav>\n      <h1>Chessahoochee: a chess tournament app</h1>\n      {currentTab.contents}\n      {/* {cvlTourney.roundList.map(round => \n        <div className=\"round\" key={round.roundNum}>\n          <Round round={round} />\n        </div>\n      )} */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}