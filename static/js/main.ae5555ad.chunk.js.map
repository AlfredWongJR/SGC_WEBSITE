{"version":3,"sources":["chess-tourney/player.js","chess-tourney/match.js","chess-tourney/roster.js","chess-tourney/round.js","chess-tourney/tournament.js","demo-players.js","chess-tourney.jsx.js","App.js","serviceWorker.js","index.js"],"names":["Player","firstName","lastName","arguments","length","undefined","rating","this","dummy","Ne","Object","assign","prototype","eloRank","match","m","round","tourney","playerMatchHistory","K","EloRank","DUMMYPLAYER","Match","white","black","players","result","origRating","newRating","dummies","map","p","calcRatings","whiteElo","whitePlayer","blackElo","blackPlayer","scoreExpected","getExpected","whiteOrigRating","blackOrigRating","updateRating","Roster","all","inactive","defineProperties","get","set","player","isComplete","reduce","a","b","isBye","includes","playerInfo","index","indexOf","score","color","blackWon","whiteWon","draw","resetResult","active","_this","filter","i","addPlayer","push","addPlayers","concat","deactivatePlayer","activatePlayer","splice","removePlayer","Round","id","prevRound","roster","playerTree","matches","hasDummy","forEach","playerScore","keys","reverse","scoreList","oddPlayer","newGroup","chain","sortBy","chunk","value","upperHalf","lowerHalf","zip","construct","toConsumableArray","upperHalfHistory","p2","playerOppHistory","error","console","log","player1","history","othersHistory","flatten","slice","_findAMatch","findAMatch","x","_findAMatch2","slicedToArray","player2","_findAMatch3","_findAMatch4","_findAMatch5","_findAMatch6","foundASwap","otherPlayer","otherMatch","otherPlayer2","otherHistory","pool","newMatch","blackList","lastColor","playerColor","hasntPlayed","oppColor","playerColorBalance","matchByPlayer","theMatch","Tournament","name","timeControl","byeValue","roundList","isNewRoundReady","last","numOfRounds","roundId","Math","ceil","log2","Infinity","newRound","times","playerScoreList","playerScoreCum","runningScore","cumScores","totalScore","modifiedMedian","_this2","solkoff","scores","opponent","sort","pop","shift","finalScore","opponents","playerOppScoreCum","_this3","oppScores","calcStandings","_this4","standingsFlat","scoreCum","oppScoreCum","firstBy","thenBy","standingsTree","runningRank","sf","prevPlayer","demoPlayers","lastname","MainRoster","_ref","_useState","useState","_useState2","setRoster","_useState3","_useState4","demoLoaded","setDemoLoaded","newPlayer","updateField","event","target","rosterTable","react_default","createElement","key","className","onClick","disabled","demoRoster","onSubmit","preventDefault","type","onChange","required","_ref2","_useState5","o","_useState6","setMatches","_useState7","_useState8","openCards","setCards","setWinner","origMatch","checked","togglePlayerCard","PlayerCard","style","text-align","rando","random","Standings","_ref3","ratingChange","colorBalance","abs","_ref4","rank","j","cvlTourney","App","contents","tabList","setTabList","currentTab","setCurrentTab","tab","chess_tourney_jsx_Round","alert","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae5555ad.chunk.js","sourcesContent":["import EloRank from 'elo-rank';\n\n/**\n * Represents an indivudal player. Call it with `Player('John', ...)` or\n * `Player({firstName: 'John', ...})`. The latter is convenient for converting \n * JSON objects.\n * @param {string or object} firstName\n * @param {string} lastName\n * @param {int}    rating\n */\nexport function Player(firstName, lastName = '', rating = 1200) {\n  if (!(this instanceof Player)) {\n    return new Player(firstName, lastName, rating)\n  }\n  this.dummy = false;\n  this.Ne = 0 // number of games the rating is based on\n  if (typeof firstName === 'object') {\n    Object.assign(this, firstName)\n  } else {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.rating = rating;\n  }\n}\n\nPlayer.prototype.eloRank = function(match) {\n  const m = match.round.tourney.playerMatchHistory(this).length;\n  const K = 800 / (this.Ne + m);\n  return new EloRank(K);\n}\n\n/**\n * A stand-in for bye matches.\n * @constant {Player} DUMMYPLAYER\n */\nexport const DUMMYPLAYER = Player('Dummy');\nDUMMYPLAYER.dummy = true;\nDUMMYPLAYER.rating = 0;","/**\n * This module is probably the messiest, since I can't decide the best way to\n * organize it.\n */\n\nimport { DUMMYPLAYER } from './player';\n\n/**\n * Represents a match in a tournament.\n *\n * @param {Player} black\n * @param {Player} white\n */\nexport default function Match(round, white, black) {\n  if (!(this instanceof Match)) {\n    return new Match(round, white, black);\n  }\n  this.round = round;\n  this.players = [white, black];\n  this.result = [0, 0];\n  this.origRating = [white.rating, black.rating]; // cache the ratings from when the match began\n  this.newRating = [white.rating, black.rating]; // the newly calculated ratings after the match ends\n  // set bye rounds\n  const dummies = this.players.map(p => p.dummy);\n  if (dummies[0]) {\n    this.result = [0, 1];\n  } else if(dummies[1]) {\n    this.result = [1, 0];\n  }\n}\n\nObject.defineProperties(\n  Match.prototype,\n  {\n    whitePlayer: {\n      get: function(){ return this.players[0] },\n      set: function(player){ this.players[0] = player }\n    },\n    blackPlayer: {\n      get: function(){ return this.players[1]},\n      set: function(player){ this.players[1] = player }\n    },\n    whiteOrigRating: {\n      get: function(){ return this.origRating[0] }\n    },\n    blackOrigRating: {\n      get: function(){ return this.origRating[1] }\n    },\n    isComplete: {\n      get: function(){ return this.result.reduce((a, b) => a + b) !== 0 }\n    },\n    isBye: {\n      get: function(){ return this.players.includes(DUMMYPLAYER) }\n    }\n  }\n);\n\nMatch.prototype.playerInfo = function(player) {\n  let index = this.players.indexOf(player)\n  if (index === -1) {\n    return false;\n  }\n  return {\n    origRating: this.origRating[index],\n    newRating: this.newRating[index],\n    score: this.result[index],\n    color: index\n  }\n}\n\n/**\n * Sets black as the winner.\n */\nMatch.prototype.blackWon = function() {\n  this.result = [0, 1];\n  calcRatings(this);\n  return this;\n}\n\n/**\n * Sets white as the winner.\n */\nMatch.prototype.whiteWon = function() {\n  this.result = [1, 0];\n  calcRatings(this);\n  return this;\n}\n\n/**\n * Sets result as a draw.\n */\nMatch.prototype.draw = function() {\n  this.result = [0.5, 0.5];\n  calcRatings(this);\n  return this;\n}\n\nMatch.prototype.resetResult = function() {\n  this.result = [0, 0];\n  this.newRating = this.origRating;\n  return this;\n}\n\nfunction calcRatings(match) {\n  let whiteElo = match.whitePlayer.eloRank(match);\n  let blackElo = match.blackPlayer.eloRank(match);\n  const FLOOR = 100;\n  let scoreExpected = [\n    whiteElo.getExpected(match.whiteOrigRating, match.blackOrigRating),\n    blackElo.getExpected(match.blackOrigRating, match.whiteOrigRating),\n  ];\n  match.newRating = [\n    whiteElo.updateRating(scoreExpected[0], match.result[0], match.whiteOrigRating),\n    blackElo.updateRating(scoreExpected[1], match.result[1], match.blackOrigRating)\n  ];\n  match.newRating = match.newRating.map(rating => rating < FLOOR ? FLOOR : rating);\n  match.whitePlayer.rating = match.newRating[0];\n  match.blackPlayer.rating = match.newRating[1];\n}","/**\n * Roster class.\n * @param {Array} players \n */\nexport default function Roster(players = [], tourney) {\n  if (!(this instanceof Roster)) {\n    return new Roster(players, tourney)\n  }\n  this.all = players;\n  this.tourney = tourney;\n  this.inactive = [];\n}\n\nObject.defineProperties(\n  Roster.prototype,\n  {\n    active: {\n      get: function() {\n        return this.all.filter(i => !this.inactive.includes(i))\n      }\n    }\n  }\n);\n\n/**\n * Add a player to the roster.\n * @param {Player} player the player to add\n */\nRoster.prototype.addPlayer = function(player) {\n  this.all.push(player);\n  return this;\n}\n\n/**\n * Add a list of players to the roster.\n * @param {Array} players the list of players to add\n */\nRoster.prototype.addPlayers = function(players) {\n  this.all = this.all.concat(players);\n  return this;\n}\n\n/**\n * Remove a player from the active roster. This player won't be placed in\n * future rounds.\n * @param {Player} player \n */\nRoster.prototype.deactivatePlayer = function(player) {\n  this.inactive.push(player);\n  return this;\n}\n\n/**\n * Add a player to the active roster. This player will be placed in future\n * rounds.\n * @param {Player} player \n */\nRoster.prototype.activatePlayer = function(player) {\n  this.inactive.splice(this.inactive.indexOf(player), 1);\n  return this;\n}\n\nRoster.prototype.removePlayer = function(player) {\n  if (this.tourney.playerMatchHistory(player).length > 0) {\n    return null; // TODO: add a helpful error message\n  }\n  delete this.all[this.all.indexOf(player)];\n  return this;\n}\n","import { DUMMYPLAYER } from './player';\nimport Match from './match';\nimport { chain, flatten, zip } from 'lodash';\n\n/**\n * Represents a round in a tournament.\n */\nexport default function Round(tourney, id, prevRound, players) {\n  if (!(this instanceof Round)) {\n    return new Round(tourney, id, prevRound, players)\n  }\n  this.id = id;\n  this.tourney = tourney;\n  this.roster = players;\n  this.prevRound = prevRound;\n  this.playerTree = {};\n  this.matches = [];\n  this.hasDummy = false;\n  pairPlayers(this);\n}\n\nObject.defineProperties(\n  Round.prototype,\n  {\n    isComplete: {\n      get: function() {\n        return !this.matches.map(m => m.isComplete).includes(false);\n      }\n    }\n  }\n);\n\nRound.prototype.matchByPlayer = function(player) {\n  var theMatch = null;\n  this.matches.forEach(match => {\n    if (match.players.includes(player)) {\n      theMatch = match;\n    }\n  });\n  return theMatch;\n}\n\n/**\n * Sees what color a player was for this round.\n * @param {Player} player \n * @return {number} 0 for white and 1 for black\n */\nRound.prototype.playerColor = function(player) {\n  var color = -1;\n  this.matches.forEach(match => {\n    if (match.players.includes(player)) {\n      color = match.players.indexOf(player);\n    }\n  })\n  return color;\n}\n\n/**\n * Add a player to the roster\n *\n * @param {Player} player\n */\nRound.prototype.addPlayer = function(player) {\n  this.players.push(player);\n  return this;\n}\n\n/**\n * Pair the players\n */\nfunction pairPlayers(round) {\n  /**\n   * Part 1: Split players into separate groups based on their scores\n   * (USCF § 27A2)\n   * Tree structure:\n   * {\n   *  score: [list of players],\n   *  ...\n   * }\n   */\n  round.roster.forEach(player => {\n    var score = round.tourney.playerScore(player);\n    if(!(score in round.playerTree)) {\n      round.playerTree[score] = [];\n    }\n    round.playerTree[score].push(player);\n  });\n  /**\n   * Part 2: Split each score group into an upper half and a lower half, \n   * based on rating (USCF § 27A3)\n   * Tree structure:\n   * {\n   *  score: [\n   *    [upper half list of players],\n   *    [lower half list of players]\n   *  ],\n   *  ...\n   * }\n   */\n  Object.keys(round.playerTree).reverse().forEach((score, i, scoreList) => {\n    var players = round.playerTree[score];\n    /**\n     * If there's an odd number of players in this score group,\n     */\n    if (players.length % 2 !== 0) {\n      /**\n       * ...and if there's an odd number of players in the total round, then\n       * add a dummy player.\n       */\n      if (round.roster.length % 2 !== 0 && !round.hasDummy) {\n        players.push(DUMMYPLAYER);\n        round.hasDummy = true;\n      /**\n       * But if there's an even number of players in the total round, then\n       * just move a player to the next score group.\n       */\n      } else {\n        var oddPlayer = players[players.length - 1];\n        players.splice(players.length - 1, 1);\n        var newGroup = scoreList[i + 1]; // the group to move the player to\n        if(!(newGroup in round.playerTree)) {\n          round.playerTree[newGroup] = [];\n        }\n        round.playerTree[newGroup].push(oddPlayer);\n      }\n    }\n    /**\n     * If there are no players in this group (e.g. a lone player got pushed\n     * to another group) then delete the key.\n     */\n    if (players.length === 0) {\n      delete round.playerTree[score];\n    } else {\n      round.playerTree[score] = chain(players)\n      .sortBy('rating')\n      .reverse()\n      .chunk(players.length / 2)\n      .value();\n    }\n  });\n  Object.keys(round.playerTree).forEach(score => {\n    // name the upperHalf and lowerHalf to make the code easier to read\n    var upperHalf = round.playerTree[score][0];\n    var lowerHalf = round.playerTree[score][1];\n    /**\n     * If there was no previous round, zip the players and call it a day.\n     */\n    if (round.prevRound === undefined) {\n      zip(upperHalf, lowerHalf)\n        .forEach(match => \n          round.matches.push(new Match(round, ...match))\n        );\n    } else {\n      /**\n       * If there was a previous round, then things get complicated....\n       * 1. Record each upper-half player's opponent history\n       * 2. Iterate through each upper-half player to find an opponent in the\n       *    lower half\n       * 3. Attempt to match with a lower-half opponent who isn't in their\n       *    history yet AND who is in the history of other upper-half\n       *    players. The second part helps eliminate a small percentage of\n       *    history overlap.\n       *      * (USCF § 27A1 - highest priority rule)\n       * 4. If no opponent was found, try again but don't consider the\n       *    history of other upper-half players.\n       * 5. If still no opponent was found, just pick whoever is left in the\n       *    lower half, even if they've played each other before.\n       * 6. If they have played each other before, attempt to swap opponents\n       *    with another upper-half player.\n       * \n       * This code is certainly not the most reliable or the most efficient.\n       * Changes will be needed.\n       */\n      /**\n       * 1.\n       * @var {Array} upperHalfHistory Each index matches the player's indexin upperHalf. Each sub-array is a list of their opponents.\n       */\n      try {\n        var upperHalfHistory = upperHalf.map(p => \n          [].concat(lowerHalf).concat(upperHalf) // merge the upperHalf and lowerHalf\n            .filter(p2 =>\n              round.tourney.playerOppHistory(p2).includes(p) // filter the players who have played this player\n            )\n        );\n      } catch (error) {\n        console.log(score, round.playerTree[score]);\n        throw error;\n      }\n      /**\n       * 2.\n       */\n      upperHalf.forEach(player1 => {\n        var history = upperHalfHistory[upperHalf.indexOf(player1)];\n        var othersHistory = flatten(upperHalfHistory\n          .slice(upperHalf.indexOf(player1))\n        );\n        /**\n         * 3.\n         */\n        var [ player2, match ] = findAMatch(round, player1, lowerHalf.filter(x =>\n            othersHistory.includes(x)), history\n        );\n        /**\n         * 4.\n         */\n        if (!player2) {\n          [ player2, match ] = findAMatch(round, player1, lowerHalf, history);\n        }\n        /**\n         * 5.\n         */\n        if (!player2) {\n          [ player2, match ] = findAMatch(round, player1, lowerHalf, []);\n        }\n        /**\n         * 6.\n         */\n        if (history.includes(player2)) {\n          var foundASwap = false;\n          upperHalf.filter(p => p !== player1).forEach(otherPlayer => {\n            if(!foundASwap) {\n              var otherMatch = round.matches\n                .filter(m => m.players.includes(otherPlayer))[0];\n              if(otherMatch) {\n                var otherPlayer2 = otherMatch.players\n                  .filter(p => p !== otherPlayer)[0];\n                var otherHistory = upperHalfHistory[upperHalf\n                  .indexOf(otherPlayer)];\n                if (!history.includes(otherPlayer2)\n                    && !otherHistory.includes(player2)) {\n                  match.players = [player1, otherPlayer2];\n                  otherMatch.players = [otherPlayer, player2];\n                  foundASwap = true;\n                }\n              }\n            }\n          })\n        }\n      })\n    }\n  })\n  return round.matches;\n}\n  \n/**\n * Find a match for a given player.\n * @param   {Player} player1  The player to be paired\n * @param   {Array}  pool      The pool of available players\n * @param   {Array}  blackList A blacklist of players, possibly in the pool, who should not be paired\n * @returns {Array}  The paired player and the Match object. Both will be undefined if no match was made.\n */\nfunction findAMatch(round, player1, pool, blackList = []) {\n  /**\n   * Try to pair the player as the opposite color as their last round.\n   * (USCF § 27A4 and § 27A5)\n   */\n  var lastColor = round.prevRound.playerColor(player1);\n  var hasntPlayed = pool\n    .filter(p2 => !blackList.includes(p2)) // Filter anyone on the blacklist (e.g. past opponents [USCF § 27A1])\n    .filter(p2 => p2 !== player1) // Don't pair players with themselves\n    .filter(p2 => !flatten(round.matches.map(m => m.players)).includes(p2)); // Don't pair anyone who's already been paired\n  /**\n   * Prioritize opponents who played that color for *their* last round. (USCF § 27A4 and § 27A5)\n   */\n  var oppColor = pool\n    .filter(p2 => lastColor !== round.prevRound.playerColor(p2));\n  var player2 = hasntPlayed\n    .filter(p2 => oppColor.includes(p2))[0] || hasntPlayed[0];\n  var newMatch;\n  if (player2) {\n    newMatch = new Match(round, player1, player2);\n    if (round.tourney.playerColorBalance(player1) > round.tourney.playerColorBalance(player2)) {\n      newMatch.players.reverse();\n    }\n    round.matches.push(newMatch);\n  }\n  return [ player2, newMatch ];\n}\n","import Roster from './roster';\nimport Round from './round';\nimport { firstBy } from 'thenby';\nimport { last, times } from 'lodash';\n\n/**\n * Tournament class\n * @param {string} name\n * @param {int}    timeControl\n * @param {array}  roster\n * @param {int}    byeValue\n */\nexport default function Tournament(name = '', timeControl = 15, roster = [], byeValue = 1) {\n  if (!(this instanceof Tournament)) {\n    return new Tournament(name, timeControl, roster, byeValue)\n  }\n  this.name = name;\n  this.timeControl = timeControl;\n  this.roster = Roster(roster, this);\n  this.roundList = [];\n  this.byeValue = byeValue;\n}\n\nObject.defineProperties(\n  Tournament.prototype,\n  {\n    isNewRoundReady: {\n      get: function() {\n        var isReady = false;\n        if (this.roundList.length > 0) {\n          isReady = last(this.roundList).isComplete;\n        } else {\n          isReady = (this.roster.all.length > 0);\n        }\n        return isReady;\n      }\n    }\n  }\n);\n\n/**\n * Calculate number of rounds.\n * @returns {int} the number of rounds\n */\nTournament.prototype.numOfRounds = function() {\n  var roundId = Math.ceil(Math.log2(this.roster.active.length));\n  if (roundId === -Infinity) {\n    roundId = 0;\n  }\n  return roundId;\n}\n\n/**\n * Generates a new round.\n * @returns {Array} the new round\n */\nTournament.prototype.newRound = function() {\n  if (!this.isNewRoundReady) {\n    return false;\n  }\n  var newRound = Round(\n    this,\n    this.roundList.length,\n    last(this.roundList),\n    this.roster.active\n  );\n  this.roundList.push(newRound);\n  return newRound;\n}\n\nTournament.prototype.playerMatchHistory = function(player, roundId = null) {\n  if (roundId === null) {\n    roundId = this.roundList.length;\n  }\n  let matches = []\n  times(roundId + 1, i => {\n    if (this.roundList[i] !== undefined) {\n      this.roundList[i].matches.forEach(match => {\n        if (match.players.indexOf(player) !== -1) {\n          matches.push(match);\n        }\n      })\n    }\n  });\n  return matches;\n}\n\n/**\n * Get a list of all of a player's scores from each match.\n * @param {Player} player\n * @returns {array} the list of scores\n */\nTournament.prototype.playerScoreList = function(player, roundId = null) {\n  var scores = this\n    .playerMatchHistory(player, roundId)\n    .map(match => \n      match.result[match.players.indexOf(player)]);\n  return scores;\n}\n\n/**\n * Get the total score of a player after a given round.\n * @param {Player} player \n * @param {number} roundId \n */\nTournament.prototype.playerScore = function(player, roundId = null) {\n  var score = 0;\n  var scoreList = this.playerScoreList(player, roundId);\n  if (scoreList.length > 0) {\n    score = scoreList.reduce((a, b) => a + b);\n  }\n  return score;\n}\n\n/**\n * Get the cumulative score of a player\n * @param {Player} player \n * @param {number} roundId \n */\nTournament.prototype.playerScoreCum = function(player, roundId = null) {\n  var runningScore = 0;\n  var cumScores = []\n  var scores = this.playerScoreList(player, roundId);\n  scores.forEach(score => {\n    runningScore += score;\n    cumScores.push(runningScore);\n  });\n  var totalScore = 0;\n  if (cumScores.length !== 0) {\n    totalScore = cumScores.reduce((a, b) => a + b);\n  }\n  return totalScore;\n}\n\n/**\n * Calculate a player's color balance\n * @param {Player} player\n * @param {Int}    round The ID of the highest round to consider\n * @returns {Int} A negative number means they played as black more. A positive number means they played as white more.\n */\nTournament.prototype.playerColorBalance = function(player, roundId = null) {\n  var color = 0;\n  this\n    .playerMatchHistory(player, roundId)\n    .filter(match => !match.isBye)\n    .forEach(match => {\n      if (match.players[0] === player) {\n        color += 1;\n      } else if (match.players[1] === player) {\n        color += -1;\n      }\n    }\n  );\n  return color;\n}\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @param {Player} player \n * @param {number} roundId \n */\nTournament.prototype.modifiedMedian = function(player, roundId = null, solkoff = false) {\n  // get all of the opponent's scores\n  var scores = this.playerOppHistory(player, roundId)\n    .map(opponent => this.playerScore(opponent, roundId));\n  //sort them, then remove the first and last items\n  scores.sort();\n  if (!solkoff) {\n    scores.pop();\n    scores.shift();\n  }\n  var finalScore = 0;\n  if (scores.length > 0) {\n    finalScore = scores.reduce((a,b) => a + b);\n  }\n  return finalScore;\n}\n  \n/**\n * A shortcut for passing the `solkoff` variable to `this.modifiedMedian`.\n * @param {Player} player \n * @param {number} roundId \n */\nTournament.prototype.solkoff = function(player, roundId = null) {\n  return this.modifiedMedian(player, roundId, true);\n}\n\n/**\n * Generate a list of a player's opponents.\n * @param   {Player} player\n * @returns {Array} A list of past opponents\n */\nTournament.prototype.playerOppHistory = function(player, roundId = null) {\n  var opponents = [];\n  this\n    .playerMatchHistory(player, roundId)\n    .forEach(match => {\n      opponents = opponents.concat(\n        match.players\n          .filter(player2 => player2 !== player)\n      );\n    }\n  );\n  return opponents\n}\n\nTournament.prototype.playerOppScoreCum = function(player, round = null) {\n  const opponents = this.playerOppHistory(player, round);\n  var oppScores = opponents.map(p => this.playerScoreCum(p, round));\n  var score = 0;\n  if (oppScores.length !== 0){\n    score = oppScores.reduce((a, b) => a + b);\n  }\n  return score;\n}\n\n/**\n * Sort the standings by score and USCF tie-break rules from § 34. USCF\n * recommends using these methods in-order: modified median, solkoff, \n * cumulative, and cumulative of opposition.\n * @param {number} roundId \n * @returns {Array} The sorted list of players\n */\nTournament.prototype.calcStandings = function(roundId = null) {\n  const standingsFlat = this.roster.all.map(player => {\n    return {\n      player: player,\n      score: this.playerScore(player, roundId),\n      modifiedMedian: this.modifiedMedian(player, roundId),\n      solkoff: this.solkoff(player, roundId),\n      scoreCum: this.playerScoreCum(player, roundId),\n      oppScoreCum: this.playerOppScoreCum(player, roundId)\n    }\n  });\n  standingsFlat.sort(\n    firstBy(p => p.score, -1)\n    .thenBy(p => p.modifiedMedian, -1)\n    .thenBy(p => p.solkoff, -1)\n    .thenBy(p => p.scoreCum, -1)\n    .thenBy(p => p.oppScoreCum, -1)\n  );\n  const standingsTree = [];\n  let runningRank = 0;\n  standingsFlat.forEach((player, i, sf) => {\n    if (i !== 0) { // we can't compare the first player with someone before them\n      let prevPlayer = sf[i - 1];\n      if (!(player.score === prevPlayer.score &&\n          player.modifiedMedian === prevPlayer.modifiedMedian &&\n          player.solkoff === prevPlayer.solkoff &&\n          player.scoreCum === prevPlayer.scoreCum &&\n          player.oppScoreCum === prevPlayer.oppScoreCum)\n      ) {\n        runningRank += 1;\n      }\n    }\n    if (!standingsTree[runningRank]) {\n      standingsTree[runningRank] = [];\n    }\n    standingsTree[runningRank].push(player);\n  });\n  return standingsTree;\n}\n","const demoPlayers = [\n  {firstName: 'Matthew',     lastName: 'A', rating: 800},\n  {firstName: 'Mark',        lastName: 'B', rating: 850},\n  {firstName: 'Luke',        lastname: 'C', rating: 900},\n  {firstName: 'John',        lastname: 'D', rating: 950},\n  {firstName: 'Simon',       lastname: 'E', rating: 1000},\n  {firstName: 'Andrew',      lastname: 'F', rating: 1050},\n  {firstName: 'James',       lastname: 'G', rating: 1100},\n  {firstName: 'Philip',      lastname: 'H', rating: 1150},\n  {firstName: 'Bartholomew', lastname: 'I', rating: 1200},\n  {firstName: 'Thomas',      lastname: 'J', rating: 1250},\n  {firstName: 'Catherine',   lastname: 'K', rating: 1300},\n  {firstName: 'Clare',       lastname: 'L', rating: 1350},\n  {firstName: 'Judas',       lastname: 'M', rating: 1400},\n  {firstName: 'Matthias',    lastname: 'N', rating: 1450},\n  {firstName: 'Paul',        lastname: 'O', rating: 1500},\n  {firstName: 'Mary',        lastname: 'P', rating: 1600},\n  {firstName: 'Theresa',     lastname: 'Q', rating: 1650},\n  {firstName: 'Megan',       lastname: 'R', rating: 1700},\n  {firstName: 'Elizabeth',   lastname: 'S', rating: 1750}\n];\n\nexport default demoPlayers;","import React, { useState } from 'react';\nimport { Player } from './chess-tourney';\nimport demoRoster from './demo-players';\n\nfunction MainRoster ({tourney}) {\n  const [roster, setRoster] = useState(tourney.roster.all);\n  const [demoLoaded, setDemoLoaded] = useState(false);\n  const newPlayer = {firstName: '', lastName: '', rating: 1200};\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    tourney.addPlayer(\n      Player(\n        newPlayer['firstName'],\n        newPlayer['lastName'],\n        newPlayer['rating']\n      )\n    );\n    setRoster([].concat(tourney.roster.all));\n  }\n  const updateField = (event) => {\n    newPlayer[event.target.name] = event.target.value;\n  }\n  const loadDemo = () => {\n    var players = demoRoster.slice(0,16).map(p => Player(p));\n    tourney.roster.addPlayers(players);\n    setDemoLoaded(true);\n    setRoster([].concat(tourney.roster.all));\n  }\n  const deactivatePlayer = (player) => {\n    var baleted = tourney.roster.removePlayer(player);\n    if (!baleted) {\n      tourney.roster.deactivatePlayer(player);\n    }\n    setRoster([].concat(tourney.roster.all));\n  }\n  const activatePlayer = (player) => {\n    tourney.roster.activatePlayer(player);\n    setRoster([].concat(tourney.roster.all));\n  }\n  var rosterTable = '';\n  if (roster.length > 0) {\n    rosterTable = \n    <table><caption>Roster</caption>\n      <thead>\n        <tr>\n          <th>First name</th>\n          <th>Rating</th>\n          <th>Rounds played</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        { roster.map((player, i) =>\n          <tr key={i} \n            className={tourney.roster.inactive.includes(player) ? 'inactive' : 'active'}>\n            <td className=\"table__player\">{player.firstName}</td>\n            <td className=\"table__number\">{player.rating}</td>\n            <td className=\"table__number\">\n              {tourney.playerMatchHistory(player).length}\n            </td>\n            <td>\n            {tourney.roster.inactive.includes(player)\n              ? <button onClick={() => activatePlayer(player)}>Activate</button>\n              : <button onClick={() => deactivatePlayer(player)}>x</button>\n            }\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  }\n  return (\n    <div className=\"roster\">\n      {rosterTable}\n      <p>\n        <button disabled={demoLoaded} onClick={loadDemo}>Load a demo roster</button>\n      </p>\n      <p>\n        Or add your own players:\n      </p>\n      <form onSubmit={handleSubmit}>\n        <label>\n          First name\n          <input type=\"text\" name=\"firstName\" onChange={updateField} required />\n        </label>\n        <label>\n          Last name\n          <input type=\"text\" name=\"lastName\" onChange={updateField} required />\n        </label>\n        <label>\n          Rating\n          <input type=\"number\" name=\"rating\" onChange={updateField} value=\"1200\" />\n        </label>\n        <input type=\"submit\" value=\"Add\"/>\n      </form>\n      <p className=\"center\">Total rounds: {tourney.numOfRounds()}</p>\n    </div>\n  );\n}\n\nfunction Round ({tourney, roundId}) {\n  /**\n   * Be careful when using the `setState` `matches` and the API's `matches`.\n   * They have to mirror each other but can't be the same objects.\n   */\n  const round = tourney.roundList[roundId];\n  const [matches, setMatches] = useState(round.matches.map(o => Object.assign({}, o)));\n  const [openCards, setCards] = useState([]);\n  const setWinner = (color, index, event) => {\n    let origMatch = round.matches[index];\n    if(event.target.checked) {\n      if(color === 0) {\n        origMatch.whiteWon();\n      } else if (color === 1) {\n        origMatch.blackWon();\n      } else if (color === 0.5) {\n        origMatch.draw();\n      }\n    } else {\n      origMatch.resetResult();\n    }\n    // matches[index] = match;\n    setMatches(round.matches.map(o => Object.assign({}, o)));\n  }\n  const togglePlayerCard = (id) => {\n    if (openCards.includes(id)) {\n      setCards(openCards.filter(i => i !== id));\n    } else {\n      setCards([].concat(openCards).concat([id]));\n    }\n  }\n  const randomize = () => {\n    matches.forEach((match, i) => {\n      let origMatch = round.matches[i];\n      let rando = Math.random();\n      if (rando >= 0.55) {\n        origMatch.whiteWon();\n      } else if (rando >= .1) {\n        origMatch.blackWon();\n      } else {\n        origMatch.draw();\n      }\n    });\n    setMatches(round.matches.map(o => Object.assign({}, o)));\n  }\n  return (\n    <div>\n      <table key={round.id} className=\"table__roster\">\n        <caption>Round {round.id + 1} results</caption>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Won</th>\n            <th>White</th>\n            <th>Draw</th>\n            <th>Black</th>\n            <th>Won</th>\n          </tr>\n        </thead>\n        <tbody>\n          {matches.map((match, i) =>\n            <tr key={i} className={round.matches[i].isBye ? 'inactive' : ''}>\n              <td className=\"table__number\">{i + 1}</td>\n              <td>\n                <input \n                  type=\"checkbox\"\n                  checked={round.matches[i].result[0] === 1}\n                  disabled={round.matches[i].isBye}\n                  onChange={(event) => setWinner(0, i, event)} />\n              </td>\n              <td className=\"table__player\">\n                {round.matches[i].whitePlayer.firstName}\n                <button onClick={() => togglePlayerCard(i)}>?</button>\n                {openCards.includes(i) && \n                  <PlayerCard\n                    tourney={tourney}\n                    round={round}\n                    player={round.matches[i].whitePlayer} />\n                }\n              </td>\n              <td>\n                <input \n                  type=\"checkbox\"\n                  checked={round.matches[i].result[0] === 0.5}\n                  disabled={round.matches[i].isBye}\n                  onChange={(event) => setWinner(0.5, i, event)} />\n              </td>\n              <td className=\"table__player\">\n                {round.matches[i].blackPlayer.firstName}\n                <button onClick={() => togglePlayerCard(i)}>?</button>\n                {openCards.includes(i) && \n                  <PlayerCard\n                    tourney={tourney}\n                    round={round}\n                    player={round.matches[i].blackPlayer} />\n                }\n              </td>\n              <td>\n                <input \n                  type=\"checkbox\"\n                  checked={round.matches[i].result[1] === 1}\n                  disabled={round.matches[i].isBye}\n                  onChange={(event) => setWinner(1, i, event)} />\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <p style={{'text-align': 'center'}}>\n        <button onClick={randomize}>Random!</button>\n      </p>\n      <Standings roundId={round.id} tourney={round.tourney} />\n    </div>\n  );\n}\n\nfunction PlayerCard({tourney, round, player}) {\n  var ratingChange = (\n    round.matchByPlayer(player).playerInfo(player).newRating\n    - round.matchByPlayer(player).playerInfo(player).origRating\n  );\n  if (ratingChange > -1) {\n    ratingChange = \"+\" + ratingChange\n  }\n  const colorBalance = tourney.playerColorBalance(player, round.id);\n  var color = 'Even';\n  if (colorBalance > 0) {\n    color = 'White +' + colorBalance;\n  } else if (colorBalance < 0) {\n    color = 'Black +' + Math.abs(colorBalance);\n  }\n  return (\n    <dl className=\"player-card\">\n      <dt>Rating</dt>\n      <dd>\n        {round.matchByPlayer(player).playerInfo(player).origRating}\n        &nbsp;({ratingChange})\n      </dd>\n      <dt>Color balance</dt>\n      <dd>{color}</dd>\n      <dt>Opponent history</dt>\n      <dd>\n        <ol>\n          {tourney.playerOppHistory(player, round.id).map((opponent, i) =>\n            <li key={i}>\n              {opponent.firstName}\n            </li>  \n          )}\n        </ol>\n      </dd>\n    </dl>\n  );\n}\n\nfunction Standings({tourney, roundId}) {\n  return (\n    <table key={roundId}>\n      <caption>Current Standings</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th>First name</th>\n          <th>Score</th>\n          <th>Median</th>\n          <th>Solkoff</th>\n          <th>Cumulative</th>\n          <th>Cumulative of opposition</th>\n        </tr>\n      </thead>\n      {tourney.calcStandings(roundId).map((rank, i) => \n        <tbody key={i}>\n          {rank.map((player, j) => \n            <tr key={j}>\n              <td>{i + 1}</td>\n              <td>{player.player.firstName}</td>\n              <td className=\"table__number\">{player.score}</td>\n              <td className=\"table__number\">{player.modifiedMedian}</td>\n              <td className=\"table__number\">{player.solkoff}</td>\n              <td className=\"table__number\">{player.scoreCum}</td>\n              <td className=\"table__number\">{player.oppScoreCum}</td>\n            </tr>\n            )}\n        </tbody>\n      )}\n    </table>\n  );\n}\n\nexport {MainRoster, Round, Standings};","import React, { useState } from 'react';\nimport './App.css';\nimport { Tournament } from './chess-tourney';\nimport { MainRoster, Round } from './chess-tourney.jsx';\n\nconst cvlTourney = new Tournament(\n  'CVL Winter Open',\n  15\n)\n\nfunction App() {\n  const newRound = (event) => {\n    var round = cvlTourney.newRound();\n    if (!round) {\n      alert('Either add players or complete the current matches first.');\n      return;\n    }\n    tabList.push(\n      {\n        name: 'Round ' + (round.id + 1),\n        contents: <Round tourney={cvlTourney} roundId={round.id} />\n      }\n    );\n    setTabList([].concat(tabList));\n    setCurrentTab(tabList[tabList.length - 1])\n  }\n  const [tabList, setTabList] = useState(\n    [\n      {\n        name: 'Roster',\n        contents: <MainRoster tourney={cvlTourney} />\n      }\n    ]\n  );\n  const [currentTab, setCurrentTab] = useState(tabList[0]);\n  return (\n    <div className=\"tournament\">\n      <nav className=\"tabbar\">\n        <ul>\n          {tabList.map((tab, i) => \n            <li key={i}>\n              <button\n                className=\"tab\"\n                onClick={() => setCurrentTab(tab)}\n                disabled={currentTab === tab}\n                >\n                {tab.name}\n              </button>\n            </li>\n          )}\n          <li>\n            <button \n              className=\"tab new_round\"\n              onClick={newRound}\n              >\n              New Round\n            </button>\n          </li>\n        </ul>\n      </nav>\n      <h1>Chessahoochee: a chess tournament app</h1>\n      {currentTab.contents}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}