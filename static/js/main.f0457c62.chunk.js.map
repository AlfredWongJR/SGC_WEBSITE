{"version":3,"sources":["chess-tourney/player.js","chess-tourney/match.js","chess-tourney/roster.js","chess-tourney/config.js","chess-tourney/scores.js","chess-tourney/round.js","chess-tourney/tournament.js","demo-players.js","chess-tourney.jsx.js","App.jsx.js","serviceWorker.js","index.js"],"names":["createPlayer","firstName","lastName","arguments","length","undefined","rating","player","dummy","Ne","eloRank","tourney","m","getMatchesByPlayer","K","EloRank","Object","assign","DUMMYPLAYER","freeze","calcRatings","match","whiteElo","players","blackElo","scoreExpected","getExpected","origRating","newRating","updateRating","result","map","round","white","black","warnings","reverse","blackWon","whiteWon","draw","resetResult","toConsumableArray","isComplete","isBye","includes","getColorInfo","color","getPlayerColor","indexOf","getPlayerInfo","getWhite","getBlack","roster","all","inactive","getActive","filter","i","addPlayer","push","addPlayers","concat","deactivatePlayer","activatePlayer","splice","removePlayer","console","log","scores","config","tieBreak","forEach","method","func","funcName","playerScoreList","roundId","playerScore","score","scoreList","reduce","a","b","playerScoreCum","runningScore","cumScores","playerScoreListNoByes","totalScore","playerColorBalance","modifiedMedian","solkoff","getPlayersByOpponent","opponent","sort","pop","shift","finalScore","playerOppScoreCum","oppScores","p","calcStandings","tieBreaks","active","standingsFlat","standing","name","sortFunc","firstBy","thenBy","standingsTree","runningRank","sf","player1","player2","scoreTypes","getOwnPropertyNames","areEqual","areScoresEqual","findAMatch","matches","pool","newMatch","blackList","lastColor","prevRound","playerColor","hasntPlayed","p2","flatten","oppColor","createMatch","id","playerTree","hasDummy","getMatchByPlayer","theMatch","getScores","tree","keys","Number","list","oddPlayer","newGroup","chain","chunk","value","upperHalf","lowerHalf","zip","apply","upperHalfHistory","history","othersHistory","slice","_findAMatch","x","_findAMatch2","slicedToArray","_findAMatch3","_findAMatch4","_findAMatch5","_findAMatch6","foundASwap","otherPlayer","otherMatch","otherPlayer2","otherHistory","pairPlayers","playerList","roundList","byeValue","isNewRoundReady","last","times","getNumOfRounds","Math","ceil","log2","newRound","createRound","createRoster","lastname","MainRoster","_ref","_useState","useState","_useState2","setRoster","_useState3","_useState4","demoLoaded","setDemoLoaded","newPlayer","updateField","event","target","rosterTable","react_default","createElement","key","className","onClick","disabled","demoRoster","onSubmit","preventDefault","type","onChange","required","Round","_ref2","_useState5","o","_useState6","setMatches","setWinner","index","origMatch","checked","RoundMatch","matchId","style","textAlign","rando","random","Standings","_ref3","_useState7","_useState8","openCards","setCards","isCardOpen","PlayerCard","newCards","togglePlayerCard","_ref4","ratingChange","colorBalance","abs","_ref5","rank","j","cvlTourney","createTournament","Boolean","window","location","hostname","ReactDOM","render","contents","tabList","setTabList","currentTab","setCurrentTab","tab","alert","document","getElementById","role","aria-label","href","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0457c62.chunk.js","sourcesContent":["import EloRank from \"elo-rank\";\n\n/**\n * Represents an indivudal player. Call it with `createPlayer(\"John\", ...)` or\n * `createPlayer({firstName: \"John\", ...})`. The latter is convenient for\n * converting JSON objects.\n * @param {object} firstName Either the person's first name or an object\n * containing all the parameters.\n * @param {string} lastName  The person's last name.\n * @param {int}    rating    The person's Elo rating.\n */\nfunction createPlayer(firstName, lastName = \"\", rating = 1200) {\n    const player = {\n        /**\n         * @property {string} firstName The person's first name.\n         */\n        firstName: \"\",\n        /**\n         * @property {string} lastName The person's last name.\n         */\n        lastName: \"\",\n        /**\n         * @property {number} rating The person's Elo rating.\n         */\n        rating: 0,\n        /**\n         * @property {bool} dummy If true, this person won't count in certain\n         * scorings.\n         */\n        dummy: false,\n        /**\n         * @property {number} Ne Number of games the rating is based on.\n         */\n        Ne: 0,\n        /**\n         * Create an Elo calculator with an updated K-factor. See the `elo-rank`\n         * NPM package for more information.\n         * @param {object} tourney The current tournament.\n         * @returns {object} An `EloRank` object.\n         */\n        eloRank: function (tourney) {\n            const m = tourney.getMatchesByPlayer(player).length;\n            const K = 800 / (player.Ne + m);\n            return new EloRank(K);\n        }\n    };\n    if (typeof firstName === \"object\") {\n        Object.assign(player, firstName);\n    } else {\n        player.firstName = firstName;\n        player.lastName = lastName;\n        player.rating = rating;\n    }\n    return player;\n}\n\n/**\n * A stand-in for bye matches.\n * @constant {Player} DUMMYPLAYER\n */\nconst DUMMYPLAYER = Object.freeze(\n    createPlayer(\n        {\n            firstName: \"Dummy\",\n            dummy: true,\n            rating: 0\n        }\n    )\n);\n\nexport {DUMMYPLAYER, createPlayer};\n","import {DUMMYPLAYER} from \"./player\";\n\n/**\n * Update the ratings for a match based on their ratings when the match began\n * and the match result. See the `elo-rank` NPM package for more information.\n * @param {object} match The `match` object.\n * @returns {object} The `match` object.\n */\nfunction calcRatings(match) {\n    let whiteElo = match.players[0].eloRank(match.tourney);\n    let blackElo = match.players[1].eloRank(match.tourney);\n    const FLOOR = 100;\n    let scoreExpected = [\n        whiteElo.getExpected(match.origRating[0], match.origRating[1]),\n        blackElo.getExpected(match.origRating[1], match.origRating[0])\n    ];\n    match.newRating = [\n        whiteElo.updateRating(\n            scoreExpected[0],\n            match.result[0],\n            match.origRating[0]\n        ),\n        blackElo.updateRating(\n            scoreExpected[1],\n            match.result[1],\n            match.origRating[1]\n        )\n    ];\n    match.newRating = match.newRating.map(\n        (rating) => (\n            (rating < FLOOR)\n            ? FLOOR\n            : rating\n        )\n    );\n    match.players[0].rating = match.newRating[0];\n    match.players[1].rating = match.newRating[1];\n    return match;\n}\n\n/**\n * Create an object representing a match in a tournament.\n * @param {object} round The round containing the match.\n * @param {object} black The `player` object for white.\n * @param {object} white The `player` object for black.\n */\nfunction createMatch(round, white, black) {\n    const match = {\n        /**\n         * @property {object} round A link to the round containing this match.\n         */\n        round: round,\n        /**\n         * @property {object} tourney a link to the tournemnt containing this\n         * match.\n         */\n        tourney: round.tourney,\n        /**\n         * @property {string} warnings Any warnings about the match, e.g. if\n         * there was a pairing error.\n         */\n        warnings: null,\n        /**\n         * @property {array} players The pair of `Player` objects. White is at\n         * index `0` and black is at index `1`.\n         */\n        players: [white, black],\n        /**\n         * @property {array} result the scores for the match. A loss is `0`, a\n         * win is `1`, and a draw is `0.5`. White is at index `0` and black is\n         * at index `1`.\n         */\n        result: [0, 0],\n        /**\n         * @property {array} origRating the cached ratings from when the match\n         * began. White is at index `0` and black is at index `1`.\n         */\n        origRating: [white.rating, black.rating],\n        /**\n         * @property {array} newRating the updated ratings after the match ends.\n         * White is at index `0` and black is at index `1`.\n         */\n        newRating: [white.rating, black.rating],\n        /**\n         * Switch white and black.\n         * @returns {object} This `match` object.\n         */\n        reverse() {\n            match.players.reverse();\n            match.result.reverse();\n            match.origRating.reverse();\n            match.newRating.reverse();\n            return match;\n        },\n        /**\n         * Set black as the winner and updates ratings.\n         * @returns {object} This `match` object.\n         */\n        blackWon() {\n            match.result = [0, 1];\n            calcRatings(match);\n            return match;\n        },\n        /**\n         * Set white as the winner and updates ratings.\n         * @returns {object} This `match` object.\n         */\n        whiteWon() {\n            match.result = [1, 0];\n            calcRatings(match);\n            return match;\n        },\n        /**\n         * Set the result as a draw and updates ratings.\n         * @returns {object} This `match` object.\n         */\n        draw() {\n            match.result = [0.5, 0.5];\n            calcRatings(match);\n            return match;\n        },\n        /**\n         * Resets the score and the rating updates.\n         * @returns {object} This `match` object.\n         */\n        resetResult() {\n            match.result = [0, 0];\n            match.newRating = [...match.origRating];\n            match.players[0].rating = match.newRating[0];\n            match.players[1].rating = match.newRating[1];\n            return match;\n        },\n        /**\n         * Get whether or not the match is over.\n         * @returns {bool} `True` if complete, `false` if incomplete.\n         */\n        isComplete() {\n            return match.result[0] + match.result[1] !== 0;\n        },\n        /**\n         * Get whether this is a bye match.\n         * @returns {bool} `True` if it's a bye match, `false` if not.\n         */\n        isBye() {\n            return match.players.includes(DUMMYPLAYER);\n        },\n        /**\n         * Get all of the match data for a specific player color.\n         * @param {number} color `0` for white and `1` for black.\n         * @returns {object} A container for data: the `player` object,\n         * `result`, `origRating`, and `newRating`.\n         */\n        getColorInfo(color) {\n            return {\n                player: match.players[color],\n                result: match.result[color],\n                origRating: match.origRating[color],\n                newRating: match.newRating[color]\n            };\n        },\n        /**\n         * Get the color ID of a player.\n         * @param {object} player A `player` object.\n         * @returns {number} `0` for white, `1` for black, and `-1` if the\n         * player isn't found in the match.\n         */\n        getPlayerColor(player) {\n            return match.players.indexOf(player);\n        },\n        /**\n         * A shortcut for using `match.getPlayerColor()` and\n         * `match.getColorInfo()` together.\n         * @param {object} player A `player` object.\n         * @returns {object} See `matchGetPlayerColor()`.\n         */\n        getPlayerInfo(player) {\n            return match.getColorInfo(match.getPlayerColor(player));\n        },\n        /**\n         * A shortcut for `match.getColorInfo()` for white.\n         * @returns {object} See `match.getColorInfo()`\n         */\n        getWhite() {\n            return match.getColorInfo(0);\n        },\n        /**\n         * A shortcut for `match.getColorInfo()` for black.\n         * @returns {object} See `match.getColorInfo()`\n         */\n        getBlack() {\n            return match.getColorInfo(1);\n        }\n    };\n    // set bye rounds\n    if (match.players[0] === DUMMYPLAYER) {\n        match.result = [0, 1];\n    } else if (match.players[1] === DUMMYPLAYER) {\n        match.result = [1, 0];\n    }\n    return match;\n}\n\nexport default Object.freeze(createMatch);\n","/**\n * Create a roster object which manages a tournament's players.\n * @param {object} tourney The roster's tournament.\n * @param {array}  players A list of player objects.\n * @returns {object} The roster object.\n */\nfunction createRoster(tourney, players = []) {\n    const roster = {\n        /**\n         * @property {object} tourney A link to the tournemnt containing this\n         * match.\n         */\n        tourney: tourney,\n        /**\n         * @param {array} all A list of all of the players.\n         */\n        all: players,\n        /**\n         * @param {array} inactive A list of the players who won't be paired in\n         * future rounds.\n         */\n        inactive: [],\n        /**\n         * Get a list of players to be paired.\n         * @returns {array} A list of the active players.\n         */\n        getActive() {\n            return roster.all.filter((i) => !roster.inactive.includes(i));\n        },\n        /**\n         * Add a player to the roster.\n         * @param {object} player The player object to add.\n         * @returns {object} This roster object.\n         */\n        addPlayer(player) {\n            roster.all.push(player);\n            return roster;\n        },\n        /**\n         * Add a list of players to the roster.\n         * @param {array} players A list of players to add.\n         * @returns {object} This roster object.\n         */\n        addPlayers(players) {\n            roster.all = roster.all.concat(players);\n            return roster;\n        },\n        /**\n         * Remove a player from the active roster. This player won't be placed\n         * in future rounds.\n         * @param {object} player The player object.\n         * @returns {object} This roster object.\n         */\n        deactivatePlayer(player) {\n            roster.inactive.push(player);\n            return roster;\n        },\n        /**\n         * Move an inactive player to the active roster to be placed in future\n         * rounds.\n         * @param {object} player The player object.\n         * @returns {object} This roster object.\n         */\n        activatePlayer(player) {\n            roster.inactive.splice(roster.inactive.indexOf(player), 1);\n            return roster;\n        },\n        /**\n         * Remove a player from the roster completely.\n         * @param {object} player The player object.\n         * @returns {object} This roster object.\n         */\n        removePlayer(player) {\n            if (roster.tourney.getMatchesByPlayer(player).length > 0) {\n                return null; // TODO: add a helpful error message\n            }\n            delete roster.all[roster.all.indexOf(player)];\n            return roster;\n        }\n    };\n    return roster;\n}\n\nexport default Object.freeze(createRoster);","import * as scores from \"./scores\";\nimport config from \"./defaultConfig.json\";\nconsole.log(scores);\n/**\n * `tieBreak` is Used for tiebreaks. USCF recommends using these methods\n * in-order: modified median, solkoff, cumulative, and cumulative of opposition.\n * */\nconfig.tieBreak.forEach(function (method) {\n    // Dumb question... does assigning functions like this harm security?\n    method.func = scores[method.funcName];\n});\n\nexport default Object.freeze(config);","import {firstBy} from \"thenby\";\nimport config from \"./config\";\nimport {DUMMYPLAYER} from \"./player\";\n/**\n * Get a list of all of a player's scores from each match.\n * @param {Player} player\n * @returns {array} the list of scores\n */\nfunction playerScoreList(tourney, player, roundId = null) {\n    return tourney.getMatchesByPlayer(player, roundId).map(\n        (match) => match.result[match.players.indexOf(player)]\n    );\n}\n\n// Maybe merge this with the other function?\nfunction playerScoreListNoByes(tourney, player, roundId = null) {\n    return tourney.getMatchesByPlayer(\n        player,\n        roundId\n    ).filter(\n        (match) => !match.isBye()\n    ).map(\n        (match) => match.result[match.players.indexOf(player)]\n    );\n}\n\n/**\n * Get the total score of a player after a given round.\n * @param {Player} player\n * @param {number} roundId\n */\nfunction playerScore(tourney, player, roundId = null) {\n    var score = 0;\n    var scoreList = playerScoreList(tourney, player, roundId);\n    if (scoreList.length > 0) {\n        score = scoreList.reduce((a, b) => a + b);\n    }\n    return score;\n}\n\n/**\n * Get the cumulative score of a player\n * @param {Player} player\n * @param {number} roundId\n */\nfunction playerScoreCum(tourney, player, roundId = null) {\n    var runningScore = 0;\n    var cumScores = [];\n    var scores = playerScoreListNoByes(tourney, player, roundId);\n    scores.forEach(function (score) {\n        runningScore += score;\n        cumScores.push(runningScore);\n    });\n    var totalScore = 0;\n    if (cumScores.length !== 0) {\n        totalScore = cumScores.reduce((a, b) => a + b);\n    }\n    return totalScore;\n}\n\n/**\n * Calculate a player's color balance\n * @param {Player} player\n * @param {Int}    round The ID of the highest round to consider\n * @returns {Int} A negative number means they played as black more. A positive\n * number means they played as white more.\n */\nfunction playerColorBalance(tourney, player, roundId = null) {\n    var color = 0;\n    tourney.getMatchesByPlayer(player, roundId).filter(\n        (match) => !match.isBye()\n    ).forEach(\n        function (match) {\n            if (match.players[0] === player) {\n                color += 1;\n            } else if (match.players[1] === player) {\n                color += -1;\n            }\n        }\n    );\n    return color;\n}\n\n/**\n * Gets the modified median factor defined in USCF § 34E1\n * @param {Player} player\n * @param {number} roundId\n */\nfunction modifiedMedian(tourney, player, roundId = null, solkoff = false) {\n    // get all of the opponent's scores\n    var scores = tourney.getPlayersByOpponent(\n        player,\n        roundId\n    ).filter(\n        (opponent) => opponent !== DUMMYPLAYER\n    ).map(\n        (opponent) => playerScore(tourney, opponent, roundId)\n    );\n    //sort them, then remove the first and last items\n    scores.sort();\n    if (!solkoff) {\n        scores.pop();\n        scores.shift();\n    }\n    var finalScore = 0;\n    if (scores.length > 0) {\n        finalScore = scores.reduce((a, b) => a + b);\n    }\n    return finalScore;\n}\n\n/**\n * A shortcut for passing the `solkoff` variable to `modifiedMedian`.\n * @param {Player} player\n * @param {number} roundId\n */\nfunction solkoff(tourney, player, roundId = null) {\n    return modifiedMedian(tourney, player, roundId, true);\n}\n\nfunction playerOppScoreCum(tourney, player, roundId = null) {\n    const opponents = tourney.getPlayersByOpponent(\n        player,\n        roundId\n    ).filter(\n        (opponent) => opponent !== DUMMYPLAYER\n    );\n    var oppScores = opponents.map((p) => playerScoreCum(tourney, p, roundId));\n    var score = 0;\n    if (oppScores.length !== 0) {\n        score = oppScores.reduce((a, b) => a + b);\n    }\n    return score;\n}\n\nfunction areScoresEqual(player1, player2) {\n    const scoreTypes = Object.getOwnPropertyNames(player1);\n    var areEqual = true;\n    scoreTypes.forEach(function (score) {\n        if (score !== \"player\" && player1[score] !== player2[score]) {\n            areEqual = false;\n        }\n    });\n    return areEqual;\n}\n\n/**\n * Sort the standings by score, see USCF tie-break rules from § 34.\n * @param {number} roundId\n * @returns {Array} The sorted list of players\n */\nfunction calcStandings(tourney, roundId = null) {\n    const tieBreaks = config.tieBreak.filter((m) => m.active);\n    const standingsFlat = tourney.roster.all.map(function (player) {\n        var standing = {\n            player: player,\n            score: playerScore(tourney, player, roundId)\n        };\n        tieBreaks.forEach(function (method) {\n            standing[method.func.name] = method.func(tourney, player, roundId);\n        });\n        return standing;\n    });\n    var sortFunc = firstBy((player) => player.score, -1);\n    tieBreaks.forEach(function (method) {\n        sortFunc = sortFunc.thenBy((player) => player[method.func.name], -1);\n    });\n    standingsFlat.sort(sortFunc);\n    const standingsTree = [];\n    var runningRank = 0;\n    standingsFlat.forEach(function (player, i, sf) {\n        if (i !== 0) { // we can't compare the first player with a previous one\n            const prevPlayer = sf[i - 1];\n            if (!areScoresEqual(player, prevPlayer)) {\n                runningRank += 1;\n            }\n        }\n        if (!standingsTree[runningRank]) {\n            standingsTree[runningRank] = [];\n        }\n        standingsTree[runningRank].push(player);\n    });\n    return standingsTree;\n}\n\nexport {\n    calcStandings,\n    modifiedMedian,\n    playerColorBalance,\n    playerOppScoreCum,\n    playerScore,\n    playerScoreCum,\n    playerScoreList,\n    solkoff\n};\n","import {DUMMYPLAYER} from \"./player\";\nimport createMatch from \"./match\";\nimport {playerColorBalance, playerScore} from \"./scores\";\nimport {chain, flatten, zip} from \"lodash\";\nimport {firstBy} from \"thenby\";\n\n/**\n * Find a match for a given player.\n * @param     {Player} player1    The player to be paired\n * @param     {Array}    pool            The pool of available players\n * @param     {Array}    blackList A blacklist of players, possibly in the pool,\n * who should not be paired\n * @returns {Array}    The paired player and the Match object. Both will be\n * undefined if no match was made.\n */\nfunction findAMatch(round, matches, player1, pool, blackList = []) {\n    /**\n     * Try to pair the player as the opposite color as their last round.\n     * (USCF § 27A4 and § 27A5)\n     */\n    var lastColor = round.prevRound.playerColor(player1);\n    var hasntPlayed = pool\n        // Filter anyone on the blacklist (e.g. past opponents [USCF § 27A1])\n        .filter((p2) => !blackList.includes(p2))\n        // Don\"t pair players with themselves\n        .filter((p2) => p2 !== player1)\n        // Don\"t pair anyone who's already been paired\n        .filter((p2) => !flatten(matches.map(\n            (m) => m.players)).includes(p2)\n        );\n    /**\n     * Prioritize opponents who played that color for *their* last round.\n     * (USCF § 27A4 and § 27A5)\n     */\n    var oppColor = pool\n        .filter((p2) => lastColor !== round.prevRound.playerColor(p2));\n    var player2 = hasntPlayed\n        .filter((p2) => oppColor.includes(p2))[0] || hasntPlayed[0];\n    var newMatch;\n    if (player2) {\n        newMatch = createMatch(round, player1, player2);\n        if (playerColorBalance(round.tourney, player1)\n            > playerColorBalance(round.tourney, player2)) {\n            newMatch.reverse();\n        }\n    }\n    return [player2, newMatch];\n}\n\n/**\n * Pair the players\n */\nfunction pairPlayers(round) {\n    const matches = [];\n    const tourney = round.tourney;\n    /**\n     * Part 1: Split players into separate groups based on their scores\n     * (USCF § 27A2)\n     * Tree structure:\n     * {\n     *    score: [list of players],\n     *    ...\n     * }\n     */\n    round.roster.forEach(function (player) {\n        var score = playerScore(tourney, player, round.id);\n        if(round.playerTree[score] === undefined) {\n            round.playerTree[score] = [];\n        }\n        round.playerTree[score].push(player);\n    });\n    /**\n     * Part 2: Split each score group into an upper half and a lower half,\n     * based on rating (USCF § 27A3)\n     * Tree structure:\n     * {\n     *    score: [\n     *        [upper half list of players],\n     *        [lower half list of players]\n     *    ],\n     *    ...\n     * }\n     */\n    /**\n     * Extracts the scores and sorts them from highest to lowest.\n     * @param {object} tree\n     * @returns {array} The sorted scores.\n     */\n    function getScores(tree) {\n        var scores = Object.keys(tree);\n        scores.sort((a, b) => Number(b) - Number(a));\n        return scores;\n    }\n    getScores(round.playerTree).forEach(function (score, i, list) {\n        var players = round.playerTree[score];\n        // TODO: Debug this sort order soon...\n        players.sort(\n            firstBy((p) => playerScore(tourney, p, round.id), -1)\n            .thenBy((p) => p.rating, -1)\n        );\n        /**\n         * If there\"s an odd number of players in this score group,\n         */\n        if (players.length % 2 !== 0) {\n            /**\n             * ...and if there\"s an odd number of players in the total round,\n             * then add a dummy player.\n             */\n            if (round.roster.length % 2 !== 0 && !round.hasDummy) {\n                players.push(DUMMYPLAYER);\n                round.hasDummy = true;\n            /**\n             * But if there\"s an even number of players in the total round, then\n             * just move a player to the next score group.\n             */\n            } else {\n                var oddPlayer = players[players.length - 1];\n                players.splice(players.length - 1, 1);\n                // the group to move the player to\n                var newGroup = list[i + 1];\n                if(round.playerTree[newGroup] === undefined) {\n                    round.playerTree[newGroup] = [];\n                }\n                round.playerTree[newGroup].push(oddPlayer);\n            }\n        }\n        /**\n         * If there are no players in this group (e.g. a lone player got pushed\n         * to another group) then delete the key.\n         */\n        if (players.length === 0) {\n            delete round.playerTree[score];\n        } else {\n            round.playerTree[score] = chain(players)\n            .chunk(players.length / 2)\n            .value();\n        }\n    });\n    getScores(round.playerTree).forEach(function (score) {\n        // name the upperHalf and lowerHalf to make the code easier to read\n        var upperHalf = round.playerTree[score][0];\n        var lowerHalf = round.playerTree[score][1];\n        /**\n         * If there was no previous round, zip the players and call it a day.\n         */\n        if (round.prevRound === undefined) {\n            zip(upperHalf, lowerHalf)\n                .forEach((match) =>\n                    matches.push(createMatch(round, ...match))\n                );\n        } else {\n            /**\n             * If there was a previous round, then things get complicated....\n             * 1. Record each upper-half player\"s opponent history\n             * 2. Iterate through each upper-half player to find an opponent in\n             *    the lower half\n             * 3. Attempt to match with a lower-half opponent who isn\"t in their\n             *    history yet AND who is in the history of other upper-half\n             *    players. The second part helps eliminate a small percentage of\n             *    history overlap. (USCF § 27A1 - highest priority rule)\n             * 4. If no opponent was found, try again but don\"t consider the\n             *    history of other upper-half players.\n             * 5. If still no opponent was found, just pick whoever is left in\n             *    the lower half, even if they\"ve played each other before.\n             * 6. If they have played each other before, attempt to swap\n             *    opponents with another upper-half player.\n             *\n             * This code is certainly not the most reliable or the most\n             * efficient. Changes will be needed.\n             */\n            /**\n             * 1.\n             * @var {Array} upperHalfHistory Each index matches the player\"s\n             * indexin upperHalf. Each sub-array is a list of their opponents.\n             */\n            var upperHalfHistory = upperHalf.map((p) =>\n                // merge the upperHalf and lowerHalf\n                [].concat(lowerHalf).concat(upperHalf)\n                    .filter((p2) =>\n                    // filter the players who have played this player\n                    tourney.getPlayersByOpponent(p2).includes(p)\n                    )\n            );\n            /**\n             * 2.\n             */\n            upperHalf.forEach(function (player1) {\n                var player2;\n                var match;\n                var history = upperHalfHistory[upperHalf.indexOf(player1)];\n                var othersHistory = flatten(upperHalfHistory\n                    .slice(upperHalf.indexOf(player1))\n                );\n                /**\n                 * 3.\n                 */\n                [player2, match] = findAMatch(\n                    round,\n                    matches,\n                    player1,\n                    lowerHalf.filter((x) =>\n                        othersHistory.includes(x)), history\n                );\n                /**\n                 * 4.\n                 */\n                if (!player2) {\n                    [player2, match] = findAMatch(\n                        round, matches, player1, lowerHalf, history\n                    );\n                }\n                /**\n                 * 5.\n                 */\n                if (!player2) {\n                    [player2, match] = findAMatch(\n                        round, matches, player1, lowerHalf, []\n                    );\n                }\n                /**\n                 * 6.\n                 */\n                if (history.includes(player2)) {\n                    var foundASwap = false;\n                    upperHalf.filter((p) => p !== player1).forEach(function (otherPlayer) {\n                        if(!foundASwap) {\n                            var otherMatch = matches\n                                .filter((m) => m.players.includes(otherPlayer))[0];\n                            if(otherMatch) {\n                                var otherPlayer2 = otherMatch.players\n                                    .filter((p) => p !== otherPlayer)[0];\n                                var otherHistory = upperHalfHistory[upperHalf\n                                    .indexOf(otherPlayer)];\n                                if (!history.includes(otherPlayer2)\n                                        && !otherHistory.includes(player2)) {\n                                    match.players = [player1, otherPlayer2];\n                                    otherMatch.players = [otherPlayer, player2];\n                                    foundASwap = true;\n                                }\n                            }\n                        }\n                    });\n                }\n                /**\n                 * check for matching errors.\n                 */\n                if (tourney.getPlayersByOpponent(player1).includes(player2)) {\n                    match.warnings = player1.firstName+ \" has played \"\n                        + player2.firstName + \" previously.\";\n                }\n                matches.push(match);\n            });\n        }\n    });\n    return matches;\n}\n\n/**\n * Represents a round in a tournament.\n */\nfunction createRound(tourney, id, prevRound, players) {\n    const round = {\n        id: id,\n        tourney: tourney,\n        roster: players,\n        prevRound: prevRound,\n        playerTree: {},\n        matches: [],\n        hasDummy: false,\n        isComplete: function() {\n            return !round.matches.map((m) => m.isComplete()).includes(false);\n        },\n        getMatchByPlayer: function (player) {\n            var theMatch = null;\n            round.matches.forEach(function (match) {\n                if (match.players.includes(player)) {\n                    theMatch = match;\n                }\n            });\n            return theMatch;\n        },\n        playerColor: function (player) {\n            var color = -1;\n            round.matches.forEach(function (match) {\n                if (match.players.includes(player)) {\n                    color = match.players.indexOf(player);\n                }\n            });\n            return color;\n        },\n        addPlayer: function(player) {\n            round.players.push(player);\n            return round;\n        }\n    };\n    round.matches = pairPlayers(round);\n    return round;\n}\n\nexport default Object.freeze(createRound);","import createRoster from \"./roster\";\nimport createRound from \"./round\";\nimport {last, times} from \"lodash\";\n\nfunction createTournament(name = \"\", playerList = []) {\n    const tourney = {\n        name: name,\n        roundList: [],\n        byeValue: 1,\n        isNewRoundReady: function () {\n            var isReady = false;\n            if (tourney.roundList.length > 0) {\n                isReady = last(tourney.roundList).isComplete();\n            } else {\n                isReady = (tourney.roster.all.length > 0);\n            }\n            return isReady;\n        },\n        getMatchesByPlayer: function (player, roundId = null) {\n            if (roundId === null) {\n                roundId = tourney.roundList.length;\n            }\n            var matches = [];\n            times(roundId + 1, function (i) {\n                if (tourney.roundList[i] !== undefined) {\n                    tourney.roundList[i].matches.forEach(function (match) {\n                        if (match.players.indexOf(player) !== -1) {\n                            matches.push(match);\n                        }\n                    });\n                }\n            });\n            return matches;\n        },\n        getPlayersByOpponent: function (opponent, roundId = null) {\n            var players = [];\n            tourney.getMatchesByPlayer(opponent, roundId).forEach(\n                function (match) {\n                    players = players.concat(\n                        match.players.filter(\n                            (player) => player !== opponent\n                        )\n                    );\n                }\n            );\n            return players;\n        },\n        getNumOfRounds: function () {\n            var roundId = Math.ceil(\n                Math.log2(tourney.roster.getActive().length)\n            );\n            if (roundId === -Infinity) {\n                roundId = 0;\n            }\n            return roundId;\n        },\n        newRound: function () {\n            if (!tourney.isNewRoundReady()) {\n                return false;\n            }\n            var newRound = createRound(\n                tourney,\n                tourney.roundList.length,\n                last(tourney.roundList),\n                tourney.roster.getActive()\n            );\n            tourney.roundList.push(newRound);\n            return newRound;\n        }\n    };\n    tourney.roster = createRoster(tourney, playerList);\n    return tourney;\n}\n\nexport default Object.freeze(createTournament);\n","const demoPlayers = [\n    {firstName: \"Matthew\", lastName: \"A\", rating: 800},\n    {firstName: \"Mark\", lastName: \"B\", rating: 850},\n    {firstName: \"Luke\", lastname: \"C\", rating: 900},\n    {firstName: \"John\", lastname: \"D\", rating: 950},\n    {firstName: \"Simon\", lastname: \"E\", rating: 1000},\n    {firstName: \"Andrew\", lastname: \"F\", rating: 1050},\n    {firstName: \"James\", lastname: \"G\", rating: 1100},\n    {firstName: \"Philip\", lastname: \"H\", rating: 1150},\n    {firstName: \"Bartholomew\", lastname: \"I\", rating: 1200},\n    {firstName: \"Thomas\", lastname: \"J\", rating: 1250},\n    {firstName: \"Catherine\", lastname: \"K\", rating: 1300},\n    {firstName: \"Clare\", lastname: \"L\", rating: 1350},\n    {firstName: \"Judas\", lastname: \"M\", rating: 1400},\n    {firstName: \"Matthias\", lastname: \"N\", rating: 1450},\n    {firstName: \"Paul\", lastname: \"O\", rating: 1500},\n    {firstName: \"Mary\", lastname: \"P\", rating: 1600},\n    {firstName: \"Theresa\", lastname: \"Q\", rating: 1650},\n    {firstName: \"Megan\", lastname: \"R\", rating: 1700},\n    {firstName: \"Elizabeth\", lastname: \"S\", rating: 1750}\n];\n\nexport default Object.freeze(demoPlayers);","import React, { useState } from 'react';\nimport {createPlayer, scores, config} from './chess-tourney';\nimport demoRoster from './demo-players';\n\nfunction MainRoster ({tourney}) {\n  const [roster, setRoster] = useState(tourney.roster.all);\n  const [demoLoaded, setDemoLoaded] = useState(false);\n  const newPlayer = {firstName: '', lastName: '', rating: 1200};\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    tourney.roster.addPlayer(\n        createPlayer(\n            newPlayer['firstName'],\n            newPlayer['lastName'],\n            newPlayer['rating']\n        )\n    );\n    setRoster([].concat(tourney.roster.all));\n  }\n  const updateField = (event) => {\n    newPlayer[event.target.name] = event.target.value;\n  }\n  const loadDemo = () => {\n    var players = demoRoster.slice(0,16).map(p => createPlayer(p));\n    tourney.roster.addPlayers(players);\n    setDemoLoaded(true);\n    setRoster([].concat(tourney.roster.all));\n  }\n  const deactivatePlayer = (player) => {\n    var baleted = tourney.roster.removePlayer(player);\n    if (!baleted) {\n      tourney.roster.deactivatePlayer(player);\n    }\n    setRoster([].concat(tourney.roster.all));\n  }\n  const activatePlayer = (player) => {\n    tourney.roster.activatePlayer(player);\n    setRoster([].concat(tourney.roster.all));\n  }\n  var rosterTable = '';\n  if (roster.length > 0) {\n    rosterTable = \n    <table><caption>Roster</caption>\n      <thead>\n        <tr>\n          <th>First name</th>\n          <th>Rating</th>\n          <th>Rounds played</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        { roster.map((player, i) =>\n          <tr key={i} \n            className={tourney.roster.inactive.includes(player) ? 'inactive' : 'active'}>\n            <td className=\"table__player\">{player.firstName}</td>\n            <td className=\"table__number\">{player.rating}</td>\n            <td className=\"table__number\">\n              {tourney.getMatchesByPlayer(player).length}\n            </td>\n            <td>\n            {tourney.roster.inactive.includes(player)\n              ? <button onClick={() => activatePlayer(player)}>Activate</button>\n              : <button onClick={() => deactivatePlayer(player)}>x</button>\n            }\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  }\n  return (\n    <div className=\"roster\">\n      {rosterTable}\n      <p>\n        <button disabled={demoLoaded} onClick={loadDemo}>Load a demo roster</button>\n      </p>\n      <p>\n        Or add your own players:\n      </p>\n      <form onSubmit={handleSubmit}>\n        <p>\n            <label>\n            First name&nbsp;\n            <input type=\"text\" name=\"firstName\" onChange={updateField} required />\n            </label>\n        </p>\n        <p>\n            <label>\n            Last name&nbsp;\n            <input type=\"text\" name=\"lastName\" onChange={updateField} required />\n            </label>\n        </p>\n        <p>\n            <label>\n            Rating&nbsp;\n            <input type=\"number\" name=\"rating\" onChange={updateField} value=\"1200\" />\n            </label>\n        </p>\n        <input type=\"submit\" value=\"Add\"/>\n      </form>\n      <p className=\"center\">Total rounds: {tourney.getNumOfRounds()}</p>\n    </div>\n  );\n}\n\nfunction Round ({tourney, roundId}) {\n    /**\n     * Be careful when using the `setState` `matches` and the API's `matches`.\n     * They have to mirror each other but can't be the same objects.\n     */\n    const round = tourney.roundList[roundId];\n    const [matches, setMatches] = useState(round.matches.map(o => Object.assign({}, o)));\n    const setWinner = (color, index, event) => {\n        let origMatch = round.matches[index];\n        if(event.target.checked) {\n        if(color === 0) {\n            origMatch.whiteWon();\n        } else if (color === 1) {\n            origMatch.blackWon();\n        } else if (color === 0.5) {\n            origMatch.draw();\n        }\n        } else {\n        origMatch.resetResult();\n        }\n        // matches[index] = match;\n        setMatches(round.matches.map(o => Object.assign({}, o)));\n    }\n    const randomize = () => {\n        matches.forEach((match, i) => {\n            let origMatch = round.matches[i];\n            if (origMatch.isBye()) {\n                return;\n            }\n            let rando = Math.random();\n            if (rando >= 0.55) {\n                origMatch.whiteWon();\n            } else if (rando >= .1) {\n                origMatch.blackWon();\n            } else {\n                origMatch.draw();\n            }\n        });\n        setMatches(round.matches.map(o => Object.assign({}, o)));\n    }\n    return (\n        <div className=\"round\">\n            <table className=\"table__roster\">\n                <caption>Round {round.id + 1} results</caption>\n                <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Won</th>\n                    <th>White</th>\n                    <th>Draw</th>\n                    <th>Black</th>\n                    <th>Won</th>\n                    <th></th>\n                </tr>\n                </thead>\n                <tbody>\n                {matches.map((match, i) =>\n                    <RoundMatch\n                        key={i}\n                        tourney={tourney}\n                        roundId={roundId}\n                        matchId={i}\n                        setWinner={setWinner} />\n                )}\n                </tbody>\n            </table>\n            <p style={{textAlign: 'center'}}>\n                <button onClick={randomize}>Random!</button>\n            </p>\n            <Standings roundId={round.id} tourney={round.tourney} />\n        </div>\n    );\n}\n\nfunction RoundMatch({tourney, roundId, matchId, setWinner}) {\n    const round = tourney.roundList[roundId];\n    const match = round.matches[matchId];\n    const [openCards, setCards] = useState([[]]);\n    const isCardOpen = (id) => {\n        if(openCards[roundId] === undefined) {\n            return false;\n        } else {\n            return openCards[roundId].includes(id);\n        }\n    };\n    const togglePlayerCard = (id) => {\n        var newCards = [...openCards];\n        if (newCards[roundId] === undefined) {\n            newCards[roundId] = [];\n        }\n        if (newCards[roundId].includes(id)) {\n            newCards[roundId] = newCards[roundId].filter(i => i !== id)\n            setCards(newCards);\n        } else {\n            newCards[roundId] = newCards[roundId].concat([id])\n            setCards(newCards);\n        }\n    };\n    return (\n        <tr className={match.isBye() ? 'inactive' : ''}>\n            <td className=\"table__number\">{matchId + 1}</td>\n            <td>\n                <input \n                type=\"checkbox\"\n                checked={match.getWhite().result === 1}\n                disabled={match.isBye()}\n                onChange={(event) => setWinner(0, matchId, event)} />\n            </td>\n            <td className=\"table__player\">\n                {match.getWhite().player.firstName}\n                {isCardOpen(matchId) && \n                <PlayerCard\n                    tourney={tourney}\n                    round={round}\n                    player={match.getWhite().player} />\n                }\n            </td>\n            <td>\n                <input \n                    type=\"checkbox\"\n                    checked={match.getWhite().result === 0.5}\n                    disabled={match.isBye()}\n                    onChange={(event) => setWinner(0.5, matchId, event)} />\n            </td>\n            <td className=\"table__player\">\n                {match.getBlack().player.firstName}\n                {isCardOpen(matchId) && \n                <PlayerCard\n                    tourney={tourney}\n                    round={round}\n                    player={match.getBlack().player} />\n                }\n            </td>\n            <td>\n                <input \n                    type=\"checkbox\"\n                    checked={match.getBlack().result === 1}\n                    disabled={match.isBye()}\n                    onChange={(event) => setWinner(1, matchId, event)} />\n            </td>\n            <td>\n                <button onClick={() => togglePlayerCard(matchId)}>?</button>\n                {match.warnings}\n            </td>\n        </tr>\n    );\n}\n\nfunction PlayerCard({tourney, round, player}) {\n    var ratingChange = (\n        round.getMatchByPlayer(player).getPlayerInfo(player).newRating\n        - round.getMatchByPlayer(player).getPlayerInfo(player).origRating\n    );\n    if (ratingChange > -1) {\n        ratingChange = \"+\" + ratingChange\n    }\n    const colorBalance = scores.playerColorBalance(tourney, player, round.id);\n    var color = 'Even';\n    if (colorBalance > 0) {\n        color = 'White +' + colorBalance;\n    } else if (colorBalance < 0) {\n        color = 'Black +' + Math.abs(colorBalance);\n    }\n    return (\n        <dl className=\"player-card\">\n        <dt>Score</dt>\n        <dd>{scores.playerScore(tourney, player, round.id)}</dd>\n        <dt>Rating</dt>\n        <dd>\n            {round.getMatchByPlayer(player).getPlayerInfo(player).origRating}\n            &nbsp;({ratingChange})\n        </dd>\n        <dt>Color balance</dt>\n        <dd>{color}</dd>\n        <dt>Opponent history</dt>\n        <dd>\n            <ol>\n            {tourney.getPlayersByOpponent(player, round.id).map((opponent, i) =>\n                <li key={i}>\n                {opponent.firstName}\n                </li>  \n            )}\n            </ol>\n        </dd>\n        </dl>\n    );\n}\n\nfunction Standings({tourney, roundId}) {\n  return (\n    <table key={roundId}>\n      <caption>Current Standings</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th>First name</th>\n          <th>Score</th>\n          {config.tieBreak.filter((m) => m.active).map((method, i) =>\n              <th key={i}>{method.name}</th>\n          )}\n        </tr>\n      </thead>\n      {scores.calcStandings(tourney, roundId).map((rank, i) => \n        <tbody key={i}>\n          {rank.map((player, j) => \n            <tr key={j}>\n                <td>{i + 1}</td>\n                <td>{player.player.firstName}</td>\n                <td className=\"table__number\">{player.score}</td>\n                {config.tieBreak.filter((m) => m.active).map((method, i) =>\n                    <td className=\"table__number\" key={i}>\n                        {player[method.func.name]}\n                    </td>\n                )}\n            </tr>\n            )}\n        </tbody>\n      )}\n    </table>\n  );\n}\n\nexport {MainRoster, Round, Standings};","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {createTournament} from \"./chess-tourney\";\nimport {MainRoster, Round} from \"./chess-tourney.jsx.js\";\n\nconst cvlTourney = createTournament(\"CVL Winter Open\");\n\nfunction App() {\n  const newRound = (event) => {\n    var round = cvlTourney.newRound();\n    if (!round) {\n      alert(\"Either add players or complete the current matches first.\");\n      return;\n    }\n    tabList.push(\n      {\n        name: \"Round \" + (round.id + 1),\n        contents: <Round tourney={cvlTourney} roundId={round.id} />\n      }\n    );\n    setTabList([].concat(tabList));\n    setCurrentTab(tabList[tabList.length - 1])\n  }\n  const [tabList, setTabList] = useState(\n    [\n      {\n        name: \"Roster\",\n        contents: <MainRoster tourney={cvlTourney} />\n      }\n    ]\n  );\n  const [currentTab, setCurrentTab] = useState(tabList[0]);\n  return (\n    <div className=\"tournament\">\n      <nav className=\"tabbar\">\n        <ul>\n          {tabList.map((tab, i) => \n            <li key={i}>\n              <button\n                className=\"tab\"\n                onClick={() => setCurrentTab(tab)}\n                disabled={currentTab === tab}\n                >\n                {tab.name}\n              </button>\n            </li>\n          )}\n          <li>\n            <button \n              className=\"tab new_round\"\n              onClick={newRound}\n              >\n              New Round\n            </button>\n          </li>\n        </ul>\n      </nav>\n      <h1>Chessahoochee: a chess tournament app</h1>\n      {currentTab.contents}\n    </div>\n  );\n}\n\nfunction Caution() {\n    return (\n        <p>\n            <span role=\"img\" aria-label=\"waving hand\">👋</span>&nbsp;\n            This is an unstable demo build!\n            Want to help make it better? Head to the&nbsp;\n            <span role=\"img\" aria-label=\"finger pointing right\">👉</span>&nbsp;\n            <a href=\"https://github.com/johnridesabike/chessahoochee\">Git repository</a>.\n        </p>\n    );\n}\n\nexport {App, Caution};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App, Caution} from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nReactDOM.render(<Caution />, document.getElementById(\"caution\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}