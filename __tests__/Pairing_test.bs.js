// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/bs-jest/src/jest.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Data$Coronate from "../src/Data.bs.js";
import * as Pairing$Coronate from "../src/Pairing.bs.js";
import * as TestData$Coronate from "../src/TestData.bs.js";
import * as Converters$Coronate from "../src/Converters.bs.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function loadPairData(tourneyId) {
  var tournament = TestData$Coronate.tournaments[tourneyId];
  var playerIds = tournament[/* playerIds */4];
  var roundList = tournament[/* roundList */5];
  var players = { };
  Js_dict.values(TestData$Coronate.players).forEach((function (player) {
          if (playerIds.includes(player[/* id */1])) {
            players[player[/* id */1]] = player;
            return /* () */0;
          } else {
            return 0;
          }
        }));
  return Pairing$Coronate.setUpperHalves(Converters$Coronate.createPairingData(players, TestData$Coronate.options[/* avoidPairs */0], Converters$Coronate.matches2ScoreData(Data$Coronate.rounds2Matches(roundList, undefined, /* () */0))));
}

Jest.test("Players have 0 priority of pairing themselves.", (function (param) {
        var pairData = loadPairData("Bye_Round_Tourney____");
        var newb = pairData["Newbie_McNewberson___"];
        var ideal = Pairing$Coronate.calcPairIdeal(newb, newb);
        return Jest.Expect[/* toBe */2](0.0, Jest.Expect[/* expect */0](ideal));
      }));

Jest.describe("The lowest-ranking player is automatically picked for byes.", (function (param) {
        var dataPreBye = loadPairData("Bye_Round_Tourney____");
        var match = Pairing$Coronate.setByePlayer(/* array */[], Data$Coronate.dummy_id, dataPreBye);
        var byedPlayer = match[1];
        var pairData = match[0];
        Jest.test("The lowest-ranking player is removed after bye selection.", (function (param) {
                return Jest.Expect[/* toContain */10]("Newbie_McNewberson___", Jest.Expect[/* not_ */23](Jest.Expect[/* expect */0](Object.keys(pairData))));
              }));
        return Jest.test("The lowest-ranking player is returned", (function (param) {
                      if (byedPlayer !== undefined) {
                        return Jest.Expect[/* toBe */2]("Newbie_McNewberson___", Jest.Expect[/* expect */0](byedPlayer[/* id */0]));
                      } else {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "Pairing_test.re",
                                43,
                                14
                              ]
                            ];
                      }
                    }));
      }));

Jest.test("The bye signup queue works", (function (param) {
        var dataPreBye = loadPairData("Bye_Round_Tourney_2__");
        var byeQueue = /* array */[
          "Newbie_McNewberson___",
          "Joel_Robinson________"
        ];
        var match = Pairing$Coronate.setByePlayer(byeQueue, Data$Coronate.dummy_id, dataPreBye);
        var byedPlayer = match[1];
        if (byedPlayer !== undefined) {
          return Jest.Expect[/* toBe */2]("Joel_Robinson________", Jest.Expect[/* expect */0](byedPlayer[/* id */0]));
        } else {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "Pairing_test.re",
                  56,
                  12
                ]
              ];
        }
      }));

Jest.test("If all player have (impossibly) played a bye round, the lowest-rated player is picked", (function (param) {
        var dataPreBye = loadPairData("Bye_Tourney_3________");
        var match = Pairing$Coronate.setByePlayer(/* array */[], Data$Coronate.dummy_id, dataPreBye);
        var byedPlayer = match[1];
        if (byedPlayer !== undefined) {
          return Jest.Expect[/* toBe */2]("Newbie_McNewberson___", Jest.Expect[/* expect */0](byedPlayer[/* id */0]));
        } else {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "Pairing_test.re",
                  67,
                  14
                ]
              ];
        }
      }));

Jest.test("Players are paired correctly in a simple scenario.", (function (param) {
        var pairData = loadPairData("Simple_Pairing_______");
        var matches = Pairing$Coronate.pairPlayers(pairData);
        return Jest.ExpectJs[/* toEqual */12](/* array */[
                    /* tuple */[
                      "Grandy_McMaster______",
                      "Gypsy________________"
                    ],
                    /* tuple */[
                      "Dr_Clayton_Forrester_",
                      "Newbie_McNewberson___"
                    ],
                    /* tuple */[
                      "Joel_Robinson________",
                      "Crow_T_Robot_________"
                    ],
                    /* tuple */[
                      "Tom_Servo____________",
                      "TVs_Frank____________"
                    ]
                  ], Jest.Expect[/* expect */0](matches));
      }));

Jest.test("Players are paired correctly after a draw.", (function (param) {
        var pairData = loadPairData("Pairing_With_Draws___");
        var matches = Pairing$Coronate.pairPlayers(pairData);
        return Jest.Expect[/* toEqual */12](/* array */[
                    /* tuple */[
                      "Grandy_McMaster______",
                      "Gypsy________________"
                    ],
                    /* tuple */[
                      "Dr_Clayton_Forrester_",
                      "Newbie_McNewberson___"
                    ],
                    /* tuple */[
                      "Tom_Servo____________",
                      "TVs_Frank____________"
                    ],
                    /* tuple */[
                      "Joel_Robinson________",
                      "Crow_T_Robot_________"
                    ]
                  ], Jest.Expect[/* expect */0](matches));
      }));

export {
  loadPairData ,
  
}
/*  Not a pure module */
