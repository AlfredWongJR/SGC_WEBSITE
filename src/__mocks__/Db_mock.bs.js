// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Set from "bs-platform/lib/es6/belt_Set.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as DemoData$Coronate from "../DemoData.bs.js";
import * as TestData$Coronate from "../TestData.bs.js";
import * as Data_Config$Coronate from "../Data/Data_Config.bs.js";

var configData_avoidPairs = Belt_Set.mergeMany(TestData$Coronate.config.avoidPairs, Belt_Set.toArray(DemoData$Coronate.config.avoidPairs));

var configData_byeValue = TestData$Coronate.config.byeValue;

var configData_lastBackup = TestData$Coronate.config.lastBackup;

var configData = {
  avoidPairs: configData_avoidPairs,
  byeValue: configData_byeValue,
  lastBackup: configData_lastBackup
};

function merger(_key, a, b) {
  if (a !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(a));
  } else if (b !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(b));
  } else {
    return ;
  }
}

var tournamentData = Belt_MapString.merge(TestData$Coronate.tournaments, DemoData$Coronate.tournaments, merger);

var playerData = Belt_MapString.merge(TestData$Coronate.players, DemoData$Coronate.players, merger);

function genericDbReducer(state, action) {
  switch (action.tag | 0) {
    case /* Del */0 :
        return Belt_MapString.remove(state, action[0]);
    case /* Set */1 :
        return Belt_MapString.set(state, action[0], action[1]);
    case /* SetAll */2 :
        return action[0];
    
  }
}

function configReducer(state, action) {
  switch (action.tag | 0) {
    case /* AddAvoidPair */0 :
        return {
                avoidPairs: Belt_Set.add(state.avoidPairs, action[0]),
                byeValue: state.byeValue,
                lastBackup: state.lastBackup
              };
    case /* DelAvoidPair */1 :
        return {
                avoidPairs: Belt_Set.remove(state.avoidPairs, action[0]),
                byeValue: state.byeValue,
                lastBackup: state.lastBackup
              };
    case /* DelAvoidSingle */2 :
        var id = action[0];
        return {
                avoidPairs: Belt_Set.reduce(state.avoidPairs, Data_Config$Coronate.AvoidPairs.empty, (function (acc, param) {
                        var p2 = param[1];
                        var p1 = param[0];
                        if (p1 === id || p2 === id) {
                          return acc;
                        } else {
                          return Belt_Set.add(acc, /* tuple */[
                                      p1,
                                      p2
                                    ]);
                        }
                      })),
                byeValue: state.byeValue,
                lastBackup: state.lastBackup
              };
    case /* SetAvoidPairs */3 :
        return {
                avoidPairs: action[0],
                byeValue: state.byeValue,
                lastBackup: state.lastBackup
              };
    case /* SetByeValue */4 :
        return {
                avoidPairs: state.avoidPairs,
                byeValue: action[0],
                lastBackup: state.lastBackup
              };
    case /* SetState */5 :
        return action[0];
    case /* SetLastBackup */6 :
        return {
                avoidPairs: state.avoidPairs,
                byeValue: state.byeValue,
                lastBackup: action[0]
              };
    
  }
}

function useAllItemsFromDb(data) {
  return React.useReducer(genericDbReducer, data);
}

function useAllPlayers(param) {
  return React.useReducer(genericDbReducer, playerData);
}

function useAllTournaments(param) {
  return React.useReducer(genericDbReducer, TestData$Coronate.tournaments);
}

function useConfig(param) {
  return React.useReducer(configReducer, configData);
}

export {
  configData ,
  merger ,
  tournamentData ,
  playerData ,
  genericDbReducer ,
  configReducer ,
  useAllItemsFromDb ,
  useAllPlayers ,
  useAllTournaments ,
  useConfig ,
  
}
/* configData Not a pure module */
