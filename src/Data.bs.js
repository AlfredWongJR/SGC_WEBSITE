// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as Utils$Coronate from "./Utils.bs.js";
import * as Scoring$Coronate from "./Scoring.bs.js";

var dummy_id = "________DUMMY________";

function avoidPairReducer(acc, pair) {
  var id2 = pair[1];
  var id1 = pair[0];
  var match = Belt_MapString.get(acc, id1);
  var newList1 = match !== undefined ? /* :: */[
      id2,
      match
    ] : /* :: */[
      id2,
      /* [] */0
    ];
  var match$1 = Belt_MapString.get(acc, id2);
  var newList2 = match$1 !== undefined ? /* :: */[
      id1,
      match$1
    ] : /* :: */[
      id1,
      /* [] */0
    ];
  return Belt_MapString.set(Belt_MapString.set(acc, id1, newList1), id2, newList2);
}

function tToJs(param) {
  return {
          firstName: param[/* firstName */0],
          id: param[/* id */1],
          lastName: param[/* lastName */2],
          matchCount: param[/* matchCount */3],
          rating: param[/* rating */4],
          type_: param[/* type_ */5]
        };
}

function tFromJs(param) {
  return /* record */[
          /* firstName */param.firstName,
          /* id */param.id,
          /* lastName */param.lastName,
          /* matchCount */param.matchCount,
          /* rating */param.rating,
          /* type_ */param.type_
        ];
}

function isDummyId(playerId) {
  return playerId === dummy_id;
}

var dummyPlayer = /* record */[
  /* firstName */"Bye",
  /* id */dummy_id,
  /* lastName */"Player",
  /* matchCount */0,
  /* rating */0,
  /* type_ */"dummy"
];

function makeMissingPlayer(id) {
  return /* record */[
          /* firstName */"Anonymous",
          /* id */id,
          /* lastName */"Player",
          /* matchCount */0,
          /* rating */0,
          /* type_ */"missing"
        ];
}

function getPlayerMaybe(playerDict, id) {
  if (id === dummy_id) {
    return dummyPlayer;
  } else {
    var match = Js_dict.get(playerDict, id);
    if (match !== undefined) {
      return match;
    } else {
      return makeMissingPlayer(id);
    }
  }
}

function getPlayerMaybeMap(playerMap, id) {
  if (id === dummy_id) {
    return dummyPlayer;
  } else {
    return Belt_MapString.getWithDefault(playerMap, id, makeMissingPlayer(id));
  }
}

var Player = /* module */[
  /* tToJs */tToJs,
  /* tFromJs */tFromJs,
  /* isDummyId */isDummyId,
  /* dummyPlayer */dummyPlayer,
  /* makeMissingPlayer */makeMissingPlayer,
  /* getPlayerMaybe */getPlayerMaybe,
  /* getPlayerMaybeMap */getPlayerMaybeMap
];

function tToJs$1(param) {
  return {
          id: param[/* id */0],
          whiteId: param[/* whiteId */1],
          blackId: param[/* blackId */2],
          whiteNewRating: param[/* whiteNewRating */3],
          blackNewRating: param[/* blackNewRating */4],
          whiteOrigRating: param[/* whiteOrigRating */5],
          blackOrigRating: param[/* blackOrigRating */6],
          whiteScore: param[/* whiteScore */7],
          blackScore: param[/* blackScore */8]
        };
}

function tFromJs$1(param) {
  return /* record */[
          /* id */param.id,
          /* whiteId */param.whiteId,
          /* blackId */param.blackId,
          /* whiteNewRating */param.whiteNewRating,
          /* blackNewRating */param.blackNewRating,
          /* whiteOrigRating */param.whiteOrigRating,
          /* blackOrigRating */param.blackOrigRating,
          /* whiteScore */param.whiteScore,
          /* blackScore */param.blackScore
        ];
}

var Match = /* module */[
  /* tToJs */tToJs$1,
  /* tFromJs */tFromJs$1
];

function tToJs$2(param) {
  return {
          byeQueue: param[/* byeQueue */0],
          date: param[/* date */1],
          id: param[/* id */2],
          name: param[/* name */3],
          playerIds: param[/* playerIds */4],
          roundList: param[/* roundList */5],
          tieBreaks: param[/* tieBreaks */6]
        };
}

function tFromJs$2(param) {
  return /* record */[
          /* byeQueue */param.byeQueue,
          /* date */param.date,
          /* id */param.id,
          /* name */param.name,
          /* playerIds */param.playerIds,
          /* roundList */param.roundList,
          /* tieBreaks */param.tieBreaks
        ];
}

function tToJsDeep(tourney) {
  return {
          byeQueue: tourney[/* byeQueue */0],
          date: tourney[/* date */1],
          id: tourney[/* id */2],
          name: tourney[/* name */3],
          playerIds: tourney[/* playerIds */4],
          roundList: tourney[/* roundList */5].map((function (round) {
                  return round.map(tToJs$1);
                })),
          tieBreaks: tourney[/* tieBreaks */6]
        };
}

function tFromJsDeep(tourney) {
  return /* record */[
          /* byeQueue */tourney.byeQueue,
          /* date */tourney.date,
          /* id */tourney.id,
          /* name */tourney.name,
          /* playerIds */tourney.playerIds,
          /* roundList */tourney.roundList.map((function (round) {
                  return round.map(tFromJs$1);
                })),
          /* tieBreaks */tourney.tieBreaks
        ];
}

function tFromJsonDeep(tourney) {
  return /* record */[
          /* byeQueue */tourney.byeQueue,
          /* date */new Date(tourney.date),
          /* id */tourney.id,
          /* name */tourney.name,
          /* playerIds */tourney.playerIds,
          /* roundList */tourney.roundList.map((function (round) {
                  return round.map(tFromJs$1);
                })),
          /* tieBreaks */tourney.tieBreaks
        ];
}

var Tournament = /* module */[
  /* tToJs */tToJs$2,
  /* tFromJs */tFromJs$2,
  /* tToJsDeep */tToJsDeep,
  /* tFromJsDeep */tFromJsDeep,
  /* tFromJsonDeep */tFromJsonDeep
];

function tToJs$3(param) {
  return {
          avoidPairs: param[/* avoidPairs */0],
          byeValue: param[/* byeValue */1],
          lastBackup: param[/* lastBackup */2]
        };
}

function tFromJs$3(param) {
  return /* record */[
          /* avoidPairs */param.avoidPairs,
          /* byeValue */param.byeValue,
          /* lastBackup */param.lastBackup
        ];
}

var defaults_000 = /* avoidPairs : array */[];

var defaults_002 = /* lastBackup */new Date(0.0);

var defaults = /* record */[
  defaults_000,
  /* byeValue */1.0,
  defaults_002
];

var Config = /* module */[
  /* tToJs */tToJs$3,
  /* tFromJs */tFromJs$3,
  /* defaults */defaults
];

function rounds2Matches(roundList, lastRound, param) {
  var rounds = lastRound !== undefined ? (function (param) {
            return (function (param$1) {
                return roundList.slice(param, param$1);
              });
          })(0)(lastRound + 1 | 0) : roundList;
  return rounds.reduce((function (acc, round) {
                return acc.concat(round);
              }), /* array */[]);
}

function getUnmatched(roundList, players, roundId) {
  var match = Belt_Array.get(roundList, roundId);
  var matchList = match !== undefined ? match : /* array */[];
  var matchedIds = matchList.reduce((function (acc, match_) {
          return acc.concat(/* array */[
                      match_[/* whiteId */1],
                      match_[/* blackId */2]
                    ]);
        }), /* array */[]);
  return Belt_MapString.reduce(players, Belt_MapString.empty, (function (acc, key, player) {
                if (matchedIds.includes(key)) {
                  return acc;
                } else {
                  return Belt_MapString.set(acc, key, player);
                }
              }));
}

function isRoundComplete(roundList, players, roundId) {
  if (roundId < (roundList.length - 1 | 0)) {
    return true;
  } else {
    var unmatched = getUnmatched(roundList, players, roundId);
    var results = Belt_Array.getExn(roundList, roundId).map((function (match_) {
            return match_[/* whiteScore */7] + match_[/* blackScore */8];
          }));
    if (Belt_MapString.keysToArray(unmatched).length === 0) {
      return !results.includes(0.0);
    } else {
      return false;
    }
  }
}

function colorToScore(color) {
  var match = color === 1;
  if (match) {
    return 1.0;
  } else {
    return -1.0;
  }
}

function getOppColor(color) {
  var match = color === 0;
  if (match) {
    return 1;
  } else {
    return 0;
  }
}

var dummyId = "________DUMMY________";

function isDummyId$1(playerId) {
  return playerId === dummyId;
}

function makeScoreData(existingData, playerId, origRating, newRating, result, oppId, color) {
  var match = Belt_MapString.get(existingData, playerId);
  var oldData = match !== undefined ? match : Scoring$Coronate.createBlankScoreData(playerId);
  var ratings = oldData[/* ratings */5];
  var match$1 = ratings ? /* tuple */[
      /* :: */[
        newRating,
        ratings
      ],
      origRating
    ] : /* tuple */[
      /* :: */[
        newRating,
        /* [] */0
      ],
      origRating
    ];
  var match$2 = oppId === dummyId;
  var newResultsNoByes = match$2 ? oldData[/* resultsNoByes */8] : /* :: */[
      result,
      oldData[/* resultsNoByes */8]
    ];
  var oldOppResults = oldData[/* opponentResults */4];
  var match$3 = Belt_MapString.get(oldOppResults, oppId);
  var oppResult = match$3 !== undefined ? match$3 + result : result;
  var newOpponentResults = Belt_MapString.set(oldOppResults, oppId, oppResult);
  return /* record */[
          /* colorScores : :: */[
            colorToScore(color),
            oldData[/* colorScores */0]
          ],
          /* colors : :: */[
            color,
            oldData[/* colors */1]
          ],
          /* id */playerId,
          /* isDummy */playerId === dummyId,
          /* opponentResults */newOpponentResults,
          /* ratings */match$1[0],
          /* firstRating */match$1[1],
          /* results : :: */[
            result,
            oldData[/* results */7]
          ],
          /* resultsNoByes */newResultsNoByes
        ];
}

function matches2ScoreData(matchList) {
  return matchList.reduce((function (acc, match_) {
                var newDataWhite = makeScoreData(acc, match_[/* whiteId */1], match_[/* whiteOrigRating */5], match_[/* whiteNewRating */3], match_[/* whiteScore */7], match_[/* blackId */2], 0);
                var newDataBlack = makeScoreData(acc, match_[/* blackId */2], match_[/* blackOrigRating */6], match_[/* blackNewRating */4], match_[/* blackScore */8], match_[/* whiteId */1], 1);
                return Belt_MapString.set(Belt_MapString.set(acc, match_[/* whiteId */1], newDataWhite), match_[/* blackId */2], newDataBlack);
              }), Belt_MapString.empty);
}

function createPairingData(playerData, avoidPairs, scoreMap) {
  var avoidMap = avoidPairs.reduce(avoidPairReducer, Belt_MapString.empty);
  return Belt_MapString.reduce(playerData, Belt_MapString.empty, (function (acc, key, data) {
                var match = Belt_MapString.get(scoreMap, key);
                var playerStats = match !== undefined ? match : Scoring$Coronate.createBlankScoreData(key);
                var match$1 = Belt_MapString.get(avoidMap, key);
                var newAvoidIds = match$1 !== undefined ? match$1 : /* [] */0;
                var newData_000 = /* id */data[/* id */1];
                var newData_002 = /* colorScores */playerStats[/* colorScores */0];
                var newData_003 = /* colors */playerStats[/* colors */1];
                var newData_006 = /* opponents */Belt_List.fromArray(Belt_MapString.keysToArray(playerStats[/* opponentResults */4]));
                var newData_007 = /* rating */data[/* rating */4];
                var newData_008 = /* score */Utils$Coronate.listSumFloat(playerStats[/* results */7]);
                var newData = /* record */[
                  newData_000,
                  /* avoidIds */newAvoidIds,
                  newData_002,
                  newData_003,
                  /* halfPos */0,
                  /* isUpperHalf */false,
                  newData_006,
                  newData_007,
                  newData_008
                ];
                return Belt_MapString.set(acc, key, newData);
              }));
}

var Converters = /* module */[
  /* blackValue */1.0,
  /* whiteValue */-1.0,
  /* black */1,
  /* white */0,
  /* colorToScore */colorToScore,
  /* getOppColor */getOppColor,
  /* dummyId */dummyId,
  /* isDummyId */isDummyId$1,
  /* makeScoreData */makeScoreData,
  /* matches2ScoreData */matches2ScoreData,
  /* createPairingData */createPairingData
];

export {
  dummy_id ,
  avoidPairReducer ,
  Player ,
  Match ,
  Tournament ,
  Config ,
  rounds2Matches ,
  getUnmatched ,
  isRoundComplete ,
  Converters ,
  
}
/* defaults Not a pure module */
