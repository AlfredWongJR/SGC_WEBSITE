// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";

var dummy_id = "________DUMMY________";

function isDummyId(playerId) {
  return playerId === dummy_id;
}

var dummyPlayer = /* record */[
  /* firstName */"Bye",
  /* id */dummy_id,
  /* lastName */"Player",
  /* matchCount */0,
  /* rating */0,
  /* type_ */"dummy"
];

function makeMissingPlayer(id) {
  return /* record */[
          /* firstName */"Anonymous",
          /* id */id,
          /* lastName */"Player",
          /* matchCount */0,
          /* rating */0,
          /* type_ */"missing"
        ];
}

function getPlayerMaybe(playerDict, id) {
  var match = id === dummy_id;
  if (match) {
    return dummyPlayer;
  } else {
    var match$1 = Js_dict.get(playerDict, id);
    if (match$1 !== undefined) {
      return match$1;
    } else {
      return makeMissingPlayer(id);
    }
  }
}

function getPlayerMaybeMap(playerMap, id) {
  var match = id === dummy_id;
  if (match) {
    return dummyPlayer;
  } else {
    return Belt_MapString.getWithDefault(playerMap, id, makeMissingPlayer(id));
  }
}

var Player = /* module */[
  /* isDummyId */isDummyId,
  /* dummyPlayer */dummyPlayer,
  /* makeMissingPlayer */makeMissingPlayer,
  /* getPlayerMaybe */getPlayerMaybe,
  /* getPlayerMaybeMap */getPlayerMaybeMap
];

var Match = /* module */[];

var Tournament = /* module */[];

function db_optionsToJs(param) {
  return {
          avoidPairs: param[/* avoidPairs */0],
          byeValue: param[/* byeValue */1],
          lastBackup: param[/* lastBackup */2]
        };
}

function db_optionsFromJs(param) {
  return /* record */[
          /* avoidPairs */param.avoidPairs,
          /* byeValue */param.byeValue,
          /* lastBackup */param.lastBackup
        ];
}

var defaultOptions_000 = /* avoidPairs : array */[];

var defaultOptions_002 = /* lastBackup */new Date(0.0);

var defaultOptions = /* record */[
  defaultOptions_000,
  /* byeValue */1.0,
  defaultOptions_002
];

function rounds2Matches(roundList, lastRound, param) {
  var rounds = lastRound !== undefined ? (function (param) {
            return (function (param$1) {
                return roundList.slice(param, param$1);
              });
          })(0)(lastRound + 1 | 0) : roundList;
  return rounds.reduce((function (acc, round) {
                return acc.concat(round);
              }), /* array */[]);
}

function getUnmatched(roundList, players, roundId) {
  var match = Belt_Array.get(roundList, roundId);
  var matchList = match !== undefined ? match : /* array */[];
  var matchedIds = matchList.reduce((function (acc, match_) {
          return acc.concat(/* array */[
                      match_[/* whiteId */1],
                      match_[/* blackId */2]
                    ]);
        }), /* array */[]);
  var unmatched = { };
  Belt_MapString.valuesToArray(players).forEach((function (player) {
          if (matchedIds.includes(player[/* id */1])) {
            return 0;
          } else {
            unmatched[player[/* id */1]] = player;
            return /* () */0;
          }
        }));
  return unmatched;
}

function isRoundComplete(roundList, players, roundId) {
  var match = roundId < (roundList.length - 1 | 0);
  if (match) {
    return true;
  } else {
    var unmatched = getUnmatched(roundList, players, roundId);
    var results = Caml_array.caml_array_get(roundList, roundId).map((function (match_) {
            return match_[/* whiteScore */7] + match_[/* blackScore */8];
          }));
    if (Object.keys(unmatched).length === 0) {
      return !results.includes(0.0);
    } else {
      return false;
    }
  }
}

var win = 1.0;

var loss = 0.0;

var draw = 0.5;

export {
  win ,
  loss ,
  draw ,
  dummy_id ,
  Player ,
  Match ,
  Tournament ,
  db_optionsToJs ,
  db_optionsFromJs ,
  defaultOptions ,
  rounds2Matches ,
  getUnmatched ,
  isRoundComplete ,
  
}
/* defaultOptions Not a pure module */
