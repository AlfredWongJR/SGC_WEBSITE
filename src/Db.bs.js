// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Data$Coronate from "./Data.bs.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as Hooks$Coronate from "./Hooks.bs.js";
import * as Utils$Coronate from "./Utils.bs.js";
import * as DemoData$Coronate from "./DemoData.bs.js";
import * as Externals$Coronate from "./Externals.bs.js";

var database_name = "Coronate";

var ConfigDb = Curry._1(Externals$Coronate.LocalForage[/* Obj */1][/* Instance */0], []);

var configStore = Curry._2(ConfigDb[/* make */0], database_name, "Options");

var Players = Curry._1(Externals$Coronate.LocalForage[/* Map */0][/* Instance */0], []);

var playerStore = Curry._2(Players[/* make */0], database_name, "Players");

var Tournaments = Curry._1(Externals$Coronate.LocalForage[/* Map */0][/* Instance */0], []);

var tourneyStore = Curry._2(Tournaments[/* make */0], database_name, "Tournaments");

function jsDictToReMap(dict, transformer) {
  return Belt_MapString.fromArray(Js_dict.entries(dict).map((function (param) {
                    return /* tuple */[
                            param[0],
                            Curry._1(transformer, param[1])
                          ];
                  })));
}

function reMapToJsDict(map, transformer) {
  return Js_dict.fromArray(Belt_MapString.toArray(map).map((function (param) {
                    return /* tuple */[
                            param[0],
                            Curry._1(transformer, param[1])
                          ];
                  })));
}

function loadDemoDB(param) {
  ((document.body.style = "wait"));
  Promise.all(/* tuple */[
            configStore.setItems(Data$Coronate.Config[/* tToJs */0](DemoData$Coronate.config)),
            playerStore.setItems(reMapToJsDict(DemoData$Coronate.players, Data$Coronate.Player[/* tToJs */0])),
            tourneyStore.setItems(reMapToJsDict(DemoData$Coronate.tournaments, Data$Coronate.Tournament[/* tToJsDeep */2]))
          ]).then((function (value) {
            Utils$Coronate.alert("Demo data loaded!");
            ((document.body.style = "auto"));
            return Promise.resolve(value);
          })).catch((function (param) {
          ((document.body.style = "auto"));
          return Promise.resolve(/* tuple */[
                      /* () */0,
                      /* () */0,
                      /* () */0
                    ]);
        }));
  return /* () */0;
}

function genericDbReducer(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return Belt_MapString.remove(state, action[0]);
    case 1 : 
        return Belt_MapString.set(state, action[0], action[1]);
    case 2 : 
        return action[0];
    
  }
}

function useAllItemsFromDb(store, reducer, fromJs, toJs) {
  var match = React.useReducer(Curry.__2(reducer), Belt_MapString.empty);
  var dispatch = match[1];
  var items = match[0];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setIsLoaded = match$1[1];
  var isLoaded = match$1[0];
  Hooks$Coronate.useLoadingCursorUntil(isLoaded);
  React.useEffect((function (param) {
          var didCancel = /* record */[/* contents */false];
          store.getItems(null).then((function (results) {
                  if (!didCancel[0]) {
                    Curry._1(dispatch, /* SetState */Block.__(2, [jsDictToReMap(results, fromJs)]));
                    Curry._1(setIsLoaded, (function (param) {
                            return true;
                          }));
                  }
                  return Promise.resolve(results);
                }));
          return (function (param) {
                    didCancel[0] = false;
                    return /* () */0;
                  });
        }), /* tuple */[
        store,
        dispatch,
        setIsLoaded,
        fromJs
      ]);
  React.useEffect((function (param) {
          if (isLoaded) {
            store.setItems(reMapToJsDict(items, toJs)).then((function (param) {
                    store.keys().then((function (keys) {
                            var stateKeys = Belt_MapString.keysToArray(items);
                            var deleted = keys.filter((function (x) {
                                    return !stateKeys.includes(x);
                                  }));
                            if (deleted.length > 0) {
                              store.removeItems(deleted);
                            }
                            return Promise.resolve(/* () */0);
                          }));
                    return Promise.resolve(/* () */0);
                  }));
            return undefined;
          }
          
        }), /* tuple */[
        store,
        items,
        isLoaded,
        toJs
      ]);
  return /* tuple */[
          items,
          dispatch
        ];
}

function useAllPlayers(param) {
  return useAllItemsFromDb(playerStore, genericDbReducer, Data$Coronate.Player[/* tFromJs */1], Data$Coronate.Player[/* tToJs */0]);
}

function useAllTournaments(param) {
  return useAllItemsFromDb(tourneyStore, genericDbReducer, Data$Coronate.Tournament[/* tFromJsDeep */3], Data$Coronate.Tournament[/* tToJsDeep */2]);
}

function configReducer(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0].concat(/* array */[action[0]]),
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 1 : 
        var match = action[0];
        var user2 = match[1];
        var user1 = match[0];
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0].filter((function (param) {
                        var p2 = param[1];
                        var p1 = param[0];
                        return !(/* array */[
                                    p1,
                                    p2
                                  ].includes(user1) && /* array */[
                                    p1,
                                    p2
                                  ].includes(user2));
                      })),
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 2 : 
        var id = action[0];
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0].filter((function (param) {
                        return !/* array */[
                                  param[0],
                                  param[1]
                                ].includes(id);
                      })),
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 3 : 
        return /* record */[
                /* avoidPairs */action[0],
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 4 : 
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0],
                /* byeValue */action[0],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 5 : 
        return action[0];
    case 6 : 
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0],
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */action[0]
              ];
    
  }
}

function useConfig(param) {
  var match = React.useReducer(configReducer, Data$Coronate.Config[/* defaults */2]);
  var dispatch = match[1];
  var config = match[0];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setIsLoaded = match$1[1];
  var isLoaded = match$1[0];
  React.useEffect((function () {
          var didCancel = /* record */[/* contents */false];
          configStore.getItems(null).then((function (valuesJs) {
                  var values = Data$Coronate.Config[/* tFromJs */1](valuesJs);
                  if (!didCancel[0]) {
                    Curry._1(dispatch, /* SetAvoidPairs */Block.__(3, [values[/* avoidPairs */0]]));
                    Curry._1(dispatch, /* SetByeValue */Block.__(4, [values[/* byeValue */1]]));
                    Curry._1(dispatch, /* SetLastBackup */Block.__(6, [values[/* lastBackup */2]]));
                    Curry._1(setIsLoaded, (function (param) {
                            return true;
                          }));
                  }
                  return Promise.resolve(/* () */0);
                }));
          return (function (param) {
                    didCancel[0] = true;
                    return /* () */0;
                  });
        }), /* tuple */[
        setIsLoaded,
        dispatch
      ]);
  React.useEffect((function () {
          if (isLoaded) {
            configStore.setItems(Data$Coronate.Config[/* tToJs */0](config));
            return undefined;
          }
          
        }), /* tuple */[
        config,
        isLoaded
      ]);
  return /* tuple */[
          config,
          dispatch
        ];
}

var LocalForage = 0;

export {
  LocalForage ,
  database_name ,
  ConfigDb ,
  configStore ,
  Players ,
  playerStore ,
  Tournaments ,
  tourneyStore ,
  jsDictToReMap ,
  reMapToJsDict ,
  loadDemoDB ,
  genericDbReducer ,
  useAllItemsFromDb ,
  useAllPlayers ,
  useAllTournaments ,
  configReducer ,
  useConfig ,
  
}
/* ConfigDb Not a pure module */
