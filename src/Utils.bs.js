// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Ramda from "ramda";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";

function add(a, b) {
  return a + b | 0;
}

function arraySum(arr) {
  return arr.reduce(add, 0);
}

function addFloat(a, b) {
  return a + b;
}

function arraySumFloat(arr) {
  return arr.reduce(addFloat, 0.0);
}

function last(arr) {
  return Caml_array.caml_array_get(arr, arr.length - 1 | 0);
}

function splitInHalf(arr) {
  return Ramda.splitAt(arr.length / 2 | 0, arr);
}

var VisuallyHidden = /* module */[];

var Dialog = /* module */[];

var logo = ( require("./icon-min.svg") );

var WebpackAssets = /* module */[/* logo */logo];

var Entities = /* module */[
  /* nbsp */"\xa0",
  /* copy */"\xa9"
];

function hashPath(hashString) {
  return Belt_List.fromArray(hashString.split("/"));
}

function dictToMap(dict) {
  return Belt_MapString.fromArray(Js_dict.entries(dict));
}

function mapToDict(map) {
  return Js_dict.fromArray(Belt_MapString.toArray(map));
}

var dateFormat = (
  new Intl.DateTimeFormat(
      "en-US",
      {
          day: "2-digit",
          month: "short",
          year: "numeric"
      }
  )
);

var timeFormat = (
  new Intl.DateTimeFormat(
      "en-US",
      {
          day: "2-digit",
          month: "short",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit"
      }
  )
);

function Utils$DateOrTimeFormat(Props) {
  var dtFormatObj = Props.dtFormatObj;
  var date = Props.date;
  return React.createElement("time", {
              dateTime: date.toISOString()
            }, dtFormatObj.format(date));
}

var DateOrTimeFormat = /* module */[/* make */Utils$DateOrTimeFormat];

function Utils$DateFormat(Props) {
  var date = Props.date;
  return React.createElement(Utils$DateOrTimeFormat, {
              dtFormatObj: dateFormat,
              date: date
            });
}

var DateFormat = /* module */[/* make */Utils$DateFormat];

function Utils$DateTimeFormat(Props) {
  var date = Props.date;
  return React.createElement(Utils$DateOrTimeFormat, {
              dtFormatObj: timeFormat,
              date: date
            });
}

var DateTimeFormat = /* module */[/* make */Utils$DateTimeFormat];

export {
  add ,
  arraySum ,
  addFloat ,
  arraySumFloat ,
  last ,
  splitInHalf ,
  VisuallyHidden ,
  Dialog ,
  WebpackAssets ,
  Entities ,
  hashPath ,
  dictToMap ,
  mapToDict ,
  dateFormat ,
  timeFormat ,
  DateOrTimeFormat ,
  DateFormat ,
  DateTimeFormat ,
  
}
/* logo Not a pure module */
