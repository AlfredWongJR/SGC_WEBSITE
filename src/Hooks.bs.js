// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Localforage from "localforage";
import * as Data$Coronate from "./Data.bs.js";
import * as ReactFeather from "react-feather";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as Belt_SortArray from "bs-platform/lib/es6/belt_SortArray.js";
import * as Utils$Coronate from "./Utils.bs.js";
import * as DemoData$Coronate from "./DemoData.bs.js";
import * as Externals$Coronate from "./Externals.bs.js";
import * as LocalforageGetitems from "localforage-getitems";
import * as LocalforageSetitems from "localforage-setitems";
import * as VisuallyHidden from "@reach/visually-hidden";
import * as LocalforageRemoveitems from "localforage-removeitems";

function sortedTableReducer(state, action) {
  var newState;
  if (typeof action === "number") {
    newState = state;
  } else {
    switch (action.tag | 0) {
      case 0 : 
          newState = /* record */[
            /* isDescending */action[0],
            /* key */state[/* key */1],
            /* table */state[/* table */2]
          ];
          break;
      case 1 : 
          newState = /* record */[
            /* isDescending */state[/* isDescending */0],
            /* key */action[0],
            /* table */state[/* table */2]
          ];
          break;
      case 2 : 
          newState = /* record */[
            /* isDescending */state[/* isDescending */0],
            /* key */state[/* key */1],
            /* table */action[0]
          ];
          break;
      
    }
  }
  var match = newState[/* isDescending */0];
  var direction = match ? Utils$Coronate.descend : Utils$Coronate.ascend;
  var match$1 = newState[/* key */1];
  var sortFunc;
  if (match$1.tag) {
    sortFunc = Curry._1(direction, match$1[0]);
  } else {
    var func = match$1[0];
    sortFunc = Curry._1(direction, (function (str) {
            return Curry._1(func, str).toLowerCase();
          }));
  }
  var table = Belt_SortArray.stableSortBy(newState[/* table */2], sortFunc);
  return /* record */[
          /* isDescending */newState[/* isDescending */0],
          /* key */newState[/* key */1],
          /* table */table
        ];
}

function useSortedTable(table, key, isDescending) {
  var initialState = /* record */[
    /* isDescending */isDescending,
    /* key */key,
    /* table */table
  ];
  var match = React.useReducer(sortedTableReducer, initialState);
  var dispatch = match[1];
  React.useEffect((function () {
          Curry._1(dispatch, /* SortWithoutUpdating */0);
          return undefined;
        }), /* array */[dispatch]);
  return /* tuple */[
          match[0],
          dispatch
        ];
}

function Hooks$SortButton(Props) {
  var children = Props.children;
  var sortKey = Props.sortKey;
  var data = Props.data;
  var dispatch = Props.dispatch;
  var match = data[/* key */1] === sortKey;
  var chevronStyle = match ? ({
        opacity: "1"
      }) : ({
        opacity: "0"
      });
  var match$1 = data[/* isDescending */0];
  return React.createElement("button", {
              className: "button-micro dont-hide button-text-ghost title-20",
              style: {
                width: "100%"
              },
              onClick: (function (param) {
                  var match = data[/* key */1] === sortKey;
                  if (match) {
                    return Curry._1(dispatch, /* SetIsDescending */Block.__(0, [!data[/* isDescending */0]]));
                  } else {
                    return Curry._1(dispatch, /* SetKey */Block.__(1, [sortKey]));
                  }
                })
            }, React.createElement(ReactFeather.ChevronUp, {
                  style: {
                    opacity: "0"
                  }
                }), children, match$1 ? React.createElement("span", {
                    style: chevronStyle
                  }, React.createElement(ReactFeather.ChevronUp, { }), React.createElement(VisuallyHidden.default, {
                        children: "Sort ascending."
                      })) : React.createElement("span", {
                    style: chevronStyle
                  }, React.createElement(ReactFeather.ChevronDown, { }), React.createElement(VisuallyHidden.default, {
                        children: "Sort descending."
                      })));
}

var SortButton = /* module */[/* make */Hooks$SortButton];

function useLoadingCursor(isLoaded) {
  React.useEffect((function () {
          if (isLoaded) {
            ((document.body.style.cursor = "auto"));
          } else {
            ((document.body.style.cursor = "wait"));
          }
          return (function (param) {
                    return (document.body.style.cursor = "auto");
                  });
        }), /* array */[isLoaded]);
  return /* () */0;
}

LocalforageGetitems.extendPrototype(Localforage.default);

LocalforageSetitems.extendPrototype(Localforage.default);

LocalforageRemoveitems.extendPrototype(Localforage.default);

var database_name = "Coronate";

var optionsStore = Localforage.createInstance({
      name: database_name,
      storeName: "Options"
    });

var Players = Externals$Coronate.LocalForage[/* Instance */0]([]);

var playerStore = Curry._2(Players[/* create */0], database_name, "Players");

var Tournaments = Externals$Coronate.LocalForage[/* Instance */0]([]);

var tourneyStore = Curry._2(Tournaments[/* create */0], database_name, "Tournaments");

function jsDictToReMap(dict, transformer) {
  return Belt_MapString.fromArray(Js_dict.entries(dict).map((function (param) {
                    return /* tuple */[
                            param[0],
                            Curry._1(transformer, param[1])
                          ];
                  })));
}

function reMapToJsDict(map, transformer) {
  return Js_dict.fromArray(Belt_MapString.toArray(map).map((function (param) {
                    return /* tuple */[
                            param[0],
                            Curry._1(transformer, param[1])
                          ];
                  })));
}

function loadDemoDB(param) {
  ((document.body.style = "wait"));
  Promise.all(/* tuple */[
            optionsStore.setItems(Data$Coronate.db_optionsToJs(DemoData$Coronate.options)),
            playerStore.setItems(Js_dict.fromArray(Belt_MapString.toArray(DemoData$Coronate.players).map((function (param) {
                            return /* tuple */[
                                    param[0],
                                    Data$Coronate.Player[/* tToJs */0](param[1])
                                  ];
                          })))),
            tourneyStore.setItems(Js_dict.fromArray(Belt_MapString.toArray(DemoData$Coronate.tournaments).map((function (param) {
                            return /* tuple */[
                                    param[0],
                                    Data$Coronate.Tournament[/* tToJsDeep */2](param[1])
                                  ];
                          }))))
          ]).then((function (value) {
            Utils$Coronate.alert("Demo data loaded!");
            ((document.body.style = "auto"));
            return Promise.resolve(value);
          })).catch((function (param) {
          ((document.body.style = "auto"));
          return Promise.resolve(/* tuple */[
                      /* () */0,
                      /* () */0,
                      /* () */0
                    ]);
        }));
  return /* () */0;
}

function genericDbReducer(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return Belt_MapString.remove(state, action[0]);
    case 1 : 
        return Belt_MapString.set(state, action[0], action[1]);
    case 2 : 
        return action[0];
    
  }
}

function useAllItemsFromDb(store, reducer, fromJs, toJs) {
  var match = React.useReducer(Curry.__2(reducer), Belt_MapString.empty);
  var dispatch = match[1];
  var items = match[0];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setIsLoaded = match$1[1];
  var isLoaded = match$1[0];
  useLoadingCursor(isLoaded);
  React.useEffect((function (param) {
          var didCancel = /* record */[/* contents */false];
          store.getItems(null).then((function (results) {
                  if (!didCancel[0]) {
                    Curry._1(dispatch, /* SetState */Block.__(2, [jsDictToReMap(results, fromJs)]));
                    Curry._1(setIsLoaded, (function (param) {
                            return true;
                          }));
                  }
                  return Promise.resolve(results);
                }));
          return (function (param) {
                    didCancel[0] = false;
                    return /* () */0;
                  });
        }), /* tuple */[
        store,
        dispatch,
        setIsLoaded,
        fromJs
      ]);
  React.useEffect((function (param) {
          if (isLoaded) {
            store.setItems(reMapToJsDict(items, toJs)).then((function (param) {
                    store.keys().then((function (keys) {
                            var stateKeys = Belt_MapString.keysToArray(items);
                            var deleted = keys.filter((function (x) {
                                    return !stateKeys.includes(x);
                                  }));
                            if (deleted.length > 0) {
                              store.removeItems(deleted);
                            }
                            return Promise.resolve(/* () */0);
                          }));
                    return Promise.resolve(/* () */0);
                  }));
            return undefined;
          }
          
        }), /* tuple */[
        store,
        items,
        isLoaded,
        toJs
      ]);
  return /* tuple */[
          items,
          dispatch
        ];
}

function useAllPlayers(param) {
  return useAllItemsFromDb(playerStore, genericDbReducer, Data$Coronate.Player[/* tFromJs */1], Data$Coronate.Player[/* tToJs */0]);
}

function useAllTournaments(param) {
  return useAllItemsFromDb(tourneyStore, genericDbReducer, Data$Coronate.Tournament[/* tFromJsDeep */3], Data$Coronate.Tournament[/* tToJsDeep */2]);
}

function optionsReducer(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0].concat(/* array */[action[0]]),
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 1 : 
        var match = action[0];
        var user2 = match[1];
        var user1 = match[0];
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0].filter((function (param) {
                        var p2 = param[1];
                        var p1 = param[0];
                        return !(/* array */[
                                    p1,
                                    p2
                                  ].includes(user1) && /* array */[
                                    p1,
                                    p2
                                  ].includes(user2));
                      })),
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 2 : 
        var id = action[0];
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0].filter((function (param) {
                        return !/* array */[
                                  param[0],
                                  param[1]
                                ].includes(id);
                      })),
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 3 : 
        return /* record */[
                /* avoidPairs */action[0],
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 4 : 
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0],
                /* byeValue */action[0],
                /* lastBackup */state[/* lastBackup */2]
              ];
    case 5 : 
        return action[0];
    case 6 : 
        return /* record */[
                /* avoidPairs */state[/* avoidPairs */0],
                /* byeValue */state[/* byeValue */1],
                /* lastBackup */action[0]
              ];
    
  }
}

function useOptions(param) {
  var match = React.useReducer(optionsReducer, Data$Coronate.defaultOptions);
  var dispatch = match[1];
  var options = match[0];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setIsLoaded = match$1[1];
  var isLoaded = match$1[0];
  React.useEffect((function () {
          var didCancel = /* record */[/* contents */false];
          optionsStore.getItems().then((function (valuesJs) {
                  var values = Data$Coronate.db_optionsFromJs(valuesJs);
                  if (!didCancel[0]) {
                    Curry._1(dispatch, /* SetAvoidPairs */Block.__(3, [values[/* avoidPairs */0]]));
                    Curry._1(dispatch, /* SetByeValue */Block.__(4, [values[/* byeValue */1]]));
                    Curry._1(dispatch, /* SetLastBackup */Block.__(6, [values[/* lastBackup */2]]));
                    Curry._1(setIsLoaded, (function (param) {
                            return true;
                          }));
                  }
                  return Promise.resolve(/* () */0);
                }));
          return (function (param) {
                    didCancel[0] = true;
                    return /* () */0;
                  });
        }), /* tuple */[
        setIsLoaded,
        dispatch
      ]);
  React.useEffect((function () {
          if (isLoaded) {
            optionsStore.setItems(Data$Coronate.db_optionsToJs(options));
            return undefined;
          }
          
        }), /* tuple */[
        options,
        isLoaded
      ]);
  return /* tuple */[
          options,
          dispatch
        ];
}

var Db = /* module */[
  /* LocalForage */0,
  /* database_name */database_name,
  /* optionsStore */optionsStore,
  /* Players */Players,
  /* playerStore */playerStore,
  /* Tournaments */Tournaments,
  /* tourneyStore */tourneyStore,
  /* jsDictToReMap */jsDictToReMap,
  /* reMapToJsDict */reMapToJsDict,
  /* loadDemoDB */loadDemoDB,
  /* genericDbReducer */genericDbReducer,
  /* useAllItemsFromDb */useAllItemsFromDb,
  /* useAllPlayers */useAllPlayers,
  /* useAllTournaments */useAllTournaments,
  /* optionsReducer */optionsReducer,
  /* useOptions */useOptions
];

var $$Map = 0;

export {
  $$Map ,
  sortedTableReducer ,
  useSortedTable ,
  SortButton ,
  useLoadingCursor ,
  Db ,
  
}
/*  Not a pure module */
