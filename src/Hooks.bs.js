// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Localforage from "localforage";
import * as Data$Coronate from "./Data.bs.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as Utils$Coronate from "./Utils.bs.js";
import * as DemoData$Coronate from "./DemoData.bs.js";
import * as LocalforageSetitems from "localforage-setitems";
import * as LocalforageRemoveitems from "localforage-removeitems";

((require("localforage-getitems")));

LocalforageSetitems.extendPrototype(Localforage.default);

LocalforageRemoveitems.extendPrototype(Localforage.default);

var database_name = "Coronate";

var optionsStore = Localforage.createInstance({
      name: database_name,
      storeName: "Options"
    });

var playerStore = Localforage.createInstance({
      name: database_name,
      storeName: "Players"
    });

var tourneyStore = Localforage.createInstance({
      name: database_name,
      storeName: "Tournaments"
    });

function loadDemoDB(param) {
  document.body.style.cursor = "wait";
  Promise.all(/* tuple */[
          optionsStore.setItems(DemoData$Coronate.options),
          playerStore.setItems(DemoData$Coronate.players),
          tourneyStore.setItems(DemoData$Coronate.tournaments)
        ]).then((function (value) {
          window.alert("Demo data loaded!");
          document.body.style.cursor = "auto";
          return Promise.resolve(value);
        }));
  return /* () */0;
}

function genericDbReducer(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return Belt_MapString.set(state, action[0], action[1]);
    case 1 : 
        return Belt_MapString.remove(state, action[0]);
    case 2 : 
        return action[0];
    
  }
}

function useAllItemsFromDb(store, reducer) {
  var match = React.useReducer(Curry.__2(reducer), Belt_MapString.empty);
  var dispatch = match[1];
  var items = match[0];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setIsLoaded = match$1[1];
  var isLoaded = match$1[0];
  React.useEffect((function (param) {
          var didCancel = /* record */[/* contents */false];
          store.getItems().then((function (results) {
                  if (!didCancel[0]) {
                    Curry._1(dispatch, /* SetState */Block.__(2, [Utils$Coronate.dictToMap(results)]));
                    Curry._1(setIsLoaded, (function (param) {
                            return true;
                          }));
                  }
                  return Promise.resolve(results);
                }));
          return (function (param) {
                    didCancel[0] = false;
                    return /* () */0;
                  });
        }), /* tuple */[
        store,
        dispatch,
        setIsLoaded
      ]);
  React.useEffect((function (param) {
          if (isLoaded) {
            store.setItems(Utils$Coronate.mapToDict(items)).then((function (param) {
                    store.keys().then((function (keys) {
                            var stateKeys = Belt_MapString.keysToArray(items);
                            var deleted = keys.filter((function (x) {
                                    return !stateKeys.includes(x);
                                  }));
                            if (deleted.length > 0) {
                              store.deleteItems(deleted);
                            }
                            return Promise.resolve(/* () */0);
                          }));
                    return Promise.resolve(/* () */0);
                  }));
            return undefined;
          }
          
        }), /* tuple */[
        store,
        items,
        isLoaded
      ]);
  return /* tuple */[
          items,
          dispatch
        ];
}

function useAllPlayers(param) {
  return useAllItemsFromDb(playerStore, genericDbReducer);
}

function useAllTournaments(param) {
  return useAllItemsFromDb(tourneyStore, genericDbReducer);
}

function optionsReducer(state, action) {
  var avoidPairs = state.avoidPairs;
  var byeValue = state.byeValue;
  var lastBackup = state.lastBackup;
  switch (action.tag | 0) {
    case 0 : 
        return {
                avoidPairs: state.avoidPairs.concat(/* array */[action[0]]),
                byeValue: byeValue,
                lastBackup: lastBackup
              };
    case 1 : 
        var match = action[0];
        var user2 = match[1];
        var user1 = match[0];
        return {
                avoidPairs: state.avoidPairs.filter((function (param) {
                        var p2 = param[1];
                        var p1 = param[0];
                        return !(/* array */[
                                    p1,
                                    p2
                                  ].includes(user1) && /* array */[
                                    p1,
                                    p2
                                  ].includes(user2));
                      })),
                byeValue: byeValue,
                lastBackup: lastBackup
              };
    case 2 : 
        var id = action[0];
        return {
                avoidPairs: state.avoidPairs.filter((function (param) {
                        return !/* array */[
                                  param[0],
                                  param[1]
                                ].includes(id);
                      })),
                byeValue: byeValue,
                lastBackup: lastBackup
              };
    case 3 : 
        return {
                avoidPairs: action[0],
                byeValue: byeValue,
                lastBackup: lastBackup
              };
    case 4 : 
        return {
                avoidPairs: avoidPairs,
                byeValue: action[0],
                lastBackup: lastBackup
              };
    case 5 : 
        return {
                avoidPairs: avoidPairs,
                byeValue: byeValue,
                lastBackup: action[0]
              };
    
  }
}

function useOptionsDb(param) {
  React.useReducer(optionsReducer, Data$Coronate.defaultOptions);
  React.useState((function () {
          return false;
        }));
  React.useEffect((function () {
          var didCancel = /* record */[/* contents */false];
          return (function (param) {
                    didCancel[0] = true;
                    return /* () */0;
                  });
        }), ([]));
  return /* () */0;
}

var Db = /* module */[
  /* database_name */database_name,
  /* optionsStore */optionsStore,
  /* playerStore */playerStore,
  /* tourneyStore */tourneyStore,
  /* loadDemoDB */loadDemoDB,
  /* genericDbReducer */genericDbReducer,
  /* useAllItemsFromDb */useAllItemsFromDb,
  /* useAllPlayers */useAllPlayers,
  /* useAllTournaments */useAllTournaments,
  /* optionsReducer */optionsReducer,
  /* useOptionsDb */useOptionsDb
];

var $$Map = 0;

export {
  $$Map ,
  Db ,
  
}
/*  Not a pure module */
