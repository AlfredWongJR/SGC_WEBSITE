// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as ReactFeather from "react-feather";
import * as Belt_SortArray from "bs-platform/lib/es6/belt_SortArray.js";
import * as VisuallyHidden from "@reach/visually-hidden";

function ascend(getter, a, b) {
  return Caml_obj.caml_compare(Curry._1(getter, a), Curry._1(getter, b));
}

function descend(getter, a, b) {
  return Caml_obj.caml_compare(Curry._1(getter, b), Curry._1(getter, a));
}

function sortedTableReducer(state, action) {
  var newState;
  if (typeof action === "number") {
    newState = state;
  } else {
    switch (action.tag | 0) {
      case 0 : 
          newState = /* record */[
            /* isDescending */action[0],
            /* key */state[/* key */1],
            /* table */state[/* table */2]
          ];
          break;
      case 1 : 
          newState = /* record */[
            /* isDescending */state[/* isDescending */0],
            /* key */action[0],
            /* table */state[/* table */2]
          ];
          break;
      case 2 : 
          newState = /* record */[
            /* isDescending */state[/* isDescending */0],
            /* key */state[/* key */1],
            /* table */action[0]
          ];
          break;
      
    }
  }
  var match = newState[/* isDescending */0];
  var direction = match ? descend : ascend;
  var match$1 = newState[/* key */1];
  var sortFunc;
  if (match$1.tag) {
    sortFunc = Curry._1(direction, match$1[0]);
  } else {
    var func = match$1[0];
    sortFunc = Curry._1(direction, (function (str) {
            return Curry._1(func, str).toLowerCase();
          }));
  }
  var table = Belt_SortArray.stableSortBy(newState[/* table */2], sortFunc);
  return /* record */[
          /* isDescending */newState[/* isDescending */0],
          /* key */newState[/* key */1],
          /* table */table
        ];
}

function useSortedTable(table, key, isDescending) {
  var initialState = /* record */[
    /* isDescending */isDescending,
    /* key */key,
    /* table */table
  ];
  var match = React.useReducer(sortedTableReducer, initialState);
  var dispatch = match[1];
  React.useEffect((function () {
          Curry._1(dispatch, /* SortWithoutUpdating */0);
          return undefined;
        }), /* array */[dispatch]);
  return /* tuple */[
          match[0],
          dispatch
        ];
}

function Hooks$SortButton(Props) {
  var children = Props.children;
  var sortKey = Props.sortKey;
  var data = Props.data;
  var dispatch = Props.dispatch;
  var match = data[/* key */1] === sortKey;
  var chevronStyle = match ? ({
        opacity: "1"
      }) : ({
        opacity: "0"
      });
  var match$1 = data[/* isDescending */0];
  return React.createElement("button", {
              className: "button-micro dont-hide button-text-ghost title-20",
              style: {
                width: "100%"
              },
              onClick: (function (param) {
                  var match = data[/* key */1] === sortKey;
                  if (match) {
                    return Curry._1(dispatch, /* SetIsDescending */Block.__(0, [!data[/* isDescending */0]]));
                  } else {
                    return Curry._1(dispatch, /* SetKey */Block.__(1, [sortKey]));
                  }
                })
            }, React.createElement("span", {
                  "aria-hidden": true
                }, React.createElement(ReactFeather.ChevronUp, {
                      style: {
                        opacity: "0"
                      }
                    })), children, match$1 ? React.createElement("span", {
                    style: chevronStyle
                  }, React.createElement(ReactFeather.ChevronUp, { }), React.createElement(VisuallyHidden.default, {
                        children: "Sort ascending."
                      })) : React.createElement("span", {
                    style: chevronStyle
                  }, React.createElement(ReactFeather.ChevronDown, { }), React.createElement(VisuallyHidden.default, {
                        children: "Sort descending."
                      })));
}

var SortButton = /* module */[/* make */Hooks$SortButton];

function useLoadingCursorUntil(isLoaded) {
  React.useEffect((function () {
          if (isLoaded) {
            ((document.body.style.cursor = "auto"));
          } else {
            ((document.body.style.cursor = "wait"));
          }
          return (function (param) {
                    return (document.body.style.cursor = "auto");
                  });
        }), /* array */[isLoaded]);
  return /* () */0;
}

export {
  ascend ,
  descend ,
  sortedTableReducer ,
  useSortedTable ,
  SortButton ,
  useLoadingCursorUntil ,
  
}
/* react Not a pure module */
