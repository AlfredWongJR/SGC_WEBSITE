// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Localforage from "localforage";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as DemoData$Coronate from "./DemoData.bs.js";
import * as LocalforageSetitems from "localforage-setitems";
import * as LocalforageRemoveitems from "localforage-removeitems";

((require("localforage-getitems")));

LocalforageSetitems.extendPrototype(Localforage.default);

LocalforageRemoveitems.extendPrototype(Localforage.default);

var database_name = "Coronate";

var optionsStore = Localforage.createInstance({
      name: database_name,
      storeName: "Options"
    });

var playerStore = Localforage.createInstance({
      name: database_name,
      storeName: "Players"
    });

var tourneyStore = Localforage.createInstance({
      name: database_name,
      storeName: "Tournaments"
    });

function loadDemoDB(param) {
  document.body.style.cursor = "wait";
  Promise.all(/* tuple */[
          optionsStore.setItems(DemoData$Coronate.options),
          playerStore.setItems(DemoData$Coronate.players),
          tourneyStore.setItems(DemoData$Coronate.tournaments)
        ]).then((function (value) {
          window.alert("Demo data loaded!");
          document.body.style.cursor = "auto";
          return Promise.resolve(value);
        }));
  return /* () */0;
}

function allTournamentsReducer(state, action) {
  var tourney = action[0];
  return Belt_MapString.set(state, tourney.id, tourney);
}

function testreducer(a, b) {
  return b;
}

function useAllItemsFromDb(store) {
  var match = React.useReducer(testreducer, Belt_MapString.empty);
  var dispatch = match[1];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setIsLoaded = match$1[1];
  React.useEffect((function (param) {
          var didCancel = /* record */[/* contents */false];
          store.getItems().then((function (results) {
                  if (!didCancel[0]) {
                    Curry._1(dispatch, results);
                    Curry._1(setIsLoaded, (function (param) {
                            return true;
                          }));
                  }
                  return Promise.resolve(results);
                }));
          return (function (param) {
                    didCancel[0] = false;
                    return /* () */0;
                  });
        }), /* tuple */[
        store,
        dispatch,
        setIsLoaded
      ]);
  return /* () */0;
}

var Db = /* module */[
  /* database_name */database_name,
  /* optionsStore */optionsStore,
  /* playerStore */playerStore,
  /* tourneyStore */tourneyStore,
  /* loadDemoDB */loadDemoDB,
  /* allTournamentsReducer */allTournamentsReducer,
  /* testreducer */testreducer,
  /* useAllItemsFromDb */useAllItemsFromDb
];

export {
  Db ,
  
}
/*  Not a pure module */
