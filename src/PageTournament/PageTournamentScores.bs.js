// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Cn from "re-classnames/src/Cn.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Numeral from "numeral";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Tabs from "@reach/tabs";
import * as Data$Coronate from "../Data.bs.js";
import * as ReactFeather from "react-feather";
import * as Utils$Coronate from "../Utils.bs.js";
import * as Scoring$Coronate from "../Scoring.bs.js";
import * as Converters$Coronate from "../Converters.bs.js";
import * as VisuallyHidden from "@reach/visually-hidden";

function PageTournamentScores$ScoreTable(Props) {
  var match = Props.isCompact;
  var isCompact = match !== undefined ? match : false;
  var tourney = Props.tourney;
  var getPlayer = Props.getPlayer;
  var tieBreaks = tourney[/* tieBreaks */6];
  var roundList = tourney[/* roundList */5];
  var tieBreakNames = Scoring$Coronate.getTieBreakNames(tieBreaks);
  var standingTree = Scoring$Coronate.createStandingTree(Scoring$Coronate.createStandingList(tieBreaks, Converters$Coronate.matches2ScoreData(Data$Coronate.rounds2Matches(roundList, undefined, /* () */0))).filter((function (standing) {
              return standing[/* id */0] !== Data$Coronate.dummy_id;
            })));
  return React.createElement("table", {
              className: Cn.make(/* :: */[
                    "scores__table",
                    /* :: */[
                      Cn.ifTrue("scores__compact", isCompact),
                      /* [] */0
                    ]
                  ])
            }, React.createElement("caption", {
                  className: Cn.make(/* :: */[
                        Cn.ifTrue("title-30", isCompact),
                        /* :: */[
                          Cn.ifTrue("title-40", !isCompact),
                          /* [] */0
                        ]
                      ])
                }, "Score detail"), React.createElement("thead", undefined, React.createElement("tr", {
                      className: "scores__topHeader"
                    }, React.createElement("th", {
                          className: "title-10",
                          scope: "col"
                        }, "Rank"), React.createElement("th", {
                          className: "title-10",
                          scope: "col"
                        }, "Name"), React.createElement("th", {
                          className: "title-10",
                          scope: "col"
                        }, "Score"), isCompact ? null : tieBreakNames.map((function (name, i) {
                              return React.createElement("th", {
                                          key: String(i),
                                          className: "title-10",
                                          scope: "col"
                                        }, name);
                            })))), React.createElement("tbody", undefined, standingTree.map((function (standingsFlat, rank) {
                        return standingsFlat.map((function (standing, i) {
                                      var match = i === 0;
                                      return React.createElement("tr", {
                                                  key: standing[/* id */0],
                                                  className: "scores__row"
                                                }, match ? React.createElement("th", {
                                                        className: "table__number scores__rank",
                                                        rowSpan: standingsFlat.length,
                                                        scope: "row"
                                                      }, String(rank + 1 | 0)) : null, isCompact ? React.createElement("td", {
                                                        className: "scores__playerName"
                                                      }, Curry._1(getPlayer, standing[/* id */0])[/* firstName */0], Utils$Coronate.Entities[/* nbsp */0], Curry._1(getPlayer, standing[/* id */0])[/* lastName */2]) : React.createElement("th", {
                                                        className: "scores__playerName",
                                                        scope: "row"
                                                      }, Curry._1(getPlayer, standing[/* id */0])[/* firstName */0], Utils$Coronate.Entities[/* nbsp */0], Curry._1(getPlayer, standing[/* id */0])[/* lastName */2]), React.createElement("td", {
                                                      className: "table__number"
                                                    }, Numeral.default(standing[/* score */1]).format("1/2")), isCompact ? null : standing[/* tieBreaks */2].map((function (score, j) {
                                                          return React.createElement("td", {
                                                                      key: String(j),
                                                                      className: "table__number"
                                                                    }, Numeral.default(score).format("1/2"));
                                                        })));
                                    }));
                      }))));
}

var ScoreTable = /* module */[/* make */PageTournamentScores$ScoreTable];

function PageTournamentScores$SelectTieBreaks(Props) {
  var tourney = Props.tourney;
  var tourneyDispatch = Props.tourneyDispatch;
  var tieBreaks = tourney[/* tieBreaks */6];
  var match = React.useState((function () {
          return undefined;
        }));
  var setSelectedTb = match[1];
  var selectedTb = match[0];
  var defaultId = function (x) {
    if (x !== undefined) {
      return x;
    } else if (selectedTb !== undefined) {
      return selectedTb;
    } else {
      return 1;
    }
  };
  var toggleTb = function (id) {
    if (tieBreaks.includes(defaultId(id))) {
      Curry._1(tourneyDispatch, /* DelTieBreak */Block.__(1, [defaultId(id)]));
      return Curry._1(setSelectedTb, (function (param) {
                    return undefined;
                  }));
    } else {
      return Curry._1(tourneyDispatch, /* AddTieBreak */Block.__(0, [defaultId(id)]));
    }
  };
  var moveTb = function (direction) {
    if (selectedTb !== undefined) {
      var index = tieBreaks.indexOf(selectedTb);
      return Curry._1(tourneyDispatch, /* MoveTieBreak */Block.__(2, [
                    index,
                    index + direction | 0
                  ]));
    } else {
      return /* () */0;
    }
  };
  return React.createElement(Utils$Coronate.PanelContainer[/* make */0], {
              children: null,
              className: "content-area"
            }, React.createElement(Utils$Coronate.Panel[/* make */0], {
                  children: null
                }, React.createElement("div", {
                      className: "toolbar"
                    }, React.createElement("button", {
                          className: "button-micro",
                          disabled: selectedTb === undefined,
                          onClick: (function (param) {
                              return toggleTb(undefined);
                            })
                        }, "Toggle"), React.createElement("button", {
                          className: "button-micro",
                          disabled: selectedTb === undefined,
                          onClick: (function (param) {
                              return moveTb(-1);
                            })
                        }, React.createElement(ReactFeather.ArrowUp, { }), " Move up"), React.createElement("button", {
                          className: "button-micro",
                          disabled: selectedTb === undefined,
                          onClick: (function (param) {
                              return moveTb(1);
                            })
                        }, React.createElement(ReactFeather.ArrowDown, { }), " Move down"), React.createElement("button", {
                          className: Cn.make(/* :: */[
                                "button-micro",
                                /* :: */[
                                  Cn.ifSome("button-primary", selectedTb),
                                  /* [] */0
                                ]
                              ]),
                          disabled: selectedTb === undefined,
                          onClick: (function (param) {
                              return Curry._1(setSelectedTb, (function (param) {
                                            return undefined;
                                          }));
                            })
                        }, "Done")), React.createElement("table", undefined, React.createElement("caption", {
                          className: "title-30"
                        }, "Selected tiebreak methods"), React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", undefined, "Name"), React.createElement("th", undefined, React.createElement(VisuallyHidden.default, {
                                      children: "Controls"
                                    })))), React.createElement("tbody", {
                          className: "content"
                        }, tieBreaks.map((function (id) {
                                var tmp;
                                if (selectedTb !== undefined) {
                                  var match = selectedTb === id;
                                  tmp = match ? "Done" : "Edit";
                                } else {
                                  tmp = "Edit";
                                }
                                return React.createElement("tr", {
                                            key: String(id),
                                            className: Cn.make(/* :: */[
                                                  Cn.ifTrue("selected", selectedTb === id),
                                                  /* [] */0
                                                ])
                                          }, React.createElement("td", undefined, Caml_array.caml_array_get(Scoring$Coronate.tieBreakMethods, id)[/* name */2]), React.createElement("td", {
                                                style: {
                                                  width: "48px"
                                                }
                                              }, React.createElement("button", {
                                                    className: "button-micro",
                                                    disabled: selectedTb !== undefined && selectedTb !== id,
                                                    onClick: (function (param) {
                                                        if (selectedTb !== undefined) {
                                                          var match = selectedTb === id;
                                                          if (match) {
                                                            return Curry._1(setSelectedTb, (function (param) {
                                                                          return undefined;
                                                                        }));
                                                          } else {
                                                            return Curry._1(setSelectedTb, (function (param) {
                                                                          return id;
                                                                        }));
                                                          }
                                                        } else {
                                                          return Curry._1(setSelectedTb, (function (param) {
                                                                        return id;
                                                                      }));
                                                        }
                                                      })
                                                  }, tmp)));
                              }))))), React.createElement(Utils$Coronate.Panel[/* make */0], {
                  children: null
                }, React.createElement("div", {
                      className: "toolbar"
                    }, Utils$Coronate.Entities[/* nbsp */0]), React.createElement("table", {
                      style: {
                        marginTop: "16px"
                      }
                    }, React.createElement("caption", {
                          className: "title-30"
                        }, "Available tiebreak methods"), React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", undefined, "Name"), React.createElement("th", undefined, React.createElement(VisuallyHidden.default, {
                                      children: "Controls"
                                    })))), React.createElement("tbody", {
                          className: "content"
                        }, Scoring$Coronate.tieBreakMethods.map((function (m) {
                                var match = tieBreaks.includes(m[/* id */1]);
                                var match$1 = tieBreaks.includes(m[/* id */1]);
                                return React.createElement("tr", {
                                            key: String(m[/* id */1])
                                          }, React.createElement("td", undefined, React.createElement("span", {
                                                    className: match ? "disabled" : "enabled"
                                                  }, m[/* name */2])), React.createElement("td", undefined, match$1 ? null : React.createElement("button", {
                                                      className: "button-micro",
                                                      onClick: (function (param) {
                                                          return toggleTb(m[/* id */1]);
                                                        })
                                                    }, "Add")));
                              }))))));
}

var SelectTieBreaks = /* module */[/* make */PageTournamentScores$SelectTieBreaks];

function PageTournamentScores(Props) {
  var tournament = Props.tournament;
  var getPlayer = tournament[/* getPlayer */1];
  var tourney = tournament[/* tourney */7];
  var tourneyDispatch = tournament[/* tourneyDispatch */8];
  return React.createElement(Tabs.Tabs, {
              children: null
            }, React.createElement(Tabs.TabList, {
                  children: null
                }, React.createElement(Tabs.Tab, {
                      children: null
                    }, React.createElement(ReactFeather.List, { }), " Scores"), React.createElement(Tabs.Tab, {
                      children: null
                    }, React.createElement(ReactFeather.Settings, { }), " Edit tiebreak rules")), React.createElement(Tabs.TabPanels, {
                  children: null
                }, React.createElement(Tabs.TabPanel, {
                      children: React.createElement(PageTournamentScores$ScoreTable, {
                            tourney: tourney,
                            getPlayer: getPlayer
                          })
                    }), React.createElement(Tabs.TabPanel, {
                      children: React.createElement(PageTournamentScores$SelectTieBreaks, {
                            tourney: tourney,
                            tourneyDispatch: tourneyDispatch
                          })
                    })));
}

var make = PageTournamentScores;

export {
  ScoreTable ,
  SelectTieBreaks ,
  make ,
  
}
/* react Not a pure module */
