// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Numeral from "numeral";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Db$Coronate from "../Db.bs.js";
import * as Dialog from "@reach/dialog";
import * as Data$Coronate from "../Data.bs.js";
import * as ReactFeather from "react-feather";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as Hooks$Coronate from "../Hooks.bs.js";
import * as Utils$Coronate from "../Utils.bs.js";
import * as Pairing$Coronate from "../Pairing.bs.js";
import * as Scoring$Coronate from "../Scoring.bs.js";
import * as VisuallyHidden from "@reach/visually-hidden";
import * as PageTourneyPlayers$Coronate from "./PageTourneyPlayers.bs.js";

var sortByName = /* KeyString */Block.__(0, [(function (x) {
        return x[/* player */0][/* firstName */0];
      })]);

var sortByIdeal = /* KeyFloat */Block.__(2, [(function (x) {
        return x[/* ideal */1];
      })]);

function PairPicker$SelectList(Props) {
  var pairData = Props.pairData;
  var stagedPlayers = Props.stagedPlayers;
  var setStagedPlayers = Props.setStagedPlayers;
  var unmatched = Props.unmatched;
  var p2 = stagedPlayers[1];
  var p1 = stagedPlayers[0];
  var stagePlayersOption_000 = (p1 == null) ? undefined : Caml_option.some(p1);
  var stagePlayersOption_001 = (p2 == null) ? undefined : Caml_option.some(p2);
  var stagePlayersOption = /* tuple */[
    stagePlayersOption_000,
    stagePlayersOption_001
  ];
  var initialTable = Belt_MapString.valuesToArray(unmatched).map((function (player) {
          return /* record */[
                  /* player */player,
                  /* ideal */0.0
                ];
        }));
  var match = Hooks$Coronate.useSortedTable(initialTable, sortByName, true);
  var sortedDispatch = match[1];
  var sorted = match[0];
  var isNullSelected = /* array */[
      p1,
      p2
    ].includes(null);
  var isOnePlayerSelected = p1 !== p2 && isNullSelected;
  var isPlayerSelectable = function (id) {
    var match = stagePlayersOption_000;
    if (match !== undefined) {
      if (stagePlayersOption_001 !== undefined) {
        return false;
      } else {
        return match !== id;
      }
    } else {
      var match$1 = stagePlayersOption_001;
      if (match$1 !== undefined) {
        return match$1 !== id;
      } else {
        return true;
      }
    }
  };
  React.useEffect((function (param) {
          var calcIdealOrNot = function (player) {
            var match = stagePlayersOption_000;
            var selectedId;
            if (match !== undefined) {
              selectedId = stagePlayersOption_001 !== undefined ? undefined : match;
            } else {
              var match$1 = stagePlayersOption_001;
              selectedId = match$1 !== undefined ? match$1 : undefined;
            }
            if (selectedId !== undefined) {
              var match$2 = Belt_MapString.get(pairData, selectedId);
              if (match$2 !== undefined) {
                if (player !== undefined) {
                  return Pairing$Coronate.calcPairIdeal(match$2, player) / Pairing$Coronate.maxPriority;
                } else {
                  return 0.0;
                }
              } else {
                return 0.0;
              }
            } else {
              return 0.0;
            }
          };
          var table = Belt_MapString.valuesToArray(unmatched).map((function (player) {
                  return /* record */[
                          /* player */player,
                          /* ideal */calcIdealOrNot(Belt_MapString.get(pairData, player[/* id */1]))
                        ];
                }));
          Curry._1(sortedDispatch, /* SetTable */Block.__(2, [table]));
          return undefined;
        }), /* tuple */[
        unmatched,
        pairData,
        sortedDispatch,
        stagePlayersOption
      ]);
  var match$1 = Belt_MapString.keysToArray(unmatched).length === 0;
  if (match$1) {
    return null;
  } else {
    return React.createElement("table", {
                className: "content"
              }, React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", undefined, React.createElement(VisuallyHidden.default, {
                                children: "Controls"
                              })), React.createElement("th", undefined, React.createElement(Hooks$Coronate.SortButton[/* make */0], {
                                children: "Name",
                                sortKey: sortByName,
                                data: sorted,
                                dispatch: sortedDispatch
                              })), React.createElement("th", undefined, React.createElement(Hooks$Coronate.SortButton[/* make */0], {
                                children: "Ideal",
                                sortKey: sortByIdeal,
                                data: sorted,
                                dispatch: sortedDispatch
                              })))), React.createElement("tbody", undefined, sorted[/* table */2].map((function (param) {
                          var player = param[/* player */0];
                          return React.createElement("tr", {
                                      key: player[/* id */1]
                                    }, React.createElement("td", undefined, React.createElement("button", {
                                              className: "button-ghost",
                                              disabled: !isPlayerSelectable(player[/* id */1]),
                                              onClick: (function (param) {
                                                  var id = player[/* id */1];
                                                  var match = stagePlayersOption_000;
                                                  if (match !== undefined) {
                                                    if (stagePlayersOption_001 !== undefined) {
                                                      return /* () */0;
                                                    } else {
                                                      var p1 = match;
                                                      return Curry._1(setStagedPlayers, (function (param) {
                                                                    return /* tuple */[
                                                                            p1,
                                                                            id
                                                                          ];
                                                                  }));
                                                    }
                                                  } else {
                                                    var match$1 = stagePlayersOption_001;
                                                    if (match$1 !== undefined) {
                                                      var p2 = match$1;
                                                      return Curry._1(setStagedPlayers, (function (param) {
                                                                    return /* tuple */[
                                                                            id,
                                                                            p2
                                                                          ];
                                                                  }));
                                                    } else {
                                                      return Curry._1(setStagedPlayers, (function (param) {
                                                                    return /* tuple */[
                                                                            id,
                                                                            null
                                                                          ];
                                                                  }));
                                                    }
                                                  }
                                                })
                                            }, React.createElement(ReactFeather.UserPlus, { }), React.createElement(VisuallyHidden.default, {
                                                  children: /* array */[
                                                      "Add",
                                                      player[/* firstName */0],
                                                      player[/* lastName */2]
                                                    ].join(" ")
                                                }))), React.createElement("td", undefined, player[/* firstName */0] + (" " + player[/* lastName */2])), React.createElement("td", undefined, isOnePlayerSelected ? Numeral.default(param[/* ideal */1]).format("%") : "-"));
                        }))));
  }
}

var SelectList = /* module */[/* make */PairPicker$SelectList];

function PairPicker$Stage(Props) {
  var getPlayer = Props.getPlayer;
  var pairData = Props.pairData;
  var roundId = Props.roundId;
  var stagedPlayers = Props.stagedPlayers;
  var setStagedPlayers = Props.setStagedPlayers;
  var tourneyDispatch = Props.tourneyDispatch;
  var byeValue = Props.byeValue;
  var stagedPlayersOption_000 = Caml_option.nullable_to_opt(stagedPlayers[0]);
  var stagedPlayersOption_001 = Caml_option.nullable_to_opt(stagedPlayers[1]);
  var blackOpt = stagedPlayersOption_001;
  var whiteOpt = stagedPlayersOption_000;
  var noneAreSelected = stagedPlayersOption_000 !== undefined ? false : stagedPlayersOption_001 === undefined;
  var twoAreSelected = stagedPlayersOption_000 !== undefined ? stagedPlayersOption_001 !== undefined : false;
  var whiteName;
  if (whiteOpt !== undefined) {
    var player = whiteOpt;
    whiteName = Curry._1(getPlayer, player)[/* firstName */0] + (" " + Curry._1(getPlayer, player)[/* lastName */2]);
  } else {
    whiteName = "";
  }
  var blackName;
  if (blackOpt !== undefined) {
    var player$1 = blackOpt;
    blackName = Curry._1(getPlayer, player$1)[/* firstName */0] + (" " + Curry._1(getPlayer, player$1)[/* lastName */2]);
  } else {
    blackName = "";
  }
  var unstage = function (color) {
    if (color) {
      return Curry._1(setStagedPlayers, (function (param) {
                    return /* tuple */[
                            param[0],
                            null
                          ];
                  }));
    } else {
      return Curry._1(setStagedPlayers, (function (param) {
                    return /* tuple */[
                            null,
                            param[1]
                          ];
                  }));
    }
  };
  var match_ = function (param) {
    var match = stagedPlayersOption_000;
    if (match !== undefined) {
      var match$1 = stagedPlayersOption_001;
      if (match$1 !== undefined) {
        Curry._1(tourneyDispatch, /* ManualPair */Block.__(7, [
                byeValue,
                /* tuple */[
                  Curry._1(getPlayer, match),
                  Curry._1(getPlayer, match$1)
                ],
                roundId
              ]));
        return Curry._1(setStagedPlayers, (function (param) {
                      return /* tuple */[
                              null,
                              null
                            ];
                    }));
      } else {
        return /* () */0;
      }
    } else {
      return /* () */0;
    }
  };
  var match = stagedPlayersOption_000;
  var matchIdeal;
  if (match !== undefined) {
    var match$1 = stagedPlayersOption_001;
    if (match$1 !== undefined) {
      var match$2 = Belt_MapString.get(pairData, match);
      var match$3 = Belt_MapString.get(pairData, match$1);
      if (match$2 !== undefined && match$3 !== undefined) {
        var ideal = Pairing$Coronate.calcPairIdeal(match$2, match$3);
        matchIdeal = Numeral.default(ideal / Pairing$Coronate.maxPriority).format("%");
      } else {
        matchIdeal = "";
      }
    } else {
      matchIdeal = "";
    }
  } else {
    matchIdeal = "";
  }
  return React.createElement("div", undefined, React.createElement("h2", undefined, "Selected for matching:"), React.createElement("div", {
                  className: "content"
                }, React.createElement("p", undefined, "White: ", whiteOpt !== undefined ? React.createElement(React.Fragment, undefined, whiteName + " ", React.createElement("button", {
                                "aria-label": "remove " + whiteName,
                                className: "button-micro",
                                onClick: (function (param) {
                                    return unstage(/* White */0);
                                  })
                              }, React.createElement(ReactFeather.UserMinus, { }), " Remove")) : null), React.createElement("p", undefined, "Black: ", blackOpt !== undefined ? React.createElement(React.Fragment, undefined, blackName + " ", React.createElement("button", {
                                "aria-label": "remove " + blackName,
                                className: "button-micro",
                                onClick: (function (param) {
                                    return unstage(/* Black */1);
                                  })
                              }, React.createElement(ReactFeather.UserMinus, { }), " Remove")) : null), React.createElement("p", undefined, "Match ideal: " + matchIdeal)), React.createElement("div", {
                  className: "toolbar"
                }, React.createElement("button", {
                      disabled: noneAreSelected,
                      onClick: (function (param) {
                          return Curry._1(setStagedPlayers, (function (param) {
                                        return /* tuple */[
                                                param[1],
                                                param[0]
                                              ];
                                      }));
                        })
                    }, React.createElement(ReactFeather.Repeat, { }), " Swap colors"), " ", React.createElement("button", {
                      className: "button-primary",
                      disabled: !twoAreSelected,
                      onClick: match_
                    }, React.createElement(ReactFeather.Check, { }), " Match selected")));
}

var Stage = /* module */[/* make */PairPicker$Stage];

function PairPicker$PlayerInfo(Props) {
  var playerId = Props.playerId;
  var players = Props.players;
  var getPlayer = Props.getPlayer;
  var scoreData = Props.scoreData;
  var avoidPairs = Props.avoidPairs;
  var avoidMap = avoidPairs.reduce(Data$Coronate.avoidPairReducer, Belt_MapString.empty);
  var match = Belt_MapString.get(scoreData, playerId);
  var playerData = match !== undefined ? match : Scoring$Coronate.createBlankScoreData(playerId);
  var colorScores = playerData[/* colorScores */0];
  var opponentResults = playerData[/* opponentResults */4];
  var results = playerData[/* results */7];
  var colorBalance = Utils$Coronate.listSumFloat(colorScores);
  var player = Curry._1(getPlayer, playerId);
  var hasBye = Belt_MapString.keysToArray(opponentResults).includes(Data$Coronate.dummy_id);
  var match$1 = Belt_MapString.get(avoidMap, playerId);
  var avoidList = match$1 !== undefined ? match$1 : /* [] */0;
  var prettyBalance = colorBalance < 0.0 ? "White +" + Utils$Coronate.absf(colorBalance).toString() : (
      colorBalance > 0.0 ? "Black +" + colorBalance.toString() : "Even"
    );
  return React.createElement("dl", {
              className: "player-card"
            }, React.createElement("h3", undefined, player[/* firstName */0] + (" " + player[/* lastName */2])), React.createElement("p", undefined, "Score: ", Utils$Coronate.listSumFloat(results).toString()), React.createElement("p", {
                  id: "rating-" + player[/* id */1]
                }, "Rating: ", player[/* rating */4].toString()), React.createElement("p", undefined, "Color balance: " + prettyBalance), React.createElement("p", undefined, "Has had a bye round: " + (
                  hasBye ? "Yes" : "No"
                )), React.createElement("p", undefined, "Opponent history:"), React.createElement("ol", undefined, Belt_Array.map(Belt_MapString.toArray(opponentResults), (function (param) {
                        var result = param[1];
                        var opId = param[0];
                        return React.createElement("li", {
                                    key: opId
                                  }, /* array */[
                                      Curry._1(getPlayer, opId)[/* firstName */0],
                                      Curry._1(getPlayer, opId)[/* lastName */2],
                                      "-",
                                      result !== 0.0 ? (
                                          result !== 0.5 && result === 1.0 ? "Won" : "Draw"
                                        ) : "Lost"
                                    ].join(" "));
                      }))), React.createElement("p", undefined, "Players to avoid:"), React.createElement("ol", undefined, Utils$Coronate.listToReactArray(avoidList, (function (pId) {
                        var match = Belt_MapString.get(players, pId);
                        if (match !== undefined) {
                          return React.createElement("li", {
                                      key: pId
                                    }, Curry._1(getPlayer, pId)[/* firstName */0] + (" " + Curry._1(getPlayer, pId)[/* lastName */2]));
                        } else {
                          return null;
                        }
                      }))));
}

var PlayerInfo = /* module */[/* make */PairPicker$PlayerInfo];

function PairPicker(Props) {
  var roundId = Props.roundId;
  var tournament = Props.tournament;
  var scoreData = Props.scoreData;
  var unmatched = Props.unmatched;
  var unmatchedCount = Props.unmatchedCount;
  var unmatchedWithDummy = Props.unmatchedWithDummy;
  var match = React.useState((function () {
          return /* tuple */[
                  null,
                  null
                ];
        }));
  var stagedPlayers = match[0];
  var p2 = stagedPlayers[1];
  var p1 = stagedPlayers[0];
  var setStagedPlayers = match[1];
  var match$1 = Db$Coronate.useConfig(/* () */0);
  var config = match$1[0];
  var avoidPairs = config[/* avoidPairs */0];
  var byeValue = config[/* byeValue */1];
  var tourney = tournament[/* tourney */7];
  var activePlayers = tournament[/* activePlayers */0];
  var players = tournament[/* players */4];
  var getPlayer = tournament[/* getPlayer */1];
  var tourneyDispatch = tournament[/* tourneyDispatch */8];
  var match$2 = React.useState((function () {
          return false;
        }));
  var setIsModalOpen = match$2[1];
  var pairData = React.useMemo((function () {
          return Pairing$Coronate.setUpperHalves(Data$Coronate.Converters[/* createPairingData */10](activePlayers, avoidPairs, scoreData));
        }), /* tuple */[
        activePlayers,
        avoidPairs,
        scoreData
      ]);
  React.useEffect((function (param) {
          if (!(p1 == null)) {
            var match = Belt_MapString.get(unmatchedWithDummy, p1);
            if (match === undefined) {
              Curry._1(setStagedPlayers, (function (param) {
                      return /* tuple */[
                              null,
                              param[1]
                            ];
                    }));
            }
            
          }
          if (!(p2 == null)) {
            var match$1 = Belt_MapString.get(unmatchedWithDummy, p2);
            if (match$1 === undefined) {
              Curry._1(setStagedPlayers, (function (param) {
                      return /* tuple */[
                              param[0],
                              null
                            ];
                    }));
            }
            
          }
          return undefined;
        }), /* tuple */[
        unmatchedWithDummy,
        p1,
        p2,
        setStagedPlayers
      ]);
  return React.createElement("div", {
              className: "content-area",
              style: {
                width: "720px"
              }
            }, React.createElement("div", {
                  className: "toolbar"
                }, React.createElement("button", {
                      className: "button-primary",
                      disabled: unmatchedCount === 0,
                      onClick: (function (param) {
                          return Curry._1(tourneyDispatch, /* AutoPair */Block.__(6, [
                                        config[/* byeValue */1],
                                        roundId,
                                        pairData,
                                        unmatched,
                                        tourney
                                      ]));
                        })
                    }, "Auto-pair unmatched players"), " ", React.createElement("button", {
                      onClick: (function (param) {
                          return Curry._1(setIsModalOpen, (function (param) {
                                        return true;
                                      }));
                        })
                    }, "Add or remove players from the roster.")), React.createElement(Utils$Coronate.PanelContainer[/* make */0], {
                  children: null
                }, React.createElement(Utils$Coronate.Panel[/* make */0], {
                      children: React.createElement(PairPicker$SelectList, {
                            pairData: pairData,
                            stagedPlayers: stagedPlayers,
                            setStagedPlayers: setStagedPlayers,
                            unmatched: unmatchedWithDummy
                          })
                    }), React.createElement(Utils$Coronate.Panel[/* make */0], {
                      children: null,
                      style: {
                        flexGrow: "1"
                      }
                    }, React.createElement(PairPicker$Stage, {
                          getPlayer: getPlayer,
                          pairData: pairData,
                          roundId: roundId,
                          stagedPlayers: stagedPlayers,
                          setStagedPlayers: setStagedPlayers,
                          tourneyDispatch: tourneyDispatch,
                          byeValue: byeValue
                        }), React.createElement(Utils$Coronate.PanelContainer[/* make */0], {
                          children: /* array */[
                              p1,
                              p2
                            ].map((function (id) {
                                  if (id == null) {
                                    return null;
                                  } else {
                                    return React.createElement(Utils$Coronate.Panel[/* make */0], {
                                                children: React.createElement(PairPicker$PlayerInfo, {
                                                      playerId: id,
                                                      players: players,
                                                      getPlayer: getPlayer,
                                                      scoreData: scoreData,
                                                      avoidPairs: avoidPairs
                                                    }),
                                                key: id
                                              });
                                  }
                                }))
                        }))), React.createElement(Dialog.Dialog, {
                  isOpen: match$2[0],
                  onDismiss: (function (param) {
                      return Curry._1(setIsModalOpen, (function (param) {
                                    return false;
                                  }));
                    }),
                  children: null
                }, React.createElement("button", {
                      className: "button-micro",
                      onClick: (function (param) {
                          return Curry._1(setIsModalOpen, (function (param) {
                                        return false;
                                      }));
                        })
                    }, "Done"), React.createElement(PageTourneyPlayers$Coronate.Selecting[/* make */0], {
                      tourney: tourney,
                      tourneyDispatch: tourneyDispatch
                    })));
}

var make = PairPicker;

export {
  sortByName ,
  sortByIdeal ,
  SelectList ,
  Stage ,
  PlayerInfo ,
  make ,
  
}
/* react Not a pure module */
