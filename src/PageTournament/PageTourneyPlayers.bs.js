// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Cn from "re-classnames/src/Cn.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Db$Coronate from "../Db.bs.js";
import * as Dialog from "@reach/dialog";
import * as Data$Coronate from "../Data.bs.js";
import * as ReactFeather from "react-feather";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as Utils$Coronate from "../Utils.bs.js";
import * as PagePlayers$Coronate from "../PagePlayers.bs.js";
import * as VisuallyHidden from "@reach/visually-hidden";

function PageTourneyPlayers$Selecting(Props) {
  var tourney = Props.tourney;
  var tourneyDispatch = Props.tourneyDispatch;
  var match = Db$Coronate.useAllPlayers(/* () */0);
  var players = match[0];
  var togglePlayer = function ($$event) {
    var id = $$event.target.value;
    if ($$event.target.checked) {
      return Curry._1(tourneyDispatch, /* SetTourneyPlayers */Block.__(3, [tourney[/* playerIds */4].concat(/* array */[id])]));
    } else {
      return Curry._1(tourneyDispatch, /* SetTourneyPlayers */Block.__(3, [tourney[/* playerIds */4].filter((function (pId) {
                            return pId !== id;
                          }))]));
    }
  };
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "toolbar"
                }, React.createElement("button", {
                      className: "button-micro",
                      onClick: (function (param) {
                          return Curry._1(tourneyDispatch, /* SetTourneyPlayers */Block.__(3, [Belt_MapString.keysToArray(players)]));
                        })
                    }, "Select all"), React.createElement("button", {
                      className: "button-micro",
                      onClick: (function (param) {
                          return Curry._1(tourneyDispatch, /* SetTourneyPlayers */Block.__(3, [/* array */[]]));
                        })
                    }, "Select none")), React.createElement("table", undefined, React.createElement("caption", undefined, "Select players"), React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", undefined, "First name"), React.createElement("th", undefined, "Last name"), React.createElement("th", undefined, "Select"))), React.createElement("tbody", undefined, Belt_MapString.valuesToArray(players).map((function (p) {
                            return React.createElement("tr", {
                                        key: p[/* id */1]
                                      }, React.createElement("td", undefined, p[/* firstName */0]), React.createElement("td", undefined, p[/* lastName */2]), React.createElement("td", undefined, React.createElement(VisuallyHidden.default, {
                                                children: React.createElement("label", {
                                                      htmlFor: "select-" + p[/* id */1]
                                                    }, /* array */[
                                                        "Select",
                                                        p[/* firstName */0],
                                                        p[/* lastName */2]
                                                      ].join(" "))
                                              }), React.createElement("input", {
                                                id: "select-" + p[/* id */1],
                                                checked: tourney[/* playerIds */4].includes(p[/* id */1]),
                                                type: "checkbox",
                                                value: p[/* id */1],
                                                onChange: togglePlayer
                                              })));
                          })))), React.createElement(PagePlayers$Coronate.NewPlayerForm[/* make */0], {
                  dispatch: match[1]
                }));
}

var Selecting = /* module */[/* make */PageTourneyPlayers$Selecting];

function hasHadBye(matchList, playerId) {
  return matchList.filter((function (match_) {
                    return /* array */[
                              match_[/* whiteId */1],
                              match_[/* blackId */2]
                            ].includes(playerId);
                  })).reduce((function (acc, match_) {
                  return acc.concat(/* array */[
                              match_[/* whiteId */1],
                              match_[/* blackId */2]
                            ]);
                }), /* array */[]).includes(Data$Coronate.dummy_id);
}

function PageTourneyPlayers$PlayerList(Props) {
  var players = Props.players;
  var tourneyDispatch = Props.tourneyDispatch;
  var byeQueue = Props.byeQueue;
  return React.createElement(React.Fragment, undefined, Belt_MapString.valuesToArray(players).map((function (p) {
                    return React.createElement("tr", {
                                key: p[/* id */1],
                                className: Cn.make(/* :: */[
                                      p[/* type_ */5],
                                      /* :: */[
                                        "player",
                                        /* [] */0
                                      ]
                                    ])
                              }, React.createElement("td", undefined, p[/* firstName */0]), React.createElement("td", undefined, p[/* lastName */2]), React.createElement("td", undefined, React.createElement("button", {
                                        className: "button-micro",
                                        disabled: byeQueue.includes(p[/* id */1]),
                                        onClick: (function (param) {
                                            return Curry._1(tourneyDispatch, /* SetByeQueue */Block.__(4, [byeQueue.concat(/* array */[p[/* id */1]])]));
                                          })
                                      }, "Bye signup")));
                  })));
}

var PlayerList = /* module */[/* make */PageTourneyPlayers$PlayerList];

function PageTourneyPlayers(Props) {
  var tournament = Props.tournament;
  var tourney = tournament[/* tourney */7];
  var playerIds = tourney[/* playerIds */4];
  var byeQueue = tourney[/* byeQueue */0];
  var tourneyDispatch = tournament[/* tourneyDispatch */8];
  var activePlayers = tournament[/* activePlayers */0];
  var match = React.useState((function () {
          return playerIds.length === 0;
        }));
  var setIsSelecting = match[1];
  var matches = Data$Coronate.rounds2Matches(tourney[/* roundList */5], undefined, /* () */0);
  var match$1 = byeQueue.length;
  return React.createElement("div", {
              className: "content-area"
            }, React.createElement("div", {
                  className: "toolbar"
                }, React.createElement("button", {
                      onClick: (function (param) {
                          return Curry._1(setIsSelecting, (function (param) {
                                        return true;
                                      }));
                        })
                    }, React.createElement(ReactFeather.Edit, { }), " Edit player roster")), React.createElement(Utils$Coronate.PanelContainer[/* make */0], {
                  children: null
                }, React.createElement(Utils$Coronate.Panel[/* make */0], {
                      children: React.createElement("table", undefined, React.createElement("caption", undefined, "Current roster"), React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", {
                                        colSpan: 2
                                      }, "Name"), React.createElement("th", undefined, "Options"))), React.createElement("tbody", {
                                className: "content"
                              }, React.createElement(PageTourneyPlayers$PlayerList, {
                                    players: activePlayers,
                                    tourneyDispatch: tourneyDispatch,
                                    byeQueue: byeQueue
                                  }))),
                      style: {
                        flexShrink: "0"
                      }
                    }), React.createElement(Utils$Coronate.Panel[/* make */0], {
                      children: null
                    }, React.createElement("h3", undefined, "Bye queue"), match$1 !== 0 ? null : React.createElement("p", undefined, "No players have signed up for a bye round."), React.createElement("ol", undefined, byeQueue.map((function (pId) {
                                return React.createElement("li", {
                                            key: pId,
                                            className: Cn.make(/* :: */[
                                                  "buttons-on-hover",
                                                  /* :: */[
                                                    Cn.ifTrue("disabled", hasHadBye(matches, pId)),
                                                    /* [] */0
                                                  ]
                                                ])
                                          }, Belt_MapString.getExn(activePlayers, pId)[/* firstName */0] + (" " + (Belt_MapString.getExn(activePlayers, pId)[/* lastName */2] + " ")), React.createElement("button", {
                                                className: "button-micro",
                                                onClick: (function (param) {
                                                    return Curry._1(tourneyDispatch, /* SetByeQueue */Block.__(4, [byeQueue.filter((function (id) {
                                                                          return pId !== id;
                                                                        }))]));
                                                  })
                                              }, "Remove"));
                              })))), React.createElement(Dialog.Dialog, {
                      isOpen: match[0],
                      onDismiss: (function (param) {
                          return Curry._1(setIsSelecting, (function (param) {
                                        return false;
                                      }));
                        }),
                      children: null
                    }, React.createElement("button", {
                          className: "button-micro button-primary",
                          onClick: (function (param) {
                              return Curry._1(setIsSelecting, (function (param) {
                                            return false;
                                          }));
                            })
                        }, "Done"), React.createElement(PageTourneyPlayers$Selecting, {
                          tourney: tourney,
                          tourneyDispatch: tourneyDispatch
                        }))));
}

var make = PageTourneyPlayers;

export {
  Selecting ,
  hasHadBye ,
  PlayerList ,
  make ,
  
}
/* react Not a pure module */
