// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Numeral from "numeral";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Data$Coronate from "../Data.bs.js";
import * as ReactFeather from "react-feather";
import * as Utils$Coronate from "../Utils.bs.js";
import * as Scoring$Coronate from "../Scoring.bs.js";
import * as Converters$Coronate from "../Converters.bs.js";

function PageTourneyCrossTable(Props) {
  var tournament = Props.tournament;
  var tourney = tournament[/* tourney */7];
  var getPlayer = tournament[/* getPlayer */1];
  var tieBreaks = tourney[/* tieBreaks */6];
  var roundList = tourney[/* roundList */5];
  var scoreData = Converters$Coronate.matches2ScoreData(Data$Coronate.rounds2Matches(roundList, undefined, /* () */0));
  var standings = Scoring$Coronate.createStandingList(tieBreaks, scoreData);
  var getXScore = function (player1Id, player2Id) {
    if (player1Id === player2Id) {
      return React.createElement(ReactFeather.X, {
                  className: "disabled"
                });
    } else {
      var match = Js_dict.get(scoreData, player1Id);
      if (match !== undefined) {
        var match$1 = Js_dict.get(match[/* opponentResults */4], player2Id);
        if (match$1 !== undefined) {
          return Numeral.default(match$1).format("1/2");
        } else {
          return null;
        }
      } else {
        return null;
      }
    }
  };
  var getRatingChangeTds = function (playerId) {
    var firstRating = Caml_array.caml_array_get(scoreData[playerId][/* ratings */5], 0);
    var lastRating = Utils$Coronate.last(scoreData[playerId][/* ratings */5]);
    var change = Numeral.default(lastRating - firstRating).format("+0");
    return React.createElement(React.Fragment, undefined, React.createElement("td", {
                    className: "table__number"
                  }, lastRating.toString()), React.createElement("td", {
                    className: "table__number body-10"
                  }, change));
  };
  return React.createElement("table", {
              className: "scores__table"
            }, React.createElement("caption", undefined, "Crosstable"), React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", undefined, "#"), React.createElement("th", undefined, "Name"), standings.map((function (param, rank) {
                            return React.createElement("th", {
                                        key: String(rank)
                                      }, String(rank + 1 | 0));
                          })), React.createElement("th", undefined, "Score"), React.createElement("th", {
                          colSpan: 2
                        }, "Rating"))), React.createElement("tbody", undefined, standings.map((function (standing, index) {
                        return React.createElement("tr", {
                                    key: String(index),
                                    className: "scores__row"
                                  }, React.createElement("th", {
                                        className: "scores__rank",
                                        scope: "col"
                                      }, String(index + 1 | 0)), React.createElement("th", {
                                        className: "scores__playerName",
                                        scope: "row"
                                      }, Curry._1(getPlayer, standing[/* id */0])[/* firstName */0], Utils$Coronate.Entities[/* nbsp */0], Curry._1(getPlayer, standing[/* id */0])[/* lastName */2]), standings.map((function (opponent, index2) {
                                          return React.createElement("td", {
                                                      key: String(index2),
                                                      className: "table__number"
                                                    }, getXScore(standing[/* id */0], opponent[/* id */0]));
                                        })), React.createElement("td", {
                                        className: "table__number"
                                      }, Numeral.default(standing[/* score */1]).format("1/2")), getRatingChangeTds(standing[/* id */0]));
                      }))));
}

var make = PageTourneyCrossTable;

export {
  make ,
  
}
/* react Not a pure module */
