// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/bs-jest/src/jest.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as JestDom from "bs-jest-dom/src/JestDom.bs.js";
import * as PageRound$Coronate from "../PageTournament/PageRound.bs.js";
import * as ReactTestingLibrary from "bs-react-testing-library/src/ReactTestingLibrary.bs.js";
import * as TournamentData$Coronate from "../PageTournament/TournamentData.bs.js";

function RoundPanels_test$BattleForGothamCityRound(Props) {
  var children = Props.children;
  return React.createElement(TournamentData$Coronate.make, {
              children: children,
              tourneyId: "tvAdS4YbSOznrBgrg0ITA"
            });
}

var BattleForGothamCityRound = /* module */[/* make */RoundPanels_test$BattleForGothamCityRound];

function regex(text) {
  return /* `RegExp */[
          889580489,
          new RegExp(text)
        ];
}

Jest.describe("Tabs aut-change correctly.", (function (param) {
        var page = ReactTestingLibrary.render(undefined, undefined, React.createElement(RoundPanels_test$BattleForGothamCityRound, {
                  children: (function (t) {
                      return React.createElement(PageRound$Coronate.make, {
                                  roundId: 1,
                                  tournament: t
                                });
                    })
                }));
        var partial_arg_001 = new RegExp("/^unmatched players \\([0-9]+\\)$/i");
        var partial_arg = /* `RegExp */[
          889580489,
          partial_arg_001
        ];
        var selectTab = (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return ReactTestingLibrary.getByText(partial_arg, param, param$1);
            })(page);
        var partial_arg_001$1 = new RegExp("/^matches$/i");
        var partial_arg$1 = /* `RegExp */[
          889580489,
          partial_arg_001$1
        ];
        var matchesTab = (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return ReactTestingLibrary.getByText(partial_arg$1, param, param$1);
            })(page);
        Jest.test("When no players are matched, it defaults to the pair-picker", (function (param) {
                return JestDom.toHaveAttribute("aria-selected", "true", Jest.Expect[/* expect */0](selectTab));
              }));
        Jest.test("Tab doesn't change focus if there are still players to be matched.", (function (param) {
                var arg = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001 = new RegExp("/add bruce wayne/i");
                var partial_arg = /* `RegExp */[
                  889580489,
                  partial_arg_001
                ];
                ((function (eta) {
                        return Curry._2(arg, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg, param, param$1);
                          })(page)));
                var arg$1 = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001$1 = new RegExp("/add dick grayson/i");
                var partial_arg$1 = /* `RegExp */[
                  889580489,
                  partial_arg_001$1
                ];
                ((function (eta) {
                        return Curry._2(arg$1, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg$1, param, param$1);
                          })(page)));
                var arg$2 = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001$2 = new RegExp("/^match selected$/i");
                var partial_arg$2 = /* `RegExp */[
                  889580489,
                  partial_arg_001$2
                ];
                ((function (eta) {
                        return Curry._2(arg$2, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg$2, param, param$1);
                          })(page)));
                return JestDom.toHaveAttribute("aria-selected", "true", Jest.Expect[/* expect */0](selectTab));
              }));
        Jest.test("The tab selection doesn't change if there are still matched players", (function (param) {
                var arg = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001 = new RegExp("/add alfred pennyworth/i");
                var partial_arg = /* `RegExp */[
                  889580489,
                  partial_arg_001
                ];
                ((function (eta) {
                        return Curry._2(arg, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg, param, param$1);
                          })(page)));
                var arg$1 = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001$1 = new RegExp("/add barbara gordon/i");
                var partial_arg$1 = /* `RegExp */[
                  889580489,
                  partial_arg_001$1
                ];
                ((function (eta) {
                        return Curry._2(arg$1, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg$1, param, param$1);
                          })(page)));
                var arg$2 = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001$2 = new RegExp("/^match selected$/i");
                var partial_arg$2 = /* `RegExp */[
                  889580489,
                  partial_arg_001$2
                ];
                ((function (eta) {
                        return Curry._2(arg$2, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg$2, param, param$1);
                          })(page)));
                var arg$3 = ReactTestingLibrary.FireEvent[/* click */8];
                ((function (eta) {
                        return Curry._2(arg$3, undefined, eta);
                      })(matchesTab));
                var arg$4 = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001$3 = new RegExp("/edit match for bruce wayne versus dick grayson/i");
                var partial_arg$3 = /* `RegExp */[
                  889580489,
                  partial_arg_001$3
                ];
                ((function (eta) {
                        return Curry._2(arg$4, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg$3, param, param$1);
                          })(page)));
                var arg$5 = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001$4 = new RegExp("/^unmatch$/i");
                var partial_arg$4 = /* `RegExp */[
                  889580489,
                  partial_arg_001$4
                ];
                ((function (eta) {
                        return Curry._2(arg$5, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg$4, param, param$1);
                          })(page)));
                return JestDom.toHaveAttribute("aria-selected", "true", Jest.Expect[/* expect */0](selectTab));
              }));
        Jest.test("The tab selection changes when all players have been unmatched", (function (param) {
                var arg = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001 = new RegExp("/edit match for alfred pennyworth versus barbara gordon/i");
                var partial_arg = /* `RegExp */[
                  889580489,
                  partial_arg_001
                ];
                ((function (eta) {
                        return Curry._2(arg, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg, param, param$1);
                          })(page)));
                var arg$1 = ReactTestingLibrary.FireEvent[/* click */8];
                var partial_arg_001$1 = new RegExp("/^unmatch$/i");
                var partial_arg$1 = /* `RegExp */[
                  889580489,
                  partial_arg_001$1
                ];
                ((function (eta) {
                        return Curry._2(arg$1, undefined, eta);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return ReactTestingLibrary.getByText(partial_arg$1, param, param$1);
                          })(page)));
                return JestDom.toHaveAttribute("aria-selected", "false", Jest.Expect[/* expect */0](selectTab));
              }));
        return Jest.test("The tab selection changes when all players have been paired", (function (param) {
                      var arg = ReactTestingLibrary.FireEvent[/* click */8];
                      var partial_arg_001 = new RegExp("/^auto-pair unmatched players$/i");
                      var partial_arg = /* `RegExp */[
                        889580489,
                        partial_arg_001
                      ];
                      ((function (eta) {
                              return Curry._2(arg, undefined, eta);
                            })((function (eta) {
                                  var param = undefined;
                                  var param$1 = eta;
                                  return ReactTestingLibrary.getByText(partial_arg, param, param$1);
                                })(page)));
                      return JestDom.toHaveAttribute("aria-selected", "false", Jest.Expect[/* expect */0](selectTab));
                    }));
      }));

export {
  BattleForGothamCityRound ,
  regex ,
  
}
/*  Not a pure module */
