// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Db$Coronate from "./Db.bs.js";
import * as Dialog from "@reach/dialog";
import * as Data$Coronate from "./Data.bs.js";
import * as ReactFeather from "react-feather";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as Hooks$Coronate from "./Hooks.bs.js";
import * as Pages$Coronate from "./Pages.bs.js";
import * as Utils$Coronate from "./Utils.bs.js";
import * as Window$Coronate from "./Window.bs.js";
import * as Scoring$Coronate from "./Scoring.bs.js";
import * as VisuallyHidden from "@reach/visually-hidden";

function s(prim) {
  return prim;
}

var sortName = /* KeyString */Block.__(0, [(function (x) {
        return x[/* firstName */0];
      })]);

var sortRating = /* KeyInt */Block.__(1, [(function (x) {
        return x[/* rating */4];
      })]);

var sortMatchCount = /* KeyInt */Block.__(1, [(function (x) {
        return x[/* matchCount */3];
      })]);

function defaultFirstName(param) {
  return "";
}

function defaultLastName(param) {
  return "";
}

function defaultRating(param) {
  return 1200;
}

function PagePlayers$NewPlayerForm(Props) {
  var dispatch = Props.dispatch;
  var match = React.useState((function () {
          return "";
        }));
  var setFirstName = match[1];
  var firstName = match[0];
  var match$1 = React.useState((function () {
          return "";
        }));
  var setLastName = match$1[1];
  var lastName = match$1[0];
  var match$2 = React.useState((function () {
          return 1200;
        }));
  var setRating = match$2[1];
  var rating = match$2[0];
  var handleSubmit = function ($$event) {
    $$event.preventDefault();
    Curry._1(setFirstName, defaultFirstName);
    Curry._1(setLastName, defaultLastName);
    Curry._1(setRating, defaultRating);
    var id = Utils$Coronate.nanoid(/* () */0);
    return Curry._1(dispatch, /* SetItem */Block.__(1, [
                  id,
                  /* record */[
                    /* firstName */firstName,
                    /* id */id,
                    /* lastName */lastName,
                    /* matchCount */0,
                    /* rating */rating,
                    /* type_ */"person"
                  ]
                ]));
  };
  var updateField = function ($$event) {
    $$event.preventDefault();
    var name = $$event.currentTarget.name;
    var value = $$event.currentTarget.value;
    switch (name) {
      case "firstName" : 
          return Curry._1(setFirstName, (function (param) {
                        return value;
                      }));
      case "lastName" : 
          return Curry._1(setLastName, (function (param) {
                        return value;
                      }));
      case "rating" : 
          return Curry._1(setRating, (function (param) {
                        return Caml_format.caml_int_of_string(value);
                      }));
      default:
        return /* () */0;
    }
  };
  return React.createElement("form", {
              onSubmit: handleSubmit
            }, React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Register a new player"), React.createElement("p", undefined, React.createElement("label", {
                          htmlFor: "firstName"
                        }, "First name"), React.createElement("input", {
                          name: "firstName",
                          required: true,
                          type: "text",
                          value: firstName,
                          onChange: updateField
                        })), React.createElement("p", undefined, React.createElement("label", {
                          htmlFor: "lastName"
                        }, "Last name"), React.createElement("input", {
                          name: "lastName",
                          required: true,
                          type: "text",
                          value: lastName,
                          onChange: updateField
                        })), React.createElement("p", undefined, React.createElement("label", {
                          htmlFor: "rating"
                        }, "Rating"), React.createElement("input", {
                          name: "rating",
                          required: true,
                          type: "number",
                          value: String(rating),
                          onChange: updateField
                        })), React.createElement("p", undefined, React.createElement("input", {
                          type: "submit",
                          value: "Add"
                        }))));
}

var NewPlayerForm = /* module */[/* make */PagePlayers$NewPlayerForm];

function PagePlayers$List(Props) {
  var sorted = Props.sorted;
  var sortDispatch = Props.sortDispatch;
  var players = Props.players;
  var playersDispatch = Props.playersDispatch;
  var configDispatch = Props.configDispatch;
  var match = React.useState((function () {
          return false;
        }));
  var setIsDialogOpen = match[1];
  var match$1 = Window$Coronate.useWindowContext(/* () */0);
  var windowDispatch = match$1[1];
  React.useEffect((function () {
          Curry._1(windowDispatch, /* SetTitle */Block.__(5, ["Players"]));
          return (function (param) {
                    return Curry._1(windowDispatch, /* SetTitle */Block.__(5, [""]));
                  });
        }), /* array */[windowDispatch]);
  return React.createElement("div", {
              className: "content-area"
            }, React.createElement("div", {
                  className: "toolbar toolbar__left"
                }, React.createElement("button", {
                      onClick: (function (param) {
                          return Curry._1(setIsDialogOpen, (function (param) {
                                        return true;
                                      }));
                        })
                    }, React.createElement(ReactFeather.UserPlus, { }), " Add a new player")), React.createElement("table", {
                  style: {
                    margin: "auto"
                  }
                }, React.createElement("caption", undefined, "Player roster"), React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", undefined, React.createElement(Hooks$Coronate.SortButton[/* make */0], {
                                  children: "Name",
                                  sortKey: sortName,
                                  data: sorted,
                                  dispatch: sortDispatch
                                })), React.createElement("th", undefined, React.createElement(Hooks$Coronate.SortButton[/* make */0], {
                                  children: "Rating",
                                  sortKey: sortRating,
                                  data: sorted,
                                  dispatch: sortDispatch
                                })), React.createElement("th", undefined, React.createElement(Hooks$Coronate.SortButton[/* make */0], {
                                  children: "Matches",
                                  sortKey: sortMatchCount,
                                  data: sorted,
                                  dispatch: sortDispatch
                                })), React.createElement("th", undefined, React.createElement(VisuallyHidden.default, {
                                  children: "Controls"
                                })))), React.createElement("tbody", {
                      className: "content"
                    }, sorted[/* table */2].map((function (p) {
                            return React.createElement("tr", {
                                        key: p[/* id */1],
                                        className: "buttons-on-hover"
                                      }, React.createElement("td", {
                                            className: "table__player"
                                          }, React.createElement("a", {
                                                href: "#/players/" + p[/* id */1]
                                              }, /* array */[
                                                  p[/* firstName */0],
                                                  p[/* lastName */2]
                                                ].join(" "))), React.createElement("td", {
                                            className: "table__number"
                                          }, String(p[/* rating */4])), React.createElement("td", {
                                            className: "table__number"
                                          }, String(p[/* matchCount */3])), React.createElement("td", undefined, React.createElement("button", {
                                                className: "danger button-ghost",
                                                onClick: (function ($$event) {
                                                    var $$event$1 = $$event;
                                                    var id = p[/* id */1];
                                                    $$event$1.preventDefault();
                                                    var playerOpt = Belt_MapString.get(players, id);
                                                    if (playerOpt !== undefined) {
                                                      var player = playerOpt;
                                                      var message = /* array */[
                                                          "Are you sure you want to delete ",
                                                          player[/* firstName */0],
                                                          " ",
                                                          player[/* lastName */2],
                                                          "?"
                                                        ].join("");
                                                      if (Utils$Coronate.confirm(message)) {
                                                        Curry._1(playersDispatch, /* DelItem */Block.__(0, [id]));
                                                        return Curry._1(configDispatch, /* DelAvoidSingle */Block.__(2, [id]));
                                                      } else {
                                                        return 0;
                                                      }
                                                    } else {
                                                      return /* () */0;
                                                    }
                                                  })
                                              }, React.createElement(ReactFeather.Trash2, { }), React.createElement(VisuallyHidden.default, {
                                                    children: /* array */[
                                                        "Delete",
                                                        p[/* firstName */0],
                                                        p[/* lastName */2]
                                                      ].join(" ")
                                                  }))));
                          })))), React.createElement(Dialog.Dialog, {
                  isOpen: match[0],
                  onDismiss: (function (param) {
                      return Curry._1(setIsDialogOpen, (function (param) {
                                    return false;
                                  }));
                    }),
                  children: null
                }, React.createElement("button", {
                      className: "button-micro",
                      onClick: (function (param) {
                          return Curry._1(setIsDialogOpen, (function (param) {
                                        return false;
                                      }));
                        })
                    }, "Close"), React.createElement(PagePlayers$NewPlayerForm, {
                      dispatch: playersDispatch
                    })));
}

var List = /* module */[/* make */PagePlayers$List];

function PagePlayers$Profile(Props) {
  var player = Props.player;
  var players = Props.players;
  var playersDispatch = Props.playersDispatch;
  var config = Props.config;
  var configDispatch = Props.configDispatch;
  var playerId = player[/* id */1];
  var playerName = /* array */[
      player[/* firstName */0],
      player[/* lastName */2]
    ].join(" ");
  var match = Window$Coronate.useWindowContext(/* () */0);
  var windowDispatch = match[1];
  React.useEffect((function () {
          Curry._1(windowDispatch, /* SetTitle */Block.__(5, ["Profile for " + playerName]));
          return (function (param) {
                    return Curry._1(windowDispatch, /* SetTitle */Block.__(5, [""]));
                  });
        }), /* tuple */[
        windowDispatch,
        playerName
      ]);
  var avoidMap = config[/* avoidPairs */0].reduce(Data$Coronate.avoidPairReducer, Belt_MapString.empty);
  var match$1 = Belt_MapString.get(avoidMap, playerId);
  var singAvoidList = match$1 !== undefined ? match$1 : /* array */[];
  var unavoided = Belt_MapString.keysToArray(players).filter((function (id) {
          if (singAvoidList.includes(id)) {
            return false;
          } else {
            return id !== playerId;
          }
        }));
  var match$2 = React.useState((function () {
          return Belt_Array.getExn(unavoided, 0);
        }));
  var setSelectedAvoider = match$2[1];
  var selectedAvoider = match$2[0];
  var avoidAdd = function ($$event) {
    $$event.preventDefault();
    Curry._1(configDispatch, /* AddAvoidPair */Block.__(0, [/* tuple */[
              playerId,
              selectedAvoider
            ]]));
    var match = Belt_Array.getExn(unavoided, 0) !== selectedAvoider;
    var newSelected = match ? Belt_Array.getExn(unavoided, 0) : Belt_Array.getExn(unavoided, 1);
    return Curry._1(setSelectedAvoider, (function (param) {
                  return newSelected;
                }));
  };
  var handleChange = function ($$event) {
    $$event.preventDefault();
    var target = $$event.currentTarget;
    var firstName = target.firstName.value;
    var lastName = target.lastName.value;
    var matchCount = Caml_format.caml_int_of_string(target.matchCount.value);
    var rating = Caml_format.caml_int_of_string(target.rating.value);
    return Curry._1(playersDispatch, /* SetItem */Block.__(1, [
                  playerId,
                  /* record */[
                    /* firstName */firstName,
                    /* id */playerId,
                    /* lastName */lastName,
                    /* matchCount */matchCount,
                    /* rating */rating,
                    /* type_ */player[/* type_ */5]
                  ]
                ]));
  };
  var handleAvoidChange = function ($$event) {
    var id = $$event.currentTarget.value;
    return Curry._1(setSelectedAvoider, (function (param) {
                  return id;
                }));
  };
  var handleAvoidBlur = function ($$event) {
    var id = $$event.currentTarget.value;
    return Curry._1(setSelectedAvoider, (function (param) {
                  return id;
                }));
  };
  var match$3 = singAvoidList.length === 0;
  return React.createElement("div", {
              className: "content-area",
              style: {
                margin: "auto",
                width: "650px"
              }
            }, React.createElement("a", {
                  href: "#/players"
                }, React.createElement(ReactFeather.ChevronLeft, { }), " Back"), React.createElement("h2", undefined, "Profile for " + playerName), React.createElement("form", {
                  onChange: handleChange,
                  onSubmit: handleChange
                }, React.createElement("p", undefined, React.createElement("label", {
                          htmlFor: "firstName"
                        }, "First name"), React.createElement("input", {
                          defaultValue: player[/* firstName */0],
                          name: "firstName",
                          type: "text"
                        })), React.createElement("p", undefined, React.createElement("label", {
                          htmlFor: "lastName"
                        }, "Last name"), React.createElement("input", {
                          defaultValue: player[/* lastName */2],
                          name: "lastName",
                          type: "text"
                        })), React.createElement("p", undefined, React.createElement("label", {
                          htmlFor: "matchCount"
                        }, "Matches played"), React.createElement("input", {
                          defaultValue: String(player[/* matchCount */3]),
                          name: "matchCount",
                          type: "number"
                        })), React.createElement("p", undefined, React.createElement("label", {
                          htmlFor: "rating"
                        }, "Rating"), React.createElement("input", {
                          defaultValue: String(player[/* rating */4]),
                          name: "rating",
                          type: "number"
                        })), React.createElement("p", undefined, React.createElement("label", {
                          htmlFor: "Kfactor"
                        }, "K factor"), React.createElement("input", {
                          disabled: true,
                          name: "kfactor",
                          readOnly: true,
                          type: "number",
                          value: String(Scoring$Coronate.Ratings[/* getKFactor */0](player[/* matchCount */3]))
                        }))), React.createElement("h3", undefined, "Players to avoid"), React.createElement("ul", undefined, singAvoidList.map((function (pId) {
                        return React.createElement("li", {
                                    key: pId
                                  }, Data$Coronate.Player[/* getPlayerMaybeMap */6](players, pId)[/* firstName */0], " ", Data$Coronate.Player[/* getPlayerMaybeMap */6](players, pId)[/* lastName */2], React.createElement("button", {
                                        "aria-label": /* array */[
                                            "Remove",
                                            Data$Coronate.Player[/* getPlayerMaybeMap */6](players, pId)[/* firstName */0],
                                            Data$Coronate.Player[/* getPlayerMaybeMap */6](players, pId)[/* lastName */2],
                                            "from avoid list."
                                          ].join(" "),
                                        className: "danger button-ghost",
                                        title: /* array */[
                                            "Remove",
                                            Data$Coronate.Player[/* getPlayerMaybeMap */6](players, pId)[/* firstName */0],
                                            Data$Coronate.Player[/* getPlayerMaybeMap */6](players, pId)[/* lastName */2],
                                            "from avoid list."
                                          ].join(" "),
                                        onClick: (function (param) {
                                            return Curry._1(configDispatch, /* DelAvoidPair */Block.__(1, [/* tuple */[
                                                            playerId,
                                                            pId
                                                          ]]));
                                          })
                                      }, React.createElement(ReactFeather.Trash2, { })));
                      })), match$3 ? React.createElement("li", undefined, "None") : null), React.createElement("form", {
                  onSubmit: avoidAdd
                }, React.createElement("label", {
                      htmlFor: "avoid-select"
                    }, "Select a new player to avoid."), React.createElement("select", {
                      id: "avoid-select",
                      value: selectedAvoider,
                      onBlur: handleAvoidBlur,
                      onChange: handleAvoidChange
                    }, unavoided.map((function (pId) {
                            return React.createElement("option", {
                                        key: pId,
                                        value: pId
                                      }, Data$Coronate.Player[/* getPlayerMaybeMap */6](players, pId)[/* firstName */0], " ", Data$Coronate.Player[/* getPlayerMaybeMap */6](players, pId)[/* lastName */2]);
                          }))), " ", React.createElement("input", {
                      className: "button-micro",
                      type: "submit",
                      value: "Add"
                    })));
}

var Profile = /* module */[/* make */PagePlayers$Profile];

function PagePlayers(Props) {
  var id = Props.id;
  var match = Db$Coronate.useAllPlayers(/* () */0);
  var playersDispatch = match[1];
  var players = match[0];
  var match$1 = Hooks$Coronate.useSortedTable(Belt_MapString.valuesToArray(players), sortName, false);
  var sortDispatch = match$1[1];
  React.useEffect((function () {
          Curry._1(sortDispatch, /* SetTable */Block.__(2, [Belt_MapString.valuesToArray(players)]));
          return undefined;
        }), /* tuple */[
        players,
        sortDispatch
      ]);
  var match$2 = Db$Coronate.useConfig(/* () */0);
  var configDispatch = match$2[1];
  var tmp;
  if (id !== undefined) {
    var match$3 = id;
    if (match$3) {
      if (match$3[1]) {
        tmp = React.createElement(Pages$Coronate.NotFound[/* make */0], { });
      } else {
        var match$4 = Belt_MapString.get(players, match$3[0]);
        tmp = match$4 !== undefined ? React.createElement(PagePlayers$Profile, {
                player: match$4,
                players: players,
                playersDispatch: playersDispatch,
                config: match$2[0],
                configDispatch: configDispatch
              }) : React.createElement("div", undefined, "Loading...");
      }
    } else {
      tmp = React.createElement(Pages$Coronate.NotFound[/* make */0], { });
    }
  } else {
    tmp = React.createElement(PagePlayers$List, {
          sorted: match$1[0],
          sortDispatch: sortDispatch,
          players: players,
          playersDispatch: playersDispatch,
          configDispatch: configDispatch
        });
  }
  return React.createElement(Window$Coronate.Body[/* make */0], {
              children: tmp
            });
}

var make = PagePlayers;

export {
  s ,
  sortName ,
  sortRating ,
  sortMatchCount ,
  defaultFirstName ,
  defaultLastName ,
  defaultRating ,
  NewPlayerForm ,
  List ,
  Profile ,
  make ,
  
}
/* react Not a pure module */
