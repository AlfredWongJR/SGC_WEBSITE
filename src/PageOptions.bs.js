// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Numeral from "numeral";
import * as Hooks$Coronate from "./Hooks.bs.js";
import * as Utils$Coronate from "./Utils.bs.js";
import * as Window$Coronate from "./Window.bs.js";
import * as DemoData$Coronate from "./DemoData.bs.js";
import * as TestData$Coronate from "./TestData.bs.js";

function getDateForFile(param) {
  var date = new Date();
  return /* array */[
            date.getFullYear().toString(),
            Numeral.default(date.getMonth() + 1.0).format("00"),
            Numeral.default(date.getDay() + 1.0).format("00")
          ].join("-");
}

function invalidAlert(param) {
  window.alert("That data is invalid! A more helpful error message could not be written yet.");
  return /* () */0;
}

function PageOptions$LastBackupDate(Props) {
  var date = Props.date;
  var match = date.getTime();
  if (match !== 0.0) {
    return React.createElement(Utils$Coronate.DateTimeFormat[/* make */0], {
                date: date
              });
  } else {
    return null;
  }
}

var LastBackupDate = /* module */[/* make */PageOptions$LastBackupDate];

function PageOptions(Props) {
  var match = Hooks$Coronate.Db[/* useAllTournaments */8](/* () */0);
  var tournaments = match[0];
  var match$1 = Hooks$Coronate.Db[/* useAllPlayers */7](/* () */0);
  var players = match$1[0];
  var match$2 = React.useState((function () {
          return "";
        }));
  var setText = match$2[1];
  var match$3 = Hooks$Coronate.Db[/* useOptions */10](/* () */0);
  var options = match$3[0];
  var match$4 = Window$Coronate.useWindowContext(/* () */0);
  var windowDispatch = match$4[1];
  React.useEffect((function () {
          Curry._1(windowDispatch, /* SetTitle */Block.__(5, ["Options"]));
          return (function (param) {
                    return Curry._1(windowDispatch, /* SetTitle */Block.__(5, [""]));
                  });
        }), /* array */[windowDispatch]);
  var exportData = React.useMemo((function () {
          return {
                  options: options,
                  players: Utils$Coronate.mapToDict(players),
                  tournaments: Utils$Coronate.mapToDict(tournaments)
                };
        }), /* tuple */[
        options,
        tournaments,
        players
      ]);
  React.useEffect((function () {
          var match = JSON.stringify(exportData);
          if (match !== undefined) {
            Curry._1(setText, (function (param) {
                    return match;
                  }));
            return undefined;
          }
          
        }), /* tuple */[
        exportData,
        setText
      ]);
  return React.createElement(Window$Coronate.WindowBody[/* make */0], {
              children: React.createElement("div", {
                    className: "content-area"
                  })
            });
}

var make = PageOptions;

export {
  getDateForFile ,
  invalidAlert ,
  LastBackupDate ,
  make ,
  
}
/* react Not a pure module */
