// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Numeral from "numeral";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Db$Coronate from "./Db.bs.js";
import * as Data$Coronate from "./Data.bs.js";
import * as ReactFeather from "react-feather";
import * as Utils$Coronate from "./Utils.bs.js";
import * as Window$Coronate from "./Window.bs.js";
import * as DemoData$Coronate from "./DemoData.bs.js";
import * as TestData$Coronate from "./TestData.bs.js";

function s(prim) {
  return prim;
}

function getDateForFile(param) {
  var date = new Date();
  return /* array */[
            date.getFullYear().toString(),
            Numeral.default(date.getMonth() + 1.0).format("00"),
            Numeral.default(date.getDay() + 1.0).format("00")
          ].join("-");
}

function invalidAlert(param) {
  return Utils$Coronate.alert("That data is invalid! A more helpful error message could not be written yet.");
}

function decodeWith(json, func) {
  return Belt_Option.mapWithDefault(Belt_Option.mapWithDefault(json, undefined, Js_json.decodeObject), undefined, (function (dict) {
                return Caml_option.some(Db$Coronate.jsDictToReMap(dict, func));
              }));
}

function decodePlayer(json) {
  return Data$Coronate.Player[/* tFromJs */1](json);
}

function decodeTourney(json) {
  return Data$Coronate.Tournament[/* tFromJsonDeep */4](json);
}

function decodeOptions(json) {
  var match = Js_json.decodeObject(json);
  if (match !== undefined) {
    var dict = Caml_option.valFromOption(match);
    var match$1 = Belt_Option.mapWithDefault(Js_dict.get(dict, "byeValue"), undefined, Js_json.decodeNumber);
    var match$2 = Belt_Option.mapWithDefault(Js_dict.get(dict, "avoidPairs"), undefined, Js_json.decodeArray);
    var match$3 = Belt_Option.mapWithDefault(Js_dict.get(dict, "lastBackup"), undefined, Js_json.decodeString);
    if (match$1 !== undefined && match$2 !== undefined && match$3 !== undefined) {
      return Data$Coronate.Config[/* tFromJs */1]({
                  byeValue: match$1,
                  avoidPairs: match$2,
                  lastBackup: new Date(match$3)
                });
    } else {
      return undefined;
    }
  }
  
}

function jsonToData(json) {
  var match = Js_json.decodeObject(json);
  if (match !== undefined) {
    var dict = Caml_option.valFromOption(match);
    return /* tuple */[
            Belt_Option.mapWithDefault(Js_dict.get(dict, "options"), undefined, decodeOptions),
            decodeWith(Js_dict.get(dict, "players"), decodePlayer),
            decodeWith(Js_dict.get(dict, "tournaments"), decodeTourney)
          ];
  } else {
    return /* tuple */[
            undefined,
            undefined,
            undefined
          ];
  }
}

function PageOptions$LastBackupDate(Props) {
  var date = Props.date;
  var match = date.getTime();
  if (match !== 0.0) {
    return React.createElement(Utils$Coronate.DateTimeFormat[/* make */2], {
                date: date
              });
  } else {
    return "Never";
  }
}

var LastBackupDate = /* module */[/* make */PageOptions$LastBackupDate];

function PageOptions(Props) {
  var match = Db$Coronate.useAllTournaments(/* () */0);
  var tourneysDispatch = match[1];
  var tournaments = match[0];
  var match$1 = Db$Coronate.useAllPlayers(/* () */0);
  var playersDispatch = match$1[1];
  var players = match$1[0];
  var match$2 = React.useState((function () {
          return "";
        }));
  var setText = match$2[1];
  var text = match$2[0];
  var match$3 = Db$Coronate.useConfig(/* () */0);
  var configDispatch = match$3[1];
  var config = match$3[0];
  var match$4 = Window$Coronate.useWindowContext(/* () */0);
  var windowDispatch = match$4[1];
  React.useEffect((function () {
          Curry._1(windowDispatch, /* SetTitle */Block.__(5, ["Options"]));
          return (function (param) {
                    return Curry._1(windowDispatch, /* SetTitle */Block.__(5, [""]));
                  });
        }), /* array */[windowDispatch]);
  var exportData = React.useMemo((function () {
          return {
                  config: Data$Coronate.Config[/* tToJs */0](config),
                  players: Db$Coronate.reMapToJsDict(players, Data$Coronate.Player[/* tToJs */0]),
                  tournaments: Db$Coronate.reMapToJsDict(tournaments, Data$Coronate.Tournament[/* tToJsDeep */2])
                };
        }), /* tuple */[
        config,
        tournaments,
        players
      ]);
  var match$5 = JSON.stringify(exportData);
  var exportDataURI = match$5 !== undefined ? "data:application/json," + encodeURIComponent(match$5) : "";
  React.useEffect((function () {
          var json = (JSON.stringify(exportData, null, 4));
          Curry._1(setText, (function (param) {
                  return json;
                }));
          return undefined;
        }), /* tuple */[
        exportData,
        setText
      ]);
  var loadData = function (tourneys, players, config) {
    Curry._1(tourneysDispatch, /* SetState */Block.__(2, [tourneys]));
    Curry._1(configDispatch, /* SetState */Block.__(5, [config]));
    Curry._1(playersDispatch, /* SetState */Block.__(2, [players]));
    return Utils$Coronate.alert("Data loaded.");
  };
  var handleText = function ($$event) {
    $$event.preventDefault();
    var exit = 0;
    var rawJson;
    try {
      rawJson = JSON.parse(text);
      exit = 1;
    }
    catch (exn){
      return Utils$Coronate.alert("That data is invalid! A more helpful error message could not be written yet.");
    }
    if (exit === 1) {
      var match = jsonToData(rawJson);
      var match$1 = match[0];
      if (match$1 !== undefined) {
        var match$2 = match[1];
        if (match$2 !== undefined) {
          var match$3 = match[2];
          if (match$3 !== undefined) {
            return loadData(Caml_option.valFromOption(match$3), Caml_option.valFromOption(match$2), match$1);
          } else {
            return Utils$Coronate.alert("That data is invalid! A more helpful error message could not be written yet.");
          }
        } else {
          return Utils$Coronate.alert("That data is invalid! A more helpful error message could not be written yet.");
        }
      } else {
        return Utils$Coronate.alert("That data is invalid! A more helpful error message could not be written yet.");
      }
    }
    
  };
  var handleFile = function ($$event) {
    $$event.preventDefault();
    var reader = new FileReader();
    var onload = function (ev) {
      var data = ev.target.result;
      var exit = 0;
      var rawJson;
      try {
        rawJson = JSON.parse(data);
        exit = 1;
      }
      catch (exn){
        return Utils$Coronate.alert("That data is invalid! A more helpful error message could not be written yet.");
      }
      if (exit === 1) {
        var match = jsonToData(rawJson);
        var match$1 = match[0];
        if (match$1 !== undefined) {
          var match$2 = match[1];
          if (match$2 !== undefined) {
            var match$3 = match[2];
            if (match$3 !== undefined) {
              return loadData(Caml_option.valFromOption(match$3), Caml_option.valFromOption(match$2), match$1);
            } else {
              return Utils$Coronate.alert("That data is invalid! A more helpful error message could not be written yet.");
            }
          } else {
            return Utils$Coronate.alert("That data is invalid! A more helpful error message could not be written yet.");
          }
        } else {
          return Utils$Coronate.alert("That data is invalid! A more helpful error message could not be written yet.");
        }
      }
      
    };
    reader.onload = onload;
    reader.readAsText(Caml_array.caml_array_get($$event.currentTarget.files, 0));
    $$event.currentTarget.value = "";
    return /* () */0;
  };
  var reloadDemoData = function ($$event) {
    $$event.preventDefault();
    return loadData(DemoData$Coronate.tournaments, DemoData$Coronate.players, DemoData$Coronate.config);
  };
  var loadTestData = function ($$event) {
    $$event.preventDefault();
    return loadData(TestData$Coronate.tournaments, TestData$Coronate.players, TestData$Coronate.config);
  };
  var handleTextChange = function ($$event) {
    var newText = $$event.currentTarget.value;
    return Curry._1(setText, (function (param) {
                  return newText;
                }));
  };
  var match$6 = process.env.NODE_ENV !== "production";
  return React.createElement(Window$Coronate.Body[/* make */0], {
              children: React.createElement("div", {
                    className: "content-area"
                  }, React.createElement("h2", undefined, "Bye  settings"), React.createElement("form", undefined, React.createElement("p", {
                            className: "caption-30"
                          }, "Select the default score for a bye round."), React.createElement("label", {
                            className: "monospace body-30"
                          }, "1 ", React.createElement("input", {
                                checked: config[/* byeValue */1] === 1.0,
                                type: "radio",
                                onChange: (function (param) {
                                    return Curry._1(configDispatch, /* SetByeValue */Block.__(4, [1.0]));
                                  })
                              })), React.createElement("label", {
                            className: "monospace body-30"
                          }, "Â½ ", React.createElement("input", {
                                checked: config[/* byeValue */1] === 0.5,
                                type: "radio",
                                onChange: (function (param) {
                                    return Curry._1(configDispatch, /* SetByeValue */Block.__(4, [0.5]));
                                  })
                              }))), React.createElement("h2", undefined, "Manage data"), React.createElement("p", {
                        className: "caption-20"
                      }, "Last export: ", React.createElement(PageOptions$LastBackupDate, {
                            date: config[/* lastBackup */2]
                          })), React.createElement("p", undefined, React.createElement("a", {
                            download: "coronate-" + (getDateForFile(/* () */0) + ".json"),
                            href: exportDataURI,
                            onClick: (function (param) {
                                return Curry._1(configDispatch, /* SetLastBackup */Block.__(6, [new Date()]));
                              })
                          }, React.createElement(ReactFeather.Download, { }), " Export all data")), React.createElement("label", {
                        htmlFor: "file"
                      }, "Load data file:"), React.createElement("input", {
                        id: "file",
                        name: "file",
                        type: "file",
                        onChange: handleFile
                      }), React.createElement("h2", undefined, "Danger zone"), React.createElement("p", {
                        className: "caption-30"
                      }, "I hope you know what you're doing..."), React.createElement("button", {
                        onClick: reloadDemoData
                      }, "Reset demo data (this erases everything else)"), " ", match$6 ? React.createElement("button", {
                          onClick: loadTestData
                        }, "Load testing data") : null, React.createElement("h3", undefined, "Advanced: manually edit data"), React.createElement("form", {
                        onSubmit: handleText
                      }, React.createElement("textarea", {
                            className: "json",
                            spellCheck: false,
                            cols: 50,
                            name: "playerdata",
                            rows: 25,
                            value: text,
                            onChange: handleTextChange
                          }), React.createElement("p", undefined, React.createElement("input", {
                                type: "submit",
                                value: "Load"
                              }))))
            });
}

var make = PageOptions;

export {
  s ,
  getDateForFile ,
  invalidAlert ,
  decodeWith ,
  decodePlayer ,
  decodeTourney ,
  decodeOptions ,
  jsonToData ,
  LastBackupDate ,
  make ,
  
}
/* react Not a pure module */
